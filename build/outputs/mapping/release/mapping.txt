# compiler: R8
# compiler_version: 2.1.75
# min_api: 26
# pg_map_id: 5faf7dd
# common_typos_disable
android.support.v4.app.INotificationSideChannel$Stub$Proxy -> android.support.v4.app.a:
    android.os.IBinder mRemote -> a
android.support.v4.os.IResultReceiver$Stub$Proxy -> android.support.v4.os.a:
    android.os.IBinder mRemote -> a
android.support.v4.os.ResultReceiver -> android.support.v4.os.ResultReceiver:
    android.os.Handler mHandler -> b
    android.support.v4.os.IResultReceiver mReceiver -> c
    boolean mLocal -> a
android.support.v4.os.ResultReceiver$1 -> android.support.v4.os.b:
    1:1:android.support.v4.os.ResultReceiver createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:android.support.v4.os.ResultReceiver[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
android.support.v4.os.ResultReceiver$MyResultReceiver -> android.support.v4.os.c:
    android.support.v4.os.ResultReceiver this$0 -> a
android.support.v4.os.ResultReceiver$MyRunnable -> android.support.v4.os.d:
    android.os.Bundle mResultData -> b
    android.support.v4.os.ResultReceiver this$0 -> c
    int mResultCode -> a
androidx.annotation.RestrictTo$Scope -> androidx.annotation.RestrictTo$Scope:
    androidx.annotation.RestrictTo$Scope[] $VALUES -> a
androidx.appcompat.app.ActionBar -> androidx.appcompat.app.ActionBar:
    void onDestroy() -> a
androidx.appcompat.app.ActionBarDrawerToggle -> androidx.appcompat.app.ActionBarDrawerToggle:
    androidx.drawerlayout.widget.DrawerLayout mDrawerLayout -> b
    android.view.View$OnClickListener mToolbarNavigationClickListener -> j
    android.graphics.drawable.Drawable mHomeAsUpIndicator -> e
    androidx.appcompat.app.ActionBarDrawerToggle$Delegate mActivityImpl -> a
    int mOpenDrawerContentDescRes -> h
    boolean mWarnedForDisplayHomeAsUp -> k
    int mCloseDrawerContentDescRes -> i
    boolean mDrawerIndicatorEnabled -> f
    boolean mHasCustomUpIndicator -> g
    androidx.appcompat.graphics.drawable.DrawerArrowDrawable mSlider -> c
    boolean mDrawerSlideAnimationEnabled -> d
    android.graphics.drawable.Drawable getThemeUpIndicator() -> a
    void setActionBarUpIndicator(android.graphics.drawable.Drawable,int) -> b
    void setPosition(float) -> c
    void toggle() -> d
    1:1:void setActionBarDescription(int):0:0 -> onDrawerClosed
    1:1:void onDrawerClosed(android.view.View):0 -> onDrawerClosed
    1:1:void setActionBarDescription(int):0:0 -> onDrawerOpened
    1:1:void onDrawerOpened(android.view.View):0 -> onDrawerOpened
androidx.appcompat.app.ActionBarDrawerToggle$1 -> androidx.appcompat.app.a:
    androidx.appcompat.app.ActionBarDrawerToggle this$0 -> a
androidx.appcompat.app.ActionBarDrawerToggle$FrameworkActionBarDelegate -> androidx.appcompat.app.b:
    android.app.Activity mActivity -> a
    1:1:android.content.Context getActionBarThemedContext():0:0 -> getThemeUpIndicator
    1:1:android.graphics.drawable.Drawable getThemeUpIndicator():0 -> getThemeUpIndicator
    2:2:android.graphics.drawable.Drawable getThemeUpIndicator():0:0 -> getThemeUpIndicator
androidx.appcompat.app.ActionBarDrawerToggle$ToolbarCompatDelegate -> androidx.appcompat.app.c:
    java.lang.CharSequence mDefaultContentDescription -> c
    androidx.appcompat.widget.Toolbar mToolbar -> a
    android.graphics.drawable.Drawable mDefaultUpIndicator -> b
    1:1:void setActionBarDescription(int):0:0 -> setActionBarUpIndicator
    1:1:void setActionBarUpIndicator(android.graphics.drawable.Drawable,int):0 -> setActionBarUpIndicator
androidx.appcompat.app.AlertController -> androidx.appcompat.app.k:
    android.content.Context mContext -> a
    int mListItemLayout -> O
    int mViewSpacingRight -> l
    android.widget.Button mButtonNeutral -> w
    int mMultiChoiceItemLayout -> M
    boolean mShowTitle -> P
    int mViewSpacingLeft -> j
    int mButtonPanelSideLayout -> K
    int mCheckedItem -> I
    int mButtonIconDimen -> d
    java.lang.CharSequence mMessage -> f
    android.widget.Button mButtonPositive -> o
    android.widget.ImageView mIconView -> D
    android.widget.ListAdapter mAdapter -> H
    android.widget.Button mButtonNegative -> s
    android.graphics.drawable.Drawable mButtonNegativeIcon -> v
    android.widget.TextView mTitleView -> E
    android.graphics.drawable.Drawable mButtonNeutralIcon -> z
    android.graphics.drawable.Drawable mButtonPositiveIcon -> r
    android.graphics.drawable.Drawable mIcon -> C
    int mSingleChoiceItemLayout -> N
    boolean mViewSpacingSpecified -> n
    int mListLayout -> L
    int mViewSpacingBottom -> m
    android.os.Message mButtonPositiveMessage -> q
    androidx.core.widget.NestedScrollView mScrollView -> A
    int mAlertDialogLayout -> J
    int mViewSpacingTop -> k
    android.os.Handler mHandler -> Q
    int mViewLayoutResId -> i
    java.lang.CharSequence mTitle -> e
    android.os.Message mButtonNeutralMessage -> y
    int mIconId -> B
    android.os.Message mButtonNegativeMessage -> u
    android.view.Window mWindow -> c
    android.view.View mView -> h
    android.widget.ListView mListView -> g
    java.lang.CharSequence mButtonPositiveText -> p
    java.lang.CharSequence mButtonNegativeText -> t
    android.view.View$OnClickListener mButtonHandler -> R
    androidx.appcompat.app.AppCompatDialog mDialog -> b
    android.widget.TextView mMessageView -> F
    java.lang.CharSequence mButtonNeutralText -> x
    android.view.View mCustomTitleView -> G
    boolean canTextInput(android.view.View) -> a
    void centerButton(android.widget.Button) -> b
    android.view.ViewGroup resolvePanel(android.view.View,android.view.View) -> c
    1:1:int selectContentView():0:0 -> installContent
    1:1:void installContent():0 -> installContent
    2:2:void installContent():0:0 -> installContent
    3:3:void setupView():0:0 -> installContent
    3:3:void installContent():0 -> installContent
    4:4:void setupCustomContent(android.view.ViewGroup):0:0 -> installContent
    4:4:void setupView():0 -> installContent
    4:4:void installContent():0 -> installContent
    5:5:void setupView():0:0 -> installContent
    5:5:void installContent():0 -> installContent
    6:6:void setupContent(android.view.ViewGroup):0:0 -> installContent
    6:6:void setupView():0 -> installContent
    6:6:void installContent():0 -> installContent
    7:7:void setupButtons(android.view.ViewGroup):0:0 -> installContent
    7:7:void setupView():0 -> installContent
    7:7:void installContent():0 -> installContent
    8:8:boolean shouldCenterSingleButton(android.content.Context):0:0 -> installContent
    8:8:void setupButtons(android.view.ViewGroup):0 -> installContent
    8:8:void setupView():0 -> installContent
    8:8:void installContent():0 -> installContent
    9:9:void setupButtons(android.view.ViewGroup):0:0 -> installContent
    9:9:void setupView():0 -> installContent
    9:9:void installContent():0 -> installContent
    10:10:void setupTitle(android.view.ViewGroup):0:0 -> installContent
    10:10:void setupView():0 -> installContent
    10:10:void installContent():0 -> installContent
    11:11:void setupView():0:0 -> installContent
    11:11:void installContent():0 -> installContent
    12:12:void setScrollIndicators(android.view.ViewGroup,android.view.View,int,int):0:0 -> installContent
    12:12:void setupView():0 -> installContent
    12:12:void installContent():0 -> installContent
    13:13:void setupView():0:0 -> installContent
    13:13:void installContent():0 -> installContent
androidx.appcompat.app.AlertController$1 -> androidx.appcompat.app.d:
    androidx.appcompat.app.AlertController this$0 -> a
androidx.appcompat.app.AlertController$AlertParams -> androidx.appcompat.app.AlertController$AlertParams:
    1:1:void createListView(androidx.appcompat.app.AlertController):0:0 -> apply
    1:1:void apply(androidx.appcompat.app.AlertController):0 -> apply
    2:2:void apply(androidx.appcompat.app.AlertController):0:0 -> apply
androidx.appcompat.app.AlertController$AlertParams$1 -> androidx.appcompat.app.e:
    androidx.appcompat.app.AlertController$AlertParams this$0 -> b
    androidx.appcompat.app.AlertController$RecycleListView val$listView -> a
androidx.appcompat.app.AlertController$AlertParams$2 -> androidx.appcompat.app.f:
    androidx.appcompat.app.AlertController$AlertParams this$0 -> e
    androidx.appcompat.app.AlertController$RecycleListView val$listView -> c
    int mIsCheckedIndex -> b
    int mLabelIndex -> a
    androidx.appcompat.app.AlertController val$dialog -> d
androidx.appcompat.app.AlertController$AlertParams$3 -> androidx.appcompat.app.g:
    androidx.appcompat.app.AlertController val$dialog -> a
    androidx.appcompat.app.AlertController$AlertParams this$0 -> b
androidx.appcompat.app.AlertController$AlertParams$4 -> androidx.appcompat.app.h:
    androidx.appcompat.app.AlertController val$dialog -> b
    androidx.appcompat.app.AlertController$AlertParams this$0 -> c
    androidx.appcompat.app.AlertController$RecycleListView val$listView -> a
androidx.appcompat.app.AlertController$ButtonHandler -> androidx.appcompat.app.i:
    java.lang.ref.WeakReference mDialog -> a
androidx.appcompat.app.AlertController$CheckedItemAdapter -> androidx.appcompat.app.j:
androidx.appcompat.app.AlertController$RecycleListView -> androidx.appcompat.app.AlertController$RecycleListView:
    int mPaddingBottomNoButtons -> b
    int mPaddingTopNoTitle -> a
androidx.appcompat.app.AlertDialog -> androidx.appcompat.app.AlertDialog:
    androidx.appcompat.app.AlertController mAlert -> c
    int resolveDialogTheme(android.content.Context,int) -> b
    1:1:android.widget.Button androidx.appcompat.app.AlertController.getButton(int):0:0 -> getButton
    1:1:android.widget.Button getButton(int):0 -> getButton
    1:1:android.widget.ListView androidx.appcompat.app.AlertController.getListView():0:0 -> getListView
    1:1:android.widget.ListView getListView():0 -> getListView
    1:1:boolean androidx.appcompat.app.AlertController.onKeyDown(int,android.view.KeyEvent):0:0 -> onKeyDown
    1:1:boolean onKeyDown(int,android.view.KeyEvent):0 -> onKeyDown
    2:2:boolean onKeyDown(int,android.view.KeyEvent):0:0 -> onKeyDown
    1:1:boolean androidx.appcompat.app.AlertController.onKeyUp(int,android.view.KeyEvent):0:0 -> onKeyUp
    1:1:boolean onKeyUp(int,android.view.KeyEvent):0 -> onKeyUp
    2:2:boolean onKeyUp(int,android.view.KeyEvent):0:0 -> onKeyUp
androidx.appcompat.app.AlertDialog$Builder -> androidx.appcompat.app.AlertDialog$Builder:
    androidx.appcompat.app.AlertController$AlertParams P -> a
    int mTheme -> b
androidx.appcompat.app.AppCompatActivity -> androidx.appcompat.app.AppCompatActivity:
    int mThemeId -> o
    android.content.res.Resources mResources -> p
    androidx.appcompat.app.AppCompatDelegate mDelegate -> n
androidx.appcompat.app.AppCompatDelegate -> androidx.appcompat.app.AppCompatDelegate:
    int sDefaultNightMode -> a
androidx.appcompat.app.AppCompatDelegateImpl -> androidx.appcompat.app.b0:
    androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState mPreparedPanel -> F
    int mInvalidatePanelMenuFeatures -> M
    androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager mAutoNightModeManager -> K
    boolean mApplyDayNightCalled -> J
    int mLocalNightMode -> I
    boolean mInvalidatePanelMenuPosted -> L
    boolean mFeatureProgress -> w
    android.view.Window$Callback mOriginalWindowCallback -> d
    boolean mSubDecorInstalled -> s
    android.view.View mStatusGuard -> v
    boolean mHasActionBar -> y
    androidx.appcompat.app.AppCompatDelegateImpl$PanelMenuPresenterCallback mPanelMenuPresenterCallback -> l
    boolean mLongPressBackDown -> G
    androidx.appcompat.widget.ActionBarContextView mActionModeView -> n
    boolean mOverlayActionMode -> A
    boolean mWindowNoTitle -> C
    android.graphics.Rect mTempRect2 -> Q
    java.lang.Runnable mInvalidatePanelMenuRunnable -> N
    androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState[] mPanels -> E
    androidx.core.view.ViewPropertyAnimatorCompat mFadeAnim -> q
    android.view.ViewGroup mSubDecor -> t
    boolean mEnableDefaultActionBarUp -> O
    android.content.Context mContext -> b
    int[] sWindowBackgroundStyleable -> S
    android.widget.TextView mTitleView -> u
    androidx.appcompat.app.AppCompatViewInflater mAppCompatViewInflater -> R
    androidx.appcompat.app.ActionBar mActionBar -> g
    androidx.appcompat.app.AppCompatDelegateImpl$ActionMenuPresenterCallback mActionMenuPresenterCallback -> k
    android.view.Window$Callback mAppCompatWindowCallback -> e
    boolean mFeatureIndeterminateProgress -> x
    androidx.appcompat.app.AppCompatCallback mAppCompatCallback -> f
    java.lang.CharSequence mTitle -> i
    boolean mHandleNativeActionModes -> r
    android.view.MenuInflater mMenuInflater -> h
    android.view.Window mWindow -> c
    android.graphics.Rect mTempRect1 -> P
    boolean mOverlayActionBar -> z
    androidx.appcompat.widget.DecorContentParent mDecorContentParent -> j
    androidx.appcompat.view.ActionMode mActionMode -> m
    android.widget.PopupWindow mActionModePopup -> o
    boolean mIsDestroyed -> H
    java.lang.Runnable mShowActionModePopup -> p
    boolean mIsFloating -> B
    boolean mClosingActionMenu -> D
    void callOnPanelClosed(int,androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.Menu) -> a
    1:1:int getNightMode():0:0 -> applyDayNight
    1:1:boolean applyDayNight():0 -> applyDayNight
    2:2:int mapNightMode(int):0:0 -> applyDayNight
    2:2:boolean applyDayNight():0 -> applyDayNight
    3:3:void ensureAutoNightModeManager():0:0 -> applyDayNight
    3:3:int mapNightMode(int):0 -> applyDayNight
    3:3:boolean applyDayNight():0 -> applyDayNight
    4:4:int mapNightMode(int):0:0 -> applyDayNight
    4:4:boolean applyDayNight():0 -> applyDayNight
    5:5:boolean updateForNightMode(int):0:0 -> applyDayNight
    5:5:boolean applyDayNight():0 -> applyDayNight
    6:6:boolean shouldRecreateOnNightModeChange():0:0 -> applyDayNight
    6:6:boolean updateForNightMode(int):0 -> applyDayNight
    6:6:boolean applyDayNight():0 -> applyDayNight
    7:7:boolean updateForNightMode(int):0:0 -> applyDayNight
    7:7:boolean applyDayNight():0 -> applyDayNight
    8:8:void ensureAutoNightModeManager():0:0 -> applyDayNight
    8:8:boolean applyDayNight():0 -> applyDayNight
    9:9:boolean applyDayNight():0:0 -> applyDayNight
    void checkCloseActionMenu(androidx.appcompat.view.menu.MenuBuilder) -> b
    void closePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,boolean) -> c
    void dismissPopups() -> d
    1:1:boolean onKeyDownPanel(int,android.view.KeyEvent):0:0 -> e
    1:1:boolean onKeyDown(int,android.view.KeyEvent):0 -> e
    1:1:boolean dispatchKeyEvent(android.view.KeyEvent):0 -> e
    2:2:boolean onKeyDown(int,android.view.KeyEvent):0:0 -> e
    2:2:boolean dispatchKeyEvent(android.view.KeyEvent):0 -> e
    3:3:boolean onKeyUpPanel(int,android.view.KeyEvent):0:0 -> e
    3:3:boolean onKeyUp(int,android.view.KeyEvent):0 -> e
    3:3:boolean dispatchKeyEvent(android.view.KeyEvent):0 -> e
    4:4:boolean onKeyUp(int,android.view.KeyEvent):0:0 -> e
    4:4:boolean dispatchKeyEvent(android.view.KeyEvent):0 -> e
    5:5:boolean onBackPressed():0:0 -> e
    5:5:boolean onKeyUp(int,android.view.KeyEvent):0 -> e
    5:5:boolean dispatchKeyEvent(android.view.KeyEvent):0 -> e
    6:6:androidx.appcompat.app.ActionBar getSupportActionBar():0:0 -> e
    6:6:boolean onBackPressed():0 -> e
    6:6:boolean onKeyUp(int,android.view.KeyEvent):0 -> e
    6:6:boolean dispatchKeyEvent(android.view.KeyEvent):0 -> e
    7:7:boolean onBackPressed():0:0 -> e
    7:7:boolean onKeyUp(int,android.view.KeyEvent):0 -> e
    7:7:boolean dispatchKeyEvent(android.view.KeyEvent):0 -> e
    void doInvalidatePanelMenu(int) -> f
    void endOnGoingFadeAnimation() -> g
    1:1:android.view.ViewGroup createSubDecor():0:0 -> h
    1:1:void ensureSubDecor():0 -> h
    2:2:void ensureSubDecor():0:0 -> h
    3:3:java.lang.CharSequence getTitle():0:0 -> h
    3:3:void ensureSubDecor():0 -> h
    4:4:void ensureSubDecor():0:0 -> h
    5:5:androidx.appcompat.app.ActionBar peekSupportActionBar():0:0 -> h
    5:5:void ensureSubDecor():0 -> h
    6:6:void ensureSubDecor():0:0 -> h
    7:7:void applyFixedSizeWindow():0:0 -> h
    7:7:void ensureSubDecor():0 -> h
    8:8:void ensureSubDecor():0:0 -> h
    9:9:android.view.ViewGroup createSubDecor():0:0 -> h
    9:9:void ensureSubDecor():0 -> h
    androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState findMenuPanel(android.view.Menu) -> i
    1:1:androidx.appcompat.app.ActionBar getSupportActionBar():0:0 -> invalidateOptionsMenu
    1:1:void invalidateOptionsMenu():0 -> invalidateOptionsMenu
    2:2:void invalidateOptionsMenu():0:0 -> invalidateOptionsMenu
    1:1:androidx.appcompat.app.ActionBar getSupportActionBar():0:0 -> j
    1:1:android.content.Context getActionBarThemedContext():0 -> j
    2:2:android.content.Context getActionBarThemedContext():0:0 -> j
    android.view.Window$Callback getWindowCallback() -> k
    void initWindowDecorActionBar() -> l
    void invalidatePanelMenu(int) -> m
    1:1:androidx.appcompat.app.ActionBar getSupportActionBar():0:0 -> n
    1:1:boolean onKeyShortcut(int,android.view.KeyEvent):0 -> n
    2:2:boolean onKeyShortcut(int,android.view.KeyEvent):0:0 -> n
    1:1:androidx.appcompat.app.ActionBar getSupportActionBar():0:0 -> o
    1:1:void onMenuOpened(int):0 -> o
    2:2:void onMenuOpened(int):0:0 -> o
    1:1:androidx.appcompat.app.ActionBar getSupportActionBar():0:0 -> onConfigurationChanged
    1:1:void onConfigurationChanged(android.content.res.Configuration):0 -> onConfigurationChanged
    2:2:void onConfigurationChanged(android.content.res.Configuration):0:0 -> onConfigurationChanged
    1:1:androidx.appcompat.app.ActionBar peekSupportActionBar():0:0 -> onCreate
    1:1:void onCreate(android.os.Bundle):0 -> onCreate
    2:2:void onCreate(android.os.Bundle):0:0 -> onCreate
    1:1:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet):0:0 -> onCreateView
    1:1:android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet):0 -> onCreateView
    1:1:void reopenMenu(androidx.appcompat.view.menu.MenuBuilder,boolean):0:0 -> onMenuModeChange
    1:1:void onMenuModeChange(androidx.appcompat.view.menu.MenuBuilder):0 -> onMenuModeChange
    1:1:androidx.appcompat.app.ActionBar getSupportActionBar():0:0 -> onPostResume
    1:1:void onPostResume():0 -> onPostResume
    2:2:void onPostResume():0:0 -> onPostResume
    1:1:androidx.appcompat.app.ActionBar getSupportActionBar():0:0 -> onStop
    1:1:void onStop():0 -> onStop
    2:2:void onStop():0:0 -> onStop
    1:1:androidx.appcompat.app.ActionBar getSupportActionBar():0:0 -> p
    1:1:void onPanelClosed(int):0 -> p
    2:2:void onPanelClosed(int):0:0 -> p
    1:1:boolean initializePanelDecor(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState):0:0 -> q
    1:1:void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent):0 -> q
    2:2:void androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState.setStyle(android.content.Context):0:0 -> q
    2:2:boolean initializePanelDecor(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState):0 -> q
    2:2:void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent):0 -> q
    3:3:boolean initializePanelDecor(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState):0:0 -> q
    3:3:void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent):0 -> q
    4:4:void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent):0:0 -> q
    5:5:boolean initializePanelContent(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState):0:0 -> q
    5:5:void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent):0 -> q
    6:6:androidx.appcompat.view.menu.MenuView androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState.getListMenuView(androidx.appcompat.view.menu.MenuPresenter$Callback):0:0 -> q
    6:6:boolean initializePanelContent(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState):0 -> q
    6:6:void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent):0 -> q
    7:7:boolean initializePanelContent(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState):0:0 -> q
    7:7:void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent):0 -> q
    8:8:void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent):0:0 -> q
    boolean performPanelShortcut(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,int,android.view.KeyEvent,int) -> r
    1:1:androidx.appcompat.app.ActionBar peekSupportActionBar():0:0 -> s
    1:1:boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent):0 -> s
    2:2:boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent):0:0 -> s
    3:3:boolean initializePanelMenu(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState):0:0 -> s
    3:3:boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent):0 -> s
    4:4:boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent):0:0 -> s
    1:1:androidx.appcompat.app.ActionBar getSupportActionBar():0:0 -> setSupportActionBar
    1:1:void setSupportActionBar(androidx.appcompat.widget.Toolbar):0 -> setSupportActionBar
    2:2:void setSupportActionBar(androidx.appcompat.widget.Toolbar):0:0 -> setSupportActionBar
    3:3:android.view.Window$Callback androidx.appcompat.app.ToolbarActionBar.getWrappedWindowCallback():0:0 -> setSupportActionBar
    3:3:void setSupportActionBar(androidx.appcompat.widget.Toolbar):0 -> setSupportActionBar
    4:4:void setSupportActionBar(androidx.appcompat.widget.Toolbar):0:0 -> setSupportActionBar
    1:1:androidx.appcompat.app.ActionBar peekSupportActionBar():0:0 -> setTitle
    1:1:void setTitle(java.lang.CharSequence):0 -> setTitle
    2:2:void setTitle(java.lang.CharSequence):0:0 -> setTitle
    1:1:androidx.appcompat.app.ActionBar getSupportActionBar():0:0 -> startSupportActionMode
    1:1:androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback):0 -> startSupportActionMode
    2:2:androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback):0:0 -> startSupportActionMode
    3:3:androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback):0:0 -> startSupportActionMode
    3:3:androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback):0 -> startSupportActionMode
    4:4:androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback):0:0 -> startSupportActionMode
    int sanitizeWindowFeatureId(int) -> t
    boolean shouldAnimateActionModeView() -> u
    void throwFeatureRequestIfSubDecorInstalled() -> v
    int updateStatusGuard(int) -> w
androidx.appcompat.app.AppCompatDelegateImpl$2 -> androidx.appcompat.app.l:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> a
androidx.appcompat.app.AppCompatDelegateImpl$3 -> androidx.appcompat.app.m:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> a
androidx.appcompat.app.AppCompatDelegateImpl$5 -> androidx.appcompat.app.n:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> a
androidx.appcompat.app.AppCompatDelegateImpl$6 -> androidx.appcompat.app.p:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> a
androidx.appcompat.app.AppCompatDelegateImpl$6$1 -> androidx.appcompat.app.o:
    androidx.appcompat.app.AppCompatDelegateImpl$6 this$1 -> a
androidx.appcompat.app.AppCompatDelegateImpl$7 -> androidx.appcompat.app.q:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> a
androidx.appcompat.app.AppCompatDelegateImpl$ActionBarDrawableToggleImpl -> androidx.appcompat.app.r:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> a
    1:1:android.content.Context getActionBarThemedContext():0:0 -> getThemeUpIndicator
    1:1:android.graphics.drawable.Drawable getThemeUpIndicator():0 -> getThemeUpIndicator
    2:2:android.graphics.drawable.Drawable getThemeUpIndicator():0:0 -> getThemeUpIndicator
androidx.appcompat.app.AppCompatDelegateImpl$ActionMenuPresenterCallback -> androidx.appcompat.app.s:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> a
androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9 -> androidx.appcompat.app.u:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> b
    androidx.appcompat.view.ActionMode$Callback mWrapped -> a
androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9$1 -> androidx.appcompat.app.t:
    androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9 this$1 -> a
androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback -> androidx.appcompat.app.v:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> b
    android.view.ActionMode startAsSupportActionMode(android.view.ActionMode$Callback) -> a
androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager -> androidx.appcompat.app.x:
    androidx.appcompat.app.TwilightManager mTwilightManager -> a
    android.content.IntentFilter mAutoTimeChangeReceiverFilter -> d
    android.content.BroadcastReceiver mAutoTimeChangeReceiver -> c
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> e
    boolean mIsNight -> b
    void cleanup() -> a
    void dispatchTimeChanged() -> b
    int getApplyableNightMode() -> c
    void setup() -> d
androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager$1 -> androidx.appcompat.app.w:
    androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager this$1 -> a
androidx.appcompat.app.AppCompatDelegateImpl$ListMenuDecorView -> androidx.appcompat.app.y:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> i
    1:1:boolean isOutOfBounds(int,int):0:0 -> onInterceptTouchEvent
    1:1:boolean onInterceptTouchEvent(android.view.MotionEvent):0 -> onInterceptTouchEvent
    2:2:boolean onInterceptTouchEvent(android.view.MotionEvent):0:0 -> onInterceptTouchEvent
    3:3:void androidx.appcompat.app.AppCompatDelegateImpl.closePanel(int):0:0 -> onInterceptTouchEvent
    3:3:boolean onInterceptTouchEvent(android.view.MotionEvent):0 -> onInterceptTouchEvent
    4:4:boolean onInterceptTouchEvent(android.view.MotionEvent):0:0 -> onInterceptTouchEvent
androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState -> androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState:
    boolean isOpen -> m
    boolean refreshDecorView -> n
    boolean refreshMenuContent -> o
    androidx.appcompat.view.menu.ListMenuPresenter listMenuPresenter -> i
    boolean isPrepared -> k
    boolean isHandled -> l
    int windowAnimations -> d
    android.content.Context listPresenterContext -> j
    int background -> b
    int gravity -> c
    int featureId -> a
    android.os.Bundle frozenActionViewState -> p
    android.view.ViewGroup decorView -> e
    android.view.View createdPanelView -> g
    android.view.View shownPanelView -> f
    androidx.appcompat.view.menu.MenuBuilder menu -> h
    void setMenu(androidx.appcompat.view.menu.MenuBuilder) -> a
androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState$SavedState -> androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState$SavedState:
    android.os.Bundle menuState -> c
    boolean isOpen -> b
    int featureId -> a
    androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState$SavedState readFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState$SavedState$1 -> androidx.appcompat.app.z:
    1:1:androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    2:2:androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    2:2:java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader):0 -> createFromParcel
    1:1:androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.appcompat.app.AppCompatDelegateImpl$PanelMenuPresenterCallback -> androidx.appcompat.app.a0:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> a
androidx.appcompat.app.AppCompatDialog -> androidx.appcompat.app.AppCompatDialog:
    androidx.core.view.KeyEventDispatcher$Component mKeyDispatcher -> b
    androidx.appcompat.app.AppCompatDelegate mDelegate -> a
    1:1:int getThemeResId(android.content.Context,int):0:0 -> <init>
    1:1:void <init>(android.content.Context,int):0 -> <init>
    2:2:void <init>(android.content.Context,int):0:0 -> <init>
    boolean superDispatchKeyEvent(android.view.KeyEvent) -> a
androidx.appcompat.app.AppCompatDialog$1 -> androidx.appcompat.app.c0:
    androidx.appcompat.app.AppCompatDialog this$0 -> a
androidx.appcompat.app.AppCompatViewInflater -> androidx.appcompat.app.AppCompatViewInflater:
    int[] sOnClickAttrs -> c
    java.lang.Object[] mConstructorArgs -> a
    java.lang.Class[] sConstructorSignature -> b
    java.lang.String[] sClassPrefixList -> d
    java.util.Map sConstructorMap -> e
    1:1:android.content.Context themifyContext(android.content.Context,android.util.AttributeSet,boolean,boolean):0:0 -> a
    1:1:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0 -> a
    2:2:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0:0 -> a
    3:3:android.view.View createViewFromTag(android.content.Context,java.lang.String,android.util.AttributeSet):0:0 -> a
    3:3:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0 -> a
    4:4:void checkOnClickListener(android.view.View,android.util.AttributeSet):0:0 -> a
    4:4:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0 -> a
    android.view.View createViewByPrefix(android.content.Context,java.lang.String,java.lang.String) -> b
    void verifyNotNull(android.view.View,java.lang.String) -> c
androidx.appcompat.app.AppCompatViewInflater$DeclaredOnClickListener -> androidx.appcompat.app.d0:
    android.view.View mHostView -> a
    java.lang.reflect.Method mResolvedMethod -> c
    java.lang.String mMethodName -> b
    android.content.Context mResolvedContext -> d
    1:1:void resolveMethod(android.content.Context,java.lang.String):0:0 -> onClick
    1:1:void onClick(android.view.View):0 -> onClick
    2:2:void onClick(android.view.View):0:0 -> onClick
androidx.appcompat.app.NavItemSelectedListener -> androidx.appcompat.app.e0:
    androidx.appcompat.app.ActionBar$OnNavigationListener mListener -> a
androidx.appcompat.app.ToolbarActionBar -> androidx.appcompat.app.k0:
    java.lang.Runnable mMenuInvalidator -> g
    boolean mLastMenuVisibility -> e
    androidx.appcompat.widget.Toolbar$OnMenuItemClickListener mMenuClicker -> h
    java.util.ArrayList mMenuVisibilityListeners -> f
    android.view.Window$Callback mWindowCallback -> c
    boolean mToolbarMenuPrepared -> b
    androidx.appcompat.widget.DecorToolbar mDecorToolbar -> a
    boolean mMenuCallbackSet -> d
    void onDestroy() -> a
    android.view.Menu getMenu() -> b
    void populateOptionsMenu() -> c
    1:1:boolean openOptionsMenu():0:0 -> onMenuKeyEvent
    1:1:boolean onMenuKeyEvent(android.view.KeyEvent):0 -> onMenuKeyEvent
    1:1:void setCustomView(android.view.View):0:0 -> setCustomView
    1:1:void setCustomView(int):0 -> setCustomView
    2:2:void setCustomView(android.view.View,androidx.appcompat.app.ActionBar$LayoutParams):0:0 -> setCustomView
    2:2:void setCustomView(android.view.View):0 -> setCustomView
    2:2:void setCustomView(int):0 -> setCustomView
    3:3:void setCustomView(android.view.View,androidx.appcompat.app.ActionBar$LayoutParams):0:0 -> setCustomView
    3:3:void setCustomView(android.view.View):0 -> setCustomView
androidx.appcompat.app.ToolbarActionBar$1 -> androidx.appcompat.app.f0:
    androidx.appcompat.app.ToolbarActionBar this$0 -> a
androidx.appcompat.app.ToolbarActionBar$2 -> androidx.appcompat.app.g0:
    androidx.appcompat.app.ToolbarActionBar this$0 -> a
androidx.appcompat.app.ToolbarActionBar$ActionMenuPresenterCallback -> androidx.appcompat.app.h0:
    androidx.appcompat.app.ToolbarActionBar this$0 -> b
    boolean mClosingActionMenu -> a
androidx.appcompat.app.ToolbarActionBar$MenuBuilderCallback -> androidx.appcompat.app.i0:
    androidx.appcompat.app.ToolbarActionBar this$0 -> a
androidx.appcompat.app.ToolbarActionBar$ToolbarCallbackWrapper -> androidx.appcompat.app.j0:
    androidx.appcompat.app.ToolbarActionBar this$0 -> b
androidx.appcompat.app.TwilightCalculator -> androidx.appcompat.app.l0:
    long sunrise -> b
    long sunset -> a
    androidx.appcompat.app.TwilightCalculator sInstance -> d
    int state -> c
    androidx.appcompat.app.TwilightCalculator getInstance() -> a
androidx.appcompat.app.TwilightManager -> androidx.appcompat.app.n0:
    android.content.Context mContext -> a
    androidx.appcompat.app.TwilightManager sInstance -> d
    androidx.appcompat.app.TwilightManager$TwilightState mTwilightState -> c
    android.location.LocationManager mLocationManager -> b
    androidx.appcompat.app.TwilightManager getInstance(android.content.Context) -> a
    android.location.Location getLastKnownLocationForProvider(java.lang.String) -> b
    1:1:boolean isStateValid():0:0 -> c
    1:1:boolean isNight():0 -> c
    2:2:boolean isNight():0:0 -> c
    3:3:android.location.Location getLastKnownLocation():0:0 -> c
    3:3:boolean isNight():0 -> c
    4:4:void updateState(android.location.Location):0:0 -> c
    4:4:boolean isNight():0 -> c
    5:5:boolean isNight():0:0 -> c
androidx.appcompat.app.TwilightManager$TwilightState -> androidx.appcompat.app.m0:
    long nextUpdate -> b
    boolean isNight -> a
androidx.appcompat.app.WindowDecorActionBar -> androidx.appcompat.app.WindowDecorActionBar:
    android.content.Context mContext -> a
    boolean mDisplayHomeAsUpSet -> m
    int mSavedTabPosition -> l
    androidx.appcompat.widget.ActionBarOverlayLayout mOverlayLayout -> d
    androidx.core.view.ViewPropertyAnimatorListener mShowListener -> D
    boolean mContentAnimations -> u
    android.view.animation.Interpolator sShowInterpolator -> G
    boolean mHiddenBySystem -> w
    boolean mLastMenuVisibility -> q
    boolean mHasEmbeddedTabs -> s
    androidx.appcompat.app.WindowDecorActionBar$TabImpl mSelectedTab -> k
    boolean mNowShowing -> y
    androidx.appcompat.view.ViewPropertyAnimatorCompatSet mCurrentShowAnim -> z
    androidx.core.view.ViewPropertyAnimatorUpdateListener mUpdateListener -> E
    androidx.appcompat.widget.DecorToolbar mDecorToolbar -> f
    boolean mShowHideAnimationEnabled -> A
    androidx.appcompat.widget.ActionBarContainer mContainerView -> e
    androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl mActionMode -> n
    android.content.Context mThemedContext -> b
    androidx.appcompat.widget.ScrollingTabContainerView mTabScrollView -> i
    androidx.core.view.ViewPropertyAnimatorListener mHideListener -> C
    androidx.appcompat.view.ActionMode$Callback mDeferredModeDestroyCallback -> p
    boolean mHiddenByApp -> v
    android.view.animation.Interpolator sHideInterpolator -> F
    boolean mShowingForMode -> x
    android.view.View mContentView -> h
    androidx.appcompat.widget.ActionBarContextView mContextView -> g
    java.util.ArrayList mTabs -> j
    int mCurWindowVisibility -> t
    java.util.ArrayList mMenuVisibilityListeners -> r
    boolean mHideOnContentScroll -> B
    android.app.Activity mActivity -> c
    androidx.appcompat.view.ActionMode mDeferredDestroyActionMode -> o
    1:1:void showForActionMode():0:0 -> animateToMode
    1:1:void animateToMode(boolean):0 -> animateToMode
    2:2:void hideForActionMode():0:0 -> animateToMode
    2:2:void animateToMode(boolean):0 -> animateToMode
    3:3:boolean shouldAnimateContextView():0:0 -> animateToMode
    3:3:void animateToMode(boolean):0 -> animateToMode
    4:4:void animateToMode(boolean):0:0 -> animateToMode
    void configureTab(androidx.appcompat.app.ActionBar$Tab,int) -> b
    void ensureTabsExist() -> c
    1:1:androidx.appcompat.widget.DecorToolbar getDecorToolbar(android.view.View):0:0 -> d
    1:1:void init(android.view.View):0 -> d
    2:2:void init(android.view.View):0:0 -> d
    3:3:androidx.appcompat.widget.DecorToolbar getDecorToolbar(android.view.View):0:0 -> d
    3:3:void init(android.view.View):0 -> d
    void setHasEmbeddedTabs(boolean) -> e
    void updateVisibility(boolean) -> f
    1:1:void cleanupTabs():0:0 -> removeAllTabs
    1:1:void removeAllTabs():0 -> removeAllTabs
androidx.appcompat.app.WindowDecorActionBar$1 -> androidx.appcompat.app.o0:
    androidx.appcompat.app.WindowDecorActionBar this$0 -> a
    1:1:void androidx.appcompat.app.WindowDecorActionBar.completeDeferredDestroyActionMode():0:0 -> onAnimationEnd
    1:1:void onAnimationEnd(android.view.View):0 -> onAnimationEnd
    2:2:void onAnimationEnd(android.view.View):0:0 -> onAnimationEnd
androidx.appcompat.app.WindowDecorActionBar$2 -> androidx.appcompat.app.p0:
    androidx.appcompat.app.WindowDecorActionBar this$0 -> a
androidx.appcompat.app.WindowDecorActionBar$3 -> androidx.appcompat.app.q0:
    androidx.appcompat.app.WindowDecorActionBar this$0 -> a
androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl -> androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl:
    android.content.Context mActionModeContext -> c
    androidx.appcompat.view.ActionMode$Callback mCallback -> e
    androidx.appcompat.view.menu.MenuBuilder mMenu -> d
    java.lang.ref.WeakReference mCustomView -> f
    androidx.appcompat.app.WindowDecorActionBar this$0 -> g
androidx.appcompat.app.WindowDecorActionBar$TabImpl -> androidx.appcompat.app.WindowDecorActionBar$TabImpl:
    android.graphics.drawable.Drawable mIcon -> c
    java.lang.Object mTag -> b
    java.lang.CharSequence mText -> d
    int mPosition -> f
    java.lang.CharSequence mContentDesc -> e
    androidx.appcompat.app.ActionBar$TabListener mCallback -> a
    androidx.appcompat.app.WindowDecorActionBar this$0 -> h
    android.view.View mCustomView -> g
androidx.appcompat.content.res.AppCompatResources -> androidx.appcompat.content.res.AppCompatResources:
    java.lang.ThreadLocal TL_TYPED_VALUE -> a
    java.lang.Object sColorStateCacheLock -> c
    java.util.WeakHashMap sColorStateCaches -> b
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat -> androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat:
    androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState mState -> p
    int mTransitionToIndex -> r
    androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$Transition mTransition -> q
    int mTransitionFromIndex -> s
    java.lang.String LOGTAG -> u
    boolean mMutated -> t
    1:1:int androidx.appcompat.graphics.drawable.StateListDrawable$StateListState.addStateSet(int[],android.graphics.drawable.Drawable):0:0 -> addState
    1:1:int androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState.addStateSet(int[],android.graphics.drawable.Drawable,int):0 -> addState
    1:1:void addState(int[],android.graphics.drawable.Drawable,int):0 -> addState
    2:2:int androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState.addStateSet(int[],android.graphics.drawable.Drawable,int):0:0 -> addState
    2:2:void addState(int[],android.graphics.drawable.Drawable,int):0 -> addState
    3:3:void addState(int[],android.graphics.drawable.Drawable,int):0:0 -> addState
    1:1:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState cloneConstantState():0:0 -> b
    1:1:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState cloneConstantState():0 -> b
    1:1:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState cloneConstantState():0:0 -> g
    1:1:androidx.appcompat.graphics.drawable.StateListDrawable$StateListState cloneConstantState():0 -> g
    1:1:void updateStateFromTypedArray(android.content.res.TypedArray):0:0 -> inflate
    1:1:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    2:2:void androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.setVariablePadding(boolean):0:0 -> inflate
    2:2:void updateStateFromTypedArray(android.content.res.TypedArray):0 -> inflate
    2:2:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    3:3:void updateStateFromTypedArray(android.content.res.TypedArray):0:0 -> inflate
    3:3:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    4:4:void androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.setConstantSize(boolean):0:0 -> inflate
    4:4:void updateStateFromTypedArray(android.content.res.TypedArray):0 -> inflate
    4:4:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    5:5:void updateStateFromTypedArray(android.content.res.TypedArray):0:0 -> inflate
    5:5:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    6:6:void androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.setEnterFadeDuration(int):0:0 -> inflate
    6:6:void updateStateFromTypedArray(android.content.res.TypedArray):0 -> inflate
    6:6:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    7:7:void updateStateFromTypedArray(android.content.res.TypedArray):0:0 -> inflate
    7:7:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    8:8:void androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.setExitFadeDuration(int):0:0 -> inflate
    8:8:void updateStateFromTypedArray(android.content.res.TypedArray):0 -> inflate
    8:8:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    9:9:void updateStateFromTypedArray(android.content.res.TypedArray):0:0 -> inflate
    9:9:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    10:10:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    11:11:void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    11:11:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    12:12:int parseItem(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    12:12:void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    12:12:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    13:13:int androidx.appcompat.graphics.drawable.StateListDrawable$StateListState.addStateSet(int[],android.graphics.drawable.Drawable):0:0 -> inflate
    13:13:int androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState.addStateSet(int[],android.graphics.drawable.Drawable,int):0 -> inflate
    13:13:int parseItem(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    13:13:void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    13:13:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    14:14:int androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState.addStateSet(int[],android.graphics.drawable.Drawable,int):0:0 -> inflate
    14:14:int parseItem(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    14:14:void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    14:14:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    15:15:int parseItem(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    15:15:void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    15:15:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    16:16:void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    16:16:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    17:17:int parseTransition(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    17:17:void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    17:17:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    18:18:void init():0:0 -> inflate
    18:18:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    1:1:int androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState.indexOfKeyframe(int[]):0:0 -> onStateChange
    1:1:boolean onStateChange(int[]):0 -> onStateChange
    2:2:boolean onStateChange(int[]):0:0 -> onStateChange
    3:3:boolean selectTransition(int):0:0 -> onStateChange
    3:3:boolean onStateChange(int[]):0 -> onStateChange
    4:4:boolean onStateChange(int[]):0:0 -> onStateChange
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$1 -> androidx.appcompat.graphics.drawable.a:
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatableTransition -> androidx.appcompat.graphics.drawable.b:
    android.graphics.drawable.Animatable mA -> a
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState -> androidx.appcompat.graphics.drawable.c:
    androidx.collection.LongSparseArray mTransitions -> K
    androidx.collection.SparseArrayCompat mStateIds -> L
    void mutate() -> c
    int addTransition(int,int,android.graphics.drawable.Drawable,boolean) -> g
    long generateTransitionKey(int,int) -> h
    int getKeyframeIdAt(int) -> i
    int indexOfTransition(int,int) -> j
    boolean isTransitionReversed(int,int) -> k
    boolean transitionHasReversibleFlag(int,int) -> l
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedVectorDrawableTransition -> androidx.appcompat.graphics.drawable.d:
    androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat mAvd -> a
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimationDrawableTransition -> androidx.appcompat.graphics.drawable.e:
    android.animation.ObjectAnimator mAnim -> a
    boolean mHasReversibleFlag -> b
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$FrameInterpolator -> androidx.appcompat.graphics.drawable.f:
    int[] mFrameTimes -> a
    int mFrames -> b
    int mTotalDuration -> c
    1:1:int updateFrames(android.graphics.drawable.AnimationDrawable,boolean):0:0 -> <init>
    1:1:void <init>(android.graphics.drawable.AnimationDrawable,boolean):0 -> <init>
    int getTotalDuration() -> a
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$Transition -> androidx.appcompat.graphics.drawable.g:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$1):0 -> <init>
androidx.appcompat.graphics.drawable.DrawableContainer -> androidx.appcompat.graphics.drawable.k:
    android.graphics.drawable.Drawable mCurrDrawable -> c
    long mEnterAnimationEnd -> j
    androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState mDrawableContainerState -> a
    android.graphics.drawable.Drawable mLastDrawable -> d
    int $r8$clinit -> m
    long mExitAnimationEnd -> k
    int mCurIndex -> g
    int mAlpha -> e
    android.graphics.Rect mHotspotBounds -> b
    androidx.appcompat.graphics.drawable.DrawableContainer$BlockInvalidateCallback mBlockInvalidateCallback -> l
    java.lang.Runnable mAnimationRunnable -> i
    boolean mHasAlpha -> f
    boolean mMutated -> h
    void animate(boolean) -> a
    androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState cloneConstantState() -> b
    int getCurrentIndex() -> c
    void initializeDrawableForDisplay(android.graphics.drawable.Drawable) -> d
    boolean selectDrawable(int) -> e
    void updateDensity(android.content.res.Resources) -> f
    1:1:boolean androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.isConstantSize():0:0 -> getIntrinsicHeight
    1:1:int getIntrinsicHeight():0 -> getIntrinsicHeight
    2:2:int androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.getConstantHeight():0:0 -> getIntrinsicHeight
    2:2:int getIntrinsicHeight():0 -> getIntrinsicHeight
    3:3:int getIntrinsicHeight():0:0 -> getIntrinsicHeight
    1:1:boolean androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.isConstantSize():0:0 -> getIntrinsicWidth
    1:1:int getIntrinsicWidth():0 -> getIntrinsicWidth
    2:2:int androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.getConstantWidth():0:0 -> getIntrinsicWidth
    2:2:int getIntrinsicWidth():0 -> getIntrinsicWidth
    3:3:int getIntrinsicWidth():0:0 -> getIntrinsicWidth
    1:1:boolean androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.isConstantSize():0:0 -> getMinimumHeight
    1:1:int getMinimumHeight():0 -> getMinimumHeight
    2:2:int androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.getConstantMinimumHeight():0:0 -> getMinimumHeight
    2:2:int getMinimumHeight():0 -> getMinimumHeight
    3:3:int getMinimumHeight():0:0 -> getMinimumHeight
    1:1:boolean androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.isConstantSize():0:0 -> getMinimumWidth
    1:1:int getMinimumWidth():0 -> getMinimumWidth
    2:2:int androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.getConstantMinimumWidth():0:0 -> getMinimumWidth
    2:2:int getMinimumWidth():0 -> getMinimumWidth
    3:3:int getMinimumWidth():0:0 -> getMinimumWidth
    1:1:boolean needsMirroring():0:0 -> getPadding
    1:1:boolean getPadding(android.graphics.Rect):0 -> getPadding
    2:2:boolean getPadding(android.graphics.Rect):0:0 -> getPadding
    1:1:void androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.invalidateCache():0:0 -> invalidateDrawable
    1:1:void invalidateDrawable(android.graphics.drawable.Drawable):0 -> invalidateDrawable
    2:2:void invalidateDrawable(android.graphics.drawable.Drawable):0:0 -> invalidateDrawable
    1:1:int getCurrentIndex():0:0 -> onLayoutDirectionChanged
    1:1:boolean onLayoutDirectionChanged(int):0 -> onLayoutDirectionChanged
    2:2:boolean androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.setLayoutDirection(int,int):0:0 -> onLayoutDirectionChanged
    2:2:boolean onLayoutDirectionChanged(int):0 -> onLayoutDirectionChanged
androidx.appcompat.graphics.drawable.DrawableContainer$1 -> androidx.appcompat.graphics.drawable.h:
    androidx.appcompat.graphics.drawable.DrawableContainer this$0 -> a
androidx.appcompat.graphics.drawable.DrawableContainer$BlockInvalidateCallback -> androidx.appcompat.graphics.drawable.i:
    android.graphics.drawable.Drawable$Callback mCallback -> a
androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState -> androidx.appcompat.graphics.drawable.j:
    boolean mCheckedConstantSize -> m
    int mConstantWidth -> n
    boolean mVariablePadding -> i
    int mNumChildren -> h
    boolean mStateful -> u
    int mChangingConfigurations -> d
    boolean mCanConstantState -> w
    int mEnterFadeDuration -> A
    androidx.appcompat.graphics.drawable.DrawableContainer mOwner -> a
    boolean mMutated -> y
    android.content.res.ColorStateList mTintList -> F
    boolean mHasColorFilter -> E
    android.util.SparseArray mDrawableFutures -> f
    android.content.res.Resources mSourceRes -> b
    int mOpacity -> s
    boolean mAutoMirrored -> C
    int mConstantMinimumHeight -> q
    int mConstantHeight -> o
    android.graphics.ColorFilter mColorFilter -> D
    boolean mHasTintMode -> I
    boolean mCheckedPadding -> j
    boolean mConstantSize -> l
    boolean mCheckedConstantState -> v
    int mChildrenChangingConfigurations -> e
    android.graphics.drawable.Drawable[] mDrawables -> g
    boolean mDither -> x
    int mExitFadeDuration -> B
    int mDensity -> c
    boolean mCheckedOpacity -> r
    boolean mCheckedStateful -> t
    android.graphics.Rect mConstantPadding -> k
    int mLayoutDirection -> z
    android.graphics.PorterDuff$Mode mTintMode -> G
    boolean mHasTintList -> H
    int mConstantMinimumWidth -> p
    1:1:int androidx.appcompat.graphics.drawable.DrawableContainer.resolveDensity(android.content.res.Resources,int):0:0 -> <init>
    1:1:void <init>(androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState,androidx.appcompat.graphics.drawable.DrawableContainer,android.content.res.Resources):0 -> <init>
    2:2:void <init>(androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState,androidx.appcompat.graphics.drawable.DrawableContainer,android.content.res.Resources):0:0 -> <init>
    void applyTheme(android.content.res.Resources$Theme) -> a
    1:1:void growArray(int,int):0:0 -> addChild
    1:1:void androidx.appcompat.graphics.drawable.StateListDrawable$StateListState.growArray(int,int):0 -> addChild
    1:1:int addChild(android.graphics.drawable.Drawable):0 -> addChild
    2:2:void androidx.appcompat.graphics.drawable.StateListDrawable$StateListState.growArray(int,int):0:0 -> addChild
    2:2:int addChild(android.graphics.drawable.Drawable):0 -> addChild
    3:3:int addChild(android.graphics.drawable.Drawable):0:0 -> addChild
    4:4:void invalidateCache():0:0 -> addChild
    4:4:int addChild(android.graphics.drawable.Drawable):0 -> addChild
    5:5:int addChild(android.graphics.drawable.Drawable):0:0 -> addChild
    1:1:android.graphics.drawable.Drawable prepareDrawable(android.graphics.drawable.Drawable):0:0 -> b
    1:1:void createAllFutures():0 -> b
    2:2:void createAllFutures():0:0 -> b
    void mutate() -> c
    1:1:int androidx.appcompat.graphics.drawable.DrawableContainer.resolveDensity(android.content.res.Resources,int):0:0 -> d
    1:1:void updateDensity(android.content.res.Resources):0 -> d
    2:2:void updateDensity(android.content.res.Resources):0:0 -> d
    1:1:android.graphics.drawable.Drawable prepareDrawable(android.graphics.drawable.Drawable):0:0 -> getChild
    1:1:android.graphics.drawable.Drawable getChild(int):0 -> getChild
    2:2:android.graphics.drawable.Drawable getChild(int):0:0 -> getChild
androidx.appcompat.graphics.drawable.DrawableWrapper -> androidx.appcompat.graphics.drawable.DrawableWrapper:
    android.graphics.drawable.Drawable mDrawable -> a
androidx.appcompat.graphics.drawable.DrawerArrowDrawable -> androidx.appcompat.graphics.drawable.DrawerArrowDrawable:
    float mMaxCutForBarSize -> k
    float mProgress -> j
    int mDirection -> l
    boolean mVerticalMirror -> i
    int mSize -> h
    float mBarGap -> e
    float mArrowShaftLength -> d
    float mBarLength -> c
    float mArrowHeadLength -> b
    android.graphics.Path mPath -> g
    android.graphics.Paint mPaint -> a
    boolean mSpin -> f
    float ARROW_HEAD_ANGLE -> m
    float lerp(float,float,float) -> a
androidx.appcompat.graphics.drawable.StateListDrawable -> androidx.appcompat.graphics.drawable.m:
    boolean mMutated -> o
    androidx.appcompat.graphics.drawable.StateListDrawable$StateListState mStateListState -> n
    1:1:int androidx.appcompat.graphics.drawable.StateListDrawable$StateListState.addStateSet(int[],android.graphics.drawable.Drawable):0:0 -> addState
    1:1:void addState(int[],android.graphics.drawable.Drawable):0 -> addState
    2:2:void addState(int[],android.graphics.drawable.Drawable):0:0 -> addState
    androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState cloneConstantState() -> b
    androidx.appcompat.graphics.drawable.StateListDrawable$StateListState cloneConstantState() -> g
    int[] extractStateSet(android.util.AttributeSet) -> h
    1:1:void updateStateFromTypedArray(android.content.res.TypedArray):0:0 -> inflate
    1:1:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    2:2:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    3:3:void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    3:3:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    4:4:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
androidx.appcompat.graphics.drawable.StateListDrawable$StateListState -> androidx.appcompat.graphics.drawable.l:
    int[][] mStateSets -> J
    1:1:int androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.getCapacity():0:0 -> <init>
    1:1:void <init>(androidx.appcompat.graphics.drawable.StateListDrawable$StateListState,androidx.appcompat.graphics.drawable.StateListDrawable,android.content.res.Resources):0 -> <init>
    2:2:void <init>(androidx.appcompat.graphics.drawable.StateListDrawable$StateListState,androidx.appcompat.graphics.drawable.StateListDrawable,android.content.res.Resources):0:0 -> <init>
    void mutate() -> c
    int addStateSet(int[],android.graphics.drawable.Drawable) -> e
    1:1:int androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.getChildCount():0:0 -> f
    1:1:int indexOfStateSet(int[]):0 -> f
    2:2:int indexOfStateSet(int[]):0:0 -> f
androidx.appcompat.text.AllCapsTransformationMethod -> androidx.appcompat.text.AllCapsTransformationMethod:
    java.util.Locale mLocale -> a
androidx.appcompat.view.ActionBarPolicy -> androidx.appcompat.view.ActionBarPolicy:
    android.content.Context mContext -> a
androidx.appcompat.view.ActionMode -> androidx.appcompat.view.ActionMode:
    java.lang.Object mTag -> a
    boolean mTitleOptionalHint -> b
androidx.appcompat.view.ContextThemeWrapper -> androidx.appcompat.view.ContextThemeWrapper:
    android.content.res.Resources$Theme mTheme -> b
    android.content.res.Configuration mOverrideConfiguration -> d
    android.content.res.Resources mResources -> e
    android.view.LayoutInflater mInflater -> c
    int mThemeResource -> a
    void initializeTheme() -> a
    1:1:android.content.res.Resources getResourcesInternal():0:0 -> getResources
    1:1:android.content.res.Resources getResources():0 -> getResources
androidx.appcompat.view.StandaloneActionMode -> androidx.appcompat.view.StandaloneActionMode:
    android.content.Context mContext -> c
    androidx.appcompat.widget.ActionBarContextView mContextView -> d
    androidx.appcompat.view.ActionMode$Callback mCallback -> e
    java.lang.ref.WeakReference mCustomView -> f
    boolean mFinished -> g
    boolean mFocusable -> h
    androidx.appcompat.view.menu.MenuBuilder mMenu -> i
androidx.appcompat.view.SupportActionModeWrapper -> androidx.appcompat.view.SupportActionModeWrapper:
    android.content.Context mContext -> a
    androidx.appcompat.view.ActionMode mWrappedObject -> b
androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper -> androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper:
    android.content.Context mContext -> b
    androidx.collection.SimpleArrayMap mMenus -> d
    android.view.ActionMode$Callback mWrappedCallback -> a
    java.util.ArrayList mActionModes -> c
    android.view.Menu getMenuWrapper(android.view.Menu) -> a
androidx.appcompat.view.SupportMenuInflater -> androidx.appcompat.view.SupportMenuInflater:
    java.lang.Class[] ACTION_VIEW_CONSTRUCTOR_SIGNATURE -> e
    java.lang.Object[] mActionProviderConstructorArguments -> b
    android.content.Context mContext -> c
    java.lang.Class[] ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE -> f
    java.lang.Object[] mActionViewConstructorArguments -> a
    java.lang.Object mRealOwner -> d
    java.lang.Object findRealOwner(java.lang.Object) -> a
    java.lang.Object getRealOwner() -> b
    void parseMenu(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.view.Menu) -> c
androidx.appcompat.view.SupportMenuInflater$InflatedOnMenuItemClickListener -> androidx.appcompat.view.a:
    java.lang.Class[] PARAM_TYPES -> c
    java.lang.Object mRealOwner -> a
    java.lang.reflect.Method mMethod -> b
androidx.appcompat.view.SupportMenuInflater$MenuState -> androidx.appcompat.view.b:
    int itemCategoryOrder -> j
    char itemAlphabeticShortcut -> n
    java.lang.CharSequence itemTooltipText -> C
    char itemNumericShortcut -> p
    boolean itemEnabled -> u
    int groupOrder -> d
    int groupId -> b
    boolean itemChecked -> s
    java.lang.String itemActionViewClassName -> x
    android.content.res.ColorStateList itemIconTintList -> D
    java.lang.String itemListenerMethodName -> z
    android.view.Menu menu -> a
    boolean groupVisible -> f
    int itemActionViewLayout -> w
    androidx.appcompat.view.SupportMenuInflater this$0 -> F
    boolean itemAdded -> h
    androidx.core.view.ActionProvider itemActionProvider -> A
    int itemNumericModifiers -> q
    int itemAlphabeticModifiers -> o
    int itemIconResId -> m
    java.lang.CharSequence itemContentDescription -> B
    int itemId -> i
    int groupCheckable -> e
    int groupCategory -> c
    java.lang.CharSequence itemTitle -> k
    boolean itemVisible -> t
    java.lang.CharSequence itemTitleCondensed -> l
    java.lang.String itemActionProviderClassName -> y
    android.graphics.PorterDuff$Mode itemIconTintMode -> E
    int itemShowAsAction -> v
    boolean groupEnabled -> g
    int itemCheckable -> r
    1:1:void resetGroup():0:0 -> <init>
    1:1:void <init>(androidx.appcompat.view.SupportMenuInflater,android.view.Menu):0 -> <init>
    java.lang.Object newInstance(java.lang.String,java.lang.Class[],java.lang.Object[]) -> a
    void setItem(android.view.MenuItem) -> b
    1:1:char getShortcut(java.lang.String):0:0 -> readItem
    1:1:void readItem(android.util.AttributeSet):0 -> readItem
    2:2:void readItem(android.util.AttributeSet):0:0 -> readItem
    3:3:char getShortcut(java.lang.String):0:0 -> readItem
    3:3:void readItem(android.util.AttributeSet):0 -> readItem
    4:4:void readItem(android.util.AttributeSet):0:0 -> readItem
androidx.appcompat.view.ViewPropertyAnimatorCompatSet -> androidx.appcompat.view.ViewPropertyAnimatorCompatSet:
    android.view.animation.Interpolator mInterpolator -> c
    androidx.core.view.ViewPropertyAnimatorListener mListener -> d
    long mDuration -> b
    boolean mIsStarted -> e
    androidx.core.view.ViewPropertyAnimatorListenerAdapter mProxyListener -> f
    java.util.ArrayList mAnimators -> a
    void onAnimationsEnded() -> a
androidx.appcompat.view.ViewPropertyAnimatorCompatSet$1 -> androidx.appcompat.view.c:
    androidx.appcompat.view.ViewPropertyAnimatorCompatSet this$0 -> c
    boolean mProxyStarted -> a
    int mProxyEndCount -> b
    1:1:void onEnd():0:0 -> onAnimationEnd
    1:1:void onAnimationEnd(android.view.View):0 -> onAnimationEnd
androidx.appcompat.view.WindowCallbackWrapper -> androidx.appcompat.view.WindowCallbackWrapper:
    android.view.Window$Callback mWrapped -> a
androidx.appcompat.view.menu.ActionMenuItem -> androidx.appcompat.view.menu.ActionMenuItem:
    android.content.res.ColorStateList mIconTintList -> p
    char mShortcutNumericChar -> g
    char mShortcutAlphabeticChar -> i
    int mShortcutAlphabeticModifiers -> j
    int mShortcutNumericModifiers -> h
    java.lang.CharSequence mTitle -> d
    java.lang.CharSequence mTitleCondensed -> e
    int mGroup -> b
    int mOrdering -> c
    boolean mHasIconTint -> r
    boolean mHasIconTintMode -> s
    int mId -> a
    android.content.Intent mIntent -> f
    java.lang.CharSequence mContentDescription -> n
    java.lang.CharSequence mTooltipText -> o
    android.view.MenuItem$OnMenuItemClickListener mClickListener -> m
    android.content.Context mContext -> l
    android.graphics.drawable.Drawable mIconDrawable -> k
    android.graphics.PorterDuff$Mode mIconTintMode -> q
    int mFlags -> t
    void applyIconTint() -> a
androidx.appcompat.view.menu.ActionMenuItemView -> androidx.appcompat.view.menu.ActionMenuItemView:
    int mMaxIconSize -> n
    androidx.appcompat.widget.ForwardingListener mForwardingListener -> h
    int mMinWidth -> l
    android.graphics.drawable.Drawable mIcon -> f
    int mSavedPaddingLeft -> m
    boolean mAllowTextWithIcon -> j
    boolean mExpandedFormat -> k
    androidx.appcompat.view.menu.ActionMenuItemView$PopupCallback mPopupCallback -> i
    java.lang.CharSequence mTitle -> e
    androidx.appcompat.view.menu.MenuBuilder$ItemInvoker mItemInvoker -> g
    androidx.appcompat.view.menu.MenuItemImpl mItemData -> d
    boolean shouldAllowTextWithIcon() -> a
    void updateTextButtonVisibility() -> b
    1:1:java.lang.CharSequence androidx.appcompat.view.menu.MenuItemImpl.getTitleForItemView(androidx.appcompat.view.menu.MenuView$ItemView):0:0 -> initialize
    1:1:void initialize(androidx.appcompat.view.menu.MenuItemImpl,int):0 -> initialize
    2:2:void initialize(androidx.appcompat.view.menu.MenuItemImpl,int):0:0 -> initialize
androidx.appcompat.view.menu.ActionMenuItemView$ActionMenuItemForwardingListener -> androidx.appcompat.view.menu.a:
    androidx.appcompat.view.menu.ActionMenuItemView this$0 -> j
androidx.appcompat.view.menu.BaseMenuPresenter -> androidx.appcompat.view.menu.BaseMenuPresenter:
    androidx.appcompat.view.menu.MenuPresenter$Callback mCallback -> a
    int mId -> d
    int mMenuLayoutRes -> b
    int mItemLayoutRes -> c
androidx.appcompat.view.menu.BaseMenuWrapper -> androidx.appcompat.view.menu.b:
    java.util.Map mMenuItems -> c
    android.content.Context mContext -> b
    java.util.Map mSubMenus -> d
    android.view.MenuItem getMenuItemWrapper(android.view.MenuItem) -> a
    android.view.SubMenu getSubMenuWrapper(android.view.SubMenu) -> b
    void internalClear() -> c
    void internalRemoveGroup(int) -> d
    void internalRemoveItem(int) -> e
androidx.appcompat.view.menu.BaseWrapper -> androidx.appcompat.view.menu.c:
    java.lang.Object mWrappedObject -> a
androidx.appcompat.view.menu.CascadingMenuPopup -> androidx.appcompat.view.menu.i:
    int mDropDownGravity -> n
    android.view.View mShownAnchorView -> p
    android.widget.PopupWindow$OnDismissListener mOnDismissListener -> z
    int mPopupStyleAttr -> d
    boolean mShowTitle -> w
    boolean mHasYOffset -> s
    android.os.Handler mSubMenuHoverHandler -> g
    android.view.ViewTreeObserver mTreeObserver -> y
    android.view.View mAnchorView -> o
    boolean mOverflowOnly -> f
    java.util.List mPendingMenus -> h
    int mYOffset -> u
    boolean mShouldCloseImmediately -> A
    int mLastPosition -> q
    androidx.appcompat.widget.MenuItemHoverListener mMenuItemHoverListener -> l
    android.content.Context mContext -> b
    int mRawDropDownGravity -> m
    boolean mForceShowIcon -> v
    int mPopupStyleRes -> e
    int ITEM_LAYOUT -> B
    int mMenuMaxWidth -> c
    boolean mHasXOffset -> r
    android.view.View$OnAttachStateChangeListener mAttachStateChangeListener -> k
    androidx.appcompat.view.menu.MenuPresenter$Callback mPresenterCallback -> x
    java.util.List mShowingMenus -> i
    android.view.ViewTreeObserver$OnGlobalLayoutListener mGlobalLayoutListener -> j
    int mXOffset -> t
    1:1:int getInitialMenuPosition():0:0 -> <init>
    1:1:void <init>(android.content.Context,android.view.View,int,int,boolean):0 -> <init>
    2:2:void <init>(android.content.Context,android.view.View,int,int,boolean):0:0 -> <init>
    1:1:androidx.appcompat.widget.MenuPopupWindow createPopupWindow():0:0 -> a
    1:1:void showMenu(androidx.appcompat.view.menu.MenuBuilder):0 -> a
    2:2:void showMenu(androidx.appcompat.view.menu.MenuBuilder):0:0 -> a
    3:3:android.view.View findParentViewForSubmenu(androidx.appcompat.view.menu.CascadingMenuPopup$CascadingMenuInfo,androidx.appcompat.view.menu.MenuBuilder):0:0 -> a
    3:3:void showMenu(androidx.appcompat.view.menu.MenuBuilder):0 -> a
    4:4:android.view.MenuItem findMenuItemForSubmenu(androidx.appcompat.view.menu.MenuBuilder,androidx.appcompat.view.menu.MenuBuilder):0:0 -> a
    4:4:android.view.View findParentViewForSubmenu(androidx.appcompat.view.menu.CascadingMenuPopup$CascadingMenuInfo,androidx.appcompat.view.menu.MenuBuilder):0 -> a
    4:4:void showMenu(androidx.appcompat.view.menu.MenuBuilder):0 -> a
    5:5:android.view.View findParentViewForSubmenu(androidx.appcompat.view.menu.CascadingMenuPopup$CascadingMenuInfo,androidx.appcompat.view.menu.MenuBuilder):0:0 -> a
    5:5:void showMenu(androidx.appcompat.view.menu.MenuBuilder):0 -> a
    6:6:void showMenu(androidx.appcompat.view.menu.MenuBuilder):0:0 -> a
    7:7:int getNextMenuPosition(int):0:0 -> a
    7:7:void showMenu(androidx.appcompat.view.menu.MenuBuilder):0 -> a
    8:8:void showMenu(androidx.appcompat.view.menu.MenuBuilder):0:0 -> a
    1:1:int findIndexOfAddedMenu(androidx.appcompat.view.menu.MenuBuilder):0:0 -> onCloseMenu
    1:1:void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean):0 -> onCloseMenu
    2:2:void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean):0:0 -> onCloseMenu
    3:3:int getInitialMenuPosition():0:0 -> onCloseMenu
    3:3:void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean):0 -> onCloseMenu
    4:4:void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean):0:0 -> onCloseMenu
    1:1:void addMenu(androidx.appcompat.view.menu.MenuBuilder):0:0 -> onSubMenuSelected
    1:1:boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder):0 -> onSubMenuSelected
    2:2:boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder):0:0 -> onSubMenuSelected
    1:1:androidx.appcompat.view.menu.MenuAdapter androidx.appcompat.view.menu.MenuPopup.toMenuAdapter(android.widget.ListAdapter):0:0 -> updateMenuView
    1:1:void updateMenuView(boolean):0 -> updateMenuView
    2:2:void updateMenuView(boolean):0:0 -> updateMenuView
androidx.appcompat.view.menu.CascadingMenuPopup$1 -> androidx.appcompat.view.menu.d:
    androidx.appcompat.view.menu.CascadingMenuPopup this$0 -> a
androidx.appcompat.view.menu.CascadingMenuPopup$2 -> androidx.appcompat.view.menu.e:
    androidx.appcompat.view.menu.CascadingMenuPopup this$0 -> a
androidx.appcompat.view.menu.CascadingMenuPopup$3 -> androidx.appcompat.view.menu.g:
    androidx.appcompat.view.menu.CascadingMenuPopup this$0 -> a
androidx.appcompat.view.menu.CascadingMenuPopup$3$1 -> androidx.appcompat.view.menu.f:
    androidx.appcompat.view.menu.MenuBuilder val$menu -> c
    androidx.appcompat.view.menu.CascadingMenuPopup$3 this$1 -> d
    android.view.MenuItem val$item -> b
    androidx.appcompat.view.menu.CascadingMenuPopup$CascadingMenuInfo val$nextInfo -> a
androidx.appcompat.view.menu.CascadingMenuPopup$CascadingMenuInfo -> androidx.appcompat.view.menu.h:
    androidx.appcompat.view.menu.MenuBuilder menu -> b
    int position -> c
    androidx.appcompat.widget.MenuPopupWindow window -> a
androidx.appcompat.view.menu.ExpandedMenuView -> androidx.appcompat.view.menu.ExpandedMenuView:
    int[] TINT_ATTRS -> b
    androidx.appcompat.view.menu.MenuBuilder mMenu -> a
androidx.appcompat.view.menu.ListMenuItemView -> androidx.appcompat.view.menu.ListMenuItemView:
    boolean mPreserveIconSpacing -> m
    boolean mHasListDivider -> o
    int mTextAppearance -> k
    android.graphics.drawable.Drawable mBackground -> j
    android.widget.LinearLayout mContent -> i
    androidx.appcompat.view.menu.MenuItemImpl mItemData -> a
    boolean mForceShowIcon -> q
    android.widget.ImageView mIconView -> b
    android.widget.ImageView mGroupDivider -> h
    android.widget.CheckBox mCheckBox -> e
    android.widget.ImageView mSubMenuArrowView -> g
    android.widget.RadioButton mRadioButton -> c
    android.content.Context mTextAppearanceContext -> l
    android.view.LayoutInflater mInflater -> p
    android.widget.TextView mTitleView -> d
    android.widget.TextView mShortcutView -> f
    android.graphics.drawable.Drawable mSubMenuArrow -> n
    android.view.LayoutInflater getInflater() -> a
    1:1:void addContentView(android.view.View,int):0:0 -> b
    1:1:void addContentView(android.view.View):0 -> b
    1:1:void insertCheckBox():0 -> b
    1:1:void addContentView(android.view.View,int):0:0 -> c
    1:1:void addContentView(android.view.View):0 -> c
    1:1:void insertRadioButton():0 -> c
    1:1:java.lang.CharSequence androidx.appcompat.view.menu.MenuItemImpl.getTitleForItemView(androidx.appcompat.view.menu.MenuView$ItemView):0:0 -> initialize
    1:1:void initialize(androidx.appcompat.view.menu.MenuItemImpl,int):0 -> initialize
    2:2:void initialize(androidx.appcompat.view.menu.MenuItemImpl,int):0:0 -> initialize
    3:3:void setSubMenuArrowVisible(boolean):0:0 -> initialize
    3:3:void initialize(androidx.appcompat.view.menu.MenuItemImpl,int):0 -> initialize
    4:4:void initialize(androidx.appcompat.view.menu.MenuItemImpl,int):0:0 -> initialize
    1:1:void insertIconView():0:0 -> setIcon
    1:1:void setIcon(android.graphics.drawable.Drawable):0 -> setIcon
    2:2:void addContentView(android.view.View,int):0:0 -> setIcon
    2:2:void insertIconView():0 -> setIcon
    2:2:void setIcon(android.graphics.drawable.Drawable):0 -> setIcon
    3:3:void setIcon(android.graphics.drawable.Drawable):0:0 -> setIcon
androidx.appcompat.view.menu.ListMenuPresenter -> androidx.appcompat.view.menu.ListMenuPresenter:
    android.content.Context mContext -> a
    androidx.appcompat.view.menu.MenuBuilder mMenu -> c
    android.view.LayoutInflater mInflater -> b
    int mId -> j
    int mThemeRes -> f
    androidx.appcompat.view.menu.MenuPresenter$Callback mCallback -> h
    int mItemLayoutRes -> g
    int mItemIndexOffset -> e
    androidx.appcompat.view.menu.ExpandedMenuView mMenuView -> d
    androidx.appcompat.view.menu.ListMenuPresenter$MenuAdapter mAdapter -> i
androidx.appcompat.view.menu.ListMenuPresenter$MenuAdapter -> androidx.appcompat.view.menu.j:
    androidx.appcompat.view.menu.ListMenuPresenter this$0 -> b
    int mExpandedIndex -> a
    void findExpandedIndex() -> a
androidx.appcompat.view.menu.MenuAdapter -> androidx.appcompat.view.menu.MenuAdapter:
    android.view.LayoutInflater mInflater -> e
    androidx.appcompat.view.menu.MenuBuilder mAdapterMenu -> a
    int mItemLayoutRes -> f
    int mExpandedIndex -> b
    boolean mForceShowIcon -> c
    boolean mOverflowOnly -> d
    void findExpandedIndex() -> a
androidx.appcompat.view.menu.MenuBuilder -> androidx.appcompat.view.menu.MenuBuilder:
    android.content.Context mContext -> a
    int mDefaultShowAsAction -> l
    boolean mIsActionItemsStale -> k
    java.util.ArrayList mVisibleItems -> g
    boolean mIsClosing -> u
    android.view.View mHeaderView -> p
    int[] sCategoryToOrder -> A
    boolean mPreventDispatchingItemsChanged -> q
    boolean mStructureChangedWhileDispatchPrevented -> s
    java.util.concurrent.CopyOnWriteArrayList mPresenters -> w
    boolean mGroupDividerEnabled -> y
    java.util.ArrayList mActionItems -> i
    boolean mIsVisibleItemsStale -> h
    androidx.appcompat.view.menu.MenuItemImpl mExpandedItem -> x
    android.content.res.Resources mResources -> b
    boolean mShortcutsVisible -> d
    androidx.appcompat.view.menu.MenuBuilder$Callback mCallback -> e
    java.util.ArrayList mItems -> f
    android.view.ContextMenu$ContextMenuInfo mCurrentMenuInfo -> m
    boolean mItemsChangedWhileDispatchPrevented -> r
    boolean mOptionalIconsVisible -> t
    java.lang.CharSequence mHeaderTitle -> n
    java.util.ArrayList mNonActionItems -> j
    boolean mOverrideVisibleItems -> z
    java.util.ArrayList mTempShortcutItemList -> v
    android.graphics.drawable.Drawable mHeaderIcon -> o
    boolean mQwertyMode -> c
    boolean dispatchMenuItemSelected(androidx.appcompat.view.menu.MenuBuilder,android.view.MenuItem) -> a
    1:1:int getOrdering(int):0:0 -> addInternal
    1:1:android.view.MenuItem addInternal(int,int,int,java.lang.CharSequence):0 -> addInternal
    2:2:android.view.MenuItem addInternal(int,int,int,java.lang.CharSequence):0:0 -> addInternal
    3:3:androidx.appcompat.view.menu.MenuItemImpl createNewMenuItem(int,int,int,int,java.lang.CharSequence,int):0:0 -> addInternal
    3:3:android.view.MenuItem addInternal(int,int,int,java.lang.CharSequence):0 -> addInternal
    4:4:android.view.MenuItem addInternal(int,int,int,java.lang.CharSequence):0:0 -> addInternal
    5:5:int findInsertIndex(java.util.ArrayList,int):0:0 -> addInternal
    5:5:android.view.MenuItem addInternal(int,int,int,java.lang.CharSequence):0 -> addInternal
    6:6:android.view.MenuItem addInternal(int,int,int,java.lang.CharSequence):0:0 -> addInternal
    7:7:int getOrdering(int):0:0 -> addInternal
    7:7:android.view.MenuItem addInternal(int,int,int,java.lang.CharSequence):0 -> addInternal
    androidx.appcompat.view.menu.MenuItemImpl findItemWithShortcutForKey(int,android.view.KeyEvent) -> b
    void findItemsWithShortcutForKey(java.util.List,int,android.view.KeyEvent) -> c
    boolean getOptionalIconsVisible() -> d
    void onItemActionRequestChanged(androidx.appcompat.view.menu.MenuItemImpl) -> e
    void onItemVisibleChanged(androidx.appcompat.view.menu.MenuItemImpl) -> f
    void removeItemAtInt(int,boolean) -> g
    void setExclusiveItemChecked(android.view.MenuItem) -> h
    1:1:android.content.res.Resources getResources():0:0 -> i
    1:1:void setHeaderInternal(int,java.lang.CharSequence,int,android.graphics.drawable.Drawable,android.view.View):0 -> i
    2:2:void setHeaderInternal(int,java.lang.CharSequence,int,android.graphics.drawable.Drawable,android.view.View):0:0 -> i
    void setShortcutsVisibleInner(boolean) -> j
    1:1:void dispatchPresenterUpdate(boolean):0:0 -> onItemsChanged
    1:1:void onItemsChanged(boolean):0 -> onItemsChanged
    2:2:void onItemsChanged(boolean):0:0 -> onItemsChanged
    1:1:boolean dispatchSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder,androidx.appcompat.view.menu.MenuPresenter):0:0 -> performItemAction
    1:1:boolean performItemAction(android.view.MenuItem,androidx.appcompat.view.menu.MenuPresenter,int):0 -> performItemAction
    1:1:void dispatchRestoreInstanceState(android.os.Bundle):0:0 -> restorePresenterStates
    1:1:void restorePresenterStates(android.os.Bundle):0 -> restorePresenterStates
    1:1:void dispatchSaveInstanceState(android.os.Bundle):0:0 -> savePresenterStates
    1:1:void savePresenterStates(android.os.Bundle):0 -> savePresenterStates
androidx.appcompat.view.menu.MenuDialogHelper -> androidx.appcompat.view.menu.k:
    androidx.appcompat.app.AlertDialog mDialog -> b
    androidx.appcompat.view.menu.MenuBuilder mMenu -> a
    androidx.appcompat.view.menu.ListMenuPresenter mPresenter -> c
    1:1:void dismiss():0:0 -> onCloseMenu
    1:1:void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean):0 -> onCloseMenu
androidx.appcompat.view.menu.MenuItemImpl -> androidx.appcompat.view.menu.MenuItemImpl:
    char mShortcutNumericChar -> h
    char mShortcutAlphabeticChar -> j
    android.content.res.ColorStateList mIconTintList -> t
    android.graphics.PorterDuff$Mode mIconTintMode -> u
    int mOrdering -> d
    java.lang.CharSequence mTitleCondensed -> f
    boolean mHasIconTintMode -> w
    int mGroup -> b
    androidx.appcompat.view.menu.SubMenuBuilder mSubMenu -> o
    android.view.MenuItem$OnMenuItemClickListener mClickListener -> q
    android.content.Intent mIntent -> g
    android.view.ContextMenu$ContextMenuInfo mMenuInfo -> E
    java.lang.CharSequence mTooltipText -> s
    int mFlags -> y
    android.graphics.drawable.Drawable mIconDrawable -> l
    int mIconResId -> m
    int mShortcutAlphabeticModifiers -> k
    int mShortcutNumericModifiers -> i
    java.lang.CharSequence mTitle -> e
    boolean mHasIconTint -> v
    boolean mNeedToApplyIconTint -> x
    int mCategoryOrder -> c
    android.view.MenuItem$OnActionExpandListener mOnActionExpandListener -> C
    int mId -> a
    int mShowAsAction -> z
    java.lang.CharSequence mContentDescription -> r
    android.view.View mActionView -> A
    androidx.appcompat.view.menu.MenuBuilder mMenu -> n
    androidx.core.view.ActionProvider mActionProvider -> B
    java.lang.Runnable mItemCallback -> p
    boolean mIsActionViewExpanded -> D
    void appendModifier(java.lang.StringBuilder,int,int,java.lang.String) -> a
    android.graphics.drawable.Drawable applyIconTintIfNecessary(android.graphics.drawable.Drawable) -> b
    char getShortcut() -> c
    java.lang.String getShortcutLabel() -> d
    void setCheckedInt(boolean) -> e
    void setMenuInfo(android.view.ContextMenu$ContextMenuInfo) -> f
    boolean setVisibleInt(boolean) -> g
    boolean shouldShowShortcut() -> h
androidx.appcompat.view.menu.MenuItemImpl$1 -> androidx.appcompat.view.menu.l:
    androidx.appcompat.view.menu.MenuItemImpl this$0 -> a
androidx.appcompat.view.menu.MenuItemWrapperICS -> androidx.appcompat.view.menu.MenuItemWrapperICS:
    java.lang.reflect.Method mSetExclusiveCheckableMethod -> e
    androidx.appcompat.view.menu.MenuItemWrapperICS$ActionProviderWrapper createActionProviderWrapper(android.view.ActionProvider) -> f
    1:1:android.view.View androidx.appcompat.view.menu.MenuItemWrapperICS$CollapsibleActionViewWrapper.getWrappedView():0:0 -> getActionView
    1:1:android.view.View getActionView():0 -> getActionView
androidx.appcompat.view.menu.MenuItemWrapperICS$ActionProviderWrapper -> androidx.appcompat.view.menu.m:
    android.view.ActionProvider mInner -> d
    androidx.appcompat.view.menu.MenuItemWrapperICS this$0 -> e
androidx.appcompat.view.menu.MenuItemWrapperICS$CollapsibleActionViewWrapper -> androidx.appcompat.view.menu.n:
    android.view.CollapsibleActionView mWrappedView -> a
androidx.appcompat.view.menu.MenuItemWrapperICS$OnActionExpandListenerWrapper -> androidx.appcompat.view.menu.o:
    androidx.appcompat.view.menu.MenuItemWrapperICS this$0 -> b
androidx.appcompat.view.menu.MenuItemWrapperICS$OnMenuItemClickListenerWrapper -> androidx.appcompat.view.menu.p:
    androidx.appcompat.view.menu.MenuItemWrapperICS this$0 -> b
androidx.appcompat.view.menu.MenuItemWrapperJB -> androidx.appcompat.view.menu.r:
    androidx.appcompat.view.menu.MenuItemWrapperICS$ActionProviderWrapper createActionProviderWrapper(android.view.ActionProvider) -> f
androidx.appcompat.view.menu.MenuItemWrapperJB$ActionProviderWrapperJB -> androidx.appcompat.view.menu.q:
    androidx.core.view.ActionProvider$VisibilityListener mListener -> f
androidx.appcompat.view.menu.MenuPopup -> androidx.appcompat.view.menu.s:
    android.graphics.Rect mEpicenterBounds -> a
    1:1:androidx.appcompat.view.menu.MenuAdapter toMenuAdapter(android.widget.ListAdapter):0:0 -> onItemClick
    1:1:void onItemClick(android.widget.AdapterView,android.view.View,int,long):0 -> onItemClick
    2:2:void onItemClick(android.widget.AdapterView,android.view.View,int,long):0:0 -> onItemClick
androidx.appcompat.view.menu.MenuPopupHelper -> androidx.appcompat.view.menu.MenuPopupHelper:
    android.content.Context mContext -> a
    androidx.appcompat.view.menu.MenuBuilder mMenu -> b
    int mDropDownGravity -> g
    int mPopupStyleAttr -> d
    android.widget.PopupWindow$OnDismissListener mOnDismissListener -> k
    int mPopupStyleRes -> e
    boolean mForceShowIcon -> h
    androidx.appcompat.view.menu.MenuPresenter$Callback mPresenterCallback -> i
    android.widget.PopupWindow$OnDismissListener mInternalOnDismissListener -> l
    boolean mOverflowOnly -> c
    android.view.View mAnchorView -> f
    androidx.appcompat.view.menu.MenuPopup mPopup -> j
    void showPopup(int,int,boolean,boolean) -> a
    1:1:androidx.appcompat.view.menu.MenuPopup createPopup():0:0 -> getPopup
    1:1:androidx.appcompat.view.menu.MenuPopup getPopup():0 -> getPopup
    2:2:androidx.appcompat.view.menu.MenuPopup getPopup():0:0 -> getPopup
androidx.appcompat.view.menu.MenuPopupHelper$1 -> androidx.appcompat.view.menu.t:
    androidx.appcompat.view.menu.MenuPopupHelper this$0 -> a
androidx.appcompat.view.menu.MenuWrapperICS -> androidx.appcompat.view.menu.u:
androidx.appcompat.view.menu.StandardMenuPopup -> androidx.appcompat.view.menu.x:
    androidx.appcompat.view.menu.MenuPresenter$Callback mPresenterCallback -> o
    androidx.appcompat.view.menu.MenuBuilder mMenu -> c
    android.content.Context mContext -> b
    int mPopupStyleRes -> h
    int mPopupMaxWidth -> f
    boolean mShowTitle -> u
    int mPopupStyleAttr -> g
    android.view.ViewTreeObserver mTreeObserver -> p
    boolean mWasDismissed -> q
    boolean mHasContentWidth -> r
    android.view.View mAnchorView -> m
    androidx.appcompat.widget.MenuPopupWindow mPopup -> i
    android.view.View$OnAttachStateChangeListener mAttachStateChangeListener -> k
    android.view.View mShownAnchorView -> n
    int ITEM_LAYOUT -> v
    boolean mOverflowOnly -> e
    android.view.ViewTreeObserver$OnGlobalLayoutListener mGlobalLayoutListener -> j
    int mDropDownGravity -> t
    android.widget.PopupWindow$OnDismissListener mOnDismissListener -> l
    androidx.appcompat.view.menu.MenuAdapter mAdapter -> d
    int mContentWidth -> s
    1:1:boolean tryShow():0:0 -> show
    1:1:void show():0 -> show
    2:2:void show():0:0 -> show
androidx.appcompat.view.menu.StandardMenuPopup$1 -> androidx.appcompat.view.menu.v:
    androidx.appcompat.view.menu.StandardMenuPopup this$0 -> a
androidx.appcompat.view.menu.StandardMenuPopup$2 -> androidx.appcompat.view.menu.w:
    androidx.appcompat.view.menu.StandardMenuPopup this$0 -> a
androidx.appcompat.view.menu.SubMenuBuilder -> androidx.appcompat.view.menu.SubMenuBuilder:
    androidx.appcompat.view.menu.MenuBuilder mParentMenu -> B
    androidx.appcompat.view.menu.MenuItemImpl mItem -> C
    boolean dispatchMenuItemSelected(androidx.appcompat.view.menu.MenuBuilder,android.view.MenuItem) -> a
androidx.appcompat.view.menu.SubMenuWrapperICS -> androidx.appcompat.view.menu.y:
    1:1:androidx.core.internal.view.SupportSubMenu getWrappedObject():0:0 -> clearHeader
    1:1:void clearHeader():0 -> clearHeader
    2:2:void clearHeader():0:0 -> clearHeader
    1:1:androidx.core.internal.view.SupportSubMenu getWrappedObject():0:0 -> getItem
    1:1:android.view.MenuItem getItem():0 -> getItem
    2:2:android.view.MenuItem getItem():0:0 -> getItem
    1:1:androidx.core.internal.view.SupportSubMenu getWrappedObject():0:0 -> getWrappedObject
    1:1:java.lang.Object getWrappedObject():0 -> getWrappedObject
    1:1:androidx.core.internal.view.SupportSubMenu getWrappedObject():0:0 -> setHeaderIcon
    1:1:android.view.SubMenu setHeaderIcon(int):0 -> setHeaderIcon
    2:2:android.view.SubMenu setHeaderIcon(int):0:0 -> setHeaderIcon
    3:3:androidx.core.internal.view.SupportSubMenu getWrappedObject():0:0 -> setHeaderIcon
    3:3:android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable):0 -> setHeaderIcon
    4:4:android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable):0:0 -> setHeaderIcon
    1:1:androidx.core.internal.view.SupportSubMenu getWrappedObject():0:0 -> setHeaderTitle
    1:1:android.view.SubMenu setHeaderTitle(int):0 -> setHeaderTitle
    2:2:android.view.SubMenu setHeaderTitle(int):0:0 -> setHeaderTitle
    3:3:androidx.core.internal.view.SupportSubMenu getWrappedObject():0:0 -> setHeaderTitle
    3:3:android.view.SubMenu setHeaderTitle(java.lang.CharSequence):0 -> setHeaderTitle
    4:4:android.view.SubMenu setHeaderTitle(java.lang.CharSequence):0:0 -> setHeaderTitle
    1:1:androidx.core.internal.view.SupportSubMenu getWrappedObject():0:0 -> setHeaderView
    1:1:android.view.SubMenu setHeaderView(android.view.View):0 -> setHeaderView
    2:2:android.view.SubMenu setHeaderView(android.view.View):0:0 -> setHeaderView
    1:1:androidx.core.internal.view.SupportSubMenu getWrappedObject():0:0 -> setIcon
    1:1:android.view.SubMenu setIcon(int):0 -> setIcon
    2:2:android.view.SubMenu setIcon(int):0:0 -> setIcon
    3:3:androidx.core.internal.view.SupportSubMenu getWrappedObject():0:0 -> setIcon
    3:3:android.view.SubMenu setIcon(android.graphics.drawable.Drawable):0 -> setIcon
    4:4:android.view.SubMenu setIcon(android.graphics.drawable.Drawable):0:0 -> setIcon
androidx.appcompat.widget.AbsActionBarView -> androidx.appcompat.widget.b:
    boolean mEatingTouch -> a
    boolean mEatingHover -> b
    void access$001(androidx.appcompat.widget.AbsActionBarView,int) -> a
    void access$101(androidx.appcompat.widget.AbsActionBarView,int) -> b
    1:1:boolean androidx.appcompat.widget.ActionMenuPresenter.isOverflowMenuShowPending():0:0 -> isOverflowMenuShowPending
    1:1:boolean isOverflowMenuShowPending():0 -> isOverflowMenuShowPending
androidx.appcompat.widget.AbsActionBarView$1 -> androidx.appcompat.widget.a:
    androidx.appcompat.widget.AbsActionBarView this$0 -> a
androidx.appcompat.widget.AbsActionBarView$VisibilityAnimListener -> androidx.appcompat.widget.AbsActionBarView$VisibilityAnimListener:
    boolean mCanceled -> a
    int mFinalVisibility -> b
    androidx.appcompat.widget.AbsActionBarView this$0 -> c
androidx.appcompat.widget.ActionBarBackgroundDrawable -> androidx.appcompat.widget.c:
    androidx.appcompat.widget.ActionBarContainer mContainer -> a
androidx.appcompat.widget.ActionBarContainer -> androidx.appcompat.widget.ActionBarContainer:
    android.graphics.drawable.Drawable mBackground -> e
    android.graphics.drawable.Drawable mStackedBackground -> f
    android.graphics.drawable.Drawable mSplitBackground -> g
    boolean mIsStacked -> i
    int mHeight -> j
    android.view.View mActionBarView -> c
    android.view.View mTabContainer -> b
    boolean mIsSplit -> h
    boolean mIsTransitioning -> a
    android.view.View mContextView -> d
    int getMeasuredHeightWithMargins(android.view.View) -> a
    boolean isCollapsed(android.view.View) -> b
androidx.appcompat.widget.ActionBarContextView -> androidx.appcompat.widget.ActionBarContextView:
    int mCloseItemLayout -> m
    int mTitleStyleRes -> j
    int mSubtitleStyleRes -> k
    java.lang.CharSequence mTitle -> c
    boolean mTitleOptional -> l
    java.lang.CharSequence mSubtitle -> d
    android.widget.TextView mSubtitleView -> i
    android.widget.LinearLayout mTitleLayout -> g
    android.widget.TextView mTitleView -> h
    android.view.View mClose -> e
    android.view.View mCustomView -> f
    void initTitle() -> c
    1:1:boolean androidx.appcompat.widget.ActionMenuPresenter.hideSubMenus():0:0 -> onDetachedFromWindow
    1:1:void onDetachedFromWindow():0 -> onDetachedFromWindow
androidx.appcompat.widget.ActionBarContextView$1 -> androidx.appcompat.widget.d:
    androidx.appcompat.view.ActionMode val$mode -> a
androidx.appcompat.widget.ActionBarOverlayLayout -> androidx.appcompat.widget.ActionBarOverlayLayout:
    int mHideOnContentScrollReference -> l
    boolean mHasNonEmbeddedTabs -> i
    android.view.ViewPropertyAnimator mCurrentActionBarTopAnimator -> w
    boolean mAnimatingForFling -> k
    java.lang.Runnable mAddActionBarHideOffset -> z
    int mWindowVisibility -> b
    android.graphics.Rect mContentInsets -> p
    androidx.appcompat.widget.ActionBarOverlayLayout$ActionBarVisibilityCallback mActionBarVisibilityCallback -> u
    android.graphics.Rect mBaseContentInsets -> n
    android.widget.OverScroller mFlingEstimator -> v
    boolean mOverlayMode -> h
    android.graphics.Rect mLastInnerInsets -> t
    android.graphics.Rect mLastBaseInnerInsets -> r
    androidx.core.view.NestedScrollingParentHelper mParentHelper -> A
    android.graphics.drawable.Drawable mWindowContentOverlay -> f
    int mLastSystemUiVisibility -> m
    java.lang.Runnable mRemoveActionBarHideOffset -> y
    boolean mHideOnContentScroll -> j
    androidx.appcompat.widget.ContentFrameLayout mContent -> c
    int mActionBarHeight -> a
    android.graphics.Rect mLastBaseContentInsets -> o
    int[] ATTRS -> B
    android.animation.AnimatorListenerAdapter mTopAnimatorListener -> x
    androidx.appcompat.widget.DecorToolbar mDecorToolbar -> e
    boolean mIgnoreWindowContentOverlay -> g
    android.graphics.Rect mInnerInsets -> s
    androidx.appcompat.widget.ActionBarContainer mActionBarTop -> d
    android.graphics.Rect mBaseInnerInsets -> q
    boolean applyInsets(android.view.View,android.graphics.Rect,boolean,boolean,boolean,boolean) -> a
    void haltActionBarHideOffsetAnimations() -> b
    void init(android.content.Context) -> c
    1:1:androidx.appcompat.widget.DecorToolbar getDecorToolbar(android.view.View):0:0 -> d
    1:1:void pullChildren():0 -> d
    2:2:void pullChildren():0:0 -> d
    3:3:androidx.appcompat.widget.DecorToolbar getDecorToolbar(android.view.View):0:0 -> d
    3:3:void pullChildren():0 -> d
    1:1:boolean shouldHideActionBarOnFling(float,float):0:0 -> onNestedFling
    1:1:boolean onNestedFling(android.view.View,float,float,boolean):0 -> onNestedFling
    2:2:void addActionBarHideOffset():0:0 -> onNestedFling
    2:2:boolean onNestedFling(android.view.View,float,float,boolean):0 -> onNestedFling
    3:3:void removeActionBarHideOffset():0:0 -> onNestedFling
    3:3:boolean onNestedFling(android.view.View,float,float,boolean):0 -> onNestedFling
    4:4:boolean onNestedFling(android.view.View,float,float,boolean):0:0 -> onNestedFling
    1:1:void postRemoveActionBarHideOffset():0:0 -> onStopNestedScroll
    1:1:void onStopNestedScroll(android.view.View):0 -> onStopNestedScroll
    2:2:void postAddActionBarHideOffset():0:0 -> onStopNestedScroll
    2:2:void onStopNestedScroll(android.view.View):0 -> onStopNestedScroll
    3:3:void onStopNestedScroll(android.view.View):0:0 -> onStopNestedScroll
androidx.appcompat.widget.ActionBarOverlayLayout$1 -> androidx.appcompat.widget.e:
    androidx.appcompat.widget.ActionBarOverlayLayout this$0 -> a
androidx.appcompat.widget.ActionBarOverlayLayout$2 -> androidx.appcompat.widget.f:
    androidx.appcompat.widget.ActionBarOverlayLayout this$0 -> a
androidx.appcompat.widget.ActionBarOverlayLayout$3 -> androidx.appcompat.widget.g:
    androidx.appcompat.widget.ActionBarOverlayLayout this$0 -> a
androidx.appcompat.widget.ActionMenuPresenter -> androidx.appcompat.widget.p:
    boolean mExpandedActionViewsExclusive -> m
    int mMinCellSize -> n
    androidx.appcompat.widget.ActionMenuPresenter$ActionButtonSubmenu mActionButtonPopup -> r
    androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton mOverflowButton -> e
    int mMaxItems -> l
    android.util.SparseBooleanArray mActionButtonGroups -> o
    android.graphics.drawable.Drawable mPendingOverflowIcon -> f
    boolean mReserveOverflowSet -> i
    int mWidthLimit -> j
    int mActionItemWidthLimit -> k
    androidx.appcompat.widget.ActionMenuPresenter$OverflowPopup mOverflowPopup -> q
    android.view.View mScrapActionButtonView -> p
    androidx.appcompat.widget.ActionMenuPresenter$OpenOverflowRunnable mPostedOpenRunnable -> s
    androidx.appcompat.widget.ActionMenuPresenter$PopupPresenterCallback mPopupPresenterCallback -> u
    int mOpenSubMenuId -> v
    boolean mPendingOverflowIconSet -> g
    boolean mReserveOverflow -> h
    androidx.appcompat.widget.ActionMenuPresenter$ActionMenuPopupCallback mPopupCallback -> t
    androidx.appcompat.view.menu.MenuBuilder access$000(androidx.appcompat.widget.ActionMenuPresenter) -> a
    androidx.appcompat.view.menu.MenuBuilder access$100(androidx.appcompat.widget.ActionMenuPresenter) -> b
    androidx.appcompat.view.menu.MenuView access$200(androidx.appcompat.widget.ActionMenuPresenter) -> c
    androidx.appcompat.view.menu.MenuBuilder access$300(androidx.appcompat.widget.ActionMenuPresenter) -> d
    1:1:boolean hideSubMenus():0:0 -> dismissPopupMenus
    1:1:boolean dismissPopupMenus():0 -> dismissPopupMenus
    androidx.appcompat.view.menu.MenuBuilder access$400(androidx.appcompat.widget.ActionMenuPresenter) -> e
    androidx.appcompat.view.menu.MenuView access$500(androidx.appcompat.widget.ActionMenuPresenter) -> f
    1:1:android.view.View findViewForItem(android.view.MenuItem):0:0 -> onSubMenuSelected
    1:1:boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder):0 -> onSubMenuSelected
    2:2:boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder):0:0 -> onSubMenuSelected
androidx.appcompat.widget.ActionMenuPresenter$ActionButtonSubmenu -> androidx.appcompat.widget.h:
    androidx.appcompat.widget.ActionMenuPresenter this$0 -> m
androidx.appcompat.widget.ActionMenuPresenter$ActionMenuPopupCallback -> androidx.appcompat.widget.i:
    androidx.appcompat.widget.ActionMenuPresenter this$0 -> a
androidx.appcompat.widget.ActionMenuPresenter$OpenOverflowRunnable -> androidx.appcompat.widget.j:
    androidx.appcompat.widget.ActionMenuPresenter this$0 -> b
    androidx.appcompat.widget.ActionMenuPresenter$OverflowPopup mPopup -> a
androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton -> androidx.appcompat.widget.l:
    androidx.appcompat.widget.ActionMenuPresenter this$0 -> c
androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton$1 -> androidx.appcompat.widget.k:
    androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton this$1 -> j
androidx.appcompat.widget.ActionMenuPresenter$OverflowPopup -> androidx.appcompat.widget.m:
    androidx.appcompat.widget.ActionMenuPresenter this$0 -> m
androidx.appcompat.widget.ActionMenuPresenter$PopupPresenterCallback -> androidx.appcompat.widget.n:
    androidx.appcompat.widget.ActionMenuPresenter this$0 -> a
androidx.appcompat.widget.ActionMenuPresenter$SavedState -> androidx.appcompat.widget.ActionMenuPresenter$SavedState:
    int openSubMenuId -> a
androidx.appcompat.widget.ActionMenuPresenter$SavedState$1 -> androidx.appcompat.widget.o:
    1:1:androidx.appcompat.widget.ActionMenuPresenter$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.appcompat.widget.ActionMenuPresenter$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.appcompat.widget.ActionMenuView -> androidx.appcompat.widget.ActionMenuView:
    android.content.Context mPopupContext -> q
    androidx.appcompat.view.menu.MenuBuilder$Callback mMenuBuilderCallback -> v
    int mGeneratedItemPadding -> z
    int mFormatItemsWidth -> x
    androidx.appcompat.view.menu.MenuBuilder mMenu -> p
    androidx.appcompat.widget.ActionMenuPresenter mPresenter -> t
    androidx.appcompat.view.menu.MenuPresenter$Callback mActionMenuPresenterCallback -> u
    int mMinCellSize -> y
    androidx.appcompat.widget.ActionMenuView$OnMenuItemClickListener mOnMenuItemClickListener -> A
    boolean mFormatItems -> w
    int mPopupTheme -> r
    boolean mReserveOverflow -> s
    int measureChildForCells(android.view.View,int,int,int,int) -> h
    1:1:boolean androidx.appcompat.widget.ActionMenuPresenter.isOverflowMenuShowPending():0:0 -> isOverflowMenuShowPending
    1:1:boolean isOverflowMenuShowPending():0 -> isOverflowMenuShowPending
    1:1:void onMeasureExactFormat(int,int):0:0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:void onMeasure(int,int):0:0 -> onMeasure
androidx.appcompat.widget.ActionMenuView$ActionMenuPresenterCallback -> androidx.appcompat.widget.q:
androidx.appcompat.widget.ActionMenuView$LayoutParams -> androidx.appcompat.widget.ActionMenuView$LayoutParams:
    boolean expanded -> a
androidx.appcompat.widget.ActionMenuView$MenuBuilderCallback -> androidx.appcompat.widget.r:
    androidx.appcompat.widget.ActionMenuView this$0 -> a
androidx.appcompat.widget.ActivityChooserModel -> androidx.appcompat.widget.u:
    boolean mCanReadHistoricalData -> i
    androidx.appcompat.widget.ActivityChooserModel$ActivitySorter mActivitySorter -> g
    boolean mReadShareHistoryCalled -> j
    int mHistoryMaxSize -> h
    boolean mHistoricalRecordsChanged -> k
    java.util.Map sDataModelRegistry -> p
    boolean mReloadActivities -> l
    java.lang.String LOG_TAG -> n
    java.lang.Object sRegistryLock -> o
    android.content.Context mContext -> d
    java.util.List mActivities -> b
    android.content.Intent mIntent -> f
    java.util.List mHistoricalRecords -> c
    java.lang.Object mInstanceLock -> a
    androidx.appcompat.widget.ActivityChooserModel$OnChooseActivityListener mActivityChoserModelPolicy -> m
    java.lang.String mHistoryFileName -> e
    1:1:void persistHistoricalDataIfNeeded():0:0 -> a
    1:1:boolean addHistoricalRecord(androidx.appcompat.widget.ActivityChooserModel$HistoricalRecord):0 -> a
    2:2:boolean addHistoricalRecord(androidx.appcompat.widget.ActivityChooserModel$HistoricalRecord):0:0 -> a
    3:3:void persistHistoricalDataIfNeeded():0:0 -> a
    3:3:boolean addHistoricalRecord(androidx.appcompat.widget.ActivityChooserModel$HistoricalRecord):0 -> a
    1:1:boolean loadActivitiesIfNeeded():0:0 -> b
    1:1:void ensureConsistentState():0 -> b
    2:2:boolean readHistoricalDataIfNeeded():0:0 -> b
    2:2:void ensureConsistentState():0 -> b
    3:3:void readHistoricalDataImpl():0:0 -> b
    3:3:boolean readHistoricalDataIfNeeded():0 -> b
    3:3:void ensureConsistentState():0 -> b
    4:4:void ensureConsistentState():0:0 -> b
    void pruneExcessiveHistoricalRecordsIfNeeded() -> c
    boolean sortActivitiesIfNeeded() -> d
androidx.appcompat.widget.ActivityChooserModel$DefaultSorter -> androidx.appcompat.widget.s:
    java.util.Map mPackageNameToActivityMap -> a
androidx.appcompat.widget.ActivityChooserModel$PersistHistoryAsyncTask -> androidx.appcompat.widget.t:
    androidx.appcompat.widget.ActivityChooserModel this$0 -> a
    1:1:java.lang.Void doInBackground(java.lang.Object[]):0:0 -> doInBackground
    1:1:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
androidx.appcompat.widget.ActivityChooserView -> androidx.appcompat.widget.ActivityChooserView:
    android.graphics.drawable.Drawable mActivityChooserContentBackground -> d
    android.widget.FrameLayout mDefaultActivityButton -> g
    androidx.core.view.ActionProvider mProvider -> j
    boolean mIsSelectingDefaultActivity -> o
    android.widget.FrameLayout mExpandActivityOverflowButton -> e
    android.widget.PopupWindow$OnDismissListener mOnDismissListener -> n
    int mListPopupMaxWidth -> i
    android.database.DataSetObserver mModelDataSetObserver -> k
    boolean mIsAttachedToWindow -> q
    androidx.appcompat.widget.ActivityChooserView$ActivityChooserViewAdapter mAdapter -> a
    android.widget.ImageView mDefaultActivityButtonImage -> h
    androidx.appcompat.widget.ListPopupWindow mListPopupWindow -> m
    android.widget.ImageView mExpandActivityOverflowButtonImage -> f
    androidx.appcompat.widget.ActivityChooserView$Callbacks mCallbacks -> b
    android.view.View mActivityChooserContent -> c
    android.view.ViewTreeObserver$OnGlobalLayoutListener mOnGlobalLayoutListener -> l
    int mDefaultActionButtonContentDescription -> r
    int mInitialActivityCount -> p
    androidx.appcompat.widget.ListPopupWindow getListPopupWindow() -> a
    void showPopupUnchecked(int) -> b
    void updateAppearance() -> c
androidx.appcompat.widget.ActivityChooserView$1 -> androidx.appcompat.widget.v:
    androidx.appcompat.widget.ActivityChooserView this$0 -> a
androidx.appcompat.widget.ActivityChooserView$2 -> androidx.appcompat.widget.w:
    androidx.appcompat.widget.ActivityChooserView this$0 -> a
androidx.appcompat.widget.ActivityChooserView$3 -> androidx.appcompat.widget.x:
androidx.appcompat.widget.ActivityChooserView$4 -> androidx.appcompat.widget.y:
    androidx.appcompat.widget.ActivityChooserView this$0 -> j
androidx.appcompat.widget.ActivityChooserView$5 -> androidx.appcompat.widget.z:
    androidx.appcompat.widget.ActivityChooserView this$0 -> a
androidx.appcompat.widget.ActivityChooserView$ActivityChooserViewAdapter -> androidx.appcompat.widget.a0:
    androidx.appcompat.widget.ActivityChooserView this$0 -> f
    boolean mShowFooterView -> e
    androidx.appcompat.widget.ActivityChooserModel mDataModel -> a
    int mMaxActivityCount -> b
    boolean mShowDefaultActivity -> c
    boolean mHighlightDefaultActivity -> d
    1:1:androidx.appcompat.widget.ActivityChooserModel getDataModel():0:0 -> setDataModel
    1:1:void setDataModel(androidx.appcompat.widget.ActivityChooserModel):0 -> setDataModel
    2:2:void setDataModel(androidx.appcompat.widget.ActivityChooserModel):0:0 -> setDataModel
androidx.appcompat.widget.ActivityChooserView$Callbacks -> androidx.appcompat.widget.b0:
    androidx.appcompat.widget.ActivityChooserView this$0 -> a
    1:1:void notifyOnDismissListener():0:0 -> onDismiss
    1:1:void onDismiss():0 -> onDismiss
    2:2:void onDismiss():0:0 -> onDismiss
androidx.appcompat.widget.ActivityChooserView$InnerLayout -> androidx.appcompat.widget.ActivityChooserView$InnerLayout:
    int[] TINT_ATTRS -> a
androidx.appcompat.widget.AlertDialogLayout -> androidx.appcompat.widget.AlertDialogLayout:
    int resolveMinimumHeight(android.view.View) -> h
    1:1:void setChildFrame(android.view.View,int,int,int,int):0:0 -> onLayout
    1:1:void onLayout(boolean,int,int,int,int):0 -> onLayout
    2:2:void onLayout(boolean,int,int,int,int):0:0 -> onLayout
    1:1:boolean tryOnMeasure(int,int):0:0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:void forceUniformWidth(int,int):0:0 -> onMeasure
    2:2:boolean tryOnMeasure(int,int):0 -> onMeasure
    2:2:void onMeasure(int,int):0 -> onMeasure
    3:3:void onMeasure(int,int):0:0 -> onMeasure
androidx.appcompat.widget.AppCompatAutoCompleteTextView -> androidx.appcompat.widget.AppCompatAutoCompleteTextView:
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> a
    int[] TINT_ATTRS -> c
    androidx.appcompat.widget.AppCompatTextHelper mTextHelper -> b
androidx.appcompat.widget.AppCompatBackgroundHelper -> androidx.appcompat.widget.c0:
    androidx.appcompat.widget.TintInfo mTmpInfo -> f
    androidx.appcompat.widget.TintInfo mInternalBackgroundTint -> d
    androidx.appcompat.widget.TintInfo mBackgroundTint -> e
    android.view.View mView -> a
    androidx.appcompat.widget.AppCompatDrawableManager mDrawableManager -> b
    int mBackgroundResId -> c
    1:1:boolean shouldApplyFrameworkTintUsingColorFilter():0:0 -> a
    1:1:void applySupportBackgroundTint():0 -> a
    2:2:boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable):0:0 -> a
    2:2:void applySupportBackgroundTint():0 -> a
    3:3:void androidx.appcompat.widget.TintInfo.clear():0:0 -> a
    3:3:boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable):0 -> a
    3:3:void applySupportBackgroundTint():0 -> a
    4:4:boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable):0:0 -> a
    4:4:void applySupportBackgroundTint():0 -> a
    5:5:void applySupportBackgroundTint():0:0 -> a
    android.content.res.ColorStateList getSupportBackgroundTintList() -> b
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode() -> c
    void loadFromAttributes(android.util.AttributeSet,int) -> d
    void onSetBackgroundDrawable(android.graphics.drawable.Drawable) -> e
    void onSetBackgroundResource(int) -> f
    void setInternalBackgroundTint(android.content.res.ColorStateList) -> g
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> h
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> i
androidx.appcompat.widget.AppCompatButton -> androidx.appcompat.widget.AppCompatButton:
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> a
    androidx.appcompat.widget.AppCompatTextHelper mTextHelper -> b
androidx.appcompat.widget.AppCompatCheckBox -> androidx.appcompat.widget.AppCompatCheckBox:
    androidx.appcompat.widget.AppCompatTextHelper mTextHelper -> b
    androidx.appcompat.widget.AppCompatCompoundButtonHelper mCompoundButtonHelper -> a
androidx.appcompat.widget.AppCompatCheckedTextView -> androidx.appcompat.widget.AppCompatCheckedTextView:
    int[] TINT_ATTRS -> b
    androidx.appcompat.widget.AppCompatTextHelper mTextHelper -> a
androidx.appcompat.widget.AppCompatCompoundButtonHelper -> androidx.appcompat.widget.d0:
    android.content.res.ColorStateList mButtonTintList -> b
    boolean mHasButtonTintMode -> e
    boolean mSkipNextApply -> f
    android.widget.CompoundButton mView -> a
    android.graphics.PorterDuff$Mode mButtonTintMode -> c
    boolean mHasButtonTint -> d
    void applyButtonTint() -> a
    android.content.res.ColorStateList getSupportButtonTintList() -> b
    android.graphics.PorterDuff$Mode getSupportButtonTintMode() -> c
    void loadFromAttributes(android.util.AttributeSet,int) -> d
    void onSetButtonDrawable() -> e
    void setSupportButtonTintList(android.content.res.ColorStateList) -> f
    void setSupportButtonTintMode(android.graphics.PorterDuff$Mode) -> g
androidx.appcompat.widget.AppCompatDrawableManager -> androidx.appcompat.widget.AppCompatDrawableManager:
    androidx.appcompat.widget.AppCompatDrawableManager$ColorFilterLruCache COLOR_FILTER_CACHE -> i
    androidx.collection.SparseArrayCompat mKnownDrawableIdTags -> c
    android.util.TypedValue mTypedValue -> e
    androidx.appcompat.widget.AppCompatDrawableManager INSTANCE -> h
    android.graphics.PorterDuff$Mode DEFAULT_MODE -> g
    int[] TINT_COLOR_CONTROL_STATE_LIST -> n
    int[] TINT_CHECKABLE_BUTTON_LIST -> o
    boolean mHasCheckedVectorDrawableSetup -> f
    java.util.WeakHashMap mDrawableCaches -> d
    int[] COLORFILTER_TINT_COLOR_CONTROL_NORMAL -> j
    int[] TINT_COLOR_CONTROL_NORMAL -> k
    java.util.WeakHashMap mTintLists -> a
    androidx.collection.ArrayMap mDelegates -> b
    int[] COLORFILTER_COLOR_CONTROL_ACTIVATED -> l
    int[] COLORFILTER_COLOR_BACKGROUND_MULTIPLY -> m
    boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable) -> a
    boolean arrayContains(int[],int) -> b
    android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int) -> c
    1:1:long createCacheKey(android.util.TypedValue):0:0 -> d
    1:1:android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int):0 -> d
    2:2:android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int):0:0 -> d
    android.content.res.ColorStateList createSwitchThumbColorStateList(android.content.Context) -> e
    android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long) -> f
    1:1:void checkVectorDrawableSetup(android.content.Context):0:0 -> g
    1:1:android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean):0 -> g
    2:2:boolean isVectorDrawable(android.graphics.drawable.Drawable):0:0 -> g
    2:2:void checkVectorDrawableSetup(android.content.Context):0 -> g
    2:2:android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean):0 -> g
    3:3:android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean):0:0 -> g
    4:4:void androidx.appcompat.widget.DrawableUtils.fixDrawable(android.graphics.drawable.Drawable):0:0 -> g
    4:4:android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean):0 -> g
    5:5:android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean):0:0 -> g
    6:6:void checkVectorDrawableSetup(android.content.Context):0:0 -> g
    6:6:android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean):0 -> g
    1:1:android.graphics.PorterDuffColorFilter androidx.appcompat.widget.AppCompatDrawableManager$ColorFilterLruCache.get(int,android.graphics.PorterDuff$Mode):0:0 -> getPorterDuffColorFilter
    1:1:android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode):0 -> getPorterDuffColorFilter
    2:2:int androidx.appcompat.widget.AppCompatDrawableManager$ColorFilterLruCache.generateCacheKey(int,android.graphics.PorterDuff$Mode):0:0 -> getPorterDuffColorFilter
    2:2:android.graphics.PorterDuffColorFilter androidx.appcompat.widget.AppCompatDrawableManager$ColorFilterLruCache.get(int,android.graphics.PorterDuff$Mode):0 -> getPorterDuffColorFilter
    2:2:android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode):0 -> getPorterDuffColorFilter
    3:3:android.graphics.PorterDuffColorFilter androidx.appcompat.widget.AppCompatDrawableManager$ColorFilterLruCache.get(int,android.graphics.PorterDuff$Mode):0:0 -> getPorterDuffColorFilter
    3:3:android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode):0 -> getPorterDuffColorFilter
    4:4:android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode):0:0 -> getPorterDuffColorFilter
    5:5:android.graphics.PorterDuffColorFilter androidx.appcompat.widget.AppCompatDrawableManager$ColorFilterLruCache.put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter):0:0 -> getPorterDuffColorFilter
    5:5:android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode):0 -> getPorterDuffColorFilter
    6:6:int androidx.appcompat.widget.AppCompatDrawableManager$ColorFilterLruCache.generateCacheKey(int,android.graphics.PorterDuff$Mode):0:0 -> getPorterDuffColorFilter
    6:6:android.graphics.PorterDuffColorFilter androidx.appcompat.widget.AppCompatDrawableManager$ColorFilterLruCache.put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter):0 -> getPorterDuffColorFilter
    6:6:android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode):0 -> getPorterDuffColorFilter
    7:7:android.graphics.PorterDuffColorFilter androidx.appcompat.widget.AppCompatDrawableManager$ColorFilterLruCache.put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter):0:0 -> getPorterDuffColorFilter
    7:7:android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode):0 -> getPorterDuffColorFilter
    8:8:android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode):0:0 -> getPorterDuffColorFilter
    1:1:android.content.res.ColorStateList getTintListFromCache(android.content.Context,int):0:0 -> h
    1:1:android.content.res.ColorStateList getTintList(android.content.Context,int):0 -> h
    2:2:android.content.res.ColorStateList getTintList(android.content.Context,int):0:0 -> h
    3:3:android.content.res.ColorStateList createDefaultButtonColorStateList(android.content.Context):0:0 -> h
    3:3:android.content.res.ColorStateList getTintList(android.content.Context,int):0 -> h
    4:4:android.content.res.ColorStateList getTintList(android.content.Context,int):0:0 -> h
    5:5:android.content.res.ColorStateList createBorderlessButtonColorStateList(android.content.Context):0:0 -> h
    5:5:android.content.res.ColorStateList getTintList(android.content.Context,int):0 -> h
    6:6:android.content.res.ColorStateList getTintList(android.content.Context,int):0:0 -> h
    7:7:android.content.res.ColorStateList createColoredButtonColorStateList(android.content.Context):0:0 -> h
    7:7:android.content.res.ColorStateList getTintList(android.content.Context,int):0 -> h
    8:8:android.content.res.ColorStateList getTintList(android.content.Context,int):0:0 -> h
    9:9:void addTintListToCache(android.content.Context,int,android.content.res.ColorStateList):0:0 -> h
    9:9:android.content.res.ColorStateList getTintList(android.content.Context,int):0 -> h
    10:10:android.content.res.ColorStateList getTintList(android.content.Context,int):0:0 -> h
    1:1:long createCacheKey(android.util.TypedValue):0:0 -> i
    1:1:android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int):0 -> i
    2:2:android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int):0:0 -> i
    android.graphics.drawable.Drawable onDrawableLoadedFromResources(android.content.Context,androidx.appcompat.widget.VectorEnabledTintResources,int) -> j
    void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode) -> k
    1:1:android.graphics.PorterDuff$Mode getTintMode(int):0:0 -> l
    1:1:android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable):0 -> l
    2:2:android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable):0:0 -> l
    1:1:android.graphics.PorterDuffColorFilter createTintFilter(android.content.res.ColorStateList,android.graphics.PorterDuff$Mode,int[]):0:0 -> m
    1:1:void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[]):0 -> m
    2:2:void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[]):0:0 -> m
    boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable) -> n
androidx.appcompat.widget.AppCompatDrawableManager$ColorFilterLruCache -> androidx.appcompat.widget.e0:
androidx.appcompat.widget.AppCompatDrawableManager$InflateDelegate -> androidx.appcompat.widget.f0:
androidx.appcompat.widget.AppCompatEditText -> androidx.appcompat.widget.AppCompatEditText:
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> a
    androidx.appcompat.widget.AppCompatTextHelper mTextHelper -> b
androidx.appcompat.widget.AppCompatHintHelper -> androidx.appcompat.widget.g0:
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo,android.view.View) -> a
androidx.appcompat.widget.AppCompatImageButton -> androidx.appcompat.widget.AppCompatImageButton:
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> a
    androidx.appcompat.widget.AppCompatImageHelper mImageHelper -> b
androidx.appcompat.widget.AppCompatImageHelper -> androidx.appcompat.widget.AppCompatImageHelper:
    android.widget.ImageView mView -> a
    androidx.appcompat.widget.TintInfo mImageTint -> b
    1:1:void androidx.appcompat.widget.DrawableUtils.fixDrawable(android.graphics.drawable.Drawable):0:0 -> a
    1:1:void applySupportImageTint():0 -> a
    2:2:void applySupportImageTint():0:0 -> a
    android.content.res.ColorStateList getSupportImageTintList() -> b
    android.graphics.PorterDuff$Mode getSupportImageTintMode() -> c
    boolean hasOverlappingRendering() -> d
    void setSupportImageTintList(android.content.res.ColorStateList) -> e
    void setSupportImageTintMode(android.graphics.PorterDuff$Mode) -> f
    1:1:void androidx.appcompat.widget.DrawableUtils.fixDrawable(android.graphics.drawable.Drawable):0:0 -> loadFromAttributes
    1:1:void loadFromAttributes(android.util.AttributeSet,int):0 -> loadFromAttributes
    2:2:void loadFromAttributes(android.util.AttributeSet,int):0:0 -> loadFromAttributes
    1:1:void androidx.appcompat.widget.DrawableUtils.fixDrawable(android.graphics.drawable.Drawable):0:0 -> setImageResource
    1:1:void setImageResource(int):0 -> setImageResource
    2:2:void setImageResource(int):0:0 -> setImageResource
androidx.appcompat.widget.AppCompatImageView -> androidx.appcompat.widget.AppCompatImageView:
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> a
    androidx.appcompat.widget.AppCompatImageHelper mImageHelper -> b
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView -> androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView:
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> a
    int[] TINT_ATTRS -> c
    androidx.appcompat.widget.AppCompatTextHelper mTextHelper -> b
androidx.appcompat.widget.AppCompatPopupWindow -> androidx.appcompat.widget.AppCompatPopupWindow:
    1:1:void setSupportOverlapAnchor(boolean):0:0 -> a
    1:1:void init(android.content.Context,android.util.AttributeSet,int,int):0 -> a
    2:2:void init(android.content.Context,android.util.AttributeSet,int,int):0:0 -> a
androidx.appcompat.widget.AppCompatProgressBarHelper -> androidx.appcompat.widget.h0:
    android.widget.ProgressBar mView -> a
    android.graphics.Bitmap mSampleTile -> b
    int[] TINT_ATTRS -> c
    android.graphics.Bitmap getSampleTime() -> a
    1:1:android.graphics.drawable.Drawable tileifyIndeterminate(android.graphics.drawable.Drawable):0:0 -> b
    1:1:void loadFromAttributes(android.util.AttributeSet,int):0 -> b
    2:2:void loadFromAttributes(android.util.AttributeSet,int):0:0 -> b
    1:1:android.graphics.drawable.shapes.Shape getDrawableShape():0:0 -> c
    1:1:android.graphics.drawable.Drawable tileify(android.graphics.drawable.Drawable,boolean):0 -> c
    2:2:android.graphics.drawable.Drawable tileify(android.graphics.drawable.Drawable,boolean):0:0 -> c
androidx.appcompat.widget.AppCompatRadioButton -> androidx.appcompat.widget.AppCompatRadioButton:
    androidx.appcompat.widget.AppCompatTextHelper mTextHelper -> b
    androidx.appcompat.widget.AppCompatCompoundButtonHelper mCompoundButtonHelper -> a
androidx.appcompat.widget.AppCompatRatingBar -> androidx.appcompat.widget.AppCompatRatingBar:
    androidx.appcompat.widget.AppCompatProgressBarHelper mAppCompatProgressBarHelper -> a
androidx.appcompat.widget.AppCompatSeekBar -> androidx.appcompat.widget.AppCompatSeekBar:
    androidx.appcompat.widget.AppCompatSeekBarHelper mAppCompatSeekBarHelper -> a
androidx.appcompat.widget.AppCompatSeekBarHelper -> androidx.appcompat.widget.i0:
    android.graphics.drawable.Drawable mTickMark -> e
    boolean mHasTickMarkTintMode -> i
    android.content.res.ColorStateList mTickMarkTintList -> f
    android.graphics.PorterDuff$Mode mTickMarkTintMode -> g
    boolean mHasTickMarkTint -> h
    android.widget.SeekBar mView -> d
    1:1:void setTickMark(android.graphics.drawable.Drawable):0:0 -> b
    1:1:void loadFromAttributes(android.util.AttributeSet,int):0 -> b
    2:2:void loadFromAttributes(android.util.AttributeSet,int):0:0 -> b
    void applyTickMarkTint() -> d
    void drawTickMarks(android.graphics.Canvas) -> e
    void drawableStateChanged() -> f
    void jumpDrawablesToCurrentState() -> g
androidx.appcompat.widget.AppCompatSpinner -> androidx.appcompat.widget.AppCompatSpinner:
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> a
    int[] ATTRS_ANDROID_SPINNERMODE -> i
    android.content.Context mPopupContext -> b
    androidx.appcompat.widget.AppCompatSpinner$DropdownPopup mPopup -> f
    boolean mPopupSet -> e
    int mDropDownWidth -> g
    android.graphics.Rect mTempRect -> h
    androidx.appcompat.widget.ForwardingListener mForwardingListener -> c
    android.widget.SpinnerAdapter mTempAdapter -> d
    int compatMeasureContentWidth(android.widget.SpinnerAdapter,android.graphics.drawable.Drawable) -> a
androidx.appcompat.widget.AppCompatSpinner$1 -> androidx.appcompat.widget.j0:
    androidx.appcompat.widget.AppCompatSpinner this$0 -> k
    androidx.appcompat.widget.AppCompatSpinner$DropdownPopup val$popup -> j
androidx.appcompat.widget.AppCompatSpinner$DropDownAdapter -> androidx.appcompat.widget.k0:
    android.widget.SpinnerAdapter mAdapter -> a
    android.widget.ListAdapter mListAdapter -> b
    1:1:android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup):0:0 -> getView
    1:1:android.view.View getView(int,android.view.View,android.view.ViewGroup):0 -> getView
androidx.appcompat.widget.AppCompatSpinner$DropdownPopup -> androidx.appcompat.widget.o0:
    androidx.appcompat.widget.AppCompatSpinner this$0 -> M
    android.graphics.Rect mVisibleRect -> L
    android.widget.ListAdapter mAdapter -> K
    java.lang.CharSequence mHintText -> J
    void access$001(androidx.appcompat.widget.AppCompatSpinner$DropdownPopup) -> b
    void computeContentWidth() -> c
    boolean isVisibleToUser(android.view.View) -> d
androidx.appcompat.widget.AppCompatSpinner$DropdownPopup$1 -> androidx.appcompat.widget.l0:
    androidx.appcompat.widget.AppCompatSpinner$DropdownPopup this$1 -> a
androidx.appcompat.widget.AppCompatSpinner$DropdownPopup$2 -> androidx.appcompat.widget.m0:
    androidx.appcompat.widget.AppCompatSpinner$DropdownPopup this$1 -> a
androidx.appcompat.widget.AppCompatSpinner$DropdownPopup$3 -> androidx.appcompat.widget.n0:
    androidx.appcompat.widget.AppCompatSpinner$DropdownPopup this$1 -> b
    android.view.ViewTreeObserver$OnGlobalLayoutListener val$layoutListener -> a
androidx.appcompat.widget.AppCompatTextHelper -> androidx.appcompat.widget.q0:
    androidx.appcompat.widget.TintInfo mDrawableStartTint -> f
    androidx.appcompat.widget.TintInfo mDrawableEndTint -> g
    androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper mAutoSizeTextHelper -> h
    android.widget.TextView mView -> a
    androidx.appcompat.widget.TintInfo mDrawableRightTint -> d
    androidx.appcompat.widget.TintInfo mDrawableBottomTint -> e
    boolean mAsyncFontPending -> k
    int mStyle -> i
    android.graphics.Typeface mFontTypeface -> j
    androidx.appcompat.widget.TintInfo mDrawableLeftTint -> b
    androidx.appcompat.widget.TintInfo mDrawableTopTint -> c
    void applyCompoundDrawableTint(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo) -> a
    void applyCompoundDrawablesTints() -> b
    void autoSizeText() -> c
    androidx.appcompat.widget.TintInfo createTintInfo(android.content.Context,androidx.appcompat.widget.AppCompatDrawableManager,int) -> d
    int getAutoSizeMaxTextSize() -> e
    int getAutoSizeMinTextSize() -> f
    int getAutoSizeStepGranularity() -> g
    int[] getAutoSizeTextAvailableSizes() -> h
    int getAutoSizeTextType() -> i
    boolean isAutoSizeEnabled() -> j
    1:1:void setAllCaps(boolean):0:0 -> k
    1:1:void loadFromAttributes(android.util.AttributeSet,int):0 -> k
    2:2:void loadFromAttributes(android.util.AttributeSet,int):0:0 -> k
    void onAsyncTypefaceReceived(java.lang.ref.WeakReference,android.graphics.Typeface) -> l
    1:1:void autoSizeText():0:0 -> m
    1:1:void onLayout(boolean,int,int,int,int):0 -> m
    1:1:void setAllCaps(boolean):0:0 -> n
    1:1:void onSetTextAppearance(android.content.Context,int):0 -> n
    2:2:void onSetTextAppearance(android.content.Context,int):0:0 -> n
    void setAllCaps(boolean) -> o
    void setAutoSizeTextTypeUniformWithConfiguration(int,int,int,int) -> p
    void setAutoSizeTextTypeUniformWithPresetSizes(int[],int) -> q
    void setAutoSizeTextTypeWithDefaults(int) -> r
    1:1:void setTextSizeInternal(int,float):0:0 -> s
    1:1:void setTextSize(int,float):0 -> s
    void updateTypefaceAndStyle(android.content.Context,androidx.appcompat.widget.TintTypedArray) -> t
androidx.appcompat.widget.AppCompatTextHelper$1 -> androidx.appcompat.widget.p0:
    androidx.appcompat.widget.AppCompatTextHelper this$0 -> b
    java.lang.ref.WeakReference val$textViewWeak -> a
androidx.appcompat.widget.AppCompatTextView -> androidx.appcompat.widget.AppCompatTextView:
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> a
    androidx.appcompat.widget.AppCompatTextHelper mTextHelper -> b
    java.util.concurrent.Future mPrecomputedTextFuture -> c
    1:1:void consumeTextFutureAndSetBlocking():0:0 -> getText
    1:1:java.lang.CharSequence getText():0 -> getText
    2:2:java.lang.CharSequence getText():0:0 -> getText
    1:1:void consumeTextFutureAndSetBlocking():0:0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:void onMeasure(int,int):0:0 -> onMeasure
androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper -> androidx.appcompat.widget.r0:
    int[] mAutoSizeTextSizesInPx -> f
    float mAutoSizeMaxTextSizeInPx -> e
    float mAutoSizeMinTextSizeInPx -> d
    float mAutoSizeStepGranularityInPx -> c
    boolean mHasPresetAutoSizeValues -> g
    android.widget.TextView mTextView -> i
    android.content.Context mContext -> j
    java.util.concurrent.ConcurrentHashMap sTextViewMethodByNameCache -> l
    android.graphics.RectF TEMP_RECTF -> k
    boolean mNeedsAutoSizeText -> b
    android.text.TextPaint mTempTextPaint -> h
    int mAutoSizeTextType -> a
    1:1:boolean isAutoSizeEnabled():0:0 -> a
    1:1:void autoSizeText():0 -> a
    2:2:void autoSizeText():0:0 -> a
    int[] cleanupAutoSizePresetSizes(int[]) -> b
    1:1:boolean suggestedSizeFitsInSpace(int,android.graphics.RectF):0:0 -> c
    1:1:int findLargestTextSizeWhichFits(android.graphics.RectF):0 -> c
    2:2:android.text.StaticLayout createStaticLayoutForMeasuring(java.lang.CharSequence,android.text.Layout$Alignment,int,int):0:0 -> c
    2:2:boolean suggestedSizeFitsInSpace(int,android.graphics.RectF):0 -> c
    2:2:int findLargestTextSizeWhichFits(android.graphics.RectF):0 -> c
    3:3:boolean suggestedSizeFitsInSpace(int,android.graphics.RectF):0:0 -> c
    3:3:int findLargestTextSizeWhichFits(android.graphics.RectF):0 -> c
    4:4:int findLargestTextSizeWhichFits(android.graphics.RectF):0:0 -> c
    int getAutoSizeMaxTextSize() -> d
    int getAutoSizeMinTextSize() -> e
    int getAutoSizeStepGranularity() -> f
    int[] getAutoSizeTextAvailableSizes() -> g
    int getAutoSizeTextType() -> h
    java.lang.reflect.Method getTextViewMethod(java.lang.String) -> i
    java.lang.Object invokeAndReturnWithDefault(java.lang.Object,java.lang.String,java.lang.Object) -> j
    boolean isAutoSizeEnabled() -> k
    1:1:void setupAutoSizeUniformPresetSizes(android.content.res.TypedArray):0:0 -> l
    1:1:void loadFromAttributes(android.util.AttributeSet,int):0 -> l
    2:2:void loadFromAttributes(android.util.AttributeSet,int):0:0 -> l
    void setAutoSizeTextTypeUniformWithConfiguration(int,int,int,int) -> m
    void setAutoSizeTextTypeUniformWithPresetSizes(int[],int) -> n
    1:1:void clearAutoSizeConfiguration():0:0 -> o
    1:1:void setAutoSizeTextTypeWithDefaults(int):0 -> o
    1:1:void setRawTextSize(float):0:0 -> p
    1:1:void setTextSizeInternal(int,float):0 -> p
    boolean setupAutoSizeText() -> q
    boolean setupAutoSizeUniformPresetSizesConfiguration() -> r
    boolean supportsAutoSizeText() -> s
    void validateAndSetAutoSizeTextTypeUniformConfiguration(float,float,float) -> t
androidx.appcompat.widget.ButtonBarLayout -> androidx.appcompat.widget.ButtonBarLayout:
    boolean mAllowStacking -> a
    int mLastWidthSize -> b
    int getNextVisibleChildIndex(int) -> a
    boolean isStacked() -> b
    void setStacked(boolean) -> c
androidx.appcompat.widget.ContentFrameLayout -> androidx.appcompat.widget.ContentFrameLayout:
    android.util.TypedValue mFixedWidthMinor -> d
    android.util.TypedValue mFixedWidthMajor -> c
    android.util.TypedValue mMinWidthMinor -> b
    android.util.TypedValue mMinWidthMajor -> a
    android.graphics.Rect mDecorPadding -> g
    androidx.appcompat.widget.ContentFrameLayout$OnAttachListener mAttachListener -> h
    android.util.TypedValue mFixedHeightMinor -> f
    android.util.TypedValue mFixedHeightMajor -> e
androidx.appcompat.widget.DrawableUtils -> androidx.appcompat.widget.DrawableUtils:
    java.lang.Class sInsetsClazz -> a
androidx.appcompat.widget.DropDownListView -> androidx.appcompat.widget.u0:
    boolean mListSelectionHidden -> i
    boolean mHijackFocus -> j
    boolean mDrawsInPressedState -> k
    int mMotionPosition -> f
    int mSelectionRightPadding -> d
    int mSelectionBottomPadding -> e
    int mSelectionLeftPadding -> b
    int mSelectionTopPadding -> c
    androidx.appcompat.widget.DropDownListView$ResolveHoverRunnable mResolveHoverRunnable -> m
    android.graphics.Rect mSelectorRect -> a
    androidx.core.widget.ListViewAutoScrollHelper mScrollHelper -> l
    java.lang.reflect.Field mIsChildViewEnabled -> g
    androidx.appcompat.widget.DropDownListView$GateKeeperDrawable mSelector -> h
    void setListSelectionHidden(boolean) -> a
    1:1:boolean touchModeDrawsInPressedStateCompat():0:0 -> b
    1:1:void updateSelectorStateCompat():0 -> b
    2:2:void updateSelectorStateCompat():0:0 -> b
    1:1:void drawSelectorCompat(android.graphics.Canvas):0:0 -> dispatchDraw
    1:1:void dispatchDraw(android.graphics.Canvas):0 -> dispatchDraw
    2:2:void dispatchDraw(android.graphics.Canvas):0:0 -> dispatchDraw
    1:1:void setSelectorEnabled(boolean):0:0 -> drawableStateChanged
    1:1:void drawableStateChanged():0 -> drawableStateChanged
    2:2:void drawableStateChanged():0:0 -> drawableStateChanged
    1:1:void setPressedItem(android.view.View,int,float,float):0:0 -> onForwardedEvent
    1:1:boolean onForwardedEvent(android.view.MotionEvent,int):0 -> onForwardedEvent
    2:2:void positionSelectorLikeFocusCompat(int,android.view.View):0:0 -> onForwardedEvent
    2:2:void positionSelectorLikeTouchCompat(int,android.view.View,float,float):0 -> onForwardedEvent
    2:2:void setPressedItem(android.view.View,int,float,float):0 -> onForwardedEvent
    2:2:boolean onForwardedEvent(android.view.MotionEvent,int):0 -> onForwardedEvent
    3:3:void positionSelectorCompat(int,android.view.View):0:0 -> onForwardedEvent
    3:3:void positionSelectorLikeFocusCompat(int,android.view.View):0 -> onForwardedEvent
    3:3:void positionSelectorLikeTouchCompat(int,android.view.View,float,float):0 -> onForwardedEvent
    3:3:void setPressedItem(android.view.View,int,float,float):0 -> onForwardedEvent
    3:3:boolean onForwardedEvent(android.view.MotionEvent,int):0 -> onForwardedEvent
    4:4:void positionSelectorLikeFocusCompat(int,android.view.View):0:0 -> onForwardedEvent
    4:4:void positionSelectorLikeTouchCompat(int,android.view.View,float,float):0 -> onForwardedEvent
    4:4:void setPressedItem(android.view.View,int,float,float):0 -> onForwardedEvent
    4:4:boolean onForwardedEvent(android.view.MotionEvent,int):0 -> onForwardedEvent
    5:5:void positionSelectorLikeTouchCompat(int,android.view.View,float,float):0:0 -> onForwardedEvent
    5:5:void setPressedItem(android.view.View,int,float,float):0 -> onForwardedEvent
    5:5:boolean onForwardedEvent(android.view.MotionEvent,int):0 -> onForwardedEvent
    6:6:void setSelectorEnabled(boolean):0:0 -> onForwardedEvent
    6:6:void setPressedItem(android.view.View,int,float,float):0 -> onForwardedEvent
    6:6:boolean onForwardedEvent(android.view.MotionEvent,int):0 -> onForwardedEvent
    7:7:void setPressedItem(android.view.View,int,float,float):0:0 -> onForwardedEvent
    7:7:boolean onForwardedEvent(android.view.MotionEvent,int):0 -> onForwardedEvent
    8:8:void clickPressedItem(android.view.View,int):0:0 -> onForwardedEvent
    8:8:boolean onForwardedEvent(android.view.MotionEvent,int):0 -> onForwardedEvent
    9:9:void clearPressedItem():0:0 -> onForwardedEvent
    9:9:boolean onForwardedEvent(android.view.MotionEvent,int):0 -> onForwardedEvent
    10:10:boolean onForwardedEvent(android.view.MotionEvent,int):0:0 -> onForwardedEvent
    1:1:void androidx.appcompat.widget.DropDownListView$ResolveHoverRunnable.post():0:0 -> onHoverEvent
    1:1:boolean onHoverEvent(android.view.MotionEvent):0 -> onHoverEvent
    2:2:boolean onHoverEvent(android.view.MotionEvent):0:0 -> onHoverEvent
    1:1:void androidx.appcompat.widget.DropDownListView$ResolveHoverRunnable.cancel():0:0 -> onTouchEvent
    1:1:boolean onTouchEvent(android.view.MotionEvent):0 -> onTouchEvent
    2:2:boolean onTouchEvent(android.view.MotionEvent):0:0 -> onTouchEvent
androidx.appcompat.widget.DropDownListView$GateKeeperDrawable -> androidx.appcompat.widget.s0:
    boolean mEnabled -> b
    void setEnabled(boolean) -> a
androidx.appcompat.widget.DropDownListView$ResolveHoverRunnable -> androidx.appcompat.widget.t0:
    androidx.appcompat.widget.DropDownListView this$0 -> a
androidx.appcompat.widget.FitWindowsFrameLayout -> androidx.appcompat.widget.FitWindowsFrameLayout:
    androidx.appcompat.widget.FitWindowsViewGroup$OnFitSystemWindowsListener mListener -> a
androidx.appcompat.widget.FitWindowsLinearLayout -> androidx.appcompat.widget.FitWindowsLinearLayout:
    androidx.appcompat.widget.FitWindowsViewGroup$OnFitSystemWindowsListener mListener -> a
androidx.appcompat.widget.ForwardingListener -> androidx.appcompat.widget.ForwardingListener:
    java.lang.Runnable mDisallowIntercept -> e
    int[] mTmpLocation -> i
    int mActivePointerId -> h
    java.lang.Runnable mTriggerLongPress -> f
    boolean mForwarding -> g
    float mScaledTouchSlop -> a
    int mTapTimeout -> b
    int mLongPressTimeout -> c
    android.view.View mSrc -> d
    void clearCallbacks() -> a
    void onLongPress() -> b
    1:1:boolean onTouchForwarded(android.view.MotionEvent):0:0 -> onTouch
    1:1:boolean onTouch(android.view.View,android.view.MotionEvent):0 -> onTouch
    2:2:boolean toGlobalMotionEvent(android.view.View,android.view.MotionEvent):0:0 -> onTouch
    2:2:boolean onTouchForwarded(android.view.MotionEvent):0 -> onTouch
    2:2:boolean onTouch(android.view.View,android.view.MotionEvent):0 -> onTouch
    3:3:boolean toLocalMotionEvent(android.view.View,android.view.MotionEvent):0:0 -> onTouch
    3:3:boolean onTouchForwarded(android.view.MotionEvent):0 -> onTouch
    3:3:boolean onTouch(android.view.View,android.view.MotionEvent):0 -> onTouch
    4:4:boolean onTouchForwarded(android.view.MotionEvent):0:0 -> onTouch
    4:4:boolean onTouch(android.view.View,android.view.MotionEvent):0 -> onTouch
    5:5:boolean onTouch(android.view.View,android.view.MotionEvent):0:0 -> onTouch
    6:6:boolean onTouchObserved(android.view.MotionEvent):0:0 -> onTouch
    6:6:boolean onTouch(android.view.View,android.view.MotionEvent):0 -> onTouch
    7:7:boolean pointInView(android.view.View,float,float,float):0:0 -> onTouch
    7:7:boolean onTouchObserved(android.view.MotionEvent):0 -> onTouch
    7:7:boolean onTouch(android.view.View,android.view.MotionEvent):0 -> onTouch
    8:8:boolean onTouchObserved(android.view.MotionEvent):0:0 -> onTouch
    8:8:boolean onTouch(android.view.View,android.view.MotionEvent):0 -> onTouch
    9:9:boolean onTouch(android.view.View,android.view.MotionEvent):0:0 -> onTouch
androidx.appcompat.widget.ForwardingListener$DisallowIntercept -> androidx.appcompat.widget.v0:
    androidx.appcompat.widget.ForwardingListener this$0 -> a
androidx.appcompat.widget.ForwardingListener$TriggerLongPress -> androidx.appcompat.widget.w0:
    androidx.appcompat.widget.ForwardingListener this$0 -> a
androidx.appcompat.widget.LinearLayoutCompat -> androidx.appcompat.widget.LinearLayoutCompat:
    int mShowDividers -> n
    int mDividerPadding -> o
    int mDividerWidth -> l
    int mDividerHeight -> m
    float mWeightSum -> g
    int mTotalLength -> f
    int mOrientation -> d
    int mGravity -> e
    int mBaselineAlignedChildIndex -> b
    int mBaselineChildTop -> c
    int[] mMaxAscent -> i
    android.graphics.drawable.Drawable mDivider -> k
    boolean mUseLargestChild -> h
    boolean mBaselineAligned -> a
    int[] mMaxDescent -> j
    void drawHorizontalDivider(android.graphics.Canvas,int) -> a
    void drawVerticalDivider(android.graphics.Canvas,int) -> b
    int getChildrenSkipCount(android.view.View,int) -> c
    int getLocationOffset(android.view.View) -> d
    int getNextLocationOffset(android.view.View) -> e
    void measureChildBeforeLayout(android.view.View,int,int,int,int,int) -> f
    int measureNullChild(int) -> g
    1:1:int getVirtualChildCount():0:0 -> onDraw
    1:1:void drawDividersVertical(android.graphics.Canvas):0 -> onDraw
    1:1:void onDraw(android.graphics.Canvas):0 -> onDraw
    2:2:android.view.View getVirtualChildAt(int):0:0 -> onDraw
    2:2:void drawDividersVertical(android.graphics.Canvas):0 -> onDraw
    2:2:void onDraw(android.graphics.Canvas):0 -> onDraw
    3:3:void drawDividersVertical(android.graphics.Canvas):0:0 -> onDraw
    3:3:void onDraw(android.graphics.Canvas):0 -> onDraw
    4:4:android.view.View getVirtualChildAt(int):0:0 -> onDraw
    4:4:void drawDividersVertical(android.graphics.Canvas):0 -> onDraw
    4:4:void onDraw(android.graphics.Canvas):0 -> onDraw
    5:5:void drawDividersVertical(android.graphics.Canvas):0:0 -> onDraw
    5:5:void onDraw(android.graphics.Canvas):0 -> onDraw
    6:6:int getVirtualChildCount():0:0 -> onDraw
    6:6:void drawDividersHorizontal(android.graphics.Canvas):0 -> onDraw
    6:6:void onDraw(android.graphics.Canvas):0 -> onDraw
    7:7:void drawDividersHorizontal(android.graphics.Canvas):0:0 -> onDraw
    7:7:void onDraw(android.graphics.Canvas):0 -> onDraw
    8:8:android.view.View getVirtualChildAt(int):0:0 -> onDraw
    8:8:void drawDividersHorizontal(android.graphics.Canvas):0 -> onDraw
    8:8:void onDraw(android.graphics.Canvas):0 -> onDraw
    9:9:void drawDividersHorizontal(android.graphics.Canvas):0:0 -> onDraw
    9:9:void onDraw(android.graphics.Canvas):0 -> onDraw
    10:10:android.view.View getVirtualChildAt(int):0:0 -> onDraw
    10:10:void drawDividersHorizontal(android.graphics.Canvas):0 -> onDraw
    10:10:void onDraw(android.graphics.Canvas):0 -> onDraw
    11:11:void drawDividersHorizontal(android.graphics.Canvas):0:0 -> onDraw
    11:11:void onDraw(android.graphics.Canvas):0 -> onDraw
    1:1:void layoutVertical(int,int,int,int):0:0 -> onLayout
    1:1:void onLayout(boolean,int,int,int,int):0 -> onLayout
    2:2:int getVirtualChildCount():0:0 -> onLayout
    2:2:void layoutVertical(int,int,int,int):0 -> onLayout
    2:2:void onLayout(boolean,int,int,int,int):0 -> onLayout
    3:3:void layoutVertical(int,int,int,int):0:0 -> onLayout
    3:3:void onLayout(boolean,int,int,int,int):0 -> onLayout
    4:4:android.view.View getVirtualChildAt(int):0:0 -> onLayout
    4:4:void layoutVertical(int,int,int,int):0 -> onLayout
    4:4:void onLayout(boolean,int,int,int,int):0 -> onLayout
    5:5:void layoutVertical(int,int,int,int):0:0 -> onLayout
    5:5:void onLayout(boolean,int,int,int,int):0 -> onLayout
    6:6:void setChildFrame(android.view.View,int,int,int,int):0:0 -> onLayout
    6:6:void layoutVertical(int,int,int,int):0 -> onLayout
    6:6:void onLayout(boolean,int,int,int,int):0 -> onLayout
    7:7:void layoutVertical(int,int,int,int):0:0 -> onLayout
    7:7:void onLayout(boolean,int,int,int,int):0 -> onLayout
    8:8:void layoutHorizontal(int,int,int,int):0:0 -> onLayout
    8:8:void onLayout(boolean,int,int,int,int):0 -> onLayout
    9:9:int getVirtualChildCount():0:0 -> onLayout
    9:9:void layoutHorizontal(int,int,int,int):0 -> onLayout
    9:9:void onLayout(boolean,int,int,int,int):0 -> onLayout
    10:10:void layoutHorizontal(int,int,int,int):0:0 -> onLayout
    10:10:void onLayout(boolean,int,int,int,int):0 -> onLayout
    11:11:android.view.View getVirtualChildAt(int):0:0 -> onLayout
    11:11:void layoutHorizontal(int,int,int,int):0 -> onLayout
    11:11:void onLayout(boolean,int,int,int,int):0 -> onLayout
    12:12:void layoutHorizontal(int,int,int,int):0:0 -> onLayout
    12:12:void onLayout(boolean,int,int,int,int):0 -> onLayout
    13:13:void setChildFrame(android.view.View,int,int,int,int):0:0 -> onLayout
    13:13:void layoutHorizontal(int,int,int,int):0 -> onLayout
    13:13:void onLayout(boolean,int,int,int,int):0 -> onLayout
    14:14:void layoutHorizontal(int,int,int,int):0:0 -> onLayout
    14:14:void onLayout(boolean,int,int,int,int):0 -> onLayout
    1:1:void measureVertical(int,int):0:0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:int getVirtualChildCount():0:0 -> onMeasure
    2:2:void measureVertical(int,int):0 -> onMeasure
    2:2:void onMeasure(int,int):0 -> onMeasure
    3:3:void measureVertical(int,int):0:0 -> onMeasure
    3:3:void onMeasure(int,int):0 -> onMeasure
    4:4:android.view.View getVirtualChildAt(int):0:0 -> onMeasure
    4:4:void measureVertical(int,int):0 -> onMeasure
    4:4:void onMeasure(int,int):0 -> onMeasure
    5:5:void measureVertical(int,int):0:0 -> onMeasure
    5:5:void onMeasure(int,int):0 -> onMeasure
    6:6:android.view.View getVirtualChildAt(int):0:0 -> onMeasure
    6:6:void measureVertical(int,int):0 -> onMeasure
    6:6:void onMeasure(int,int):0 -> onMeasure
    7:7:void measureVertical(int,int):0:0 -> onMeasure
    7:7:void onMeasure(int,int):0 -> onMeasure
    8:8:android.view.View getVirtualChildAt(int):0:0 -> onMeasure
    8:8:void measureVertical(int,int):0 -> onMeasure
    8:8:void onMeasure(int,int):0 -> onMeasure
    9:9:void measureVertical(int,int):0:0 -> onMeasure
    9:9:void onMeasure(int,int):0 -> onMeasure
    10:10:android.view.View getVirtualChildAt(int):0:0 -> onMeasure
    10:10:void measureVertical(int,int):0 -> onMeasure
    10:10:void onMeasure(int,int):0 -> onMeasure
    11:11:void measureVertical(int,int):0:0 -> onMeasure
    11:11:void onMeasure(int,int):0 -> onMeasure
    12:12:void forceUniformWidth(int,int):0:0 -> onMeasure
    12:12:void measureVertical(int,int):0 -> onMeasure
    12:12:void onMeasure(int,int):0 -> onMeasure
    13:13:android.view.View getVirtualChildAt(int):0:0 -> onMeasure
    13:13:void forceUniformWidth(int,int):0 -> onMeasure
    13:13:void measureVertical(int,int):0 -> onMeasure
    13:13:void onMeasure(int,int):0 -> onMeasure
    14:14:void forceUniformWidth(int,int):0:0 -> onMeasure
    14:14:void measureVertical(int,int):0 -> onMeasure
    14:14:void onMeasure(int,int):0 -> onMeasure
    15:15:void measureHorizontal(int,int):0:0 -> onMeasure
    15:15:void onMeasure(int,int):0 -> onMeasure
    16:16:int getVirtualChildCount():0:0 -> onMeasure
    16:16:void measureHorizontal(int,int):0 -> onMeasure
    16:16:void onMeasure(int,int):0 -> onMeasure
    17:17:void measureHorizontal(int,int):0:0 -> onMeasure
    17:17:void onMeasure(int,int):0 -> onMeasure
    18:18:android.view.View getVirtualChildAt(int):0:0 -> onMeasure
    18:18:void measureHorizontal(int,int):0 -> onMeasure
    18:18:void onMeasure(int,int):0 -> onMeasure
    19:19:void measureHorizontal(int,int):0:0 -> onMeasure
    19:19:void onMeasure(int,int):0 -> onMeasure
    20:20:android.view.View getVirtualChildAt(int):0:0 -> onMeasure
    20:20:void measureHorizontal(int,int):0 -> onMeasure
    20:20:void onMeasure(int,int):0 -> onMeasure
    21:21:void measureHorizontal(int,int):0:0 -> onMeasure
    21:21:void onMeasure(int,int):0 -> onMeasure
    22:22:android.view.View getVirtualChildAt(int):0:0 -> onMeasure
    22:22:void measureHorizontal(int,int):0 -> onMeasure
    22:22:void onMeasure(int,int):0 -> onMeasure
    23:23:void measureHorizontal(int,int):0:0 -> onMeasure
    23:23:void onMeasure(int,int):0 -> onMeasure
    24:24:android.view.View getVirtualChildAt(int):0:0 -> onMeasure
    24:24:void measureHorizontal(int,int):0 -> onMeasure
    24:24:void onMeasure(int,int):0 -> onMeasure
    25:25:void measureHorizontal(int,int):0:0 -> onMeasure
    25:25:void onMeasure(int,int):0 -> onMeasure
    26:26:void forceUniformHeight(int,int):0:0 -> onMeasure
    26:26:void measureHorizontal(int,int):0 -> onMeasure
    26:26:void onMeasure(int,int):0 -> onMeasure
    27:27:android.view.View getVirtualChildAt(int):0:0 -> onMeasure
    27:27:void forceUniformHeight(int,int):0 -> onMeasure
    27:27:void measureHorizontal(int,int):0 -> onMeasure
    27:27:void onMeasure(int,int):0 -> onMeasure
    28:28:void forceUniformHeight(int,int):0:0 -> onMeasure
    28:28:void measureHorizontal(int,int):0 -> onMeasure
    28:28:void onMeasure(int,int):0 -> onMeasure
androidx.appcompat.widget.ListPopupWindow -> androidx.appcompat.widget.ListPopupWindow:
    android.content.Context mContext -> a
    boolean mDropDownAlwaysVisible -> m
    int mDropDownGravity -> l
    androidx.appcompat.widget.ListPopupWindow$PopupScrollListener mScrollListener -> y
    java.lang.reflect.Method sClipToWindowEnabledMethod -> G
    boolean mDropDownVerticalOffsetSet -> i
    android.widget.AdapterView$OnItemSelectedListener mItemSelectedListener -> v
    androidx.appcompat.widget.ListPopupWindow$ResizePopupRunnable mResizePopupRunnable -> w
    java.lang.reflect.Method sSetEpicenterBoundsMethod -> I
    int mDropDownWindowLayoutType -> h
    boolean mOverlapAnchorSet -> k
    int mDropDownHorizontalOffset -> f
    androidx.appcompat.widget.ListPopupWindow$ListSelectorHider mHideSelector -> z
    android.view.View mPromptView -> p
    int mDropDownHeight -> d
    android.graphics.Rect mEpicenterBounds -> D
    android.graphics.drawable.Drawable mDropDownListHighlight -> t
    android.os.Handler mHandler -> B
    android.widget.ListAdapter mAdapter -> b
    boolean mModal -> E
    androidx.appcompat.widget.ListPopupWindow$PopupTouchInterceptor mTouchInterceptor -> x
    int mPromptPosition -> q
    boolean mForceIgnoreOutsideTouch -> n
    int mListItemExpandMaximum -> o
    androidx.appcompat.widget.DropDownListView mDropDownList -> c
    java.lang.reflect.Method sGetMaxAvailableHeightMethod -> H
    boolean mOverlapAnchor -> j
    int mDropDownVerticalOffset -> g
    android.view.View mDropDownAnchorView -> s
    int mDropDownWidth -> e
    java.lang.Runnable mShowDropDownRunnable -> A
    android.graphics.Rect mTempRect -> C
    android.widget.AdapterView$OnItemClickListener mItemClickListener -> u
    android.database.DataSetObserver mObserver -> r
    android.widget.PopupWindow mPopup -> F
    androidx.appcompat.widget.DropDownListView createDropDownListView(android.content.Context,boolean) -> a
    1:1:void removePromptView():0:0 -> dismiss
    1:1:void dismiss():0 -> dismiss
    2:2:void dismiss():0:0 -> dismiss
    1:1:void removePromptView():0:0 -> setPromptView
    1:1:void setPromptView(android.view.View):0 -> setPromptView
    2:2:void setPromptView(android.view.View):0:0 -> setPromptView
    1:1:int buildDropDown():0:0 -> show
    1:1:void show():0 -> show
    2:2:int getMaxAvailableHeight(android.view.View,int,boolean):0:0 -> show
    2:2:int buildDropDown():0 -> show
    2:2:void show():0 -> show
    3:3:int buildDropDown():0:0 -> show
    3:3:void show():0 -> show
    4:4:void show():0:0 -> show
    5:5:void setPopupClipToScreenEnabled(boolean):0:0 -> show
    5:5:void show():0 -> show
    6:6:void show():0:0 -> show
androidx.appcompat.widget.ListPopupWindow$1 -> androidx.appcompat.widget.x0:
    androidx.appcompat.widget.ListPopupWindow this$0 -> j
    1:1:androidx.appcompat.widget.ListPopupWindow getPopup():0:0 -> getPopup
    1:1:androidx.appcompat.view.menu.ShowableListMenu getPopup():0 -> getPopup
androidx.appcompat.widget.ListPopupWindow$2 -> androidx.appcompat.widget.y0:
    androidx.appcompat.widget.ListPopupWindow this$0 -> a
androidx.appcompat.widget.ListPopupWindow$3 -> androidx.appcompat.widget.z0:
    androidx.appcompat.widget.ListPopupWindow this$0 -> a
androidx.appcompat.widget.ListPopupWindow$ListSelectorHider -> androidx.appcompat.widget.a1:
    androidx.appcompat.widget.ListPopupWindow this$0 -> a
androidx.appcompat.widget.ListPopupWindow$PopupDataSetObserver -> androidx.appcompat.widget.b1:
    androidx.appcompat.widget.ListPopupWindow this$0 -> a
androidx.appcompat.widget.ListPopupWindow$PopupScrollListener -> androidx.appcompat.widget.c1:
    androidx.appcompat.widget.ListPopupWindow this$0 -> a
androidx.appcompat.widget.ListPopupWindow$PopupTouchInterceptor -> androidx.appcompat.widget.d1:
    androidx.appcompat.widget.ListPopupWindow this$0 -> a
androidx.appcompat.widget.ListPopupWindow$ResizePopupRunnable -> androidx.appcompat.widget.e1:
    androidx.appcompat.widget.ListPopupWindow this$0 -> a
androidx.appcompat.widget.MenuPopupWindow -> androidx.appcompat.widget.MenuPopupWindow:
    java.lang.reflect.Method sSetTouchModalMethod -> K
    androidx.appcompat.widget.MenuItemHoverListener mHoverListener -> J
    androidx.appcompat.widget.DropDownListView createDropDownListView(android.content.Context,boolean) -> a
androidx.appcompat.widget.MenuPopupWindow$MenuDropDownListView -> androidx.appcompat.widget.MenuPopupWindow$MenuDropDownListView:
    int mAdvanceKey -> n
    int mRetreatKey -> o
    android.view.MenuItem mHoveredMenuItem -> q
    androidx.appcompat.widget.MenuItemHoverListener mHoverListener -> p
androidx.appcompat.widget.PopupMenu -> androidx.appcompat.widget.PopupMenu:
    android.content.Context mContext -> a
    androidx.appcompat.widget.PopupMenu$OnMenuItemClickListener mMenuItemClickListener -> e
    androidx.appcompat.view.menu.MenuBuilder mMenu -> b
    androidx.appcompat.view.menu.MenuPopupHelper mPopup -> d
    android.view.View mAnchor -> c
    android.view.View$OnTouchListener mDragListener -> g
    androidx.appcompat.widget.PopupMenu$OnDismissListener mOnDismissListener -> f
androidx.appcompat.widget.PopupMenu$1 -> androidx.appcompat.widget.f1:
    androidx.appcompat.widget.PopupMenu this$0 -> a
androidx.appcompat.widget.PopupMenu$2 -> androidx.appcompat.widget.g1:
    androidx.appcompat.widget.PopupMenu this$0 -> a
androidx.appcompat.widget.PopupMenu$3 -> androidx.appcompat.widget.h1:
    androidx.appcompat.widget.PopupMenu this$0 -> j
androidx.appcompat.widget.RtlSpacingHelper -> androidx.appcompat.widget.i1:
    int mExplicitRight -> f
    int mEnd -> d
    boolean mIsRtl -> g
    int mExplicitLeft -> e
    boolean mIsRelative -> h
    int mRight -> b
    int mStart -> c
    int mLeft -> a
androidx.appcompat.widget.ScrollingTabContainerView -> androidx.appcompat.widget.ScrollingTabContainerView:
    int mContentHeight -> h
    int mSelectedTabIndex -> i
    boolean mAllowCollapse -> e
    int mMaxTabWidth -> f
    androidx.appcompat.widget.ScrollingTabContainerView$TabClickListener mTabClickListener -> b
    int mStackedTabMaxWidth -> g
    android.widget.Spinner mTabSpinner -> d
    java.lang.Runnable mTabSelector -> a
    androidx.appcompat.widget.LinearLayoutCompat mTabLayout -> c
    android.view.animation.Interpolator sAlphaInterpolator -> j
    1:1:androidx.appcompat.widget.LinearLayoutCompat createTabLayout():0:0 -> <init>
    1:1:void <init>(android.content.Context):0 -> <init>
    2:2:void <init>(android.content.Context):0:0 -> <init>
    androidx.appcompat.widget.ScrollingTabContainerView$TabView createTabView(androidx.appcompat.app.ActionBar$Tab,boolean) -> a
    1:1:boolean isCollapsed():0:0 -> b
    1:1:boolean performExpand():0 -> b
    2:2:boolean performExpand():0:0 -> b
    1:1:boolean isCollapsed():0:0 -> onMeasure
    1:1:void performCollapse():0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:void performCollapse():0:0 -> onMeasure
    2:2:void onMeasure(int,int):0 -> onMeasure
    3:3:android.widget.Spinner createSpinner():0:0 -> onMeasure
    3:3:void performCollapse():0 -> onMeasure
    3:3:void onMeasure(int,int):0 -> onMeasure
    4:4:void performCollapse():0:0 -> onMeasure
    4:4:void onMeasure(int,int):0 -> onMeasure
    5:5:void onMeasure(int,int):0:0 -> onMeasure
androidx.appcompat.widget.ScrollingTabContainerView$1 -> androidx.appcompat.widget.j1:
    android.view.View val$tabView -> a
    androidx.appcompat.widget.ScrollingTabContainerView this$0 -> b
androidx.appcompat.widget.ScrollingTabContainerView$TabAdapter -> androidx.appcompat.widget.k1:
    androidx.appcompat.widget.ScrollingTabContainerView this$0 -> a
androidx.appcompat.widget.ScrollingTabContainerView$TabClickListener -> androidx.appcompat.widget.l1:
    androidx.appcompat.widget.ScrollingTabContainerView this$0 -> a
androidx.appcompat.widget.ScrollingTabContainerView$TabView -> androidx.appcompat.widget.m1:
    androidx.appcompat.widget.ScrollingTabContainerView this$0 -> f
    android.widget.TextView mTextView -> c
    int[] BG_ATTRS -> a
    androidx.appcompat.app.ActionBar$Tab mTab -> b
    android.widget.ImageView mIconView -> d
    android.view.View mCustomView -> e
androidx.appcompat.widget.ScrollingTabContainerView$VisibilityAnimListener -> androidx.appcompat.widget.ScrollingTabContainerView$VisibilityAnimListener:
    boolean mCanceled -> a
    int mFinalVisibility -> b
    androidx.appcompat.widget.ScrollingTabContainerView this$0 -> c
androidx.appcompat.widget.SearchView -> androidx.appcompat.widget.SearchView:
    boolean mExpandedInActionView -> d0
    android.view.View mDropDownAnchor -> x
    boolean mIconifiedByDefault -> P
    int mSuggestionCommitIconResId -> G
    java.lang.CharSequence mOldQueryText -> b0
    androidx.appcompat.widget.SearchView$UpdatableTouchDelegate mTouchDelegate -> y
    android.content.Intent mVoiceWebSearchIntent -> H
    android.os.Bundle mAppSearchData -> g0
    java.lang.Runnable mReleaseCursorRunnable -> i0
    java.lang.CharSequence mQueryHint -> T
    java.util.WeakHashMap mOutsideDrawablesCache -> j0
    androidx.appcompat.widget.SearchView$OnSuggestionListener mOnSuggestionListener -> N
    android.widget.AdapterView$OnItemClickListener mOnItemClickListener -> n0
    androidx.cursoradapter.widget.CursorAdapter mSuggestionsAdapter -> R
    android.widget.ImageView mVoiceButton -> w
    android.view.View$OnKeyListener mTextKeyListener -> l0
    boolean mQueryRefinement -> U
    android.view.View mSubmitArea -> s
    android.view.View$OnFocusChangeListener mOnQueryTextFocusChangeListener -> M
    boolean mIconified -> Q
    java.lang.CharSequence mDefaultQueryHint -> J
    android.widget.AdapterView$OnItemSelectedListener mOnItemSelectedListener -> o0
    android.widget.TextView$OnEditorActionListener mOnEditorActionListener -> m0
    androidx.appcompat.widget.SearchView$OnQueryTextListener mOnQueryChangeListener -> K
    android.widget.ImageView mCloseButton -> v
    boolean mVoiceButtonEnabled -> a0
    android.graphics.Rect mSearchSrcTextViewBounds -> z
    boolean mClearingFocus -> V
    android.view.View mSearchPlate -> r
    android.widget.ImageView mCollapsedIcon -> D
    java.lang.CharSequence mUserQuery -> c0
    android.view.View$OnClickListener mOnClickListener -> k0
    java.lang.Runnable mUpdateDrawableStateRunnable -> h0
    int[] mTemp2 -> C
    android.view.View$OnClickListener mOnSearchClickListener -> O
    android.widget.ImageView mGoButton -> u
    androidx.appcompat.widget.SearchView$OnCloseListener mOnCloseListener -> L
    android.graphics.drawable.Drawable mSearchHintIcon -> E
    androidx.appcompat.widget.SearchView$SearchAutoComplete mSearchSrcTextView -> p
    int mCollapsedImeOptions -> e0
    android.view.View mSearchEditFrame -> q
    int mSuggestionRowLayout -> F
    android.app.SearchableInfo mSearchable -> f0
    android.graphics.Rect mSearchSrtTextViewBoundsExpanded -> A
    boolean mSubmitButtonEnabled -> S
    int[] mTemp -> B
    androidx.appcompat.widget.SearchView$AutoCompleteTextViewReflector HIDDEN_METHOD_INVOKER -> q0
    int mMaxWidth -> W
    android.widget.ImageView mSearchButton -> t
    android.content.Intent mVoiceAppSearchIntent -> I
    android.text.TextWatcher mTextWatcher -> p0
    void updateFocusedState() -> A
    1:1:java.lang.CharSequence getDecoratedHint(java.lang.CharSequence):0:0 -> B
    1:1:void updateQueryHint():0 -> B
    2:2:void updateQueryHint():0:0 -> B
    void updateSubmitArea() -> C
    void updateSubmitButton(boolean) -> D
    void updateViewsVisibility(boolean) -> E
    void updateVoiceButton(boolean) -> F
    void adjustDropDownSizeAndPosition() -> h
    android.content.Intent createIntent(java.lang.String,android.net.Uri,java.lang.String,java.lang.String,int,java.lang.String) -> i
    android.content.Intent createVoiceAppSearchIntent(android.content.Intent,android.app.SearchableInfo) -> j
    int getSuggestionCommitIconResId() -> k
    int getSuggestionRowLayout() -> l
    boolean isSubmitAreaEnabled() -> m
    void launchQuerySearch(int,java.lang.String,java.lang.String) -> n
    void onCloseClicked() -> o
    1:1:void getChildBoundsWithinSearchView(android.view.View,android.graphics.Rect):0:0 -> onLayout
    1:1:void onLayout(boolean,int,int,int,int):0 -> onLayout
    2:2:void onLayout(boolean,int,int,int,int):0:0 -> onLayout
    1:1:int getPreferredWidth():0:0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:void onMeasure(int,int):0:0 -> onMeasure
    3:3:int getPreferredWidth():0:0 -> onMeasure
    3:3:void onMeasure(int,int):0 -> onMeasure
    4:4:void onMeasure(int,int):0:0 -> onMeasure
    5:5:int getPreferredHeight():0:0 -> onMeasure
    5:5:void onMeasure(int,int):0 -> onMeasure
    6:6:void onMeasure(int,int):0:0 -> onMeasure
    1:1:void postUpdateFocusedState():0:0 -> onWindowFocusChanged
    1:1:void onWindowFocusChanged(boolean):0 -> onWindowFocusChanged
    1:1:boolean launchSuggestion(int,int,java.lang.String):0:0 -> p
    1:1:boolean onItemClicked(int,int,java.lang.String):0 -> p
    2:2:android.content.Intent createIntentFromSuggestion(android.database.Cursor,int,java.lang.String):0:0 -> p
    2:2:boolean launchSuggestion(int,int,java.lang.String):0 -> p
    2:2:boolean onItemClicked(int,int,java.lang.String):0 -> p
    3:3:void launchIntent(android.content.Intent):0:0 -> p
    3:3:boolean launchSuggestion(int,int,java.lang.String):0 -> p
    3:3:boolean onItemClicked(int,int,java.lang.String):0 -> p
    4:4:boolean onItemClicked(int,int,java.lang.String):0:0 -> p
    5:5:void dismissSuggestions():0:0 -> p
    5:5:boolean onItemClicked(int,int,java.lang.String):0 -> p
    1:1:void rewriteQueryFromSuggestion(int):0:0 -> q
    1:1:boolean onItemSelected(int):0 -> q
    void onQueryRefine(java.lang.CharSequence) -> r
    void onSearchClicked() -> s
    1:1:void updateSearchAutoComplete():0:0 -> setSearchableInfo
    1:1:void setSearchableInfo(android.app.SearchableInfo):0 -> setSearchableInfo
    2:2:void setSearchableInfo(android.app.SearchableInfo):0:0 -> setSearchableInfo
    3:3:boolean hasVoiceSearch():0:0 -> setSearchableInfo
    3:3:void setSearchableInfo(android.app.SearchableInfo):0 -> setSearchableInfo
    4:4:void setSearchableInfo(android.app.SearchableInfo):0:0 -> setSearchableInfo
    1:1:void dismissSuggestions():0:0 -> t
    1:1:void onSubmitQuery():0 -> t
    boolean onSuggestionsKey(android.view.View,int,android.view.KeyEvent) -> u
    void onTextChanged(java.lang.CharSequence) -> v
    1:1:void postUpdateFocusedState():0:0 -> w
    1:1:void onTextFocusChanged():0 -> w
    2:2:void onTextFocusChanged():0:0 -> w
    3:3:void forceSuggestionQuery():0:0 -> w
    3:3:void onTextFocusChanged():0 -> w
    1:1:android.content.Intent createVoiceWebSearchIntent(android.content.Intent,android.app.SearchableInfo):0:0 -> x
    1:1:void onVoiceClicked():0 -> x
    2:2:void onVoiceClicked():0:0 -> x
    void setQuery(java.lang.CharSequence) -> y
    void updateCloseButton() -> z
androidx.appcompat.widget.SearchView$1 -> androidx.appcompat.widget.o1:
    androidx.appcompat.widget.SearchView this$0 -> a
androidx.appcompat.widget.SearchView$10 -> androidx.appcompat.widget.n1:
    androidx.appcompat.widget.SearchView this$0 -> a
androidx.appcompat.widget.SearchView$2 -> androidx.appcompat.widget.p1:
    androidx.appcompat.widget.SearchView this$0 -> a
androidx.appcompat.widget.SearchView$3 -> androidx.appcompat.widget.q1:
    androidx.appcompat.widget.SearchView this$0 -> a
androidx.appcompat.widget.SearchView$4 -> androidx.appcompat.widget.r1:
    androidx.appcompat.widget.SearchView this$0 -> a
androidx.appcompat.widget.SearchView$5 -> androidx.appcompat.widget.s1:
    androidx.appcompat.widget.SearchView this$0 -> a
    1:1:void androidx.appcompat.widget.SearchView.forceSuggestionQuery():0:0 -> onClick
    1:1:void onClick(android.view.View):0 -> onClick
androidx.appcompat.widget.SearchView$6 -> androidx.appcompat.widget.t1:
    androidx.appcompat.widget.SearchView this$0 -> a
    1:1:boolean androidx.appcompat.widget.SearchView$SearchAutoComplete.isEmpty():0:0 -> onKey
    1:1:boolean onKey(android.view.View,int,android.view.KeyEvent):0 -> onKey
    2:2:boolean onKey(android.view.View,int,android.view.KeyEvent):0:0 -> onKey
androidx.appcompat.widget.SearchView$7 -> androidx.appcompat.widget.u1:
    androidx.appcompat.widget.SearchView this$0 -> a
androidx.appcompat.widget.SearchView$8 -> androidx.appcompat.widget.v1:
    androidx.appcompat.widget.SearchView this$0 -> a
androidx.appcompat.widget.SearchView$9 -> androidx.appcompat.widget.w1:
    androidx.appcompat.widget.SearchView this$0 -> a
androidx.appcompat.widget.SearchView$AutoCompleteTextViewReflector -> androidx.appcompat.widget.x1:
    java.lang.reflect.Method ensureImeVisible -> c
    java.lang.reflect.Method doBeforeTextChanged -> a
    java.lang.reflect.Method doAfterTextChanged -> b
    void doAfterTextChanged(android.widget.AutoCompleteTextView) -> a
    void doBeforeTextChanged(android.widget.AutoCompleteTextView) -> b
    void ensureImeVisible(android.widget.AutoCompleteTextView,boolean) -> c
androidx.appcompat.widget.SearchView$SavedState -> androidx.appcompat.widget.SearchView$SavedState:
    boolean isIconified -> b
androidx.appcompat.widget.SearchView$SavedState$1 -> androidx.appcompat.widget.y1:
    1:1:androidx.appcompat.widget.SearchView$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    2:2:androidx.appcompat.widget.SearchView$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    2:2:java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader):0 -> createFromParcel
    1:1:androidx.appcompat.widget.SearchView$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.appcompat.widget.SearchView$SearchAutoComplete -> androidx.appcompat.widget.SearchView$SearchAutoComplete:
    java.lang.Runnable mRunShowSoftInputIfNecessary -> g
    boolean mHasPendingShowSoftInputRequest -> f
    int mThreshold -> d
    androidx.appcompat.widget.SearchView mSearchView -> e
    void setImeVisibility(boolean) -> a
    void setSearchView(androidx.appcompat.widget.SearchView) -> b
    void showSoftInputIfNecessary() -> c
    1:1:int getSearchViewTextMinWidthDp():0:0 -> onFinishInflate
    1:1:void onFinishInflate():0 -> onFinishInflate
    2:2:void onFinishInflate():0:0 -> onFinishInflate
    1:1:boolean androidx.appcompat.widget.SearchView.isLandscapeMode(android.content.Context):0:0 -> onWindowFocusChanged
    1:1:void onWindowFocusChanged(boolean):0 -> onWindowFocusChanged
    2:2:void onWindowFocusChanged(boolean):0:0 -> onWindowFocusChanged
androidx.appcompat.widget.SearchView$SearchAutoComplete$1 -> androidx.appcompat.widget.z1:
    androidx.appcompat.widget.SearchView$SearchAutoComplete this$0 -> a
androidx.appcompat.widget.SearchView$UpdatableTouchDelegate -> androidx.appcompat.widget.a2:
    android.view.View mDelegateView -> a
    boolean mDelegateTargeted -> f
    int mSlop -> e
    android.graphics.Rect mActualBounds -> c
    android.graphics.Rect mSlopBounds -> d
    android.graphics.Rect mTargetBounds -> b
androidx.appcompat.widget.ShareActionProvider -> androidx.appcompat.widget.ShareActionProvider:
    java.lang.String mShareHistoryFileName -> g
    androidx.appcompat.widget.ShareActionProvider$OnShareTargetSelectedListener mOnShareTargetSelectedListener -> h
    int mMaxShownActivityCount -> d
    androidx.appcompat.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener mOnMenuItemClickListener -> e
    android.content.Context mContext -> f
    androidx.appcompat.widget.ActivityChooserModel$OnChooseActivityListener mOnChooseActivityListener -> i
    void setActivityChooserPolicyIfNeeded() -> a
    1:1:void updateIntent(android.content.Intent):0:0 -> setShareIntent
    1:1:void setShareIntent(android.content.Intent):0 -> setShareIntent
    2:2:void setShareIntent(android.content.Intent):0:0 -> setShareIntent
androidx.appcompat.widget.ShareActionProvider$ShareActivityChooserModelPolicy -> androidx.appcompat.widget.b2:
    androidx.appcompat.widget.ShareActionProvider this$0 -> a
androidx.appcompat.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener -> androidx.appcompat.widget.c2:
    androidx.appcompat.widget.ShareActionProvider this$0 -> a
    1:1:void androidx.appcompat.widget.ShareActionProvider.updateIntent(android.content.Intent):0:0 -> onMenuItemClick
    1:1:boolean onMenuItemClick(android.view.MenuItem):0 -> onMenuItemClick
    2:2:boolean onMenuItemClick(android.view.MenuItem):0:0 -> onMenuItemClick
androidx.appcompat.widget.SuggestionsAdapter -> androidx.appcompat.widget.e2:
    int mIconName1Col -> n
    android.app.SearchableInfo mSearchable -> e
    int mIconName2Col -> o
    int mText2Col -> l
    int mText2UrlCol -> m
    int mText1Col -> k
    int mCommitIconResId -> h
    java.util.WeakHashMap mOutsideDrawablesCache -> g
    int mQueryRefinement -> i
    androidx.appcompat.widget.SearchView mSearchView -> d
    android.content.Context mProviderContext -> f
    android.content.res.ColorStateList mUrlColor -> j
    int mFlagsCol -> p
    android.graphics.drawable.Drawable getDrawableFromResourceUri(android.net.Uri) -> b
    1:1:void setViewText(android.widget.TextView,java.lang.CharSequence):0:0 -> bindView
    1:1:void bindView(android.view.View,android.content.Context,android.database.Cursor):0 -> bindView
    2:2:void bindView(android.view.View,android.content.Context,android.database.Cursor):0:0 -> bindView
    3:3:java.lang.CharSequence formatUrl(java.lang.CharSequence):0:0 -> bindView
    3:3:void bindView(android.view.View,android.content.Context,android.database.Cursor):0 -> bindView
    4:4:void bindView(android.view.View,android.content.Context,android.database.Cursor):0:0 -> bindView
    5:5:void setViewText(android.widget.TextView,java.lang.CharSequence):0:0 -> bindView
    5:5:void bindView(android.view.View,android.content.Context,android.database.Cursor):0 -> bindView
    6:6:void bindView(android.view.View,android.content.Context,android.database.Cursor):0:0 -> bindView
    7:7:android.graphics.drawable.Drawable getIcon1(android.database.Cursor):0:0 -> bindView
    7:7:void bindView(android.view.View,android.content.Context,android.database.Cursor):0 -> bindView
    8:8:android.graphics.drawable.Drawable getDefaultIcon1(android.database.Cursor):0:0 -> bindView
    8:8:android.graphics.drawable.Drawable getIcon1(android.database.Cursor):0 -> bindView
    8:8:void bindView(android.view.View,android.content.Context,android.database.Cursor):0 -> bindView
    9:9:android.graphics.drawable.Drawable getActivityIconWithCache(android.content.ComponentName):0:0 -> bindView
    9:9:android.graphics.drawable.Drawable getDefaultIcon1(android.database.Cursor):0 -> bindView
    9:9:android.graphics.drawable.Drawable getIcon1(android.database.Cursor):0 -> bindView
    9:9:void bindView(android.view.View,android.content.Context,android.database.Cursor):0 -> bindView
    10:10:android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName):0:0 -> bindView
    10:10:android.graphics.drawable.Drawable getActivityIconWithCache(android.content.ComponentName):0 -> bindView
    10:10:android.graphics.drawable.Drawable getDefaultIcon1(android.database.Cursor):0 -> bindView
    10:10:android.graphics.drawable.Drawable getIcon1(android.database.Cursor):0 -> bindView
    10:10:void bindView(android.view.View,android.content.Context,android.database.Cursor):0 -> bindView
    11:11:android.graphics.drawable.Drawable getActivityIconWithCache(android.content.ComponentName):0:0 -> bindView
    11:11:android.graphics.drawable.Drawable getDefaultIcon1(android.database.Cursor):0 -> bindView
    11:11:android.graphics.drawable.Drawable getIcon1(android.database.Cursor):0 -> bindView
    11:11:void bindView(android.view.View,android.content.Context,android.database.Cursor):0 -> bindView
    12:12:android.graphics.drawable.Drawable getDefaultIcon1(android.database.Cursor):0:0 -> bindView
    12:12:android.graphics.drawable.Drawable getIcon1(android.database.Cursor):0 -> bindView
    12:12:void bindView(android.view.View,android.content.Context,android.database.Cursor):0 -> bindView
    13:13:void setViewDrawable(android.widget.ImageView,android.graphics.drawable.Drawable,int):0:0 -> bindView
    13:13:void bindView(android.view.View,android.content.Context,android.database.Cursor):0 -> bindView
    14:14:void bindView(android.view.View,android.content.Context,android.database.Cursor):0:0 -> bindView
    15:15:android.graphics.drawable.Drawable getIcon2(android.database.Cursor):0:0 -> bindView
    15:15:void bindView(android.view.View,android.content.Context,android.database.Cursor):0 -> bindView
    16:16:void setViewDrawable(android.widget.ImageView,android.graphics.drawable.Drawable,int):0:0 -> bindView
    16:16:void bindView(android.view.View,android.content.Context,android.database.Cursor):0 -> bindView
    17:17:void bindView(android.view.View,android.content.Context,android.database.Cursor):0:0 -> bindView
    1:1:android.graphics.drawable.Drawable checkIconCache(java.lang.String):0:0 -> c
    1:1:android.graphics.drawable.Drawable getDrawableFromResourceValue(java.lang.String):0 -> c
    2:2:android.graphics.drawable.Drawable getDrawableFromResourceValue(java.lang.String):0:0 -> c
    3:3:void storeInIconCache(java.lang.String,android.graphics.drawable.Drawable):0:0 -> c
    3:3:android.graphics.drawable.Drawable getDrawableFromResourceValue(java.lang.String):0 -> c
    4:4:android.graphics.drawable.Drawable getDrawableFromResourceValue(java.lang.String):0:0 -> c
    5:5:android.graphics.drawable.Drawable checkIconCache(java.lang.String):0:0 -> c
    5:5:android.graphics.drawable.Drawable getDrawableFromResourceValue(java.lang.String):0 -> c
    6:6:android.graphics.drawable.Drawable getDrawableFromResourceValue(java.lang.String):0:0 -> c
    7:7:android.graphics.drawable.Drawable getDrawable(android.net.Uri):0:0 -> c
    7:7:android.graphics.drawable.Drawable getDrawableFromResourceValue(java.lang.String):0 -> c
    8:8:void storeInIconCache(java.lang.String,android.graphics.drawable.Drawable):0:0 -> c
    8:8:android.graphics.drawable.Drawable getDrawableFromResourceValue(java.lang.String):0 -> c
    1:1:java.lang.String getColumnString(android.database.Cursor,java.lang.String):0:0 -> convertToString
    1:1:java.lang.CharSequence convertToString(android.database.Cursor):0 -> convertToString
    2:2:java.lang.CharSequence convertToString(android.database.Cursor):0:0 -> convertToString
    3:3:java.lang.String getColumnString(android.database.Cursor,java.lang.String):0:0 -> convertToString
    3:3:java.lang.CharSequence convertToString(android.database.Cursor):0 -> convertToString
    4:4:java.lang.CharSequence convertToString(android.database.Cursor):0:0 -> convertToString
    5:5:java.lang.String getColumnString(android.database.Cursor,java.lang.String):0:0 -> convertToString
    5:5:java.lang.CharSequence convertToString(android.database.Cursor):0 -> convertToString
    android.database.Cursor getSearchManagerSuggestions(android.app.SearchableInfo,java.lang.String,int) -> d
    java.lang.String getStringOrNull(android.database.Cursor,int) -> e
    void updateSpinnerState(android.database.Cursor) -> f
androidx.appcompat.widget.SuggestionsAdapter$ChildViewCache -> androidx.appcompat.widget.d2:
    android.widget.TextView mText1 -> a
    android.widget.TextView mText2 -> b
    android.widget.ImageView mIcon2 -> d
    android.widget.ImageView mIconRefine -> e
    android.widget.ImageView mIcon1 -> c
androidx.appcompat.widget.SwitchCompat -> androidx.appcompat.widget.SwitchCompat:
    int mSwitchMinWidth -> l
    boolean mHasTrackTint -> i
    int mSwitchBottom -> E
    boolean mShowText -> q
    android.animation.ObjectAnimator mPositionAnimator -> K
    int mSwitchTop -> C
    android.graphics.drawable.Drawable mThumbDrawable -> a
    int mThumbWidth -> A
    android.text.method.TransformationMethod mSwitchTransformationMethod -> J
    java.lang.CharSequence mTextOn -> o
    float mTouchY -> u
    int mSwitchWidth -> y
    android.util.Property THUMB_POS -> M
    android.content.res.ColorStateList mTrackTintList -> g
    int mMinFlingVelocity -> w
    android.view.VelocityTracker mVelocityTracker -> v
    android.text.Layout mOffLayout -> I
    int mTouchSlop -> s
    boolean mHasThumbTint -> d
    boolean mSplitTrack -> n
    android.graphics.drawable.Drawable mTrackDrawable -> f
    int mSwitchPadding -> m
    boolean mHasTrackTintMode -> j
    int mThumbTextPadding -> k
    int mSwitchRight -> D
    android.graphics.PorterDuff$Mode mThumbTintMode -> c
    int mSwitchLeft -> B
    android.text.TextPaint mTextPaint -> F
    android.content.res.ColorStateList mThumbTintList -> b
    java.lang.CharSequence mTextOff -> p
    float mThumbPosition -> x
    int mSwitchHeight -> z
    android.graphics.Rect mTempRect -> L
    android.graphics.PorterDuff$Mode mTrackTintMode -> h
    int[] CHECKED_STATE_SET -> N
    boolean mHasThumbTintMode -> e
    float mTouchX -> t
    android.content.res.ColorStateList mTextColors -> G
    int mTouchMode -> r
    android.text.Layout mOnLayout -> H
    void applyThumbTint() -> a
    void applyTrackTint() -> b
    int getThumbOffset() -> c
    int getThumbScrollRange() -> d
    android.text.Layout makeLayout(java.lang.CharSequence) -> e
    1:1:boolean getTargetCheckedState():0:0 -> onDraw
    1:1:void onDraw(android.graphics.Canvas):0 -> onDraw
    2:2:void onDraw(android.graphics.Canvas):0:0 -> onDraw
    1:1:void setThumbPosition(float):0:0 -> onTouchEvent
    1:1:boolean onTouchEvent(android.view.MotionEvent):0 -> onTouchEvent
    2:2:boolean onTouchEvent(android.view.MotionEvent):0:0 -> onTouchEvent
    3:3:void stopDrag(android.view.MotionEvent):0:0 -> onTouchEvent
    3:3:boolean onTouchEvent(android.view.MotionEvent):0 -> onTouchEvent
    4:4:boolean getTargetCheckedState():0:0 -> onTouchEvent
    4:4:void stopDrag(android.view.MotionEvent):0 -> onTouchEvent
    4:4:boolean onTouchEvent(android.view.MotionEvent):0 -> onTouchEvent
    5:5:void stopDrag(android.view.MotionEvent):0:0 -> onTouchEvent
    5:5:boolean onTouchEvent(android.view.MotionEvent):0 -> onTouchEvent
    6:6:void cancelSuperTouch(android.view.MotionEvent):0:0 -> onTouchEvent
    6:6:void stopDrag(android.view.MotionEvent):0 -> onTouchEvent
    6:6:boolean onTouchEvent(android.view.MotionEvent):0 -> onTouchEvent
    7:7:boolean onTouchEvent(android.view.MotionEvent):0:0 -> onTouchEvent
    8:8:boolean hitThumb(float,float):0:0 -> onTouchEvent
    8:8:boolean onTouchEvent(android.view.MotionEvent):0 -> onTouchEvent
    9:9:boolean onTouchEvent(android.view.MotionEvent):0:0 -> onTouchEvent
    1:1:void animateThumbToCheckedState(boolean):0:0 -> setChecked
    1:1:void setChecked(boolean):0 -> setChecked
    2:2:void cancelPositionAnimator():0:0 -> setChecked
    2:2:void setChecked(boolean):0 -> setChecked
    3:3:void setThumbPosition(float):0:0 -> setChecked
    3:3:void setChecked(boolean):0 -> setChecked
    1:1:void setSwitchTypefaceByIndex(int,int):0:0 -> setSwitchTextAppearance
    1:1:void setSwitchTextAppearance(android.content.Context,int):0 -> setSwitchTextAppearance
    2:2:void setSwitchTextAppearance(android.content.Context,int):0:0 -> setSwitchTextAppearance
androidx.appcompat.widget.SwitchCompat$1 -> androidx.appcompat.widget.f2:
    1:1:java.lang.Float get(androidx.appcompat.widget.SwitchCompat):0:0 -> get
    1:1:java.lang.Object get(java.lang.Object):0 -> get
    1:1:void set(androidx.appcompat.widget.SwitchCompat,java.lang.Float):0:0 -> set
    1:1:void set(java.lang.Object,java.lang.Object):0 -> set
    2:2:void androidx.appcompat.widget.SwitchCompat.setThumbPosition(float):0:0 -> set
    2:2:void set(androidx.appcompat.widget.SwitchCompat,java.lang.Float):0 -> set
    2:2:void set(java.lang.Object,java.lang.Object):0 -> set
androidx.appcompat.widget.ThemeUtils -> androidx.appcompat.widget.g2:
    int[] EMPTY_STATE_SET -> f
    int[] TEMP_ARRAY -> g
    java.lang.ThreadLocal TL_TYPED_VALUE -> a
    int[] DISABLED_STATE_SET -> b
    int[] FOCUSED_STATE_SET -> c
    int[] PRESSED_STATE_SET -> d
    int[] CHECKED_STATE_SET -> e
    1:1:android.util.TypedValue getTypedValue():0:0 -> getDisabledThemeAttrColor
    1:1:int getDisabledThemeAttrColor(android.content.Context,int):0 -> getDisabledThemeAttrColor
    2:2:int getDisabledThemeAttrColor(android.content.Context,int):0:0 -> getDisabledThemeAttrColor
    3:3:int getThemeAttrColor(android.content.Context,int,float):0:0 -> getDisabledThemeAttrColor
    3:3:int getDisabledThemeAttrColor(android.content.Context,int):0 -> getDisabledThemeAttrColor
androidx.appcompat.widget.ThemedSpinnerAdapter$Helper -> androidx.appcompat.widget.ThemedSpinnerAdapter$Helper:
    android.content.Context mContext -> a
    android.view.LayoutInflater mInflater -> b
    android.view.LayoutInflater mDropDownInflater -> c
androidx.appcompat.widget.TintContextWrapper -> androidx.appcompat.widget.TintContextWrapper:
    android.content.res.Resources$Theme mTheme -> b
    java.lang.Object CACHE_LOCK -> c
    java.util.ArrayList sCache -> d
    android.content.res.Resources mResources -> a
    1:1:boolean shouldWrap(android.content.Context):0:0 -> wrap
    1:1:android.content.Context wrap(android.content.Context):0 -> wrap
    2:2:android.content.Context wrap(android.content.Context):0:0 -> wrap
androidx.appcompat.widget.TintInfo -> androidx.appcompat.widget.h2:
    android.content.res.ColorStateList mTintList -> a
    android.graphics.PorterDuff$Mode mTintMode -> b
    boolean mHasTintMode -> c
    boolean mHasTintList -> d
androidx.appcompat.widget.TintResources -> androidx.appcompat.widget.i2:
    java.lang.ref.WeakReference mContextRef -> b
    android.content.res.Resources androidx.appcompat.widget.ResourcesWrapper.mResources -> a
    1:1:void androidx.appcompat.widget.ResourcesWrapper.<init>(android.content.res.Resources):0:0 -> <init>
    1:1:void <init>(android.content.Context,android.content.res.Resources):0 -> <init>
    2:2:void <init>(android.content.Context,android.content.res.Resources):0:0 -> <init>
    1:1:android.content.res.XmlResourceParser androidx.appcompat.widget.ResourcesWrapper.getAnimation(int):0:0 -> getAnimation
    1:1:android.content.res.XmlResourceParser androidx.appcompat.widget.ResourcesWrapper.getAnimation(int):0 -> getAnimation
    1:1:boolean androidx.appcompat.widget.ResourcesWrapper.getBoolean(int):0:0 -> getBoolean
    1:1:boolean androidx.appcompat.widget.ResourcesWrapper.getBoolean(int):0 -> getBoolean
    1:1:int androidx.appcompat.widget.ResourcesWrapper.getColor(int):0:0 -> getColor
    1:1:int androidx.appcompat.widget.ResourcesWrapper.getColor(int):0 -> getColor
    1:1:android.content.res.ColorStateList androidx.appcompat.widget.ResourcesWrapper.getColorStateList(int):0:0 -> getColorStateList
    1:1:android.content.res.ColorStateList androidx.appcompat.widget.ResourcesWrapper.getColorStateList(int):0 -> getColorStateList
    1:1:android.content.res.Configuration androidx.appcompat.widget.ResourcesWrapper.getConfiguration():0:0 -> getConfiguration
    1:1:android.content.res.Configuration androidx.appcompat.widget.ResourcesWrapper.getConfiguration():0 -> getConfiguration
    1:1:float androidx.appcompat.widget.ResourcesWrapper.getDimension(int):0:0 -> getDimension
    1:1:float androidx.appcompat.widget.ResourcesWrapper.getDimension(int):0 -> getDimension
    1:1:int androidx.appcompat.widget.ResourcesWrapper.getDimensionPixelOffset(int):0:0 -> getDimensionPixelOffset
    1:1:int androidx.appcompat.widget.ResourcesWrapper.getDimensionPixelOffset(int):0 -> getDimensionPixelOffset
    1:1:int androidx.appcompat.widget.ResourcesWrapper.getDimensionPixelSize(int):0:0 -> getDimensionPixelSize
    1:1:int androidx.appcompat.widget.ResourcesWrapper.getDimensionPixelSize(int):0 -> getDimensionPixelSize
    1:1:android.util.DisplayMetrics androidx.appcompat.widget.ResourcesWrapper.getDisplayMetrics():0:0 -> getDisplayMetrics
    1:1:android.util.DisplayMetrics androidx.appcompat.widget.ResourcesWrapper.getDisplayMetrics():0 -> getDisplayMetrics
    1:1:android.graphics.drawable.Drawable androidx.appcompat.widget.ResourcesWrapper.getDrawable(int):0:0 -> getDrawable
    1:1:android.graphics.drawable.Drawable getDrawable(int):0 -> getDrawable
    2:2:android.graphics.drawable.Drawable getDrawable(int):0:0 -> getDrawable
    3:3:android.graphics.drawable.Drawable androidx.appcompat.widget.ResourcesWrapper.getDrawable(int,android.content.res.Resources$Theme):0:0 -> getDrawable
    3:3:android.graphics.drawable.Drawable androidx.appcompat.widget.ResourcesWrapper.getDrawable(int,android.content.res.Resources$Theme):0 -> getDrawable
    1:1:android.graphics.drawable.Drawable androidx.appcompat.widget.ResourcesWrapper.getDrawableForDensity(int,int):0:0 -> getDrawableForDensity
    1:1:android.graphics.drawable.Drawable androidx.appcompat.widget.ResourcesWrapper.getDrawableForDensity(int,int):0 -> getDrawableForDensity
    2:2:android.graphics.drawable.Drawable androidx.appcompat.widget.ResourcesWrapper.getDrawableForDensity(int,int,android.content.res.Resources$Theme):0:0 -> getDrawableForDensity
    2:2:android.graphics.drawable.Drawable androidx.appcompat.widget.ResourcesWrapper.getDrawableForDensity(int,int,android.content.res.Resources$Theme):0 -> getDrawableForDensity
    1:1:float androidx.appcompat.widget.ResourcesWrapper.getFraction(int,int,int):0:0 -> getFraction
    1:1:float androidx.appcompat.widget.ResourcesWrapper.getFraction(int,int,int):0 -> getFraction
    1:1:int androidx.appcompat.widget.ResourcesWrapper.getIdentifier(java.lang.String,java.lang.String,java.lang.String):0:0 -> getIdentifier
    1:1:int androidx.appcompat.widget.ResourcesWrapper.getIdentifier(java.lang.String,java.lang.String,java.lang.String):0 -> getIdentifier
    1:1:int[] androidx.appcompat.widget.ResourcesWrapper.getIntArray(int):0:0 -> getIntArray
    1:1:int[] androidx.appcompat.widget.ResourcesWrapper.getIntArray(int):0 -> getIntArray
    1:1:int androidx.appcompat.widget.ResourcesWrapper.getInteger(int):0:0 -> getInteger
    1:1:int androidx.appcompat.widget.ResourcesWrapper.getInteger(int):0 -> getInteger
    1:1:android.content.res.XmlResourceParser androidx.appcompat.widget.ResourcesWrapper.getLayout(int):0:0 -> getLayout
    1:1:android.content.res.XmlResourceParser androidx.appcompat.widget.ResourcesWrapper.getLayout(int):0 -> getLayout
    1:1:android.graphics.Movie androidx.appcompat.widget.ResourcesWrapper.getMovie(int):0:0 -> getMovie
    1:1:android.graphics.Movie androidx.appcompat.widget.ResourcesWrapper.getMovie(int):0 -> getMovie
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getQuantityString(int,int):0:0 -> getQuantityString
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getQuantityString(int,int):0 -> getQuantityString
    2:2:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getQuantityString(int,int,java.lang.Object[]):0:0 -> getQuantityString
    2:2:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getQuantityString(int,int,java.lang.Object[]):0 -> getQuantityString
    1:1:java.lang.CharSequence androidx.appcompat.widget.ResourcesWrapper.getQuantityText(int,int):0:0 -> getQuantityText
    1:1:java.lang.CharSequence androidx.appcompat.widget.ResourcesWrapper.getQuantityText(int,int):0 -> getQuantityText
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getResourceEntryName(int):0:0 -> getResourceEntryName
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getResourceEntryName(int):0 -> getResourceEntryName
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getResourceName(int):0:0 -> getResourceName
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getResourceName(int):0 -> getResourceName
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getResourcePackageName(int):0:0 -> getResourcePackageName
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getResourcePackageName(int):0 -> getResourcePackageName
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getResourceTypeName(int):0:0 -> getResourceTypeName
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getResourceTypeName(int):0 -> getResourceTypeName
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getString(int):0:0 -> getString
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getString(int):0 -> getString
    2:2:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getString(int,java.lang.Object[]):0:0 -> getString
    2:2:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getString(int,java.lang.Object[]):0 -> getString
    1:1:java.lang.String[] androidx.appcompat.widget.ResourcesWrapper.getStringArray(int):0:0 -> getStringArray
    1:1:java.lang.String[] androidx.appcompat.widget.ResourcesWrapper.getStringArray(int):0 -> getStringArray
    1:1:java.lang.CharSequence androidx.appcompat.widget.ResourcesWrapper.getText(int):0:0 -> getText
    1:1:java.lang.CharSequence androidx.appcompat.widget.ResourcesWrapper.getText(int):0 -> getText
    2:2:java.lang.CharSequence androidx.appcompat.widget.ResourcesWrapper.getText(int,java.lang.CharSequence):0:0 -> getText
    2:2:java.lang.CharSequence androidx.appcompat.widget.ResourcesWrapper.getText(int,java.lang.CharSequence):0 -> getText
    1:1:java.lang.CharSequence[] androidx.appcompat.widget.ResourcesWrapper.getTextArray(int):0:0 -> getTextArray
    1:1:java.lang.CharSequence[] androidx.appcompat.widget.ResourcesWrapper.getTextArray(int):0 -> getTextArray
    1:1:void androidx.appcompat.widget.ResourcesWrapper.getValue(int,android.util.TypedValue,boolean):0:0 -> getValue
    1:1:void androidx.appcompat.widget.ResourcesWrapper.getValue(int,android.util.TypedValue,boolean):0 -> getValue
    2:2:void androidx.appcompat.widget.ResourcesWrapper.getValue(java.lang.String,android.util.TypedValue,boolean):0:0 -> getValue
    2:2:void androidx.appcompat.widget.ResourcesWrapper.getValue(java.lang.String,android.util.TypedValue,boolean):0 -> getValue
    1:1:void androidx.appcompat.widget.ResourcesWrapper.getValueForDensity(int,int,android.util.TypedValue,boolean):0:0 -> getValueForDensity
    1:1:void androidx.appcompat.widget.ResourcesWrapper.getValueForDensity(int,int,android.util.TypedValue,boolean):0 -> getValueForDensity
    1:1:android.content.res.XmlResourceParser androidx.appcompat.widget.ResourcesWrapper.getXml(int):0:0 -> getXml
    1:1:android.content.res.XmlResourceParser androidx.appcompat.widget.ResourcesWrapper.getXml(int):0 -> getXml
    1:1:android.content.res.TypedArray androidx.appcompat.widget.ResourcesWrapper.obtainAttributes(android.util.AttributeSet,int[]):0:0 -> obtainAttributes
    1:1:android.content.res.TypedArray androidx.appcompat.widget.ResourcesWrapper.obtainAttributes(android.util.AttributeSet,int[]):0 -> obtainAttributes
    1:1:android.content.res.TypedArray androidx.appcompat.widget.ResourcesWrapper.obtainTypedArray(int):0:0 -> obtainTypedArray
    1:1:android.content.res.TypedArray androidx.appcompat.widget.ResourcesWrapper.obtainTypedArray(int):0 -> obtainTypedArray
    1:1:java.io.InputStream androidx.appcompat.widget.ResourcesWrapper.openRawResource(int):0:0 -> openRawResource
    1:1:java.io.InputStream androidx.appcompat.widget.ResourcesWrapper.openRawResource(int):0 -> openRawResource
    2:2:java.io.InputStream androidx.appcompat.widget.ResourcesWrapper.openRawResource(int,android.util.TypedValue):0:0 -> openRawResource
    2:2:java.io.InputStream androidx.appcompat.widget.ResourcesWrapper.openRawResource(int,android.util.TypedValue):0 -> openRawResource
    1:1:android.content.res.AssetFileDescriptor androidx.appcompat.widget.ResourcesWrapper.openRawResourceFd(int):0:0 -> openRawResourceFd
    1:1:android.content.res.AssetFileDescriptor androidx.appcompat.widget.ResourcesWrapper.openRawResourceFd(int):0 -> openRawResourceFd
    1:1:void androidx.appcompat.widget.ResourcesWrapper.parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle):0:0 -> parseBundleExtra
    1:1:void androidx.appcompat.widget.ResourcesWrapper.parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle):0 -> parseBundleExtra
    1:1:void androidx.appcompat.widget.ResourcesWrapper.parseBundleExtras(android.content.res.XmlResourceParser,android.os.Bundle):0:0 -> parseBundleExtras
    1:1:void androidx.appcompat.widget.ResourcesWrapper.parseBundleExtras(android.content.res.XmlResourceParser,android.os.Bundle):0 -> parseBundleExtras
    1:1:void androidx.appcompat.widget.ResourcesWrapper.updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics):0:0 -> updateConfiguration
    1:1:void androidx.appcompat.widget.ResourcesWrapper.updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics):0 -> updateConfiguration
androidx.appcompat.widget.TintTypedArray -> androidx.appcompat.widget.TintTypedArray:
    android.content.Context mContext -> a
    android.content.res.TypedArray mWrapped -> b
    android.util.TypedValue mTypedValue -> c
androidx.appcompat.widget.Toolbar -> androidx.appcompat.widget.Toolbar:
    int mButtonGravity -> n
    boolean mCollapsible -> N
    int mTitleTextAppearance -> l
    androidx.appcompat.view.menu.MenuBuilder$Callback mMenuBuilderCallback -> M
    java.util.ArrayList mTempViews -> D
    android.widget.ImageView mLogoView -> e
    androidx.appcompat.widget.ActionMenuPresenter mOuterActionMenuPresenter -> J
    int mSubtitleTextColor -> A
    android.view.View mExpandedActionView -> i
    androidx.appcompat.widget.ActionMenuView$OnMenuItemClickListener mMenuViewItemClickListener -> H
    android.widget.TextView mTitleTextView -> b
    androidx.appcompat.widget.ActionMenuView mMenuView -> a
    android.widget.ImageButton mCollapseButtonView -> h
    int mGravity -> w
    androidx.appcompat.widget.Toolbar$OnMenuItemClickListener mOnMenuItemClickListener -> G
    int mContentInsetStartWithNavigation -> u
    android.widget.ImageButton mNavButtonView -> d
    int mTitleMarginBottom -> s
    java.lang.CharSequence mSubtitleText -> y
    boolean mEatingHover -> C
    int mTitleMarginEnd -> q
    int mMaxButtonHeight -> o
    android.graphics.drawable.Drawable mCollapseIcon -> f
    int mSubtitleTextAppearance -> m
    int mPopupTheme -> k
    androidx.appcompat.widget.ToolbarWidgetWrapper mWrapper -> I
    java.util.ArrayList mHiddenViews -> E
    java.lang.CharSequence mCollapseDescription -> g
    android.content.Context mPopupContext -> j
    androidx.appcompat.view.menu.MenuPresenter$Callback mActionMenuPresenterCallback -> L
    int[] mTempMargins -> F
    android.widget.TextView mSubtitleTextView -> c
    int mTitleTextColor -> z
    androidx.appcompat.widget.Toolbar$ExpandedActionViewMenuPresenter mExpandedMenuPresenter -> K
    androidx.appcompat.widget.RtlSpacingHelper mContentInsets -> t
    int mContentInsetEndWithActions -> v
    int mTitleMarginTop -> r
    java.lang.CharSequence mTitleText -> x
    boolean mEatingTouch -> B
    int mTitleMarginStart -> p
    java.lang.Runnable mShowOverflowMenuRunnable -> O
    void addChildrenForExpandedActionView() -> a
    void addCustomViewsWithGravity(java.util.List,int) -> b
    void addSystemView(android.view.View,boolean) -> c
    void ensureCollapseButtonView() -> d
    void ensureContentInsets() -> e
    void ensureMenu() -> f
    void ensureMenuView() -> g
    void ensureNavButtonView() -> h
    int getChildHorizontalGravity(int) -> i
    1:1:android.view.MenuInflater getMenuInflater():0:0 -> inflateMenu
    1:1:void inflateMenu(int):0 -> inflateMenu
    2:2:void inflateMenu(int):0:0 -> inflateMenu
    1:1:int getChildVerticalGravity(int):0:0 -> j
    1:1:int getChildTop(android.view.View,int):0 -> j
    2:2:int getChildTop(android.view.View,int):0:0 -> j
    int getHorizontalMargins(android.view.View) -> k
    int getVerticalMargins(android.view.View) -> l
    boolean isChildOrHidden(android.view.View) -> m
    int layoutChildLeft(android.view.View,int,int[],int) -> n
    int layoutChildRight(android.view.View,int,int[],int) -> o
    1:1:int getViewListMeasuredWidth(java.util.List,int[]):0:0 -> onLayout
    1:1:void onLayout(boolean,int,int,int,int):0 -> onLayout
    2:2:void onLayout(boolean,int,int,int,int):0:0 -> onLayout
    1:1:boolean shouldCollapse():0:0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:void onMeasure(int,int):0:0 -> onMeasure
    1:1:void postShowOverflowMenu():0:0 -> onRestoreInstanceState
    1:1:void onRestoreInstanceState(android.os.Parcelable):0 -> onRestoreInstanceState
    int measureChildCollapseMargins(android.view.View,int,int,int,int,int[]) -> p
    void measureChildConstrained(android.view.View,int,int,int,int,int) -> q
    void removeChildrenForExpandedActionView() -> r
    boolean shouldLayout(android.view.View) -> s
    1:1:void ensureLogoView():0:0 -> setLogo
    1:1:void setLogo(android.graphics.drawable.Drawable):0 -> setLogo
    2:2:void setLogo(android.graphics.drawable.Drawable):0:0 -> setLogo
    1:1:void ensureLogoView():0:0 -> setLogoDescription
    1:1:void setLogoDescription(java.lang.CharSequence):0 -> setLogoDescription
    2:2:void setLogoDescription(java.lang.CharSequence):0:0 -> setLogoDescription
    1:1:void androidx.appcompat.widget.Toolbar$ExpandedActionViewMenuPresenter.initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder):0:0 -> setMenu
    1:1:void setMenu(androidx.appcompat.view.menu.MenuBuilder,androidx.appcompat.widget.ActionMenuPresenter):0 -> setMenu
    2:2:void setMenu(androidx.appcompat.view.menu.MenuBuilder,androidx.appcompat.widget.ActionMenuPresenter):0:0 -> setMenu
androidx.appcompat.widget.Toolbar$1 -> androidx.appcompat.widget.j2:
    androidx.appcompat.widget.Toolbar this$0 -> a
androidx.appcompat.widget.Toolbar$2 -> androidx.appcompat.widget.k2:
    androidx.appcompat.widget.Toolbar this$0 -> a
androidx.appcompat.widget.Toolbar$3 -> androidx.appcompat.widget.l2:
    androidx.appcompat.widget.Toolbar this$0 -> a
androidx.appcompat.widget.Toolbar$ExpandedActionViewMenuPresenter -> androidx.appcompat.widget.m2:
    androidx.appcompat.view.menu.MenuBuilder mMenu -> a
    androidx.appcompat.widget.Toolbar this$0 -> c
    androidx.appcompat.view.menu.MenuItemImpl mCurrentExpandedItem -> b
androidx.appcompat.widget.Toolbar$LayoutParams -> androidx.appcompat.widget.Toolbar$LayoutParams:
    int mViewType -> a
    1:1:void copyMarginsFromCompat(android.view.ViewGroup$MarginLayoutParams):0:0 -> <init>
    1:1:void <init>(android.view.ViewGroup$MarginLayoutParams):0 -> <init>
androidx.appcompat.widget.Toolbar$SavedState -> androidx.appcompat.widget.Toolbar$SavedState:
    int expandedMenuItemId -> b
    boolean isOverflowOpen -> c
androidx.appcompat.widget.Toolbar$SavedState$1 -> androidx.appcompat.widget.n2:
    1:1:androidx.appcompat.widget.Toolbar$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    2:2:androidx.appcompat.widget.Toolbar$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    2:2:java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader):0 -> createFromParcel
    1:1:androidx.appcompat.widget.Toolbar$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.appcompat.widget.ToolbarWidgetWrapper -> androidx.appcompat.widget.ToolbarWidgetWrapper:
    boolean mMenuPrepared -> n
    android.view.Window$Callback mWindowCallback -> m
    android.graphics.drawable.Drawable mIcon -> f
    android.graphics.drawable.Drawable mLogo -> g
    boolean mTitleSet -> i
    android.graphics.drawable.Drawable mNavIcon -> h
    androidx.appcompat.widget.ActionMenuPresenter mActionMenuPresenter -> o
    android.widget.Spinner mSpinner -> d
    int mDisplayOpts -> b
    java.lang.CharSequence mTitle -> j
    java.lang.CharSequence mSubtitle -> k
    java.lang.CharSequence mHomeDescription -> l
    androidx.appcompat.widget.Toolbar mToolbar -> a
    android.view.View mTabView -> c
    android.view.View mCustomView -> e
    int mNavigationMode -> p
    int mDefaultNavigationContentDescription -> q
    android.graphics.drawable.Drawable mDefaultNavigationIcon -> r
    1:1:int detectDisplayOptions():0:0 -> <init>
    1:1:void <init>(androidx.appcompat.widget.Toolbar,boolean,int,int):0 -> <init>
    2:2:void <init>(androidx.appcompat.widget.Toolbar,boolean,int,int):0:0 -> <init>
    void ensureSpinner() -> a
    void updateHomeAccessibility() -> b
    void updateNavigationIcon() -> c
    void updateToolbarLogo() -> d
    1:1:void setTitleInt(java.lang.CharSequence):0:0 -> setTitle
    1:1:void setTitle(java.lang.CharSequence):0 -> setTitle
    1:1:void setTitleInt(java.lang.CharSequence):0:0 -> setWindowTitle
    1:1:void setWindowTitle(java.lang.CharSequence):0 -> setWindowTitle
androidx.appcompat.widget.ToolbarWidgetWrapper$1 -> androidx.appcompat.widget.o2:
    androidx.appcompat.view.menu.ActionMenuItem mNavItem -> a
    androidx.appcompat.widget.ToolbarWidgetWrapper this$0 -> b
androidx.appcompat.widget.ToolbarWidgetWrapper$2 -> androidx.appcompat.widget.p2:
    androidx.appcompat.widget.ToolbarWidgetWrapper this$0 -> c
    boolean mCanceled -> a
    int val$visibility -> b
androidx.appcompat.widget.VectorEnabledTintResources -> androidx.appcompat.widget.VectorEnabledTintResources:
    java.lang.ref.WeakReference mContextRef -> a
    boolean sCompatVectorFromResourcesEnabled -> b
    android.graphics.drawable.Drawable superGetDrawable(int) -> a
androidx.appcompat.widget.ViewStubCompat -> androidx.appcompat.widget.ViewStubCompat:
    android.view.LayoutInflater mInflater -> d
    java.lang.ref.WeakReference mInflatedViewRef -> c
    int mInflatedId -> b
    int mLayoutResource -> a
    androidx.appcompat.widget.ViewStubCompat$OnInflateListener mInflateListener -> e
androidx.appcompat.widget.ViewUtils -> androidx.appcompat.widget.ViewUtils:
    java.lang.reflect.Method sComputeFitSystemWindowsMethod -> a
androidx.arch.core.executor.ArchTaskExecutor -> androidx.arch.core.executor.ArchTaskExecutor:
    androidx.arch.core.executor.ArchTaskExecutor sInstance -> c
    java.util.concurrent.Executor sMainThreadExecutor -> d
    java.util.concurrent.Executor sIOThreadExecutor -> e
    androidx.arch.core.executor.TaskExecutor mDefaultTaskExecutor -> b
    androidx.arch.core.executor.TaskExecutor mDelegate -> a
androidx.arch.core.executor.ArchTaskExecutor$1 -> androidx.arch.core.executor.a:
androidx.arch.core.executor.ArchTaskExecutor$2 -> androidx.arch.core.executor.b:
androidx.arch.core.executor.DefaultTaskExecutor -> androidx.arch.core.executor.DefaultTaskExecutor:
    android.os.Handler mMainHandler -> c
    java.lang.Object mLock -> a
    java.util.concurrent.ExecutorService mDiskIO -> b
androidx.arch.core.executor.DefaultTaskExecutor$1 -> androidx.arch.core.executor.c:
    java.util.concurrent.atomic.AtomicInteger mThreadId -> a
androidx.arch.core.internal.FastSafeIterableMap -> androidx.arch.core.internal.FastSafeIterableMap:
    java.util.HashMap mHashMap -> e
androidx.arch.core.internal.SafeIterableMap -> androidx.arch.core.internal.SafeIterableMap:
    androidx.arch.core.internal.SafeIterableMap$Entry mStart -> a
    androidx.arch.core.internal.SafeIterableMap$Entry mEnd -> b
    int mSize -> d
    java.util.WeakHashMap mIterators -> c
androidx.arch.core.internal.SafeIterableMap$AscendingIterator -> androidx.arch.core.internal.a:
    androidx.arch.core.internal.SafeIterableMap$Entry backward(androidx.arch.core.internal.SafeIterableMap$Entry) -> a
    androidx.arch.core.internal.SafeIterableMap$Entry forward(androidx.arch.core.internal.SafeIterableMap$Entry) -> b
androidx.arch.core.internal.SafeIterableMap$DescendingIterator -> androidx.arch.core.internal.b:
    androidx.arch.core.internal.SafeIterableMap$Entry backward(androidx.arch.core.internal.SafeIterableMap$Entry) -> a
    androidx.arch.core.internal.SafeIterableMap$Entry forward(androidx.arch.core.internal.SafeIterableMap$Entry) -> b
androidx.arch.core.internal.SafeIterableMap$Entry -> androidx.arch.core.internal.c:
    androidx.arch.core.internal.SafeIterableMap$Entry mNext -> c
    androidx.arch.core.internal.SafeIterableMap$Entry mPrevious -> d
    java.lang.Object mValue -> b
    java.lang.Object mKey -> a
androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions -> androidx.arch.core.internal.d:
    androidx.arch.core.internal.SafeIterableMap$Entry mCurrent -> a
    androidx.arch.core.internal.SafeIterableMap this$0 -> c
    boolean mBeforeStart -> b
    1:1:java.util.Map$Entry next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
androidx.arch.core.internal.SafeIterableMap$ListIterator -> androidx.arch.core.internal.e:
    androidx.arch.core.internal.SafeIterableMap$Entry mExpectedEnd -> a
    androidx.arch.core.internal.SafeIterableMap$Entry mNext -> b
    androidx.arch.core.internal.SafeIterableMap$Entry backward(androidx.arch.core.internal.SafeIterableMap$Entry) -> a
    androidx.arch.core.internal.SafeIterableMap$Entry forward(androidx.arch.core.internal.SafeIterableMap$Entry) -> b
    1:1:java.util.Map$Entry next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
    2:2:androidx.arch.core.internal.SafeIterableMap$Entry nextNode():0:0 -> next
    2:2:java.util.Map$Entry next():0 -> next
    2:2:java.lang.Object next():0 -> next
    3:3:java.util.Map$Entry next():0:0 -> next
    3:3:java.lang.Object next():0 -> next
    1:1:androidx.arch.core.internal.SafeIterableMap$Entry nextNode():0:0 -> supportRemove
    1:1:void supportRemove(androidx.arch.core.internal.SafeIterableMap$Entry):0 -> supportRemove
    2:2:void supportRemove(androidx.arch.core.internal.SafeIterableMap$Entry):0:0 -> supportRemove
androidx.arch.core.internal.SafeIterableMap$SupportRemove -> androidx.arch.core.internal.f:
androidx.asynclayoutinflater.view.AsyncLayoutInflater -> androidx.asynclayoutinflater.view.AsyncLayoutInflater:
    android.os.Handler$Callback mHandlerCallback -> d
    android.os.Handler mHandler -> b
    android.view.LayoutInflater mInflater -> a
    androidx.asynclayoutinflater.view.AsyncLayoutInflater$InflateThread mInflateThread -> c
androidx.asynclayoutinflater.view.AsyncLayoutInflater$1 -> androidx.asynclayoutinflater.view.a:
    androidx.asynclayoutinflater.view.AsyncLayoutInflater this$0 -> a
androidx.asynclayoutinflater.view.AsyncLayoutInflater$BasicInflater -> androidx.asynclayoutinflater.view.b:
    java.lang.String[] sClassPrefixList -> a
androidx.asynclayoutinflater.view.AsyncLayoutInflater$InflateRequest -> androidx.asynclayoutinflater.view.c:
    android.view.ViewGroup parent -> b
    androidx.asynclayoutinflater.view.AsyncLayoutInflater$OnInflateFinishedListener callback -> e
    int resid -> c
    android.view.View view -> d
    androidx.asynclayoutinflater.view.AsyncLayoutInflater inflater -> a
androidx.asynclayoutinflater.view.AsyncLayoutInflater$InflateThread -> androidx.asynclayoutinflater.view.d:
    java.util.concurrent.ArrayBlockingQueue mQueue -> a
    androidx.core.util.Pools$SynchronizedPool mRequestPool -> b
    androidx.asynclayoutinflater.view.AsyncLayoutInflater$InflateThread sInstance -> c
    1:1:void runInner():0:0 -> run
    1:1:void run():0 -> run
androidx.cardview.widget.CardView -> androidx.cardview.widget.CardView:
    int[] COLOR_BACKGROUND_ATTR -> h
    androidx.cardview.widget.CardViewDelegate mCardViewDelegate -> g
    androidx.cardview.widget.CardViewImpl IMPL -> i
    int mUserSetMinHeight -> d
    android.graphics.Rect mContentPadding -> e
    android.graphics.Rect mShadowBounds -> f
    boolean mCompatPadding -> a
    boolean mPreventCornerOverlap -> b
    int mUserSetMinWidth -> c
    void access$001(androidx.cardview.widget.CardView,int,int,int,int) -> a
    1:1:android.view.View androidx.cardview.widget.CardView$1.getCardView():0:0 -> getCardElevation
    1:1:float androidx.cardview.widget.CardViewApi21Impl.getElevation(androidx.cardview.widget.CardViewDelegate):0 -> getCardElevation
    1:1:float getCardElevation():0 -> getCardElevation
    2:2:float androidx.cardview.widget.CardViewApi21Impl.getElevation(androidx.cardview.widget.CardViewDelegate):0:0 -> getCardElevation
    2:2:float getCardElevation():0 -> getCardElevation
    1:1:android.view.View androidx.cardview.widget.CardView$1.getCardView():0:0 -> setCardElevation
    1:1:void androidx.cardview.widget.CardViewApi21Impl.setElevation(androidx.cardview.widget.CardViewDelegate,float):0 -> setCardElevation
    1:1:void setCardElevation(float):0 -> setCardElevation
    2:2:void androidx.cardview.widget.CardViewApi21Impl.setElevation(androidx.cardview.widget.CardViewDelegate,float):0:0 -> setCardElevation
    2:2:void setCardElevation(float):0 -> setCardElevation
androidx.cardview.widget.CardView$1 -> androidx.cardview.widget.a:
    androidx.cardview.widget.CardView this$0 -> b
    android.graphics.drawable.Drawable mCardBackground -> a
androidx.cardview.widget.CardViewApi21Impl -> androidx.cardview.widget.b:
    androidx.cardview.widget.RoundRectDrawable getCardBackground(androidx.cardview.widget.CardViewDelegate) -> a
    1:1:android.view.View androidx.cardview.widget.CardView$1.getCardView():0:0 -> initialize
    1:1:void initialize(androidx.cardview.widget.CardViewDelegate,android.content.Context,android.content.res.ColorStateList,float,float,float):0 -> initialize
    2:2:void initialize(androidx.cardview.widget.CardViewDelegate,android.content.Context,android.content.res.ColorStateList,float,float,float):0:0 -> initialize
    3:3:void setMaxElevation(androidx.cardview.widget.CardViewDelegate,float):0:0 -> initialize
    3:3:void initialize(androidx.cardview.widget.CardViewDelegate,android.content.Context,android.content.res.ColorStateList,float,float,float):0 -> initialize
    4:4:boolean androidx.cardview.widget.CardView$1.getUseCompatPadding():0:0 -> initialize
    4:4:void setMaxElevation(androidx.cardview.widget.CardViewDelegate,float):0 -> initialize
    4:4:void initialize(androidx.cardview.widget.CardViewDelegate,android.content.Context,android.content.res.ColorStateList,float,float,float):0 -> initialize
    5:5:void setMaxElevation(androidx.cardview.widget.CardViewDelegate,float):0:0 -> initialize
    5:5:void initialize(androidx.cardview.widget.CardViewDelegate,android.content.Context,android.content.res.ColorStateList,float,float,float):0 -> initialize
    1:1:float getMaxElevation(androidx.cardview.widget.CardViewDelegate):0:0 -> onCompatPaddingChanged
    1:1:void onCompatPaddingChanged(androidx.cardview.widget.CardViewDelegate):0 -> onCompatPaddingChanged
    2:2:void onCompatPaddingChanged(androidx.cardview.widget.CardViewDelegate):0:0 -> onCompatPaddingChanged
    1:1:float getMaxElevation(androidx.cardview.widget.CardViewDelegate):0:0 -> onPreventCornerOverlapChanged
    1:1:void onPreventCornerOverlapChanged(androidx.cardview.widget.CardViewDelegate):0 -> onPreventCornerOverlapChanged
    2:2:void onPreventCornerOverlapChanged(androidx.cardview.widget.CardViewDelegate):0:0 -> onPreventCornerOverlapChanged
    1:1:boolean androidx.cardview.widget.CardView$1.getUseCompatPadding():0:0 -> setMaxElevation
    1:1:void setMaxElevation(androidx.cardview.widget.CardViewDelegate,float):0 -> setMaxElevation
    2:2:void setMaxElevation(androidx.cardview.widget.CardViewDelegate,float):0:0 -> setMaxElevation
    1:1:boolean androidx.cardview.widget.CardView$1.getUseCompatPadding():0:0 -> updatePadding
    1:1:void updatePadding(androidx.cardview.widget.CardViewDelegate):0 -> updatePadding
    2:2:void updatePadding(androidx.cardview.widget.CardViewDelegate):0:0 -> updatePadding
    3:3:float getMaxElevation(androidx.cardview.widget.CardViewDelegate):0:0 -> updatePadding
    3:3:void updatePadding(androidx.cardview.widget.CardViewDelegate):0 -> updatePadding
    4:4:float getRadius(androidx.cardview.widget.CardViewDelegate):0:0 -> updatePadding
    4:4:void updatePadding(androidx.cardview.widget.CardViewDelegate):0 -> updatePadding
    5:5:void updatePadding(androidx.cardview.widget.CardViewDelegate):0:0 -> updatePadding
androidx.cardview.widget.CardViewImpl -> androidx.cardview.widget.c:
androidx.cardview.widget.RoundRectDrawable -> androidx.cardview.widget.d:
    android.graphics.PorterDuff$Mode mTintMode -> k
    android.graphics.RectF mBoundsF -> c
    float mPadding -> e
    android.graphics.Paint mPaint -> b
    android.content.res.ColorStateList mBackground -> h
    boolean mInsetForPadding -> f
    boolean mInsetForRadius -> g
    android.content.res.ColorStateList mTint -> j
    float mRadius -> a
    android.graphics.Rect mBoundsI -> d
    android.graphics.PorterDuffColorFilter mTintFilter -> i
    android.graphics.PorterDuffColorFilter createTintFilter(android.content.res.ColorStateList,android.graphics.PorterDuff$Mode) -> a
    float getPadding() -> b
    void setBackground(android.content.res.ColorStateList) -> c
    void setPadding(float,boolean,boolean) -> d
    void setRadius(float) -> e
    void updateBounds(android.graphics.Rect) -> f
androidx.cardview.widget.RoundRectDrawableWithShadow -> androidx.cardview.widget.e:
    double COS_45 -> a
    float calculateHorizontalPadding(float,float,boolean) -> a
    float calculateVerticalPadding(float,float,boolean) -> b
androidx.collection.ArrayMap -> androidx.collection.ArrayMap:
    androidx.collection.MapCollections mCollections -> h
    1:1:java.util.Set androidx.collection.MapCollections.getEntrySet():0:0 -> entrySet
    1:1:java.util.Set entrySet():0 -> entrySet
    androidx.collection.MapCollections getCollection() -> f
    1:1:java.util.Set androidx.collection.MapCollections.getKeySet():0:0 -> keySet
    1:1:java.util.Set keySet():0 -> keySet
    1:1:java.util.Collection androidx.collection.MapCollections.getValues():0:0 -> values
    1:1:java.util.Collection values():0 -> values
androidx.collection.ArrayMap$1 -> androidx.collection.a:
    androidx.collection.ArrayMap this$0 -> d
androidx.collection.ArraySet -> androidx.collection.ArraySet:
    java.lang.Object[] mArray -> b
    int sTwiceBaseCacheSize -> j
    int sBaseCacheSize -> h
    int[] INT -> e
    int[] mHashes -> a
    java.lang.Object[] sTwiceBaseCache -> i
    int mSize -> c
    java.lang.Object[] OBJECT -> f
    androidx.collection.MapCollections mCollections -> d
    java.lang.Object[] sBaseCache -> g
    void allocArrays(int) -> a
    void freeArrays(int[],java.lang.Object[],int) -> b
    int indexOf(java.lang.Object,int) -> c
    int indexOfNull() -> d
    1:1:androidx.collection.MapCollections getCollection():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
    2:2:java.util.Set androidx.collection.MapCollections.getKeySet():0:0 -> iterator
    2:2:java.util.Iterator iterator():0 -> iterator
    3:3:java.util.Iterator iterator():0:0 -> iterator
androidx.collection.ArraySet$1 -> androidx.collection.b:
    androidx.collection.ArraySet this$0 -> d
androidx.collection.CircularArray -> androidx.collection.CircularArray:
    java.lang.Object[] mElements -> a
    int mCapacityBitmask -> d
    int mHead -> b
    int mTail -> c
    void doubleCapacity() -> a
androidx.collection.CircularIntArray -> androidx.collection.CircularIntArray:
    int mCapacityBitmask -> d
    int[] mElements -> a
    int mHead -> b
    int mTail -> c
    void doubleCapacity() -> a
androidx.collection.ContainerHelpers -> androidx.collection.c:
    java.lang.Object[] EMPTY_OBJECTS -> c
    long[] EMPTY_LONGS -> b
    int[] EMPTY_INTS -> a
    int binarySearch(int[],int,int) -> a
    int binarySearch(long[],int,long) -> b
androidx.collection.LongSparseArray -> androidx.collection.LongSparseArray:
    java.lang.Object[] mValues -> c
    java.lang.Object DELETED -> e
    long[] mKeys -> b
    int mSize -> d
    boolean mGarbage -> a
    void gc() -> a
androidx.collection.LruCache -> androidx.collection.LruCache:
    java.util.LinkedHashMap map -> a
    int missCount -> h
    int evictionCount -> f
    int hitCount -> g
    int putCount -> d
    int createCount -> e
    int size -> b
    int maxSize -> c
    int safeSizeOf(java.lang.Object,java.lang.Object) -> a
androidx.collection.MapCollections -> androidx.collection.i:
    androidx.collection.MapCollections$KeySet mKeySet -> b
    androidx.collection.MapCollections$ValuesCollection mValues -> c
    androidx.collection.MapCollections$EntrySet mEntrySet -> a
androidx.collection.MapCollections$ArrayIterator -> androidx.collection.d:
    androidx.collection.MapCollections this$0 -> e
    int mSize -> b
    int mIndex -> c
    int mOffset -> a
    boolean mCanRemove -> d
androidx.collection.MapCollections$EntrySet -> androidx.collection.e:
    androidx.collection.MapCollections this$0 -> a
    1:1:boolean add(java.util.Map$Entry):0:0 -> add
    1:1:boolean add(java.lang.Object):0 -> add
androidx.collection.MapCollections$KeySet -> androidx.collection.f:
    androidx.collection.MapCollections this$0 -> a
androidx.collection.MapCollections$MapIterator -> androidx.collection.g:
    int mIndex -> b
    boolean mEntryValid -> c
    androidx.collection.MapCollections this$0 -> d
    int mEnd -> a
    1:1:java.util.Map$Entry next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
androidx.collection.MapCollections$ValuesCollection -> androidx.collection.h:
    androidx.collection.MapCollections this$0 -> a
androidx.collection.SimpleArrayMap -> androidx.collection.SimpleArrayMap:
    java.lang.Object[] mBaseCache -> d
    java.lang.Object[] mArray -> b
    int mTwiceBaseCacheSize -> g
    int mBaseCacheSize -> e
    int[] mHashes -> a
    int mSize -> c
    java.lang.Object[] mTwiceBaseCache -> f
    void allocArrays(int) -> a
    void freeArrays(int[],java.lang.Object[],int) -> b
    1:1:int binarySearchHashes(int[],int,int):0:0 -> c
    1:1:int indexOf(java.lang.Object,int):0 -> c
    2:2:int indexOf(java.lang.Object,int):0:0 -> c
    3:3:int binarySearchHashes(int[],int,int):0:0 -> c
    3:3:int indexOf(java.lang.Object,int):0 -> c
    1:1:int binarySearchHashes(int[],int,int):0:0 -> d
    1:1:int indexOfNull():0 -> d
    2:2:int indexOfNull():0:0 -> d
    3:3:int binarySearchHashes(int[],int,int):0:0 -> d
    3:3:int indexOfNull():0 -> d
    int indexOfValue(java.lang.Object) -> e
androidx.collection.SparseArrayCompat -> androidx.collection.SparseArrayCompat:
    java.lang.Object[] mValues -> c
    int[] mKeys -> b
    java.lang.Object DELETED -> e
    int mSize -> d
    boolean mGarbage -> a
    void gc() -> a
androidx.constraintlayout.solver.ArrayLinkedVariables -> androidx.constraintlayout.solver.ArrayLinkedVariables:
    int[] mArrayNextIndices -> f
    androidx.constraintlayout.solver.ArrayRow mRow -> b
    boolean mDidFillOnce -> j
    androidx.constraintlayout.solver.Cache mCache -> c
    float[] mArrayValues -> g
    int mHead -> h
    int[] mArrayIndices -> e
    int mLast -> i
    int ROW_SIZE -> d
    int currentSize -> a
    void add(androidx.constraintlayout.solver.SolverVariable,float,boolean) -> a
    androidx.constraintlayout.solver.SolverVariable chooseSubject(androidx.constraintlayout.solver.LinearSystem) -> b
    boolean containsKey(androidx.constraintlayout.solver.SolverVariable) -> c
    void divideByAmount(float) -> d
    androidx.constraintlayout.solver.SolverVariable getPivotCandidate(boolean[],androidx.constraintlayout.solver.SolverVariable) -> e
    androidx.constraintlayout.solver.SolverVariable getVariable(int) -> f
    float getVariableValue(int) -> g
    void invert() -> h
    boolean isNew(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.LinearSystem) -> i
    int sizeInBytes() -> j
    void updateFromRow(androidx.constraintlayout.solver.ArrayRow,androidx.constraintlayout.solver.ArrayRow,boolean) -> k
    void updateFromSystem(androidx.constraintlayout.solver.ArrayRow,androidx.constraintlayout.solver.ArrayRow[]) -> l
androidx.constraintlayout.solver.ArrayRow -> androidx.constraintlayout.solver.ArrayRow:
    androidx.constraintlayout.solver.SolverVariable variable -> a
    float constantValue -> b
    boolean isSimpleDefinition -> c
    androidx.constraintlayout.solver.ArrayRow createRowCentering(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int,float,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int) -> a
    void pivot(androidx.constraintlayout.solver.SolverVariable) -> b
    java.lang.String toReadableString() -> c
androidx.constraintlayout.solver.Cache -> androidx.constraintlayout.solver.Cache:
    androidx.constraintlayout.solver.Pools$Pool solverVariablePool -> b
    androidx.constraintlayout.solver.Pools$Pool arrayRowPool -> a
    androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables -> c
androidx.constraintlayout.solver.LinearSystem -> androidx.constraintlayout.solver.LinearSystem:
    int POOL_SIZE -> n
    int mPoolVariablesCount -> l
    int mNumRows -> h
    int mMaxRows -> i
    int mNumColumns -> g
    int mMaxColumns -> d
    androidx.constraintlayout.solver.LinearSystem$Row mGoal -> b
    int TABLE_SIZE -> c
    androidx.constraintlayout.solver.ArrayRow[] mRows -> e
    int mVariablesID -> a
    androidx.constraintlayout.solver.SolverVariable[] mPoolVariables -> k
    boolean[] mAlreadyTestedCandidates -> f
    androidx.constraintlayout.solver.LinearSystem$Row mTempGoal -> m
    androidx.constraintlayout.solver.Cache mCache -> j
    androidx.constraintlayout.solver.SolverVariable acquireSolverVariable(androidx.constraintlayout.solver.SolverVariable$Type,java.lang.String) -> a
    1:1:void androidx.constraintlayout.solver.ArrayRow.ensurePositiveConstant():0:0 -> addConstraint
    1:1:void addConstraint(androidx.constraintlayout.solver.ArrayRow):0 -> addConstraint
    2:2:boolean androidx.constraintlayout.solver.ArrayRow.chooseSubject(androidx.constraintlayout.solver.LinearSystem):0:0 -> addConstraint
    2:2:void addConstraint(androidx.constraintlayout.solver.ArrayRow):0 -> addConstraint
    3:3:void addConstraint(androidx.constraintlayout.solver.ArrayRow):0:0 -> addConstraint
    4:4:androidx.constraintlayout.solver.SolverVariable androidx.constraintlayout.solver.ArrayRow.pickPivot(androidx.constraintlayout.solver.SolverVariable):0:0 -> addConstraint
    4:4:void addConstraint(androidx.constraintlayout.solver.ArrayRow):0 -> addConstraint
    5:5:void addConstraint(androidx.constraintlayout.solver.ArrayRow):0:0 -> addConstraint
    6:6:boolean androidx.constraintlayout.solver.ArrayRow.hasKeyVariable():0:0 -> addConstraint
    6:6:void addConstraint(androidx.constraintlayout.solver.ArrayRow):0 -> addConstraint
    7:7:void addConstraint(androidx.constraintlayout.solver.ArrayRow):0:0 -> addConstraint
    1:1:androidx.constraintlayout.solver.ArrayRow androidx.constraintlayout.solver.ArrayRow.createRowDefinition(androidx.constraintlayout.solver.SolverVariable,int):0:0 -> addEquality
    1:1:void addEquality(androidx.constraintlayout.solver.SolverVariable,int):0 -> addEquality
    2:2:void addEquality(androidx.constraintlayout.solver.SolverVariable,int):0:0 -> addEquality
    3:3:androidx.constraintlayout.solver.ArrayRow androidx.constraintlayout.solver.ArrayRow.createRowDefinition(androidx.constraintlayout.solver.SolverVariable,int):0:0 -> addEquality
    3:3:void addEquality(androidx.constraintlayout.solver.SolverVariable,int,int):0 -> addEquality
    4:4:void addEquality(androidx.constraintlayout.solver.SolverVariable,int,int):0:0 -> addEquality
    1:1:void addSingleError(androidx.constraintlayout.solver.ArrayRow,int,int):0:0 -> addGreaterBarrier
    1:1:void addGreaterBarrier(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,boolean):0 -> addGreaterBarrier
    2:2:androidx.constraintlayout.solver.ArrayRow androidx.constraintlayout.solver.ArrayRow.addSingleError(androidx.constraintlayout.solver.SolverVariable,int):0:0 -> addGreaterBarrier
    2:2:void addSingleError(androidx.constraintlayout.solver.ArrayRow,int,int):0 -> addGreaterBarrier
    2:2:void addGreaterBarrier(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,boolean):0 -> addGreaterBarrier
    3:3:void addGreaterBarrier(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,boolean):0:0 -> addGreaterBarrier
    1:1:void addSingleError(androidx.constraintlayout.solver.ArrayRow,int,int):0:0 -> addGreaterThan
    1:1:void addGreaterThan(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int,int):0 -> addGreaterThan
    2:2:androidx.constraintlayout.solver.ArrayRow androidx.constraintlayout.solver.ArrayRow.addSingleError(androidx.constraintlayout.solver.SolverVariable,int):0:0 -> addGreaterThan
    2:2:void addSingleError(androidx.constraintlayout.solver.ArrayRow,int,int):0 -> addGreaterThan
    2:2:void addGreaterThan(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int,int):0 -> addGreaterThan
    3:3:void addGreaterThan(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int,int):0:0 -> addGreaterThan
    1:1:void addSingleError(androidx.constraintlayout.solver.ArrayRow,int,int):0:0 -> addLowerBarrier
    1:1:void addLowerBarrier(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,boolean):0 -> addLowerBarrier
    2:2:androidx.constraintlayout.solver.ArrayRow androidx.constraintlayout.solver.ArrayRow.addSingleError(androidx.constraintlayout.solver.SolverVariable,int):0:0 -> addLowerBarrier
    2:2:void addSingleError(androidx.constraintlayout.solver.ArrayRow,int,int):0 -> addLowerBarrier
    2:2:void addLowerBarrier(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,boolean):0 -> addLowerBarrier
    3:3:void addLowerBarrier(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,boolean):0:0 -> addLowerBarrier
    1:1:void addSingleError(androidx.constraintlayout.solver.ArrayRow,int,int):0:0 -> addLowerThan
    1:1:void addLowerThan(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int,int):0 -> addLowerThan
    2:2:androidx.constraintlayout.solver.ArrayRow androidx.constraintlayout.solver.ArrayRow.addSingleError(androidx.constraintlayout.solver.SolverVariable,int):0:0 -> addLowerThan
    2:2:void addSingleError(androidx.constraintlayout.solver.ArrayRow,int,int):0 -> addLowerThan
    2:2:void addLowerThan(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int,int):0 -> addLowerThan
    3:3:void addLowerThan(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int,int):0:0 -> addLowerThan
    void addRow(androidx.constraintlayout.solver.ArrayRow) -> b
    1:1:void addSingleError(androidx.constraintlayout.solver.ArrayRow,int,int):0:0 -> c
    1:1:void addSingleError(androidx.constraintlayout.solver.ArrayRow,int):0 -> c
    2:2:androidx.constraintlayout.solver.ArrayRow androidx.constraintlayout.solver.ArrayRow.addSingleError(androidx.constraintlayout.solver.SolverVariable,int):0:0 -> c
    2:2:void addSingleError(androidx.constraintlayout.solver.ArrayRow,int,int):0 -> c
    2:2:void addSingleError(androidx.constraintlayout.solver.ArrayRow,int):0 -> c
    1:1:void addError(androidx.constraintlayout.solver.ArrayRow):0:0 -> createRowDimensionPercent
    1:1:androidx.constraintlayout.solver.ArrayRow createRowDimensionPercent(androidx.constraintlayout.solver.LinearSystem,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,float,boolean):0 -> createRowDimensionPercent
    2:2:androidx.constraintlayout.solver.ArrayRow androidx.constraintlayout.solver.ArrayRow.createRowDimensionPercent(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,float):0:0 -> createRowDimensionPercent
    2:2:androidx.constraintlayout.solver.ArrayRow createRowDimensionPercent(androidx.constraintlayout.solver.LinearSystem,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,float,boolean):0 -> createRowDimensionPercent
    void computeValues() -> d
    1:1:void displaySolverVariables():0:0 -> displayVariablesReadableRows
    1:1:void displayVariablesReadableRows():0 -> displayVariablesReadableRows
    2:2:void displayVariablesReadableRows():0:0 -> displayVariablesReadableRows
    void increaseTableSize() -> e
    1:1:int enforceBFS(androidx.constraintlayout.solver.LinearSystem$Row):0:0 -> f
    1:1:void minimizeGoal(androidx.constraintlayout.solver.LinearSystem$Row):0 -> f
    2:2:void minimizeGoal(androidx.constraintlayout.solver.LinearSystem$Row):0:0 -> f
    1:1:boolean androidx.constraintlayout.solver.ArrayRow.hasVariable(androidx.constraintlayout.solver.SolverVariable):0:0 -> g
    1:1:int optimize(androidx.constraintlayout.solver.LinearSystem$Row,boolean):0 -> g
    2:2:int optimize(androidx.constraintlayout.solver.LinearSystem$Row,boolean):0:0 -> g
    1:1:int androidx.constraintlayout.solver.ArrayRow.sizeInBytes():0:0 -> getMemoryUsed
    1:1:int getMemoryUsed():0 -> getMemoryUsed
    void releaseRows() -> h
    void updateRowFromVariables(androidx.constraintlayout.solver.ArrayRow) -> i
androidx.constraintlayout.solver.LinearSystem$Row -> androidx.constraintlayout.solver.a:
androidx.constraintlayout.solver.Pools$SimplePool -> androidx.constraintlayout.solver.b:
    java.lang.Object[] mPool -> a
    int mPoolSize -> b
androidx.constraintlayout.solver.SolverVariable -> androidx.constraintlayout.solver.SolverVariable:
    androidx.constraintlayout.solver.SolverVariable$Type mType -> d
    int mClientEquationsCount -> f
    int uniqueErrorId -> g
    java.lang.String mName -> a
    float[] strengthVector -> c
    int definitionId -> b
    androidx.constraintlayout.solver.ArrayRow[] mClientEquations -> e
    void increaseErrorId() -> a
androidx.constraintlayout.solver.SolverVariable$Type -> androidx.constraintlayout.solver.SolverVariable$Type:
    androidx.constraintlayout.solver.SolverVariable$Type[] $VALUES -> a
androidx.constraintlayout.solver.widgets.Analyzer -> androidx.constraintlayout.solver.widgets.Analyzer:
    int getMaxDimension(androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup,int) -> a
    1:1:void androidx.constraintlayout.solver.widgets.ConstraintWidget.setRelativePositioning(int,int):0:0 -> b
    1:1:int getMaxDimensionTraversal(androidx.constraintlayout.solver.widgets.ConstraintWidget,int,boolean,int):0 -> b
    2:2:int getMaxDimensionTraversal(androidx.constraintlayout.solver.widgets.ConstraintWidget,int,boolean,int):0:0 -> b
    int getParentBiasOffset(androidx.constraintlayout.solver.widgets.ConstraintWidget,int) -> c
    int resolveDimensionRatio(androidx.constraintlayout.solver.widgets.ConstraintWidget) -> d
    1:1:void singleGroup(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer):0:0 -> determineGroups
    1:1:void determineGroups(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer):0 -> determineGroups
    2:2:void determineGroups(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer):0:0 -> determineGroups
    3:3:boolean determineGroups(androidx.constraintlayout.solver.widgets.ConstraintWidget,java.util.List,boolean):0:0 -> determineGroups
    3:3:void determineGroups(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer):0 -> determineGroups
    4:4:void singleGroup(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer):0:0 -> determineGroups
    4:4:void determineGroups(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer):0 -> determineGroups
    5:5:void determineGroups(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer):0:0 -> determineGroups
    1:1:void invalidate(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer,androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup):0:0 -> e
    1:1:boolean traverse(androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup,java.util.List,boolean):0 -> e
    2:2:boolean traverse(androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup,java.util.List,boolean):0:0 -> e
    3:3:void invalidate(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer,androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup):0:0 -> e
    3:3:boolean traverse(androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup,java.util.List,boolean):0 -> e
    4:4:boolean traverse(androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup,java.util.List,boolean):0:0 -> e
    5:5:void invalidate(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer,androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup):0:0 -> e
    5:5:boolean traverse(androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup,java.util.List,boolean):0 -> e
    6:6:boolean traverse(androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup,java.util.List,boolean):0:0 -> e
    7:7:void invalidate(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer,androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup):0:0 -> e
    7:7:boolean traverse(androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup,java.util.List,boolean):0 -> e
    8:8:boolean traverse(androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup,java.util.List,boolean):0:0 -> e
    9:9:void invalidate(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer,androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup):0:0 -> e
    9:9:boolean traverse(androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup,java.util.List,boolean):0 -> e
    10:10:boolean traverse(androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup,java.util.List,boolean):0:0 -> e
    11:11:void invalidate(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer,androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup):0:0 -> e
    11:11:boolean traverse(androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup,java.util.List,boolean):0 -> e
    12:12:boolean traverse(androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup,java.util.List,boolean):0:0 -> e
    13:13:void invalidate(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer,androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup):0:0 -> e
    13:13:boolean traverse(androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup,java.util.List,boolean):0 -> e
    14:14:void setConnection(androidx.constraintlayout.solver.widgets.ConstraintAnchor):0:0 -> e
    14:14:boolean traverse(androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup,java.util.List,boolean):0 -> e
    15:15:boolean traverse(androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup,java.util.List,boolean):0:0 -> e
    1:1:java.util.Set androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup.getWidgetsToSet(int):0:0 -> setPosition
    1:1:void setPosition(java.util.List,int,int):0 -> setPosition
    2:2:void setPosition(java.util.List,int,int):0:0 -> setPosition
    3:3:void updateSizeDependentWidgets(androidx.constraintlayout.solver.widgets.ConstraintWidget,int,int):0:0 -> setPosition
    3:3:void setPosition(java.util.List,int,int):0 -> setPosition
    4:4:int androidx.constraintlayout.solver.widgets.ConstraintWidget.getRelativePositioning(int):0:0 -> setPosition
    4:4:void updateSizeDependentWidgets(androidx.constraintlayout.solver.widgets.ConstraintWidget,int,int):0 -> setPosition
    4:4:void setPosition(java.util.List,int,int):0 -> setPosition
    5:5:void updateSizeDependentWidgets(androidx.constraintlayout.solver.widgets.ConstraintWidget,int,int):0:0 -> setPosition
    5:5:void setPosition(java.util.List,int,int):0 -> setPosition
androidx.constraintlayout.solver.widgets.Barrier -> androidx.constraintlayout.solver.widgets.Barrier:
    java.util.ArrayList mNodes -> a0
    int mBarrierType -> Z
    boolean mAllowsGoneWidget -> b0
androidx.constraintlayout.solver.widgets.Chain -> androidx.constraintlayout.solver.widgets.a:
    1:1:boolean androidx.constraintlayout.solver.widgets.Optimizer.applyChainOptimized(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer,androidx.constraintlayout.solver.LinearSystem,int,int,androidx.constraintlayout.solver.widgets.ChainHead):0:0 -> a
    1:1:void applyChainConstraints(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer,androidx.constraintlayout.solver.LinearSystem,int):0 -> a
    2:2:void applyChainConstraints(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer,androidx.constraintlayout.solver.LinearSystem,int):0:0 -> a
    void applyChainConstraints(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer,androidx.constraintlayout.solver.LinearSystem,int,int,androidx.constraintlayout.solver.widgets.ChainHead) -> b
androidx.constraintlayout.solver.widgets.ChainHead -> androidx.constraintlayout.solver.widgets.ChainHead:
    boolean mIsRtl -> b
    boolean mDefined -> c
    int mOrientation -> a
    1:1:void defineChainProperties():0:0 -> define
    1:1:void define():0 -> define
    2:2:boolean isMatchConstraintEqualityCandidate(androidx.constraintlayout.solver.widgets.ConstraintWidget,int):0:0 -> define
    2:2:void defineChainProperties():0 -> define
    2:2:void define():0 -> define
    3:3:void defineChainProperties():0:0 -> define
    3:3:void define():0 -> define
    4:4:void define():0:0 -> define
androidx.constraintlayout.solver.widgets.ConstraintAnchor -> androidx.constraintlayout.solver.widgets.ConstraintAnchor:
    androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type mType -> c
    androidx.constraintlayout.solver.widgets.ConstraintAnchor$Strength mStrength -> f
    androidx.constraintlayout.solver.widgets.ResolutionAnchor mResolutionAnchor -> a
    androidx.constraintlayout.solver.widgets.ConstraintAnchor$ConnectionType mConnectionType -> g
    int mConnectionCreator -> h
    androidx.constraintlayout.solver.SolverVariable mSolverVariable -> i
    androidx.constraintlayout.solver.widgets.ConstraintWidget mOwner -> b
    int mGoneMargin -> e
    androidx.constraintlayout.solver.widgets.ConstraintAnchor mTarget -> d
    boolean isConnectionToMe(androidx.constraintlayout.solver.widgets.ConstraintWidget,java.util.HashSet) -> a
androidx.constraintlayout.solver.widgets.ConstraintAnchor$ConnectionType -> androidx.constraintlayout.solver.widgets.ConstraintAnchor$ConnectionType:
    androidx.constraintlayout.solver.widgets.ConstraintAnchor$ConnectionType[] $VALUES -> a
androidx.constraintlayout.solver.widgets.ConstraintAnchor$Strength -> androidx.constraintlayout.solver.widgets.ConstraintAnchor$Strength:
    androidx.constraintlayout.solver.widgets.ConstraintAnchor$Strength[] $VALUES -> a
androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type -> androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type:
    androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type[] $VALUES -> a
androidx.constraintlayout.solver.widgets.ConstraintHorizontalLayout -> androidx.constraintlayout.solver.widgets.ConstraintHorizontalLayout:
    androidx.constraintlayout.solver.widgets.ConstraintHorizontalLayout$ContentAlignment mAlignment -> m0
androidx.constraintlayout.solver.widgets.ConstraintHorizontalLayout$ContentAlignment -> androidx.constraintlayout.solver.widgets.ConstraintHorizontalLayout$ContentAlignment:
    androidx.constraintlayout.solver.widgets.ConstraintHorizontalLayout$ContentAlignment[] $VALUES -> a
androidx.constraintlayout.solver.widgets.ConstraintTableLayout -> androidx.constraintlayout.solver.widgets.ConstraintTableLayout:
    java.util.ArrayList mHorizontalSlices -> r0
    java.util.ArrayList mVerticalSlices -> q0
    java.util.ArrayList mHorizontalGuidelines -> t0
    java.util.ArrayList mVerticalGuidelines -> s0
    boolean mVerticalGrowth -> m0
    int mPadding -> p0
    int mNumRows -> o0
    androidx.constraintlayout.solver.LinearSystem system -> u0
    int mNumCols -> n0
    void setChildrenConnections() -> f
    void setHorizontalSlices() -> g
    void setVerticalSlices() -> h
    void updateDebugSolverNames() -> i
androidx.constraintlayout.solver.widgets.ConstraintTableLayout$HorizontalSlice -> androidx.constraintlayout.solver.widgets.b:
    androidx.constraintlayout.solver.widgets.ConstraintWidget top -> a
    androidx.constraintlayout.solver.widgets.ConstraintWidget bottom -> b
androidx.constraintlayout.solver.widgets.ConstraintTableLayout$VerticalSlice -> androidx.constraintlayout.solver.widgets.c:
    androidx.constraintlayout.solver.widgets.ConstraintWidget left -> a
    androidx.constraintlayout.solver.widgets.ConstraintWidget right -> b
    int alignment -> c
androidx.constraintlayout.solver.widgets.ConstraintWidget -> androidx.constraintlayout.solver.widgets.ConstraintWidget:
    boolean mIsHeightWrapContent -> m
    float mMatchConstraintPercentHeight -> k
    int mWrapWidth -> K
    int mDrawY -> G
    int mMatchConstraintDefaultHeight -> d
    androidx.constraintlayout.solver.widgets.ConstraintAnchor mBaseline -> w
    int mHeight -> C
    androidx.constraintlayout.solver.widgets.ConstraintAnchor mLeft -> s
    boolean mOptimizerMeasurable -> T
    int mVerticalChainStyle -> X
    float mResolvedDimensionRatio -> o
    float mVerticalBiasPercent -> N
    int mContainerItemSkip -> P
    int mWrapHeight -> L
    float mMatchConstraintPercentWidth -> h
    int mDrawWidth -> H
    int mMatchConstraintMinHeight -> i
    boolean mOptimizerMeasured -> U
    androidx.constraintlayout.solver.widgets.ConstraintAnchor mCenterX -> x
    int mRelX -> D
    androidx.constraintlayout.solver.widgets.ConstraintAnchor mTop -> t
    androidx.constraintlayout.solver.widgets.ResolutionDimension mResolutionWidth -> a
    int[] mResolvedMatchConstraintDefault -> e
    int[] mMaxDimension -> q
    int mVisibility -> Q
    int mResolvedDimensionRatioSide -> n
    int mMatchConstraintMaxHeight -> j
    androidx.constraintlayout.solver.widgets.ConstraintWidget mParent -> A
    androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup mBelongingGroup -> p
    int mDrawHeight -> I
    int mMatchConstraintMinWidth -> f
    androidx.constraintlayout.solver.widgets.ConstraintAnchor mCenterY -> y
    boolean mGroupsToSolver -> V
    int mRelY -> E
    java.lang.String mType -> S
    androidx.constraintlayout.solver.widgets.ConstraintAnchor mRight -> u
    java.lang.Object mCompanionWidget -> O
    float[] mWeight -> Y
    androidx.constraintlayout.solver.widgets.ResolutionDimension mResolutionHeight -> b
    int mBaselineDistance -> J
    boolean mIsWidthWrapContent -> l
    androidx.constraintlayout.solver.widgets.ConstraintAnchor mCenter -> z
    int mDrawX -> F
    int mMatchConstraintMaxWidth -> g
    androidx.constraintlayout.solver.widgets.ConstraintAnchor mBottom -> v
    int mWidth -> B
    int mMatchConstraintDefaultWidth -> c
    java.lang.String mDebugName -> R
    int mHorizontalChainStyle -> W
    float mCircleConstraintAngle -> r
    float mHorizontalBiasPercent -> M
    void addAnchors() -> a
    void applyConstraints(androidx.constraintlayout.solver.LinearSystem,boolean,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour,boolean,androidx.constraintlayout.solver.widgets.ConstraintAnchor,androidx.constraintlayout.solver.widgets.ConstraintAnchor,int,int,int,int,float,boolean,boolean,int,int,int,float,boolean) -> b
    boolean isChainHead(int) -> c
androidx.constraintlayout.solver.widgets.ConstraintWidget$ContentAlignment -> androidx.constraintlayout.solver.widgets.ConstraintWidget$ContentAlignment:
    androidx.constraintlayout.solver.widgets.ConstraintWidget$ContentAlignment[] $VALUES -> a
androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour -> androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour:
    androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour[] $VALUES -> a
androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer -> androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer:
    int mPaddingRight -> d0
    int mPaddingTop -> c0
    int mPaddingLeft -> b0
    int mVerticalChainsSize -> g0
    androidx.constraintlayout.solver.widgets.Snapshot mSnapshot -> a0
    int mHorizontalChainsSize -> f0
    int mPaddingBottom -> e0
    int mOptimizationLevel -> j0
    androidx.constraintlayout.solver.widgets.ChainHead[] mHorizontalChainsArray -> i0
    boolean mIsRtl -> Z
    androidx.constraintlayout.solver.widgets.ChainHead[] mVerticalChainsArray -> h0
    boolean mHeightMeasuredTooSmall -> l0
    boolean mWidthMeasuredTooSmall -> k0
    1:1:void androidx.constraintlayout.solver.widgets.Optimizer.checkMatchParent(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer,androidx.constraintlayout.solver.LinearSystem,androidx.constraintlayout.solver.widgets.ConstraintWidget):0:0 -> addChildrenToSolver
    1:1:boolean addChildrenToSolver(androidx.constraintlayout.solver.LinearSystem):0 -> addChildrenToSolver
    2:2:boolean addChildrenToSolver(androidx.constraintlayout.solver.LinearSystem):0:0 -> addChildrenToSolver
    1:1:void addHorizontalChain(androidx.constraintlayout.solver.widgets.ConstraintWidget):0:0 -> d
    1:1:void addChain(androidx.constraintlayout.solver.widgets.ConstraintWidget,int):0 -> d
    2:2:void addVerticalChain(androidx.constraintlayout.solver.widgets.ConstraintWidget):0:0 -> d
    2:2:void addChain(androidx.constraintlayout.solver.widgets.ConstraintWidget,int):0 -> d
    void resetChains() -> e
androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup -> androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup:
    java.util.List mStartVerticalWidgets -> b
    java.util.List mStartHorizontalWidgets -> a
    java.util.HashSet mWidgetsToSetVertical -> d
    java.util.List mUnresolvedWidgets -> f
    java.util.HashSet mWidgetsToSetHorizontal -> c
    java.util.List mWidgetsToSolve -> e
    void addWidgetsToSet(androidx.constraintlayout.solver.widgets.ConstraintWidget,int) -> a
    java.util.List getWidgetsToSolve() -> b
    void getWidgetsToSolveTraversal(java.util.ArrayList,androidx.constraintlayout.solver.widgets.ConstraintWidget) -> c
    void updateResolvedDimension(androidx.constraintlayout.solver.widgets.ConstraintWidget) -> d
    void updateUnresolvedWidgets() -> e
androidx.constraintlayout.solver.widgets.Guideline -> androidx.constraintlayout.solver.widgets.Guideline:
    int mHeadSize -> d0
    androidx.constraintlayout.solver.widgets.Rectangle mHead -> c0
    int mOrientation -> a0
    boolean mIsPositionRelaxed -> b0
    androidx.constraintlayout.solver.widgets.ConstraintAnchor mAnchor -> Z
    1:1:void inferRelativeEndPosition():0:0 -> cyclePosition
    1:1:void cyclePosition():0 -> cyclePosition
    2:2:void cyclePosition():0:0 -> cyclePosition
    3:3:void inferRelativeBeginPosition():0:0 -> cyclePosition
    3:3:void cyclePosition():0 -> cyclePosition
    void inferRelativePercentPosition() -> d
androidx.constraintlayout.solver.widgets.Optimizer -> androidx.constraintlayout.solver.widgets.Optimizer:
    boolean[] flags -> a
    void analyze(int,androidx.constraintlayout.solver.widgets.ConstraintWidget) -> a
    boolean optimizableMatchConstraint(androidx.constraintlayout.solver.widgets.ConstraintWidget,int) -> b
    void setOptimizedWidget(androidx.constraintlayout.solver.widgets.ConstraintWidget,int,int) -> c
androidx.constraintlayout.solver.widgets.ResolutionAnchor -> androidx.constraintlayout.solver.widgets.ResolutionAnchor:
    androidx.constraintlayout.solver.widgets.ResolutionDimension oppositeDimension -> l
    int oppositeDimensionMultiplier -> m
    float resolvedOffset -> g
    int dimensionMultiplier -> k
    int type -> h
    float offset -> e
    androidx.constraintlayout.solver.widgets.ResolutionAnchor resolvedTarget -> f
    androidx.constraintlayout.solver.widgets.ResolutionAnchor opposite -> i
    androidx.constraintlayout.solver.widgets.ResolutionAnchor target -> d
    androidx.constraintlayout.solver.widgets.ResolutionDimension dimension -> j
    androidx.constraintlayout.solver.widgets.ConstraintAnchor myAnchor -> c
    void addResolvedValue(androidx.constraintlayout.solver.LinearSystem) -> a
    java.lang.String sType(int) -> b
androidx.constraintlayout.solver.widgets.ResolutionDimension -> androidx.constraintlayout.solver.widgets.ResolutionDimension:
    float value -> c
androidx.constraintlayout.solver.widgets.ResolutionNode -> androidx.constraintlayout.solver.widgets.ResolutionNode:
    java.util.HashSet dependents -> a
    int state -> b
androidx.constraintlayout.solver.widgets.Snapshot -> androidx.constraintlayout.solver.widgets.Snapshot:
    int mHeight -> d
    java.util.ArrayList mConnections -> e
    int mY -> b
    int mWidth -> c
    int mX -> a
androidx.constraintlayout.solver.widgets.Snapshot$Connection -> androidx.constraintlayout.solver.widgets.d:
    androidx.constraintlayout.solver.widgets.ConstraintAnchor mTarget -> b
    androidx.constraintlayout.solver.widgets.ConstraintAnchor mAnchor -> a
    androidx.constraintlayout.solver.widgets.ConstraintAnchor$Strength mStrengh -> d
    int mCreator -> e
    int mMargin -> c
androidx.constraintlayout.solver.widgets.WidgetContainer -> androidx.constraintlayout.solver.widgets.WidgetContainer:
    1:1:boolean androidx.constraintlayout.solver.widgets.Rectangle.intersects(androidx.constraintlayout.solver.widgets.Rectangle):0:0 -> findWidgets
    1:1:java.util.ArrayList findWidgets(int,int,int,int):0 -> findWidgets
    2:2:java.util.ArrayList findWidgets(int,int,int,int):0:0 -> findWidgets
androidx.constraintlayout.widget.Barrier -> androidx.constraintlayout.widget.Barrier:
    int mIndicatedType -> b
    int mResolvedType -> c
    androidx.constraintlayout.solver.widgets.Barrier mBarrier -> d
androidx.constraintlayout.widget.ConstraintHelper -> androidx.constraintlayout.widget.ConstraintHelper:
    java.lang.String mReferenceIds -> a
    void addID(java.lang.String) -> a
    void setIds(java.lang.String) -> b
androidx.constraintlayout.widget.ConstraintLayout -> androidx.constraintlayout.widget.ConstraintLayout:
    androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer mLayoutWidget -> d
    int mLastMeasureWidth -> n
    int mLastMeasureHeight -> o
    androidx.constraintlayout.widget.ConstraintSet mConstraintSet -> k
    int mConstraintSetId -> l
    boolean mDirtyHierarchy -> i
    int mOptimizationLevel -> j
    java.util.HashMap mDesignIds -> m
    int mMaxHeight -> h
    int mMinHeight -> f
    int mMaxWidth -> g
    int mMinWidth -> e
    java.util.ArrayList mVariableDimensionsWidgets -> c
    java.util.ArrayList mConstraintHelpers -> b
    androidx.constraintlayout.solver.Metrics mMetrics -> p
    android.util.SparseArray mChildrenByIds -> a
    androidx.constraintlayout.solver.widgets.ConstraintWidget getTargetWidget(int) -> a
    void init(android.util.AttributeSet) -> b
    void internalMeasureDimensions(int,int) -> c
    1:1:void setSelfDimensionBehaviour(int,int):0:0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:void onMeasure(int,int):0:0 -> onMeasure
    3:3:void updateHierarchy():0:0 -> onMeasure
    3:3:void onMeasure(int,int):0 -> onMeasure
    4:4:void setChildrenConstraints():0:0 -> onMeasure
    4:4:void updateHierarchy():0 -> onMeasure
    4:4:void onMeasure(int,int):0 -> onMeasure
    5:5:void onMeasure(int,int):0:0 -> onMeasure
    6:6:void internalMeasureChildren(int,int):0:0 -> onMeasure
    6:6:void onMeasure(int,int):0 -> onMeasure
    7:7:void updatePostMeasures():0:0 -> onMeasure
    7:7:void onMeasure(int,int):0 -> onMeasure
    8:8:void onMeasure(int,int):0:0 -> onMeasure
androidx.constraintlayout.widget.ConstraintLayout$LayoutParams -> androidx.constraintlayout.widget.ConstraintLayout$LayoutParams:
    int resolveGoneRightMargin -> n
    int resolvedRightToRight -> l
    int resolveGoneLeftMargin -> m
    int resolvedLeftToRight -> j
    int resolvedRightToLeft -> k
    int resolvedLeftToLeft -> i
    float dimensionRatioValue -> a
    int dimensionRatioSide -> b
    boolean needsBaseline -> e
    boolean isGuideline -> f
    boolean isHelper -> g
    float resolvedGuidePercent -> r
    boolean isInPlaceholder -> h
    androidx.constraintlayout.solver.widgets.ConstraintWidget widget -> s
    float resolvedHorizontalBias -> o
    boolean horizontalDimensionFixed -> c
    int resolvedGuideBegin -> p
    boolean verticalDimensionFixed -> d
    int resolvedGuideEnd -> q
androidx.constraintlayout.widget.ConstraintLayout$LayoutParams$Table -> androidx.constraintlayout.widget.a:
    android.util.SparseIntArray map -> a
androidx.constraintlayout.widget.ConstraintSet -> androidx.constraintlayout.widget.ConstraintSet:
    int[] VISIBILITY_FLAGS -> b
    android.util.SparseIntArray mapToConstant -> c
    java.util.HashMap mConstraints -> a
    void applyToInternal(androidx.constraintlayout.widget.ConstraintLayout) -> a
    int[] convertReferenceString(android.view.View,java.lang.String) -> b
    void createHorizontalChain(int,int,int,int,int[],float[],int,int,int) -> c
    1:1:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0:0 -> d
    1:1:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    2:2:int lookupID(android.content.res.TypedArray,int,int):0:0 -> d
    2:2:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0 -> d
    2:2:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    3:3:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0:0 -> d
    3:3:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    4:4:int lookupID(android.content.res.TypedArray,int,int):0:0 -> d
    4:4:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0 -> d
    4:4:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    5:5:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0:0 -> d
    5:5:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    6:6:int lookupID(android.content.res.TypedArray,int,int):0:0 -> d
    6:6:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0 -> d
    6:6:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    7:7:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0:0 -> d
    7:7:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    8:8:int lookupID(android.content.res.TypedArray,int,int):0:0 -> d
    8:8:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0 -> d
    8:8:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    9:9:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0:0 -> d
    9:9:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    10:10:int lookupID(android.content.res.TypedArray,int,int):0:0 -> d
    10:10:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0 -> d
    10:10:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    11:11:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0:0 -> d
    11:11:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    12:12:int lookupID(android.content.res.TypedArray,int,int):0:0 -> d
    12:12:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0 -> d
    12:12:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    13:13:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0:0 -> d
    13:13:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    14:14:int lookupID(android.content.res.TypedArray,int,int):0:0 -> d
    14:14:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0 -> d
    14:14:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    15:15:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0:0 -> d
    15:15:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    16:16:int lookupID(android.content.res.TypedArray,int,int):0:0 -> d
    16:16:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0 -> d
    16:16:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    17:17:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0:0 -> d
    17:17:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    18:18:int lookupID(android.content.res.TypedArray,int,int):0:0 -> d
    18:18:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0 -> d
    18:18:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    19:19:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0:0 -> d
    19:19:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    20:20:int lookupID(android.content.res.TypedArray,int,int):0:0 -> d
    20:20:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0 -> d
    20:20:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    21:21:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0:0 -> d
    21:21:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    22:22:int lookupID(android.content.res.TypedArray,int,int):0:0 -> d
    22:22:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0 -> d
    22:22:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    23:23:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0:0 -> d
    23:23:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    24:24:int lookupID(android.content.res.TypedArray,int,int):0:0 -> d
    24:24:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0 -> d
    24:24:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    25:25:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0:0 -> d
    25:25:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    26:26:int lookupID(android.content.res.TypedArray,int,int):0:0 -> d
    26:26:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0 -> d
    26:26:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    27:27:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0:0 -> d
    27:27:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    28:28:int lookupID(android.content.res.TypedArray,int,int):0:0 -> d
    28:28:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0 -> d
    28:28:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    29:29:void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray):0:0 -> d
    29:29:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0 -> d
    30:30:androidx.constraintlayout.widget.ConstraintSet$Constraint fillFromAttributeList(android.content.Context,android.util.AttributeSet):0:0 -> d
    androidx.constraintlayout.widget.ConstraintSet$Constraint get(int) -> e
    java.lang.String sideToString(int) -> f
androidx.constraintlayout.widget.ConstraintSet$1 -> androidx.constraintlayout.widget.b:
androidx.constraintlayout.widget.ConstraintSet$Constraint -> androidx.constraintlayout.widget.c:
    float translationX -> e0
    int goneEndMargin -> O
    int topToTop -> l
    float translationZ -> g0
    float guidePercent -> g
    int goneLeftMargin -> K
    int leftToLeft -> h
    int bottomMargin -> G
    int mViewId -> d
    float heightPercent -> q0
    int orientation -> C
    float rotationY -> Z
    java.lang.String mReferenceIdString -> v0
    int circleRadius -> y
    float horizontalWeight -> R
    int verticalChainStyle -> T
    float scaleX -> a0
    int goneStartMargin -> P
    float transformPivotX -> c0
    int startToEnd -> q
    int goneTopMargin -> L
    int topToBottom -> m
    int endMargin -> H
    int leftToRight -> i
    int widthMax -> l0
    int leftMargin -> D
    int widthDefault -> j0
    int guideBegin -> e
    int widthMin -> n0
    int mHelperType -> t0
    float elevation -> W
    boolean mBarrierAllowsGoneWidgets -> r0
    boolean mIsGuideline -> a
    int startToStart -> r
    boolean constrainedWidth -> h0
    int bottomToTop -> n
    float transformPivotY -> d0
    int goneRightMargin -> M
    float translationY -> f0
    int rightToLeft -> j
    int startMargin -> I
    int guideEnd -> f
    boolean applyElevation -> V
    int rightMargin -> E
    int mWidth -> b
    float widthPercent -> p0
    int editorAbsoluteX -> A
    float rotation -> X
    float horizontalBias -> u
    int endToStart -> s
    float scaleY -> b0
    int goneBottomMargin -> N
    int bottomToBottom -> o
    int visibility -> J
    int rightToRight -> k
    int topMargin -> F
    int heightDefault -> k0
    int[] mReferenceIds -> u0
    int editorAbsoluteY -> B
    int mHeight -> c
    int heightMin -> o0
    int heightMax -> m0
    java.lang.String dimensionRatio -> w
    int mBarrierDirection -> s0
    float circleAngle -> z
    float rotationX -> Y
    float verticalBias -> v
    int circleConstraint -> x
    float alpha -> U
    int endToEnd -> t
    float verticalWeight -> Q
    int horizontalChainStyle -> S
    boolean constrainedHeight -> i0
    int baselineToBaseline -> p
    void access$100(androidx.constraintlayout.widget.ConstraintSet$Constraint,int,androidx.constraintlayout.widget.ConstraintLayout$LayoutParams) -> a
    1:1:void fillFromConstraints(androidx.constraintlayout.widget.ConstraintHelper,int,androidx.constraintlayout.widget.Constraints$LayoutParams):0:0 -> b
    1:1:void access$200(androidx.constraintlayout.widget.ConstraintSet$Constraint,androidx.constraintlayout.widget.ConstraintHelper,int,androidx.constraintlayout.widget.Constraints$LayoutParams):0 -> b
    void access$300(androidx.constraintlayout.widget.ConstraintSet$Constraint,int,androidx.constraintlayout.widget.Constraints$LayoutParams) -> c
    void fillFrom(int,androidx.constraintlayout.widget.ConstraintLayout$LayoutParams) -> d
    void fillFromConstraints(int,androidx.constraintlayout.widget.Constraints$LayoutParams) -> e
androidx.constraintlayout.widget.Constraints -> androidx.constraintlayout.widget.Constraints:
    androidx.constraintlayout.widget.ConstraintSet myConstraintSet -> a
    1:1:void init(android.util.AttributeSet):0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet):0 -> <init>
    2:2:void <init>(android.content.Context,android.util.AttributeSet):0:0 -> <init>
    3:3:void init(android.util.AttributeSet):0:0 -> <init>
    3:3:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    4:4:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
androidx.constraintlayout.widget.Placeholder -> androidx.constraintlayout.widget.Placeholder:
    android.view.View mContent -> b
    int mEmptyVisibility -> c
    int mContentId -> a
    void init(android.util.AttributeSet) -> a
androidx.coordinatorlayout.widget.CoordinatorLayout -> androidx.coordinatorlayout.widget.CoordinatorLayout:
    boolean mNeedsPreDrawListener -> m
    androidx.core.view.WindowInsetsCompat mLastInsets -> n
    java.lang.Class[] CONSTRUCTOR_PARAMS -> u
    boolean mDrawStatusBarBackground -> o
    androidx.core.view.OnApplyWindowInsetsListener mApplyWindowInsetsListener -> r
    java.lang.String WIDGET_PACKAGE_NAME -> t
    java.util.List mDependencySortedChildren -> a
    android.view.View mNestedScrollingTarget -> k
    androidx.core.util.Pools$Pool sRectPool -> x
    int[] mKeylines -> i
    android.view.View mBehaviorTouchView -> j
    androidx.core.view.NestedScrollingParentHelper mNestedScrollingParentHelper -> s
    android.graphics.Paint mScrimPaint -> f
    java.util.Comparator TOP_SORTED_CHILDREN_COMPARATOR -> w
    android.view.ViewGroup$OnHierarchyChangeListener mOnHierarchyChangeListener -> q
    java.util.List mTempDependenciesList -> d
    java.util.List mTempList1 -> c
    int[] mTempIntPair -> e
    java.lang.ThreadLocal sConstructors -> v
    boolean mDisallowInterceptReset -> g
    boolean mIsAttachedToWindow -> h
    androidx.coordinatorlayout.widget.DirectedAcyclicGraph mChildDag -> b
    android.graphics.drawable.Drawable mStatusBarBackground -> p
    androidx.coordinatorlayout.widget.CoordinatorLayout$OnPreDrawListener mOnPreDrawListener -> l
    android.graphics.Rect acquireTempRect() -> a
    void constrainChildRect(androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams,android.graphics.Rect,int,int) -> b
    1:1:void getDescendantRect(android.view.View,android.graphics.Rect):0:0 -> c
    1:1:void getChildRect(android.view.View,boolean,android.graphics.Rect):0 -> c
    2:2:void getChildRect(android.view.View,boolean,android.graphics.Rect):0:0 -> c
    void getDesiredAnchoredChildRectWithoutConstraints(android.view.View,int,android.graphics.Rect,android.graphics.Rect,androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams,int,int) -> d
    1:1:void releaseTempRect(android.graphics.Rect):0:0 -> doViewsOverlap
    1:1:boolean doViewsOverlap(android.view.View,android.view.View):0 -> doViewsOverlap
    2:2:boolean doViewsOverlap(android.view.View,android.view.View):0:0 -> doViewsOverlap
    int getKeyline(int) -> e
    androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams getResolvedLayoutParams(android.view.View) -> f
    1:1:void offsetChildToAnchor(android.view.View,int):0:0 -> g
    1:1:void onChildViewsChanged(int):0 -> g
    2:2:void getDescendantRect(android.view.View,android.graphics.Rect):0:0 -> g
    2:2:void offsetChildToAnchor(android.view.View,int):0 -> g
    2:2:void onChildViewsChanged(int):0 -> g
    3:3:void offsetChildToAnchor(android.view.View,int):0:0 -> g
    3:3:void onChildViewsChanged(int):0 -> g
    4:4:void releaseTempRect(android.graphics.Rect):0:0 -> g
    4:4:void offsetChildToAnchor(android.view.View,int):0 -> g
    4:4:void onChildViewsChanged(int):0 -> g
    5:5:void onChildViewsChanged(int):0:0 -> g
    6:6:void offsetChildByInset(android.view.View,android.graphics.Rect,int):0:0 -> g
    6:6:void onChildViewsChanged(int):0 -> g
    7:7:void releaseTempRect(android.graphics.Rect):0:0 -> g
    7:7:void offsetChildByInset(android.view.View,android.graphics.Rect,int):0 -> g
    7:7:void onChildViewsChanged(int):0 -> g
    8:8:void offsetChildByInset(android.view.View,android.graphics.Rect,int):0:0 -> g
    8:8:void onChildViewsChanged(int):0 -> g
    9:9:void releaseTempRect(android.graphics.Rect):0:0 -> g
    9:9:void offsetChildByInset(android.view.View,android.graphics.Rect,int):0 -> g
    9:9:void onChildViewsChanged(int):0 -> g
    10:10:void getLastChildRect(android.view.View,android.graphics.Rect):0:0 -> g
    10:10:void onChildViewsChanged(int):0 -> g
    11:11:android.graphics.Rect androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams.getLastChildRect():0:0 -> g
    11:11:void getLastChildRect(android.view.View,android.graphics.Rect):0 -> g
    11:11:void onChildViewsChanged(int):0 -> g
    12:12:void getLastChildRect(android.view.View,android.graphics.Rect):0:0 -> g
    12:12:void onChildViewsChanged(int):0 -> g
    13:13:void onChildViewsChanged(int):0:0 -> g
    14:14:void recordLastChildRect(android.view.View,android.graphics.Rect):0:0 -> g
    14:14:void onChildViewsChanged(int):0 -> g
    15:15:void androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams.setLastChildRect(android.graphics.Rect):0:0 -> g
    15:15:void recordLastChildRect(android.view.View,android.graphics.Rect):0 -> g
    15:15:void onChildViewsChanged(int):0 -> g
    16:16:void onChildViewsChanged(int):0:0 -> g
    17:17:void releaseTempRect(android.graphics.Rect):0:0 -> g
    17:17:void onChildViewsChanged(int):0 -> g
    1:1:void getTopSortedChildren(java.util.List):0:0 -> h
    1:1:boolean performIntercept(android.view.MotionEvent,int):0 -> h
    2:2:boolean performIntercept(android.view.MotionEvent,int):0:0 -> h
    void resetTouchBehaviors(boolean) -> i
    1:1:void getDescendantRect(android.view.View,android.graphics.Rect):0:0 -> isPointInChildBounds
    1:1:boolean isPointInChildBounds(android.view.View,int,int):0 -> isPointInChildBounds
    2:2:boolean isPointInChildBounds(android.view.View,int,int):0:0 -> isPointInChildBounds
    3:3:void releaseTempRect(android.graphics.Rect):0:0 -> isPointInChildBounds
    3:3:boolean isPointInChildBounds(android.view.View,int,int):0 -> isPointInChildBounds
    4:4:boolean isPointInChildBounds(android.view.View,int,int):0:0 -> isPointInChildBounds
    void setInsetOffsetX(android.view.View,int) -> j
    void setInsetOffsetY(android.view.View,int) -> k
    1:1:androidx.core.view.WindowInsetsCompat dispatchApplyWindowInsetsToBehaviors(androidx.core.view.WindowInsetsCompat):0:0 -> l
    1:1:androidx.core.view.WindowInsetsCompat setWindowInsets(androidx.core.view.WindowInsetsCompat):0 -> l
    2:2:androidx.core.view.WindowInsetsCompat setWindowInsets(androidx.core.view.WindowInsetsCompat):0:0 -> l
    void setupForInsets() -> m
    1:1:boolean androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams.checkAnchorChanged():0:0 -> onLayoutChild
    1:1:void onLayoutChild(android.view.View,int):0 -> onLayoutChild
    2:2:void layoutChildWithAnchor(android.view.View,android.view.View,int):0:0 -> onLayoutChild
    2:2:void onLayoutChild(android.view.View,int):0 -> onLayoutChild
    3:3:void getDescendantRect(android.view.View,android.graphics.Rect):0:0 -> onLayoutChild
    3:3:void layoutChildWithAnchor(android.view.View,android.view.View,int):0 -> onLayoutChild
    3:3:void onLayoutChild(android.view.View,int):0 -> onLayoutChild
    4:4:void getDesiredAnchoredChildRect(android.view.View,int,android.graphics.Rect,android.graphics.Rect):0:0 -> onLayoutChild
    4:4:void layoutChildWithAnchor(android.view.View,android.view.View,int):0 -> onLayoutChild
    4:4:void onLayoutChild(android.view.View,int):0 -> onLayoutChild
    5:5:void layoutChildWithAnchor(android.view.View,android.view.View,int):0:0 -> onLayoutChild
    5:5:void onLayoutChild(android.view.View,int):0 -> onLayoutChild
    6:6:void releaseTempRect(android.graphics.Rect):0:0 -> onLayoutChild
    6:6:void layoutChildWithAnchor(android.view.View,android.view.View,int):0 -> onLayoutChild
    6:6:void onLayoutChild(android.view.View,int):0 -> onLayoutChild
    7:7:void layoutChildWithAnchor(android.view.View,android.view.View,int):0:0 -> onLayoutChild
    7:7:void onLayoutChild(android.view.View,int):0 -> onLayoutChild
    8:8:void onLayoutChild(android.view.View,int):0:0 -> onLayoutChild
    9:9:void layoutChildWithKeyline(android.view.View,int,int):0:0 -> onLayoutChild
    9:9:void onLayoutChild(android.view.View,int):0 -> onLayoutChild
    10:10:void layoutChild(android.view.View,int):0:0 -> onLayoutChild
    10:10:void onLayoutChild(android.view.View,int):0 -> onLayoutChild
    11:11:void releaseTempRect(android.graphics.Rect):0:0 -> onLayoutChild
    11:11:void layoutChild(android.view.View,int):0 -> onLayoutChild
    11:11:void onLayoutChild(android.view.View,int):0 -> onLayoutChild
    12:12:void onLayoutChild(android.view.View,int):0:0 -> onLayoutChild
    1:1:void prepareChildren():0:0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:android.view.View androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams.findAnchorView(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View):0:0 -> onMeasure
    2:2:void prepareChildren():0 -> onMeasure
    2:2:void onMeasure(int,int):0 -> onMeasure
    3:3:boolean androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams.verifyAnchorView(android.view.View,androidx.coordinatorlayout.widget.CoordinatorLayout):0:0 -> onMeasure
    3:3:android.view.View androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams.findAnchorView(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View):0 -> onMeasure
    3:3:void prepareChildren():0 -> onMeasure
    3:3:void onMeasure(int,int):0 -> onMeasure
    4:4:void androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams.resolveAnchorView(android.view.View,androidx.coordinatorlayout.widget.CoordinatorLayout):0:0 -> onMeasure
    4:4:android.view.View androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams.findAnchorView(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View):0 -> onMeasure
    4:4:void prepareChildren():0 -> onMeasure
    4:4:void onMeasure(int,int):0 -> onMeasure
    5:5:void prepareChildren():0:0 -> onMeasure
    5:5:void onMeasure(int,int):0 -> onMeasure
    6:6:boolean androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams.dependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,android.view.View):0:0 -> onMeasure
    6:6:void prepareChildren():0 -> onMeasure
    6:6:void onMeasure(int,int):0 -> onMeasure
    7:7:boolean androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams.shouldDodge(android.view.View,int):0:0 -> onMeasure
    7:7:boolean androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams.dependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,android.view.View):0 -> onMeasure
    7:7:void prepareChildren():0 -> onMeasure
    7:7:void onMeasure(int,int):0 -> onMeasure
    8:8:boolean androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams.dependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,android.view.View):0:0 -> onMeasure
    8:8:void prepareChildren():0 -> onMeasure
    8:8:void onMeasure(int,int):0 -> onMeasure
    9:9:void prepareChildren():0:0 -> onMeasure
    9:9:void onMeasure(int,int):0 -> onMeasure
    10:10:void androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams.resolveAnchorView(android.view.View,androidx.coordinatorlayout.widget.CoordinatorLayout):0:0 -> onMeasure
    10:10:android.view.View androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams.findAnchorView(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View):0 -> onMeasure
    10:10:void prepareChildren():0 -> onMeasure
    10:10:void onMeasure(int,int):0 -> onMeasure
    11:11:void prepareChildren():0:0 -> onMeasure
    11:11:void onMeasure(int,int):0 -> onMeasure
    12:12:void ensurePreDrawListener():0:0 -> onMeasure
    12:12:void onMeasure(int,int):0 -> onMeasure
    13:13:boolean hasDependencies(android.view.View):0:0 -> onMeasure
    13:13:void ensurePreDrawListener():0 -> onMeasure
    13:13:void onMeasure(int,int):0 -> onMeasure
    14:14:void ensurePreDrawListener():0:0 -> onMeasure
    14:14:void onMeasure(int,int):0 -> onMeasure
    15:15:void addPreDrawListener():0:0 -> onMeasure
    15:15:void ensurePreDrawListener():0 -> onMeasure
    15:15:void onMeasure(int,int):0 -> onMeasure
    16:16:void removePreDrawListener():0:0 -> onMeasure
    16:16:void ensurePreDrawListener():0 -> onMeasure
    16:16:void onMeasure(int,int):0 -> onMeasure
    17:17:void onMeasure(int,int):0:0 -> onMeasure
    1:1:void androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams.resetNestedScroll(int):0:0 -> onStopNestedScroll
    1:1:void onStopNestedScroll(android.view.View,int):0 -> onStopNestedScroll
    2:2:void onStopNestedScroll(android.view.View,int):0:0 -> onStopNestedScroll
androidx.coordinatorlayout.widget.CoordinatorLayout$1 -> androidx.coordinatorlayout.widget.a:
    androidx.coordinatorlayout.widget.CoordinatorLayout this$0 -> a
androidx.coordinatorlayout.widget.CoordinatorLayout$HierarchyChangeListener -> androidx.coordinatorlayout.widget.b:
    androidx.coordinatorlayout.widget.CoordinatorLayout this$0 -> a
androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams -> androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams:
    boolean mDidAcceptNestedScrollTouch -> i
    boolean mDidAcceptNestedScrollNonTouch -> j
    androidx.coordinatorlayout.widget.CoordinatorLayout$Behavior mBehavior -> a
    boolean mDidChangeAfterNestedScroll -> k
    int mInsetOffsetX -> d
    int mInsetOffsetY -> e
    int mAnchorId -> c
    java.lang.Object mBehaviorTag -> m
    android.graphics.Rect mLastChildRect -> l
    boolean mDidBlockInteraction -> h
    boolean mBehaviorResolved -> b
    android.view.View mAnchorDirectChild -> g
    android.view.View mAnchorView -> f
    1:1:androidx.coordinatorlayout.widget.CoordinatorLayout$Behavior androidx.coordinatorlayout.widget.CoordinatorLayout.parseBehavior(android.content.Context,android.util.AttributeSet,java.lang.String):0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet):0 -> <init>
    2:2:void <init>(android.content.Context,android.util.AttributeSet):0:0 -> <init>
    3:3:androidx.coordinatorlayout.widget.CoordinatorLayout$Behavior androidx.coordinatorlayout.widget.CoordinatorLayout.parseBehavior(android.content.Context,android.util.AttributeSet,java.lang.String):0:0 -> <init>
    3:3:void <init>(android.content.Context,android.util.AttributeSet):0 -> <init>
    4:4:void <init>(android.content.Context,android.util.AttributeSet):0:0 -> <init>
    boolean didBlockInteraction() -> a
    boolean getChangedAfterNestedScroll() -> b
    boolean isBlockingInteractionBelow(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View) -> c
    boolean isNestedScrollAccepted(int) -> d
    void resetChangedAfterNestedScroll() -> e
    void resetTouchBehaviorTracking() -> f
    void setChangedAfterNestedScroll(boolean) -> g
    void setNestedScrollAccepted(int,boolean) -> h
    1:1:void invalidateAnchor():0:0 -> setAnchorId
    1:1:void setAnchorId(int):0 -> setAnchorId
    2:2:void setAnchorId(int):0:0 -> setAnchorId
androidx.coordinatorlayout.widget.CoordinatorLayout$OnPreDrawListener -> androidx.coordinatorlayout.widget.c:
    androidx.coordinatorlayout.widget.CoordinatorLayout this$0 -> a
androidx.coordinatorlayout.widget.CoordinatorLayout$SavedState -> androidx.coordinatorlayout.widget.CoordinatorLayout$SavedState:
    android.util.SparseArray behaviorStates -> b
androidx.coordinatorlayout.widget.CoordinatorLayout$SavedState$1 -> androidx.coordinatorlayout.widget.d:
    1:1:androidx.coordinatorlayout.widget.CoordinatorLayout$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    2:2:androidx.coordinatorlayout.widget.CoordinatorLayout$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    2:2:java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader):0 -> createFromParcel
    1:1:androidx.coordinatorlayout.widget.CoordinatorLayout$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.coordinatorlayout.widget.CoordinatorLayout$ViewElevationComparator -> androidx.coordinatorlayout.widget.e:
    1:1:int compare(android.view.View,android.view.View):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
androidx.coordinatorlayout.widget.DirectedAcyclicGraph -> androidx.coordinatorlayout.widget.DirectedAcyclicGraph:
    androidx.collection.SimpleArrayMap mGraph -> b
    java.util.HashSet mSortTmpMarked -> d
    androidx.core.util.Pools$Pool mListPool -> a
    java.util.ArrayList mSortResult -> c
    void dfs(java.lang.Object,java.util.ArrayList,java.util.HashSet) -> a
    1:1:java.util.ArrayList getEmptyList():0:0 -> addEdge
    1:1:void addEdge(java.lang.Object,java.lang.Object):0 -> addEdge
    2:2:void addEdge(java.lang.Object,java.lang.Object):0:0 -> addEdge
    1:1:void poolList(java.util.ArrayList):0:0 -> clear
    1:1:void clear():0 -> clear
    2:2:void clear():0:0 -> clear
androidx.coordinatorlayout.widget.ViewGroupUtils -> androidx.coordinatorlayout.widget.ViewGroupUtils:
    java.lang.ThreadLocal sMatrix -> a
    java.lang.ThreadLocal sRectF -> b
    void offsetDescendantMatrix(android.view.ViewParent,android.view.View,android.graphics.Matrix) -> a
    1:1:void offsetDescendantRect(android.view.ViewGroup,android.view.View,android.graphics.Rect):0:0 -> getDescendantRect
    1:1:void getDescendantRect(android.view.ViewGroup,android.view.View,android.graphics.Rect):0 -> getDescendantRect
androidx.core.app.ActivityCompat -> androidx.core.app.ActivityCompat:
    androidx.core.app.ActivityCompat$PermissionCompatDelegate sDelegate -> b
androidx.core.app.ActivityCompat$SharedElementCallback21Impl -> androidx.core.app.b:
    androidx.core.app.SharedElementCallback mCallback -> a
androidx.core.app.ActivityCompat$SharedElementCallback21Impl$1 -> androidx.core.app.a:
    android.app.SharedElementCallback$OnSharedElementsReadyListener val$listener -> a
androidx.core.app.ActivityOptionsCompat$ActivityOptionsCompatImpl -> androidx.core.app.c:
    android.app.ActivityOptions mActivityOptions -> a
androidx.core.app.ComponentActivity -> androidx.core.app.ComponentActivity:
    androidx.collection.SimpleArrayMap mExtraDataMap -> a
    androidx.lifecycle.LifecycleRegistry mLifecycleRegistry -> b
androidx.core.app.CoreComponentFactory -> androidx.core.app.CoreComponentFactory:
    java.lang.Object checkCompatWrapper(java.lang.Object) -> a
androidx.core.app.FrameMetricsAggregator -> androidx.core.app.FrameMetricsAggregator:
    androidx.core.app.FrameMetricsAggregator$FrameMetricsBaseImpl mInstance -> a
androidx.core.app.FrameMetricsAggregator$FrameMetricsApi24Impl -> androidx.core.app.e:
    android.os.Handler sHandler -> f
    android.os.HandlerThread sHandlerThread -> e
    android.util.SparseIntArray[] mMetrics -> b
    java.util.ArrayList mActivities -> c
    android.view.Window$OnFrameMetricsAvailableListener mListener -> d
    int mTrackingFlags -> a
    void addDurationItem(android.util.SparseIntArray,long) -> a
androidx.core.app.FrameMetricsAggregator$FrameMetricsApi24Impl$1 -> androidx.core.app.d:
    androidx.core.app.FrameMetricsAggregator$FrameMetricsApi24Impl this$0 -> a
androidx.core.app.FrameMetricsAggregator$FrameMetricsBaseImpl -> androidx.core.app.f:
androidx.core.app.JobIntentService -> androidx.core.app.JobIntentService:
    java.lang.Object sLock -> e
    androidx.core.app.JobIntentService$CompatJobEngine mJobImpl -> a
    java.util.HashMap sClassWorkEnqueuer -> f
    androidx.core.app.JobIntentService$CommandProcessor mCurProcessor -> b
    boolean mInterruptIfStopped -> c
    boolean mStopped -> d
    void ensureProcessorRunningLocked(boolean) -> a
    androidx.core.app.JobIntentService$WorkEnqueuer getWorkEnqueuer(android.content.Context,android.content.ComponentName,boolean,int) -> b
    1:1:android.os.IBinder androidx.core.app.JobIntentService$JobServiceEngineImpl.compatGetBinder():0:0 -> onBind
    1:1:android.os.IBinder onBind(android.content.Intent):0 -> onBind
androidx.core.app.JobIntentService$CommandProcessor -> androidx.core.app.g:
    androidx.core.app.JobIntentService this$0 -> a
    1:1:java.lang.Void doInBackground(java.lang.Void[]):0:0 -> doInBackground
    1:1:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    2:2:androidx.core.app.JobIntentService$GenericWorkItem androidx.core.app.JobIntentService.dequeueWork():0:0 -> doInBackground
    2:2:java.lang.Void doInBackground(java.lang.Void[]):0 -> doInBackground
    2:2:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    3:3:androidx.core.app.JobIntentService$GenericWorkItem androidx.core.app.JobIntentService$JobServiceEngineImpl.dequeueWork():0:0 -> doInBackground
    3:3:androidx.core.app.JobIntentService$GenericWorkItem androidx.core.app.JobIntentService.dequeueWork():0 -> doInBackground
    3:3:java.lang.Void doInBackground(java.lang.Void[]):0 -> doInBackground
    3:3:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    4:4:java.lang.Void doInBackground(java.lang.Void[]):0:0 -> doInBackground
    4:4:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    5:5:android.content.Intent androidx.core.app.JobIntentService$JobServiceEngineImpl$WrapperWorkItem.getIntent():0:0 -> doInBackground
    5:5:java.lang.Void doInBackground(java.lang.Void[]):0 -> doInBackground
    5:5:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    6:6:java.lang.Void doInBackground(java.lang.Void[]):0:0 -> doInBackground
    6:6:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    7:7:void androidx.core.app.JobIntentService$JobServiceEngineImpl$WrapperWorkItem.complete():0:0 -> doInBackground
    7:7:java.lang.Void doInBackground(java.lang.Void[]):0 -> doInBackground
    7:7:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    8:8:androidx.core.app.JobIntentService$GenericWorkItem androidx.core.app.JobIntentService$JobServiceEngineImpl.dequeueWork():0:0 -> doInBackground
    8:8:androidx.core.app.JobIntentService$GenericWorkItem androidx.core.app.JobIntentService.dequeueWork():0 -> doInBackground
    8:8:java.lang.Void doInBackground(java.lang.Void[]):0 -> doInBackground
    8:8:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    1:1:void onCancelled(java.lang.Void):0:0 -> onCancelled
    1:1:void onCancelled(java.lang.Object):0 -> onCancelled
    2:2:void androidx.core.app.JobIntentService.processorFinished():0:0 -> onCancelled
    2:2:void onCancelled(java.lang.Void):0 -> onCancelled
    2:2:void onCancelled(java.lang.Object):0 -> onCancelled
    1:1:void onPostExecute(java.lang.Void):0:0 -> onPostExecute
    1:1:void onPostExecute(java.lang.Object):0 -> onPostExecute
    2:2:void androidx.core.app.JobIntentService.processorFinished():0:0 -> onPostExecute
    2:2:void onPostExecute(java.lang.Void):0 -> onPostExecute
    2:2:void onPostExecute(java.lang.Object):0 -> onPostExecute
androidx.core.app.JobIntentService$CompatJobEngine -> androidx.core.app.h:
androidx.core.app.JobIntentService$JobServiceEngineImpl -> androidx.core.app.j:
    android.app.job.JobParameters mParams -> c
    androidx.core.app.JobIntentService mService -> a
    java.lang.Object mLock -> b
    1:1:boolean androidx.core.app.JobIntentService.doStopCurrentWork():0:0 -> onStopJob
    1:1:boolean onStopJob(android.app.job.JobParameters):0 -> onStopJob
    2:2:boolean onStopJob(android.app.job.JobParameters):0:0 -> onStopJob
androidx.core.app.JobIntentService$JobServiceEngineImpl$WrapperWorkItem -> androidx.core.app.i:
    android.app.job.JobWorkItem mJobWork -> a
    androidx.core.app.JobIntentService$JobServiceEngineImpl this$0 -> b
androidx.core.app.JobIntentService$JobWorkEnqueuer -> androidx.core.app.k:
    android.app.job.JobScheduler mJobScheduler -> e
    android.app.job.JobInfo mJobInfo -> d
    void enqueueWork(android.content.Intent) -> a
androidx.core.app.JobIntentService$WorkEnqueuer -> androidx.core.app.l:
    android.content.ComponentName mComponentName -> a
    boolean mHasJobId -> b
    int mJobId -> c
    void enqueueWork(android.content.Intent) -> a
    void ensureJobId(int) -> b
androidx.core.app.NotificationCompat -> androidx.core.app.NotificationCompat:
    androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action) -> a
androidx.core.app.NotificationCompat$Action -> androidx.core.app.NotificationCompat$Action:
    android.os.Bundle mExtras -> a
    androidx.core.app.RemoteInput[] mDataOnlyRemoteInputs -> c
    androidx.core.app.RemoteInput[] mRemoteInputs -> b
    boolean mShowsUserInterface -> e
    int mSemanticAction -> f
    boolean mAllowGeneratedReplies -> d
androidx.core.app.NotificationCompat$Action$Builder -> androidx.core.app.NotificationCompat$Action$Builder:
    java.lang.CharSequence mTitle -> b
    android.os.Bundle mExtras -> e
    android.app.PendingIntent mIntent -> c
    java.util.ArrayList mRemoteInputs -> f
    int mSemanticAction -> g
    boolean mShowsUserInterface -> h
    int mIcon -> a
    boolean mAllowGeneratedReplies -> d
androidx.core.app.NotificationCompat$Action$WearableExtender -> androidx.core.app.NotificationCompat$Action$WearableExtender:
    java.lang.CharSequence mInProgressLabel -> b
    java.lang.CharSequence mConfirmLabel -> c
    java.lang.CharSequence mCancelLabel -> d
    int mFlags -> a
    void setFlag(int,boolean) -> a
androidx.core.app.NotificationCompat$BigPictureStyle -> androidx.core.app.NotificationCompat$BigPictureStyle:
    boolean mBigLargeIconSet -> f
    android.graphics.Bitmap mPicture -> d
    android.graphics.Bitmap mBigLargeIcon -> e
androidx.core.app.NotificationCompat$BigTextStyle -> androidx.core.app.NotificationCompat$BigTextStyle:
    java.lang.CharSequence mBigText -> d
androidx.core.app.NotificationCompat$Builder -> androidx.core.app.NotificationCompat$Builder:
    java.lang.String mChannelId -> G
    long mTimeout -> J
    java.lang.String mShortcutId -> I
    int mPriority -> j
    android.widget.RemoteViews mBigContentView -> E
    int mGroupAlertBehavior -> K
    java.lang.CharSequence mContentTitle -> b
    boolean mShowWhen -> k
    android.widget.RemoteViews mTickerView -> f
    boolean mColorized -> w
    java.lang.CharSequence mContentInfo -> h
    java.util.ArrayList mInvisibleActions -> a
    android.app.PendingIntent mFullScreenIntent -> e
    java.lang.CharSequence[] mRemoteInputHistory -> o
    int mColor -> A
    android.app.Notification mPublicVersion -> C
    android.os.Bundle mExtras -> z
    int mProgress -> q
    android.widget.RemoteViews mContentView -> D
    android.app.Notification mNotification -> L
    int mBadgeIcon -> H
    java.lang.CharSequence mContentText -> c
    int mNumber -> i
    boolean mUseChronometer -> l
    android.graphics.Bitmap mLargeIcon -> g
    boolean mLocalOnly -> v
    android.widget.RemoteViews mHeadsUpContentView -> F
    boolean mColorizedSet -> x
    java.lang.String mGroupKey -> s
    int mVisibility -> B
    boolean mProgressIndeterminate -> r
    java.lang.String mSortKey -> u
    android.app.PendingIntent mContentIntent -> d
    boolean mGroupSummary -> t
    java.lang.CharSequence mSubText -> n
    java.lang.String mCategory -> y
    int mProgressMax -> p
    androidx.core.app.NotificationCompat$Style mStyle -> m
    void setFlag(int,boolean) -> a
    1:1:android.graphics.Bitmap reduceLargeIconSize(android.graphics.Bitmap):0:0 -> setLargeIcon
    1:1:androidx.core.app.NotificationCompat$Builder setLargeIcon(android.graphics.Bitmap):0 -> setLargeIcon
    2:2:androidx.core.app.NotificationCompat$Builder setLargeIcon(android.graphics.Bitmap):0:0 -> setLargeIcon
androidx.core.app.NotificationCompat$CarExtender -> androidx.core.app.NotificationCompat$CarExtender:
    android.graphics.Bitmap mLargeIcon -> a
    int mColor -> c
    androidx.core.app.NotificationCompat$CarExtender$UnreadConversation mUnreadConversation -> b
    1:1:androidx.core.app.NotificationCompat$CarExtender$UnreadConversation getUnreadConversationFromBundle(android.os.Bundle):0:0 -> <init>
    1:1:void <init>(android.app.Notification):0 -> <init>
    2:2:void <init>(android.app.Notification):0:0 -> <init>
    1:1:android.os.Bundle getBundleForUnreadConversation(androidx.core.app.NotificationCompat$CarExtender$UnreadConversation):0:0 -> extend
    1:1:androidx.core.app.NotificationCompat$Builder extend(androidx.core.app.NotificationCompat$Builder):0 -> extend
    2:2:androidx.core.app.NotificationCompat$Builder extend(androidx.core.app.NotificationCompat$Builder):0:0 -> extend
androidx.core.app.NotificationCompat$CarExtender$UnreadConversation -> androidx.core.app.NotificationCompat$CarExtender$UnreadConversation:
    androidx.core.app.RemoteInput mRemoteInput -> b
    long mLatestTimestamp -> f
    android.app.PendingIntent mReplyPendingIntent -> c
    java.lang.String[] mParticipants -> e
    java.lang.String[] mMessages -> a
    android.app.PendingIntent mReadPendingIntent -> d
androidx.core.app.NotificationCompat$CarExtender$UnreadConversation$Builder -> androidx.core.app.NotificationCompat$CarExtender$UnreadConversation$Builder:
    java.util.List mMessages -> a
    long mLatestTimestamp -> f
    androidx.core.app.RemoteInput mRemoteInput -> c
    java.lang.String mParticipant -> b
    android.app.PendingIntent mReplyPendingIntent -> e
    android.app.PendingIntent mReadPendingIntent -> d
androidx.core.app.NotificationCompat$InboxStyle -> androidx.core.app.NotificationCompat$InboxStyle:
    java.util.ArrayList mTexts -> d
androidx.core.app.NotificationCompat$MessagingStyle -> androidx.core.app.NotificationCompat$MessagingStyle:
    java.lang.Boolean mIsGroupConversation -> g
    java.util.List mMessages -> d
    java.lang.CharSequence mConversationTitle -> f
    androidx.core.app.Person mUser -> e
    1:1:java.util.List androidx.core.app.NotificationCompat$MessagingStyle$Message.getMessagesFromBundleArray(android.os.Parcelable[]):0:0 -> restoreFromCompatExtras
    1:1:void restoreFromCompatExtras(android.os.Bundle):0 -> restoreFromCompatExtras
    2:2:androidx.core.app.NotificationCompat$MessagingStyle$Message androidx.core.app.NotificationCompat$MessagingStyle$Message.getMessageFromBundle(android.os.Bundle):0:0 -> restoreFromCompatExtras
    2:2:java.util.List androidx.core.app.NotificationCompat$MessagingStyle$Message.getMessagesFromBundleArray(android.os.Parcelable[]):0 -> restoreFromCompatExtras
    2:2:void restoreFromCompatExtras(android.os.Bundle):0 -> restoreFromCompatExtras
    3:3:java.util.List androidx.core.app.NotificationCompat$MessagingStyle$Message.getMessagesFromBundleArray(android.os.Parcelable[]):0:0 -> restoreFromCompatExtras
    3:3:void restoreFromCompatExtras(android.os.Bundle):0 -> restoreFromCompatExtras
    4:4:void restoreFromCompatExtras(android.os.Bundle):0:0 -> restoreFromCompatExtras
androidx.core.app.NotificationCompat$MessagingStyle$Message -> androidx.core.app.NotificationCompat$MessagingStyle$Message:
    android.net.Uri mDataUri -> f
    java.lang.CharSequence mText -> a
    androidx.core.app.Person mPerson -> c
    android.os.Bundle mExtras -> d
    long mTimestamp -> b
    java.lang.String mDataMimeType -> e
    1:1:android.os.Bundle toBundle():0:0 -> a
    1:1:android.os.Bundle[] getBundleArrayForMessages(java.util.List):0 -> a
    2:2:android.os.Bundle[] getBundleArrayForMessages(java.util.List):0:0 -> a
androidx.core.app.NotificationCompat$Style -> androidx.core.app.NotificationCompat$Style:
    java.lang.CharSequence mBigContentTitle -> a
    java.lang.CharSequence mSummaryText -> b
    boolean mSummaryTextSet -> c
    android.graphics.Bitmap createColoredBitmap(int,int,int) -> a
    android.graphics.Bitmap createIconWithBackground(int,int,int,int) -> b
    1:1:void hideNormalContent(android.widget.RemoteViews):0:0 -> buildIntoRemoteViews
    1:1:void buildIntoRemoteViews(android.widget.RemoteViews,android.widget.RemoteViews):0 -> buildIntoRemoteViews
    2:2:void buildIntoRemoteViews(android.widget.RemoteViews,android.widget.RemoteViews):0:0 -> buildIntoRemoteViews
    3:3:int calculateTopPadding():0:0 -> buildIntoRemoteViews
    3:3:void buildIntoRemoteViews(android.widget.RemoteViews,android.widget.RemoteViews):0 -> buildIntoRemoteViews
    4:4:void buildIntoRemoteViews(android.widget.RemoteViews,android.widget.RemoteViews):0:0 -> buildIntoRemoteViews
androidx.core.app.NotificationCompat$WearableExtender -> androidx.core.app.NotificationCompat$WearableExtender:
    int mHintScreenTimeout -> l
    int mCustomContentHeight -> j
    int mGravity -> k
    int mContentActionIndex -> h
    java.lang.String mDismissalId -> m
    int mCustomSizePreset -> i
    android.app.PendingIntent mDisplayIntent -> c
    int mContentIcon -> f
    int mContentIconGravity -> g
    java.lang.String mBridgeTag -> n
    java.util.ArrayList mPages -> d
    android.graphics.Bitmap mBackground -> e
    int mFlags -> b
    java.util.ArrayList mActions -> a
    1:1:android.app.Notification[] androidx.core.app.NotificationCompat.getNotificationArrayFromBundle(android.os.Bundle,java.lang.String):0:0 -> <init>
    1:1:void <init>(android.app.Notification):0 -> <init>
    2:2:void <init>(android.app.Notification):0:0 -> <init>
    void setFlag(int,boolean) -> a
    1:1:android.app.Notification$Action getActionFromActionCompat(androidx.core.app.NotificationCompat$Action):0:0 -> extend
    1:1:androidx.core.app.NotificationCompat$Builder extend(androidx.core.app.NotificationCompat$Builder):0 -> extend
    2:2:androidx.core.app.NotificationCompat$Builder extend(androidx.core.app.NotificationCompat$Builder):0:0 -> extend
androidx.core.app.NotificationCompatBuilder -> androidx.core.app.m:
    androidx.core.app.NotificationCompat$Builder mBuilderCompat -> b
    android.widget.RemoteViews mBigContentView -> d
    java.util.List mActionExtrasList -> e
    android.widget.RemoteViews mContentView -> c
    android.widget.RemoteViews mHeadsUpContentView -> h
    android.os.Bundle mExtras -> f
    int mGroupAlertBehavior -> g
    android.app.Notification$Builder mBuilder -> a
    1:1:void addAction(androidx.core.app.NotificationCompat$Action):0:0 -> <init>
    1:1:void <init>(androidx.core.app.NotificationCompat$Builder):0 -> <init>
    2:2:void <init>(androidx.core.app.NotificationCompat$Builder):0:0 -> <init>
    1:1:android.app.Notification buildInternal():0:0 -> build
    1:1:android.app.Notification build():0 -> build
    2:2:android.app.Notification build():0:0 -> build
androidx.core.app.NotificationCompatJellybean -> androidx.core.app.n:
    java.lang.Object sActionsLock -> b
    java.lang.Object sExtrasLock -> a
    1:1:androidx.core.app.RemoteInput fromBundle(android.os.Bundle):0:0 -> a
    1:1:androidx.core.app.RemoteInput[] fromBundleArray(android.os.Bundle[]):0 -> a
    2:2:androidx.core.app.RemoteInput[] fromBundleArray(android.os.Bundle[]):0:0 -> a
    androidx.core.app.NotificationCompat$Action getActionFromBundle(android.os.Bundle) -> b
    android.os.Bundle[] getBundleArrayFromBundle(android.os.Bundle,java.lang.String) -> c
    android.os.Bundle getBundleForAction(androidx.core.app.NotificationCompat$Action) -> d
    1:1:android.os.Bundle toBundle(androidx.core.app.RemoteInput):0:0 -> e
    1:1:android.os.Bundle[] toBundleArray(androidx.core.app.RemoteInput[]):0 -> e
    2:2:android.os.Bundle[] toBundleArray(androidx.core.app.RemoteInput[]):0:0 -> e
androidx.core.app.NotificationManagerCompat -> androidx.core.app.NotificationManagerCompat:
    android.content.Context mContext -> a
    java.lang.Object sLock -> f
    java.util.Set sEnabledNotificationListenerPackages -> e
    android.app.NotificationManager mNotificationManager -> b
    java.lang.Object sEnabledNotificationListenersLock -> c
    androidx.core.app.NotificationManagerCompat$SideChannelManager sSideChannelManager -> g
    java.lang.String sEnabledNotificationListeners -> d
    void pushSideChannelQueue(androidx.core.app.NotificationManagerCompat$Task) -> a
    1:1:boolean useSideChannelForNotification(android.app.Notification):0:0 -> notify
    1:1:void notify(java.lang.String,int,android.app.Notification):0 -> notify
    2:2:void notify(java.lang.String,int,android.app.Notification):0:0 -> notify
androidx.core.app.NotificationManagerCompat$NotifyTask -> androidx.core.app.o:
    java.lang.String packageName -> a
    int id -> b
    java.lang.String tag -> c
    android.app.Notification notif -> d
androidx.core.app.NotificationManagerCompat$ServiceConnectedEvent -> androidx.core.app.p:
    android.os.IBinder iBinder -> b
    android.content.ComponentName componentName -> a
androidx.core.app.NotificationManagerCompat$SideChannelManager -> androidx.core.app.r:
    android.content.Context mContext -> a
    java.util.Map mRecordMap -> d
    android.os.Handler mHandler -> c
    java.util.Set mCachedEnabledPackages -> e
    android.os.HandlerThread mHandlerThread -> b
    1:1:boolean ensureServiceBound(androidx.core.app.NotificationManagerCompat$SideChannelManager$ListenerRecord):0:0 -> a
    1:1:void processListenerQueue(androidx.core.app.NotificationManagerCompat$SideChannelManager$ListenerRecord):0 -> a
    2:2:void processListenerQueue(androidx.core.app.NotificationManagerCompat$SideChannelManager$ListenerRecord):0:0 -> a
    void scheduleListenerRetry(androidx.core.app.NotificationManagerCompat$SideChannelManager$ListenerRecord) -> b
    1:1:void handleRetryListenerQueue(android.content.ComponentName):0:0 -> handleMessage
    1:1:boolean handleMessage(android.os.Message):0 -> handleMessage
    2:2:boolean handleMessage(android.os.Message):0:0 -> handleMessage
    3:3:void handleServiceDisconnected(android.content.ComponentName):0:0 -> handleMessage
    3:3:boolean handleMessage(android.os.Message):0 -> handleMessage
    4:4:void ensureServiceUnbound(androidx.core.app.NotificationManagerCompat$SideChannelManager$ListenerRecord):0:0 -> handleMessage
    4:4:void handleServiceDisconnected(android.content.ComponentName):0 -> handleMessage
    4:4:boolean handleMessage(android.os.Message):0 -> handleMessage
    5:5:boolean handleMessage(android.os.Message):0:0 -> handleMessage
    6:6:void handleServiceConnected(android.content.ComponentName,android.os.IBinder):0:0 -> handleMessage
    6:6:boolean handleMessage(android.os.Message):0 -> handleMessage
    7:7:boolean handleMessage(android.os.Message):0:0 -> handleMessage
    8:8:void updateListenerMap():0:0 -> handleMessage
    8:8:void handleQueueTask(androidx.core.app.NotificationManagerCompat$Task):0 -> handleMessage
    8:8:boolean handleMessage(android.os.Message):0 -> handleMessage
    9:9:void ensureServiceUnbound(androidx.core.app.NotificationManagerCompat$SideChannelManager$ListenerRecord):0:0 -> handleMessage
    9:9:void updateListenerMap():0 -> handleMessage
    9:9:void handleQueueTask(androidx.core.app.NotificationManagerCompat$Task):0 -> handleMessage
    9:9:boolean handleMessage(android.os.Message):0 -> handleMessage
    10:10:void updateListenerMap():0:0 -> handleMessage
    10:10:void handleQueueTask(androidx.core.app.NotificationManagerCompat$Task):0 -> handleMessage
    10:10:boolean handleMessage(android.os.Message):0 -> handleMessage
    11:11:void handleQueueTask(androidx.core.app.NotificationManagerCompat$Task):0:0 -> handleMessage
    11:11:boolean handleMessage(android.os.Message):0 -> handleMessage
androidx.core.app.NotificationManagerCompat$SideChannelManager$ListenerRecord -> androidx.core.app.q:
    android.content.ComponentName componentName -> a
    android.support.v4.app.INotificationSideChannel service -> c
    java.util.ArrayDeque taskQueue -> d
    int retryCount -> e
    boolean bound -> b
androidx.core.app.NotificationManagerCompat$Task -> androidx.core.app.s:
androidx.core.app.Person -> androidx.core.app.Person:
    java.lang.CharSequence mName -> a
    androidx.core.graphics.drawable.IconCompat mIcon -> b
    boolean mIsBot -> e
    boolean mIsImportant -> f
    java.lang.String mUri -> c
    java.lang.String mKey -> d
androidx.core.app.Person$Builder -> androidx.core.app.Person$Builder:
    java.lang.CharSequence mName -> a
    androidx.core.graphics.drawable.IconCompat mIcon -> b
    boolean mIsBot -> e
    boolean mIsImportant -> f
    java.lang.String mUri -> c
    java.lang.String mKey -> d
androidx.core.app.RemoteInput -> androidx.core.app.RemoteInput:
    java.lang.CharSequence mLabel -> b
    android.os.Bundle mExtras -> e
    java.util.Set mAllowedDataTypes -> f
    java.lang.String mResultKey -> a
    java.lang.CharSequence[] mChoices -> c
    boolean mAllowFreeFormTextInput -> d
    android.app.RemoteInput fromCompat(androidx.core.app.RemoteInput) -> a
    android.app.RemoteInput[] fromCompat(androidx.core.app.RemoteInput[]) -> b
androidx.core.app.RemoteInput$Builder -> androidx.core.app.RemoteInput$Builder:
    android.os.Bundle mExtras -> c
    java.lang.CharSequence mLabel -> d
    java.lang.CharSequence[] mChoices -> e
    boolean mAllowFreeFormTextInput -> f
    java.lang.String mResultKey -> a
    java.util.Set mAllowedDataTypes -> b
androidx.core.app.ShareCompat$IntentBuilder -> androidx.core.app.ShareCompat$IntentBuilder:
    android.content.Intent mIntent -> b
    java.lang.CharSequence mChooserTitle -> c
    java.util.ArrayList mStreams -> g
    java.util.ArrayList mBccAddresses -> f
    java.util.ArrayList mCcAddresses -> e
    java.util.ArrayList mToAddresses -> d
    android.app.Activity mActivity -> a
    void combineArrayExtra(java.lang.String,java.util.ArrayList) -> a
    void combineArrayExtra(java.lang.String,java.lang.String[]) -> b
    android.app.Activity getActivity() -> c
androidx.core.app.ShareCompat$IntentReader -> androidx.core.app.ShareCompat$IntentReader:
    android.content.ComponentName mCallingActivity -> d
    android.content.Intent mIntent -> b
    java.util.ArrayList mStreams -> e
    android.app.Activity mActivity -> a
    java.lang.String mCallingPackage -> c
androidx.core.app.SharedElementCallback -> androidx.core.app.SharedElementCallback:
    android.graphics.Matrix mTempMatrix -> a
    1:1:android.graphics.Bitmap createDrawableBitmap(android.graphics.drawable.Drawable):0:0 -> onCaptureSharedElementSnapshot
    1:1:android.os.Parcelable onCaptureSharedElementSnapshot(android.view.View,android.graphics.Matrix,android.graphics.RectF):0 -> onCaptureSharedElementSnapshot
    2:2:android.os.Parcelable onCaptureSharedElementSnapshot(android.view.View,android.graphics.Matrix,android.graphics.RectF):0:0 -> onCaptureSharedElementSnapshot
androidx.core.app.TaskStackBuilder -> androidx.core.app.TaskStackBuilder:
    android.content.Context mSourceContext -> b
    java.util.ArrayList mIntents -> a
androidx.core.content.ContextCompat -> androidx.core.content.ContextCompat:
    java.lang.Object sLock -> a
androidx.core.content.FileProvider -> androidx.core.content.FileProvider:
    java.io.File DEVICE_ROOT -> c
    androidx.core.content.FileProvider$PathStrategy mStrategy -> a
    java.util.HashMap sCache -> d
    java.lang.String[] COLUMNS -> b
    androidx.core.content.FileProvider$PathStrategy getPathStrategy(android.content.Context,java.lang.String) -> a
    1:1:java.io.File buildPath(java.io.File,java.lang.String[]):0:0 -> b
    1:1:androidx.core.content.FileProvider$PathStrategy parsePathStrategy(android.content.Context,java.lang.String):0 -> b
    2:2:androidx.core.content.FileProvider$PathStrategy parsePathStrategy(android.content.Context,java.lang.String):0:0 -> b
    1:1:int modeToMode(java.lang.String):0:0 -> openFile
    1:1:android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String):0 -> openFile
    2:2:android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String):0:0 -> openFile
    1:1:java.lang.String[] copyOf(java.lang.String[],int):0:0 -> query
    1:1:android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String):0 -> query
    2:2:java.lang.Object[] copyOf(java.lang.Object[],int):0:0 -> query
    2:2:android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String):0 -> query
    3:3:android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String):0:0 -> query
androidx.core.content.FileProvider$PathStrategy -> androidx.core.content.a:
androidx.core.content.FileProvider$SimplePathStrategy -> androidx.core.content.b:
    java.util.HashMap mRoots -> b
    java.lang.String mAuthority -> a
    void addRoot(java.lang.String,java.io.File) -> a
androidx.core.content.MimeTypeFilter -> androidx.core.content.MimeTypeFilter:
    boolean mimeTypeAgainstFilter(java.lang.String[],java.lang.String[]) -> a
androidx.core.content.SharedPreferencesCompat$EditorCompat -> androidx.core.content.SharedPreferencesCompat$EditorCompat:
    androidx.core.content.SharedPreferencesCompat$EditorCompat sInstance -> b
    androidx.core.content.SharedPreferencesCompat$EditorCompat$Helper mHelper -> a
    1:1:void androidx.core.content.SharedPreferencesCompat$EditorCompat$Helper.apply(android.content.SharedPreferences$Editor):0:0 -> apply
    1:1:void apply(android.content.SharedPreferences$Editor):0 -> apply
androidx.core.content.SharedPreferencesCompat$EditorCompat$Helper -> androidx.core.content.c:
androidx.core.content.pm.ShortcutInfoCompat -> androidx.core.content.pm.ShortcutInfoCompat:
    android.content.Context mContext -> a
    android.content.Intent[] mIntents -> c
    android.content.ComponentName mActivity -> d
    boolean mIsAlwaysBadged -> i
    java.lang.CharSequence mLabel -> e
    java.lang.CharSequence mLongLabel -> f
    java.lang.CharSequence mDisabledMessage -> g
    java.lang.String mId -> b
    androidx.core.graphics.drawable.IconCompat mIcon -> h
    android.content.Intent addToIntent(android.content.Intent) -> a
androidx.core.content.pm.ShortcutInfoCompat$Builder -> androidx.core.content.pm.ShortcutInfoCompat$Builder:
    androidx.core.content.pm.ShortcutInfoCompat mInfo -> a
androidx.core.content.res.ColorStateListInflaterCompat -> androidx.core.content.res.ColorStateListInflaterCompat:
    1:1:android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> createFromXmlInner
    1:1:android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> createFromXmlInner
    2:2:android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[]):0:0 -> createFromXmlInner
    2:2:android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> createFromXmlInner
    2:2:android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> createFromXmlInner
    3:3:android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> createFromXmlInner
    3:3:android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> createFromXmlInner
    4:4:int modulateColorAlpha(int,float):0:0 -> createFromXmlInner
    4:4:android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> createFromXmlInner
    4:4:android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> createFromXmlInner
    5:5:android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> createFromXmlInner
    5:5:android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> createFromXmlInner
    6:6:int[] androidx.core.content.res.GrowingArrayUtils.append(int[],int,int):0:0 -> createFromXmlInner
    6:6:android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> createFromXmlInner
    6:6:android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> createFromXmlInner
    7:7:java.lang.Object[] androidx.core.content.res.GrowingArrayUtils.append(java.lang.Object[],int,java.lang.Object):0:0 -> createFromXmlInner
    7:7:android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> createFromXmlInner
    7:7:android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> createFromXmlInner
    8:8:android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> createFromXmlInner
    8:8:android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> createFromXmlInner
    9:9:android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> createFromXmlInner
androidx.core.content.res.ComplexColorCompat -> androidx.core.content.res.ComplexColorCompat:
    android.content.res.ColorStateList mColorStateList -> b
    android.graphics.Shader mShader -> a
    int mColor -> c
    1:1:androidx.core.content.res.ComplexColorCompat from(android.content.res.ColorStateList):0:0 -> a
    1:1:androidx.core.content.res.ComplexColorCompat createFromXml(android.content.res.Resources,int,android.content.res.Resources$Theme):0 -> a
    2:2:androidx.core.content.res.ComplexColorCompat createFromXml(android.content.res.Resources,int,android.content.res.Resources$Theme):0:0 -> a
    3:3:android.graphics.Shader androidx.core.content.res.GradientColorInflaterCompat.createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    3:3:androidx.core.content.res.ComplexColorCompat createFromXml(android.content.res.Resources,int,android.content.res.Resources$Theme):0 -> a
    4:4:androidx.core.content.res.GradientColorInflaterCompat$ColorStops androidx.core.content.res.GradientColorInflaterCompat.inflateChildElements(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    4:4:android.graphics.Shader androidx.core.content.res.GradientColorInflaterCompat.createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    4:4:androidx.core.content.res.ComplexColorCompat createFromXml(android.content.res.Resources,int,android.content.res.Resources$Theme):0 -> a
    5:5:androidx.core.content.res.GradientColorInflaterCompat$ColorStops androidx.core.content.res.GradientColorInflaterCompat.checkColors(androidx.core.content.res.GradientColorInflaterCompat$ColorStops,int,int,boolean,int):0:0 -> a
    5:5:android.graphics.Shader androidx.core.content.res.GradientColorInflaterCompat.createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    5:5:androidx.core.content.res.ComplexColorCompat createFromXml(android.content.res.Resources,int,android.content.res.Resources$Theme):0 -> a
    6:6:android.graphics.Shader androidx.core.content.res.GradientColorInflaterCompat.createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    6:6:androidx.core.content.res.ComplexColorCompat createFromXml(android.content.res.Resources,int,android.content.res.Resources$Theme):0 -> a
    7:7:android.graphics.Shader$TileMode androidx.core.content.res.GradientColorInflaterCompat.parseTileMode(int):0:0 -> a
    7:7:android.graphics.Shader androidx.core.content.res.GradientColorInflaterCompat.createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    7:7:androidx.core.content.res.ComplexColorCompat createFromXml(android.content.res.Resources,int,android.content.res.Resources$Theme):0 -> a
    8:8:android.graphics.Shader androidx.core.content.res.GradientColorInflaterCompat.createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    8:8:androidx.core.content.res.ComplexColorCompat createFromXml(android.content.res.Resources,int,android.content.res.Resources$Theme):0 -> a
    9:9:android.graphics.Shader$TileMode androidx.core.content.res.GradientColorInflaterCompat.parseTileMode(int):0:0 -> a
    9:9:android.graphics.Shader androidx.core.content.res.GradientColorInflaterCompat.createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    9:9:androidx.core.content.res.ComplexColorCompat createFromXml(android.content.res.Resources,int,android.content.res.Resources$Theme):0 -> a
    10:10:android.graphics.Shader androidx.core.content.res.GradientColorInflaterCompat.createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    10:10:androidx.core.content.res.ComplexColorCompat createFromXml(android.content.res.Resources,int,android.content.res.Resources$Theme):0 -> a
    11:11:androidx.core.content.res.ComplexColorCompat from(android.graphics.Shader):0:0 -> a
    11:11:androidx.core.content.res.ComplexColorCompat createFromXml(android.content.res.Resources,int,android.content.res.Resources$Theme):0 -> a
    12:12:android.graphics.Shader androidx.core.content.res.GradientColorInflaterCompat.createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    12:12:androidx.core.content.res.ComplexColorCompat createFromXml(android.content.res.Resources,int,android.content.res.Resources$Theme):0 -> a
    13:13:androidx.core.content.res.ComplexColorCompat createFromXml(android.content.res.Resources,int,android.content.res.Resources$Theme):0:0 -> a
    androidx.core.content.res.ComplexColorCompat from(int) -> b
androidx.core.content.res.FontResourcesParserCompat -> androidx.core.content.res.FontResourcesParserCompat:
    void skip(org.xmlpull.v1.XmlPullParser) -> a
    java.util.List toByteArrayList(java.lang.String[]) -> b
    1:1:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry readFamilies(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0:0 -> parse
    1:1:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry parse(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0 -> parse
    2:2:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry readFamily(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0:0 -> parse
    2:2:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry readFamilies(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0 -> parse
    2:2:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry parse(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0 -> parse
    3:3:androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry readFont(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0:0 -> parse
    3:3:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry readFamily(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0 -> parse
    3:3:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry readFamilies(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0 -> parse
    3:3:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry parse(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0 -> parse
    4:4:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry readFamily(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0:0 -> parse
    4:4:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry readFamilies(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0 -> parse
    4:4:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry parse(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0 -> parse
    5:5:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry readFamilies(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0:0 -> parse
    5:5:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry parse(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0 -> parse
    6:6:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry parse(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0:0 -> parse
    1:1:int getType(android.content.res.TypedArray,int):0:0 -> readCerts
    1:1:java.util.List readCerts(android.content.res.Resources,int):0 -> readCerts
    2:2:java.util.List readCerts(android.content.res.Resources,int):0:0 -> readCerts
androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry -> androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry:
    androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry[] mEntries -> a
androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry -> androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry:
    int mResourceId -> f
    java.lang.String mFileName -> a
    int mTtcIndex -> e
    int mWeight -> b
    boolean mItalic -> c
    java.lang.String mVariationSettings -> d
androidx.core.content.res.FontResourcesParserCompat$ProviderResourceEntry -> androidx.core.content.res.FontResourcesParserCompat$ProviderResourceEntry:
    androidx.core.provider.FontRequest mRequest -> a
    int mTimeoutMs -> b
    int mStrategy -> c
androidx.core.content.res.GradientColorInflaterCompat$ColorStops -> androidx.core.content.res.a:
    int[] mColors -> a
    float[] mOffsets -> b
androidx.core.content.res.ResourcesCompat -> androidx.core.content.res.ResourcesCompat:
    1:1:android.graphics.Typeface loadFont(android.content.Context,android.content.res.Resources,android.util.TypedValue,int,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean):0:0 -> a
    1:1:android.graphics.Typeface loadFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean):0 -> a
    2:2:android.graphics.Typeface loadFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean):0:0 -> a
    3:3:android.graphics.Typeface loadFont(android.content.Context,android.content.res.Resources,android.util.TypedValue,int,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean):0:0 -> a
    3:3:android.graphics.Typeface loadFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean):0 -> a
androidx.core.content.res.ResourcesCompat$FontCallback$1 -> androidx.core.content.res.b:
    android.graphics.Typeface val$typeface -> a
    androidx.core.content.res.ResourcesCompat$FontCallback this$0 -> b
androidx.core.content.res.ResourcesCompat$FontCallback$2 -> androidx.core.content.res.c:
    androidx.core.content.res.ResourcesCompat$FontCallback this$0 -> b
    int val$reason -> a
androidx.core.graphics.ColorUtils -> androidx.core.graphics.ColorUtils:
    java.lang.ThreadLocal TEMP_ARRAY -> a
    1:1:double[] getTempDouble3Array():0:0 -> LABToColor
    1:1:int LABToColor(double,double,double):0 -> LABToColor
    2:2:int LABToColor(double,double,double):0:0 -> LABToColor
    int compositeComponent(int,int,int,int,int) -> a
    float constrain(float,float,float) -> b
    1:1:float circularInterpolate(float,float,float):0:0 -> blendHSL
    1:1:void blendHSL(float[],float[],float,float[]):0 -> blendHSL
    2:2:void blendHSL(float[],float[],float,float[]):0:0 -> blendHSL
    int constrain(int,int,int) -> c
    1:1:double[] getTempDouble3Array():0:0 -> calculateLuminance
    1:1:double calculateLuminance(int):0 -> calculateLuminance
    2:2:double calculateLuminance(int):0:0 -> calculateLuminance
    1:1:int compositeAlpha(int,int):0:0 -> compositeColors
    1:1:int compositeColors(int,int):0 -> compositeColors
    2:2:int compositeColors(int,int):0:0 -> compositeColors
    double pivotXyzComponent(double) -> d
androidx.core.graphics.PaintCompat -> androidx.core.graphics.PaintCompat:
    java.lang.ThreadLocal sRectThreadLocal -> a
androidx.core.graphics.PathParser -> androidx.core.graphics.PathParser:
    float[] copyOfRange(float[],int,int) -> a
    1:1:int nextStart(java.lang.String,int):0:0 -> createNodesFromPathData
    1:1:androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String):0 -> createNodesFromPathData
    2:2:androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String):0:0 -> createNodesFromPathData
    3:3:float[] getFloats(java.lang.String):0:0 -> createNodesFromPathData
    3:3:androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String):0 -> createNodesFromPathData
    4:4:void extract(java.lang.String,int,androidx.core.graphics.PathParser$ExtractFloatResult):0:0 -> createNodesFromPathData
    4:4:float[] getFloats(java.lang.String):0 -> createNodesFromPathData
    4:4:androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String):0 -> createNodesFromPathData
    5:5:float[] getFloats(java.lang.String):0:0 -> createNodesFromPathData
    5:5:androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String):0 -> createNodesFromPathData
    6:6:androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String):0:0 -> createNodesFromPathData
    7:7:void addNode(java.util.ArrayList,char,float[]):0:0 -> createNodesFromPathData
    7:7:androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String):0 -> createNodesFromPathData
    8:8:androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String):0:0 -> createNodesFromPathData
    9:9:void addNode(java.util.ArrayList,char,float[]):0:0 -> createNodesFromPathData
    9:9:androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String):0 -> createNodesFromPathData
    10:10:androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String):0:0 -> createNodesFromPathData
androidx.core.graphics.PathParser$PathDataNode -> androidx.core.graphics.PathParser$PathDataNode:
    1:1:void arcToBezier(android.graphics.Path,double,double,double,double,double,double,double,double,double):0:0 -> a
    1:1:void drawArc(android.graphics.Path,float,float,float,float,float,float,float,boolean,boolean):0 -> a
    1:1:void addCommand(android.graphics.Path,float[],char,char,float[]):0:0 -> nodesToPath
    1:1:void nodesToPath(androidx.core.graphics.PathParser$PathDataNode[],android.graphics.Path):0 -> nodesToPath
    2:2:void nodesToPath(androidx.core.graphics.PathParser$PathDataNode[],android.graphics.Path):0:0 -> nodesToPath
androidx.core.graphics.PathSegment -> androidx.core.graphics.PathSegment:
    android.graphics.PointF mStart -> a
    float mEndFraction -> d
    float mStartFraction -> b
    android.graphics.PointF mEnd -> c
androidx.core.graphics.TypefaceCompat -> androidx.core.graphics.TypefaceCompat:
    androidx.core.graphics.TypefaceCompatBaseImpl sTypefaceCompatImpl -> a
    androidx.collection.LruCache sTypefaceCache -> b
    java.lang.String createResourceUid(android.content.res.Resources,int,int) -> a
androidx.core.graphics.TypefaceCompatApi21Impl -> androidx.core.graphics.a:
androidx.core.graphics.TypefaceCompatApi26Impl -> androidx.core.graphics.TypefaceCompatApi26Impl:
    void abortCreation(java.lang.Object) -> b
    boolean addFontFromAssetManager(android.content.Context,java.lang.Object,java.lang.String,int,int,int,android.graphics.fonts.FontVariationAxis[]) -> c
    1:1:boolean addFontFromBuffer(java.lang.Object,java.nio.ByteBuffer,int,int,int):0:0 -> createFromFontInfo
    1:1:android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int):0 -> createFromFontInfo
    2:2:android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int):0:0 -> createFromFontInfo
    3:3:boolean addFontFromBuffer(java.lang.Object,java.nio.ByteBuffer,int,int,int):0:0 -> createFromFontInfo
    3:3:android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int):0 -> createFromFontInfo
    4:4:android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int):0:0 -> createFromFontInfo
    boolean freeze(java.lang.Object) -> d
    boolean isFontFamilyPrivateAPIAvailable() -> e
    java.lang.Object newFamily() -> f
androidx.core.graphics.TypefaceCompatBaseImpl -> androidx.core.graphics.e:
    java.lang.Object findBestFont(java.lang.Object[],int,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor) -> a
    1:1:androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry findBestEntry(androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,int):0:0 -> createFromFontFamilyFilesResourceEntry
    1:1:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0 -> createFromFontFamilyFilesResourceEntry
    2:2:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0:0 -> createFromFontFamilyFilesResourceEntry
androidx.core.graphics.TypefaceCompatBaseImpl$1 -> androidx.core.graphics.b:
    1:1:int getWeight(androidx.core.provider.FontsContractCompat$FontInfo):0:0 -> getWeight
    1:1:int getWeight(java.lang.Object):0 -> getWeight
    1:1:boolean isItalic(androidx.core.provider.FontsContractCompat$FontInfo):0:0 -> isItalic
    1:1:boolean isItalic(java.lang.Object):0 -> isItalic
androidx.core.graphics.TypefaceCompatBaseImpl$2 -> androidx.core.graphics.c:
    1:1:int getWeight(androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry):0:0 -> getWeight
    1:1:int getWeight(java.lang.Object):0 -> getWeight
    1:1:boolean isItalic(androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry):0:0 -> isItalic
    1:1:boolean isItalic(java.lang.Object):0 -> isItalic
androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor -> androidx.core.graphics.d:
androidx.core.graphics.TypefaceCompatUtil -> androidx.core.graphics.TypefaceCompatUtil:
    1:1:java.nio.ByteBuffer mmap(java.io.File):0:0 -> copyToDirectBuffer
    1:1:java.nio.ByteBuffer copyToDirectBuffer(android.content.Context,android.content.res.Resources,int):0 -> copyToDirectBuffer
    2:2:java.nio.ByteBuffer copyToDirectBuffer(android.content.Context,android.content.res.Resources,int):0:0 -> copyToDirectBuffer
androidx.core.graphics.drawable.IconCompat -> androidx.core.graphics.drawable.IconCompat:
    android.graphics.PorterDuff$Mode mTintMode -> b
    android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE -> c
    java.lang.Object mObj1 -> a
    android.graphics.Bitmap createLegacyIconFromAdaptiveIcon(android.graphics.Bitmap,boolean) -> a
    int getResId(android.graphics.drawable.Icon) -> b
    java.lang.String getResPackage(android.graphics.drawable.Icon) -> c
    android.content.res.Resources getResources(android.content.Context,java.lang.String) -> d
    int getType(android.graphics.drawable.Icon) -> e
    android.net.Uri getUri(android.graphics.drawable.Icon) -> f
androidx.core.graphics.drawable.RoundedBitmapDrawable -> androidx.core.graphics.drawable.RoundedBitmapDrawable:
    int mBitmapWidth -> l
    int mBitmapHeight -> m
    float mCornerRadius -> g
    boolean mApplyGravity -> j
    android.graphics.Matrix mShaderMatrix -> f
    boolean mIsCircular -> k
    android.graphics.Rect mDstRect -> h
    android.graphics.BitmapShader mBitmapShader -> e
    android.graphics.RectF mDstRectF -> i
    int mTargetDensity -> b
    int mGravity -> c
    android.graphics.Paint mPaint -> d
    android.graphics.Bitmap mBitmap -> a
    void computeBitmapSize() -> a
    void gravityCompatApply(int,int,int,android.graphics.Rect,android.graphics.Rect) -> b
    void updateDstRect() -> c
    1:1:void updateCircularCornerRadius():0:0 -> onBoundsChange
    1:1:void onBoundsChange(android.graphics.Rect):0 -> onBoundsChange
    2:2:void onBoundsChange(android.graphics.Rect):0:0 -> onBoundsChange
    1:1:void updateCircularCornerRadius():0:0 -> setCircular
    1:1:void setCircular(boolean):0 -> setCircular
    2:2:void setCircular(boolean):0:0 -> setCircular
androidx.core.graphics.drawable.RoundedBitmapDrawable21 -> androidx.core.graphics.drawable.a:
    void gravityCompatApply(int,int,int,android.graphics.Rect,android.graphics.Rect) -> b
androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState -> androidx.core.graphics.drawable.WrappedDrawableApi14$DrawableWrapperState:
    android.graphics.drawable.Drawable$ConstantState mDrawableState -> b
    int mChangingConfigurations -> a
androidx.core.hardware.display.DisplayManagerCompat -> androidx.core.hardware.display.DisplayManagerCompat:
    android.content.Context mContext -> a
    java.util.WeakHashMap sInstances -> b
androidx.core.hardware.fingerprint.FingerprintManagerCompat -> androidx.core.hardware.fingerprint.FingerprintManagerCompat:
    android.content.Context mContext -> a
    android.hardware.fingerprint.FingerprintManager getFingerprintManagerOrNull(android.content.Context) -> a
    1:1:android.hardware.fingerprint.FingerprintManager$CryptoObject wrapCryptoObject(androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject):0:0 -> authenticate
    1:1:void authenticate(androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject,int,androidx.core.os.CancellationSignal,androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback,android.os.Handler):0 -> authenticate
    2:2:android.hardware.fingerprint.FingerprintManager$AuthenticationCallback wrapCallback(androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback):0:0 -> authenticate
    2:2:void authenticate(androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject,int,androidx.core.os.CancellationSignal,androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback,android.os.Handler):0 -> authenticate
    3:3:void authenticate(androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject,int,androidx.core.os.CancellationSignal,androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback,android.os.Handler):0:0 -> authenticate
androidx.core.hardware.fingerprint.FingerprintManagerCompat$1 -> androidx.core.hardware.fingerprint.a:
    androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback val$callback -> a
    1:1:androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject androidx.core.hardware.fingerprint.FingerprintManagerCompat.unwrapCryptoObject(android.hardware.fingerprint.FingerprintManager$CryptoObject):0:0 -> onAuthenticationSucceeded
    1:1:void onAuthenticationSucceeded(android.hardware.fingerprint.FingerprintManager$AuthenticationResult):0 -> onAuthenticationSucceeded
    2:2:void onAuthenticationSucceeded(android.hardware.fingerprint.FingerprintManager$AuthenticationResult):0:0 -> onAuthenticationSucceeded
androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationResult -> androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationResult:
    androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject mCryptoObject -> a
androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject -> androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject:
    javax.crypto.Cipher mCipher -> b
    javax.crypto.Mac mMac -> c
    java.security.Signature mSignature -> a
androidx.core.os.CancellationSignal -> androidx.core.os.CancellationSignal:
    java.lang.Object mCancellationSignalObj -> c
    boolean mIsCanceled -> a
    androidx.core.os.CancellationSignal$OnCancelListener mOnCancelListener -> b
    boolean mCancelInProgress -> d
    1:1:void waitForCancelFinishedLocked():0:0 -> setOnCancelListener
    1:1:void setOnCancelListener(androidx.core.os.CancellationSignal$OnCancelListener):0 -> setOnCancelListener
    2:2:void setOnCancelListener(androidx.core.os.CancellationSignal$OnCancelListener):0:0 -> setOnCancelListener
androidx.core.os.LocaleListCompat -> androidx.core.os.LocaleListCompat:
    androidx.core.os.LocaleListCompat sEmptyLocaleList -> b
    androidx.core.os.LocaleListInterface IMPL -> a
    1:1:void setLocaleListArray(java.util.Locale[]):0:0 -> create
    1:1:androidx.core.os.LocaleListCompat create(java.util.Locale[]):0 -> create
    1:1:void setLocaleListArray(java.util.Locale[]):0:0 -> forLanguageTags
    1:1:androidx.core.os.LocaleListCompat forLanguageTags(java.lang.String):0 -> forLanguageTags
    2:2:androidx.core.os.LocaleListCompat forLanguageTags(java.lang.String):0:0 -> forLanguageTags
    1:1:void setLocaleList(android.os.LocaleList):0:0 -> wrap
    1:1:androidx.core.os.LocaleListCompat wrap(java.lang.Object):0 -> wrap
androidx.core.os.LocaleListCompat$LocaleListCompatApi24Impl -> androidx.core.os.a:
    android.os.LocaleList mLocaleList -> a
androidx.core.os.LocaleListInterface -> androidx.core.os.b:
androidx.core.os.ParcelableCompat$ParcelableCompatCreatorHoneycombMR2 -> androidx.core.os.c:
    androidx.core.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
androidx.core.provider.FontRequest -> androidx.core.provider.FontRequest:
    java.lang.String mIdentifier -> f
    java.util.List mCertificates -> d
    java.lang.String mProviderAuthority -> a
    int mCertificatesArray -> e
    java.lang.String mQuery -> c
    java.lang.String mProviderPackage -> b
androidx.core.provider.FontsContractCompat -> androidx.core.provider.FontsContractCompat:
    androidx.collection.SimpleArrayMap sPendingReplies -> d
    androidx.collection.LruCache sTypefaceCache -> a
    java.lang.Object sLock -> c
    java.util.Comparator sByteArrayComparator -> e
    androidx.core.provider.SelfDestructiveThread sBackgroundThread -> b
    androidx.core.provider.FontsContractCompat$TypefaceResult getFontInternal(android.content.Context,androidx.core.provider.FontRequest,int) -> a
    1:1:androidx.core.provider.FontsContractCompat$FontInfo[] getFontFromProvider(android.content.Context,androidx.core.provider.FontRequest,java.lang.String,android.os.CancellationSignal):0:0 -> fetchFonts
    1:1:androidx.core.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontRequest):0 -> fetchFonts
    2:2:androidx.core.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontRequest):0:0 -> fetchFonts
    3:3:androidx.core.provider.FontsContractCompat$FontInfo[] getFontFromProvider(android.content.Context,androidx.core.provider.FontRequest,java.lang.String,android.os.CancellationSignal):0:0 -> fetchFonts
    3:3:androidx.core.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontRequest):0 -> fetchFonts
    1:1:java.util.List convertToByteArrayList(android.content.pm.Signature[]):0:0 -> getProvider
    1:1:android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,androidx.core.provider.FontRequest,android.content.res.Resources):0 -> getProvider
    2:2:android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,androidx.core.provider.FontRequest,android.content.res.Resources):0:0 -> getProvider
    3:3:java.util.List getCertificates(androidx.core.provider.FontRequest,android.content.res.Resources):0:0 -> getProvider
    3:3:android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,androidx.core.provider.FontRequest,android.content.res.Resources):0 -> getProvider
    4:4:android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,androidx.core.provider.FontRequest,android.content.res.Resources):0:0 -> getProvider
    5:5:boolean equalsByteArrayList(java.util.List,java.util.List):0:0 -> getProvider
    5:5:android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,androidx.core.provider.FontRequest,android.content.res.Resources):0 -> getProvider
    6:6:android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,androidx.core.provider.FontRequest,android.content.res.Resources):0:0 -> getProvider
androidx.core.provider.FontsContractCompat$1 -> androidx.core.provider.a:
    android.content.Context val$context -> a
    androidx.core.provider.FontRequest val$request -> b
    int val$style -> c
    java.lang.String val$id -> d
    1:1:androidx.core.provider.FontsContractCompat$TypefaceResult call():0:0 -> call
    1:1:java.lang.Object call():0 -> call
androidx.core.provider.FontsContractCompat$2 -> androidx.core.provider.b:
    android.os.Handler val$handler -> b
    androidx.core.content.res.ResourcesCompat$FontCallback val$fontCallback -> a
    1:1:void onReply(androidx.core.provider.FontsContractCompat$TypefaceResult):0:0 -> onReply
    1:1:void onReply(java.lang.Object):0 -> onReply
androidx.core.provider.FontsContractCompat$3 -> androidx.core.provider.c:
    java.lang.String val$id -> a
androidx.core.provider.FontsContractCompat$4 -> androidx.core.provider.m:
    android.content.Context val$context -> a
    android.os.Handler val$callerThreadHandler -> c
    androidx.core.provider.FontsContractCompat$FontRequestCallback val$callback -> d
    androidx.core.provider.FontRequest val$request -> b
androidx.core.provider.FontsContractCompat$4$1 -> androidx.core.provider.d:
    androidx.core.provider.FontsContractCompat$4 this$0 -> a
androidx.core.provider.FontsContractCompat$4$2 -> androidx.core.provider.e:
    androidx.core.provider.FontsContractCompat$4 this$0 -> a
androidx.core.provider.FontsContractCompat$4$3 -> androidx.core.provider.f:
    androidx.core.provider.FontsContractCompat$4 this$0 -> a
androidx.core.provider.FontsContractCompat$4$4 -> androidx.core.provider.g:
    androidx.core.provider.FontsContractCompat$4 this$0 -> a
androidx.core.provider.FontsContractCompat$4$5 -> androidx.core.provider.h:
    androidx.core.provider.FontsContractCompat$4 this$0 -> a
androidx.core.provider.FontsContractCompat$4$6 -> androidx.core.provider.i:
    androidx.core.provider.FontsContractCompat$4 this$0 -> a
androidx.core.provider.FontsContractCompat$4$7 -> androidx.core.provider.j:
    androidx.core.provider.FontsContractCompat$4 this$0 -> b
    int val$resultCode -> a
androidx.core.provider.FontsContractCompat$4$8 -> androidx.core.provider.k:
    androidx.core.provider.FontsContractCompat$4 this$0 -> a
androidx.core.provider.FontsContractCompat$4$9 -> androidx.core.provider.l:
    android.graphics.Typeface val$typeface -> a
    androidx.core.provider.FontsContractCompat$4 this$0 -> b
androidx.core.provider.FontsContractCompat$5 -> androidx.core.provider.n:
    1:1:int compare(byte[],byte[]):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
androidx.core.provider.FontsContractCompat$FontFamilyResult -> androidx.core.provider.FontsContractCompat$FontFamilyResult:
    int mStatusCode -> a
    androidx.core.provider.FontsContractCompat$FontInfo[] mFonts -> b
androidx.core.provider.FontsContractCompat$FontInfo -> androidx.core.provider.FontsContractCompat$FontInfo:
    int mResultCode -> e
    int mTtcIndex -> b
    int mWeight -> c
    android.net.Uri mUri -> a
    boolean mItalic -> d
androidx.core.provider.FontsContractCompat$TypefaceResult -> androidx.core.provider.o:
    android.graphics.Typeface mTypeface -> a
    int mResult -> b
androidx.core.provider.SelfDestructiveThread -> androidx.core.provider.SelfDestructiveThread:
    java.lang.String mThreadName -> h
    android.os.Handler mHandler -> c
    android.os.Handler$Callback mCallback -> e
    int mDestructAfterMillisec -> f
    int mPriority -> g
    int mGeneration -> d
    java.lang.Object mLock -> a
    android.os.HandlerThread mThread -> b
    void onDestruction() -> a
    void onInvokeRunnable(java.lang.Runnable) -> b
    void post(java.lang.Runnable) -> c
androidx.core.provider.SelfDestructiveThread$1 -> androidx.core.provider.p:
    androidx.core.provider.SelfDestructiveThread this$0 -> a
androidx.core.provider.SelfDestructiveThread$2 -> androidx.core.provider.r:
    android.os.Handler val$callingHandler -> b
    java.util.concurrent.Callable val$callable -> a
    androidx.core.provider.SelfDestructiveThread$ReplyCallback val$reply -> c
androidx.core.provider.SelfDestructiveThread$2$1 -> androidx.core.provider.q:
    androidx.core.provider.SelfDestructiveThread$2 this$1 -> b
    java.lang.Object val$result -> a
androidx.core.provider.SelfDestructiveThread$3 -> androidx.core.provider.s:
    java.util.concurrent.atomic.AtomicBoolean val$running -> d
    java.util.concurrent.locks.Condition val$cond -> e
    java.util.concurrent.locks.ReentrantLock val$lock -> c
    java.util.concurrent.Callable val$callable -> b
    java.util.concurrent.atomic.AtomicReference val$holder -> a
androidx.core.text.BidiFormatter -> androidx.core.text.BidiFormatter:
    java.lang.String RLM_STRING -> f
    androidx.core.text.BidiFormatter DEFAULT_LTR_INSTANCE -> g
    androidx.core.text.TextDirectionHeuristicCompat DEFAULT_TEXT_DIRECTION_HEURISTIC -> d
    androidx.core.text.TextDirectionHeuristicCompat mDefaultTextDirectionHeuristicCompat -> c
    boolean mIsRtlContext -> a
    int mFlags -> b
    androidx.core.text.BidiFormatter DEFAULT_RTL_INSTANCE -> h
    java.lang.String LRM_STRING -> e
    1:1:java.lang.String markBefore(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat):0:0 -> unicodeWrap
    1:1:java.lang.CharSequence unicodeWrap(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat,boolean):0 -> unicodeWrap
    2:2:int getEntryDir(java.lang.CharSequence):0:0 -> unicodeWrap
    2:2:java.lang.String markBefore(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat):0 -> unicodeWrap
    2:2:java.lang.CharSequence unicodeWrap(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat,boolean):0 -> unicodeWrap
    3:3:java.lang.String markBefore(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat):0:0 -> unicodeWrap
    3:3:java.lang.CharSequence unicodeWrap(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat,boolean):0 -> unicodeWrap
    4:4:int getEntryDir(java.lang.CharSequence):0:0 -> unicodeWrap
    4:4:java.lang.String markBefore(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat):0 -> unicodeWrap
    4:4:java.lang.CharSequence unicodeWrap(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat,boolean):0 -> unicodeWrap
    5:5:java.lang.String markBefore(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat):0:0 -> unicodeWrap
    5:5:java.lang.CharSequence unicodeWrap(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat,boolean):0 -> unicodeWrap
    6:6:java.lang.CharSequence unicodeWrap(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat,boolean):0:0 -> unicodeWrap
    7:7:java.lang.String markAfter(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat):0:0 -> unicodeWrap
    7:7:java.lang.CharSequence unicodeWrap(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat,boolean):0 -> unicodeWrap
    8:8:int getExitDir(java.lang.CharSequence):0:0 -> unicodeWrap
    8:8:java.lang.String markAfter(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat):0 -> unicodeWrap
    8:8:java.lang.CharSequence unicodeWrap(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat,boolean):0 -> unicodeWrap
    9:9:java.lang.String markAfter(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat):0:0 -> unicodeWrap
    9:9:java.lang.CharSequence unicodeWrap(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat,boolean):0 -> unicodeWrap
    10:10:int getExitDir(java.lang.CharSequence):0:0 -> unicodeWrap
    10:10:java.lang.String markAfter(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat):0 -> unicodeWrap
    10:10:java.lang.CharSequence unicodeWrap(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat,boolean):0 -> unicodeWrap
    11:11:java.lang.String markAfter(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat):0:0 -> unicodeWrap
    11:11:java.lang.CharSequence unicodeWrap(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat,boolean):0 -> unicodeWrap
    12:12:java.lang.CharSequence unicodeWrap(java.lang.CharSequence,androidx.core.text.TextDirectionHeuristicCompat,boolean):0:0 -> unicodeWrap
androidx.core.text.BidiFormatter$Builder -> androidx.core.text.BidiFormatter$Builder:
    androidx.core.text.TextDirectionHeuristicCompat mTextDirectionHeuristicCompat -> c
    boolean mIsRtlContext -> a
    int mFlags -> b
    1:1:boolean androidx.core.text.BidiFormatter.isRtlLocale(java.util.Locale):0:0 -> <init>
    1:1:void <init>():0 -> <init>
    2:2:void <init>():0:0 -> <init>
    3:3:boolean androidx.core.text.BidiFormatter.isRtlLocale(java.util.Locale):0:0 -> <init>
    3:3:void <init>(java.util.Locale):0 -> <init>
    4:4:void <init>(java.util.Locale):0:0 -> <init>
    5:5:void initialize(boolean):0:0 -> <init>
    5:5:void <init>(boolean):0 -> <init>
    void initialize(boolean) -> a
    1:1:androidx.core.text.BidiFormatter getDefaultInstanceFromContext(boolean):0:0 -> build
    1:1:androidx.core.text.BidiFormatter build():0 -> build
    2:2:androidx.core.text.BidiFormatter build():0:0 -> build
androidx.core.text.BidiFormatter$DirectionalityEstimator -> androidx.core.text.a:
    java.lang.CharSequence text -> a
    int length -> b
    char lastChar -> d
    int charIndex -> c
    byte[] DIR_TYPE_CACHE -> e
    1:1:byte getCachedDirectionality(char):0:0 -> a
    1:1:byte dirTypeBackward():0 -> a
    1:1:byte dirTypeForward():0:0 -> b
    1:1:int getEntryDir():0 -> b
    2:2:byte getCachedDirectionality(char):0:0 -> b
    2:2:byte dirTypeForward():0 -> b
    2:2:int getEntryDir():0 -> b
    3:3:int getEntryDir():0:0 -> b
    int getExitDir() -> c
androidx.core.text.ICUCompat -> androidx.core.text.ICUCompat:
    java.lang.reflect.Method sAddLikelySubtagsMethod -> a
androidx.core.text.PrecomputedTextCompat -> androidx.core.text.PrecomputedTextCompat:
    android.text.Spannable mText -> a
    int[] mParagraphEnds -> c
    java.lang.Object sLock -> d
    java.util.concurrent.Executor sExecutor -> e
    androidx.core.text.PrecomputedTextCompat$Params mParams -> b
androidx.core.text.PrecomputedTextCompat$Params -> androidx.core.text.PrecomputedTextCompat$Params:
    android.text.TextPaint mPaint -> a
    int mHyphenationFrequency -> d
    android.text.TextDirectionHeuristic mTextDir -> b
    int mBreakStrategy -> c
androidx.core.text.PrecomputedTextCompat$Params$Builder -> androidx.core.text.PrecomputedTextCompat$Params$Builder:
    android.text.TextPaint mPaint -> a
    int mHyphenationFrequency -> d
    android.text.TextDirectionHeuristic mTextDir -> b
    int mBreakStrategy -> c
androidx.core.text.PrecomputedTextCompat$PrecomputedTextFutureTask -> androidx.core.text.c:
androidx.core.text.PrecomputedTextCompat$PrecomputedTextFutureTask$PrecomputedTextCallback -> androidx.core.text.b:
    java.lang.CharSequence mText -> b
    androidx.core.text.PrecomputedTextCompat$Params mParams -> a
    1:1:androidx.core.text.PrecomputedTextCompat call():0:0 -> call
    1:1:java.lang.Object call():0 -> call
androidx.core.text.TextDirectionHeuristicsCompat$AnyStrong -> androidx.core.text.d:
    androidx.core.text.TextDirectionHeuristicsCompat$AnyStrong INSTANCE_RTL -> a
    1:1:int androidx.core.text.TextDirectionHeuristicsCompat.isRtlText(int):0:0 -> checkRtl
    1:1:int checkRtl(java.lang.CharSequence,int,int):0 -> checkRtl
androidx.core.text.TextDirectionHeuristicsCompat$FirstStrong -> androidx.core.text.e:
    androidx.core.text.TextDirectionHeuristicsCompat$FirstStrong INSTANCE -> a
    1:1:int androidx.core.text.TextDirectionHeuristicsCompat.isRtlTextOrFormat(int):0:0 -> checkRtl
    1:1:int checkRtl(java.lang.CharSequence,int,int):0 -> checkRtl
androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm -> androidx.core.text.f:
androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl -> androidx.core.text.g:
    androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm mAlgorithm -> a
    1:1:boolean doCheck(java.lang.CharSequence,int,int):0:0 -> isRtl
    1:1:boolean isRtl(java.lang.CharSequence,int,int):0 -> isRtl
    2:2:boolean isRtl(java.lang.CharSequence,int,int):0:0 -> isRtl
androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicInternal -> androidx.core.text.h:
    boolean mDefaultIsRtl -> b
androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicLocale -> androidx.core.text.i:
    androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicLocale INSTANCE -> b
androidx.core.text.TextUtilsCompat -> androidx.core.text.TextUtilsCompat:
    java.util.Locale ROOT -> a
androidx.core.text.util.FindAddress -> androidx.core.text.util.b:
    java.util.regex.Pattern sZipCodeRe -> g
    java.util.regex.Pattern sSuffixedNumberRe -> f
    java.util.regex.Pattern sHouseNumberRe -> c
    java.util.regex.Pattern sWordRe -> b
    java.util.regex.Pattern sLocationNameRe -> e
    java.util.regex.Pattern sStateRe -> d
    androidx.core.text.util.FindAddress$ZipRange[] sStateZipCodeRanges -> a
    boolean checkHouseNumber(java.lang.String) -> a
    1:1:int attemptMatch(java.lang.String,java.util.regex.MatchResult):0:0 -> b
    1:1:java.lang.String findAddress(java.lang.String):0 -> b
    2:2:java.util.regex.MatchResult matchHouseNumber(java.lang.String,int):0:0 -> b
    2:2:int attemptMatch(java.lang.String,java.util.regex.MatchResult):0 -> b
    2:2:java.lang.String findAddress(java.lang.String):0 -> b
    3:3:int attemptMatch(java.lang.String,java.util.regex.MatchResult):0:0 -> b
    3:3:java.lang.String findAddress(java.lang.String):0 -> b
    4:4:boolean isValidLocationName(java.lang.String):0:0 -> b
    4:4:int attemptMatch(java.lang.String,java.util.regex.MatchResult):0 -> b
    4:4:java.lang.String findAddress(java.lang.String):0 -> b
    5:5:int attemptMatch(java.lang.String,java.util.regex.MatchResult):0:0 -> b
    5:5:java.lang.String findAddress(java.lang.String):0 -> b
    6:6:java.util.regex.MatchResult matchState(java.lang.String,int):0:0 -> b
    6:6:int attemptMatch(java.lang.String,java.util.regex.MatchResult):0 -> b
    6:6:java.lang.String findAddress(java.lang.String):0 -> b
    7:7:int attemptMatch(java.lang.String,java.util.regex.MatchResult):0:0 -> b
    7:7:java.lang.String findAddress(java.lang.String):0 -> b
    8:8:boolean isValidZipCode(java.lang.String,java.util.regex.MatchResult):0:0 -> b
    8:8:int attemptMatch(java.lang.String,java.util.regex.MatchResult):0 -> b
    8:8:java.lang.String findAddress(java.lang.String):0 -> b
    9:9:boolean androidx.core.text.util.FindAddress$ZipRange.matches(java.lang.String):0:0 -> b
    9:9:boolean isValidZipCode(java.lang.String,java.util.regex.MatchResult):0 -> b
    9:9:int attemptMatch(java.lang.String,java.util.regex.MatchResult):0 -> b
    9:9:java.lang.String findAddress(java.lang.String):0 -> b
    10:10:int attemptMatch(java.lang.String,java.util.regex.MatchResult):0:0 -> b
    10:10:java.lang.String findAddress(java.lang.String):0 -> b
    11:11:java.lang.String findAddress(java.lang.String):0:0 -> b
androidx.core.text.util.FindAddress$ZipRange -> androidx.core.text.util.a:
    int mException2 -> d
    int mHigh -> b
    int mException1 -> c
    int mLow -> a
androidx.core.text.util.LinkifyCompat -> androidx.core.text.util.LinkifyCompat:
    java.lang.String[] EMPTY_STRING -> a
    java.util.Comparator COMPARATOR -> b
    void addLinkMovementMethod(android.widget.TextView) -> a
    1:1:void gatherMapLinks(java.util.ArrayList,android.text.Spannable):0:0 -> addLinks
    1:1:boolean addLinks(android.text.Spannable,int):0 -> addLinks
    2:2:java.lang.String findAddress(java.lang.String):0:0 -> addLinks
    2:2:void gatherMapLinks(java.util.ArrayList,android.text.Spannable):0 -> addLinks
    2:2:boolean addLinks(android.text.Spannable,int):0 -> addLinks
    3:3:void gatherMapLinks(java.util.ArrayList,android.text.Spannable):0:0 -> addLinks
    3:3:boolean addLinks(android.text.Spannable,int):0 -> addLinks
    4:4:void pruneOverlaps(java.util.ArrayList,android.text.Spannable):0:0 -> addLinks
    4:4:boolean addLinks(android.text.Spannable,int):0 -> addLinks
    5:5:boolean addLinks(android.text.Spannable,int):0:0 -> addLinks
    6:6:void applyLink(java.lang.String,int,int,android.text.Spannable):0:0 -> addLinks
    6:6:boolean addLinks(android.text.Spannable,int):0 -> addLinks
    7:7:void applyLink(java.lang.String,int,int,android.text.Spannable):0:0 -> addLinks
    7:7:boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter):0 -> addLinks
    void gatherLinks(java.util.ArrayList,android.text.Spannable,java.util.regex.Pattern,java.lang.String[],android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter) -> b
    java.lang.String makeUrl(java.lang.String,java.lang.String[],java.util.regex.Matcher,android.text.util.Linkify$TransformFilter) -> c
    boolean shouldAddLinksFallbackToFramework() -> d
androidx.core.text.util.LinkifyCompat$1 -> androidx.core.text.util.c:
    1:1:int compare(androidx.core.text.util.LinkifyCompat$LinkSpec,androidx.core.text.util.LinkifyCompat$LinkSpec):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
androidx.core.text.util.LinkifyCompat$LinkSpec -> androidx.core.text.util.d:
    android.text.style.URLSpan frameworkAddedSpan -> a
    int end -> d
    java.lang.String url -> b
    int start -> c
androidx.core.util.AtomicFile -> androidx.core.util.AtomicFile:
    java.io.File mBackupName -> b
    java.io.File mBaseName -> a
    1:1:boolean sync(java.io.FileOutputStream):0:0 -> failWrite
    1:1:void failWrite(java.io.FileOutputStream):0 -> failWrite
    2:2:void failWrite(java.io.FileOutputStream):0:0 -> failWrite
    1:1:boolean sync(java.io.FileOutputStream):0:0 -> finishWrite
    1:1:void finishWrite(java.io.FileOutputStream):0 -> finishWrite
    2:2:void finishWrite(java.io.FileOutputStream):0:0 -> finishWrite
androidx.core.util.LogWriter -> androidx.core.util.LogWriter:
    java.lang.StringBuilder mBuilder -> b
    java.lang.String mTag -> a
    void flushBuilder() -> a
androidx.core.util.PatternsCompat -> androidx.core.util.PatternsCompat:
    java.util.regex.Pattern STRICT_DOMAIN_NAME -> a
    java.lang.String WEB_URL_WITHOUT_PROTOCOL -> c
    java.lang.String RELAXED_DOMAIN_NAME -> b
    java.lang.String WEB_URL_WITH_PROTOCOL -> d
androidx.core.util.Pools$SimplePool -> androidx.core.util.Pools$SimplePool:
    java.lang.Object[] mPool -> a
    int mPoolSize -> b
    1:1:boolean isInPool(java.lang.Object):0:0 -> release
    1:1:boolean release(java.lang.Object):0 -> release
    2:2:boolean release(java.lang.Object):0:0 -> release
androidx.core.util.Pools$SynchronizedPool -> androidx.core.util.Pools$SynchronizedPool:
    java.lang.Object mLock -> c
androidx.core.util.TimeUtils -> androidx.core.util.TimeUtils:
    char[] sFormatStr -> b
    java.lang.Object sFormatSync -> a
    int accumField(int,int,boolean,int) -> a
    int formatDurationLocked(long,int) -> b
    int printField(char[],int,char,int,boolean,int) -> c
androidx.core.view.AccessibilityDelegateCompat -> androidx.core.view.AccessibilityDelegateCompat:
    android.view.View$AccessibilityDelegate mBridge -> a
    android.view.View$AccessibilityDelegate DEFAULT_DELEGATE -> b
    android.view.View$AccessibilityDelegate getBridge() -> a
androidx.core.view.AccessibilityDelegateCompat$AccessibilityDelegateAdapter -> androidx.core.view.a:
    androidx.core.view.AccessibilityDelegateCompat mCompat -> a
androidx.core.view.ActionProvider -> androidx.core.view.ActionProvider:
    android.content.Context mContext -> a
    androidx.core.view.ActionProvider$SubUiVisibilityListener mSubUiVisibilityListener -> b
    androidx.core.view.ActionProvider$VisibilityListener mVisibilityListener -> c
androidx.core.view.DisplayCutoutCompat -> androidx.core.view.DisplayCutoutCompat:
    java.lang.Object mDisplayCutout -> a
    1:1:void <init>(java.lang.Object):0:0 -> <init>
    1:1:void <init>(android.graphics.Rect,java.util.List):0 -> <init>
    androidx.core.view.DisplayCutoutCompat wrap(java.lang.Object) -> a
androidx.core.view.DragAndDropPermissionsCompat -> androidx.core.view.DragAndDropPermissionsCompat:
    java.lang.Object mDragAndDropPermissions -> a
androidx.core.view.DragStartHelper -> androidx.core.view.DragStartHelper:
    android.view.View mView -> a
    boolean mDragging -> e
    int mLastTouchY -> d
    android.view.View$OnLongClickListener mLongClickListener -> f
    android.view.View$OnTouchListener mTouchListener -> g
    int mLastTouchX -> c
    androidx.core.view.DragStartHelper$OnDragStartListener mListener -> b
androidx.core.view.DragStartHelper$1 -> androidx.core.view.b:
    androidx.core.view.DragStartHelper this$0 -> a
androidx.core.view.DragStartHelper$2 -> androidx.core.view.c:
    androidx.core.view.DragStartHelper this$0 -> a
androidx.core.view.GestureDetectorCompat -> androidx.core.view.GestureDetectorCompat:
    androidx.core.view.GestureDetectorCompat$GestureDetectorCompatImpl mImpl -> a
androidx.core.view.GestureDetectorCompat$GestureDetectorCompatImpl -> androidx.core.view.d:
androidx.core.view.GestureDetectorCompat$GestureDetectorCompatImplJellybeanMr2 -> androidx.core.view.e:
    android.view.GestureDetector mDetector -> a
androidx.core.view.KeyEventDispatcher -> androidx.core.view.KeyEventDispatcher:
    java.lang.reflect.Field sDialogKeyListenerField -> d
    boolean sActionBarFieldsFetched -> a
    boolean sDialogFieldsFetched -> c
    java.lang.reflect.Method sActionBarOnMenuKeyMethod -> b
    1:1:boolean androidx.core.view.ViewCompat.dispatchUnhandledKeyEventBeforeHierarchy(android.view.View,android.view.KeyEvent):0:0 -> dispatchBeforeHierarchy
    1:1:boolean dispatchBeforeHierarchy(android.view.View,android.view.KeyEvent):0 -> dispatchBeforeHierarchy
    2:2:androidx.core.view.ViewCompat$UnhandledKeyEventManager androidx.core.view.ViewCompat$UnhandledKeyEventManager.at(android.view.View):0:0 -> dispatchBeforeHierarchy
    2:2:boolean androidx.core.view.ViewCompat.dispatchUnhandledKeyEventBeforeHierarchy(android.view.View,android.view.KeyEvent):0 -> dispatchBeforeHierarchy
    2:2:boolean dispatchBeforeHierarchy(android.view.View,android.view.KeyEvent):0 -> dispatchBeforeHierarchy
    3:3:boolean androidx.core.view.ViewCompat.dispatchUnhandledKeyEventBeforeHierarchy(android.view.View,android.view.KeyEvent):0:0 -> dispatchBeforeHierarchy
    3:3:boolean dispatchBeforeHierarchy(android.view.View,android.view.KeyEvent):0 -> dispatchBeforeHierarchy
    1:1:boolean activitySuperDispatchKeyEventPre28(android.app.Activity,android.view.KeyEvent):0:0 -> dispatchKeyEvent
    1:1:boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent):0 -> dispatchKeyEvent
    2:2:boolean actionBarOnMenuKeyEventPre28(android.app.ActionBar,android.view.KeyEvent):0:0 -> dispatchKeyEvent
    2:2:boolean activitySuperDispatchKeyEventPre28(android.app.Activity,android.view.KeyEvent):0 -> dispatchKeyEvent
    2:2:boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent):0 -> dispatchKeyEvent
    3:3:boolean activitySuperDispatchKeyEventPre28(android.app.Activity,android.view.KeyEvent):0:0 -> dispatchKeyEvent
    3:3:boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent):0 -> dispatchKeyEvent
    4:4:boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent):0:0 -> dispatchKeyEvent
    5:5:android.content.DialogInterface$OnKeyListener getDialogKeyListenerPre28(android.app.Dialog):0:0 -> dispatchKeyEvent
    5:5:boolean dialogSuperDispatchKeyEventPre28(android.app.Dialog,android.view.KeyEvent):0 -> dispatchKeyEvent
    5:5:boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent):0 -> dispatchKeyEvent
    6:6:boolean dialogSuperDispatchKeyEventPre28(android.app.Dialog,android.view.KeyEvent):0:0 -> dispatchKeyEvent
    6:6:boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent):0 -> dispatchKeyEvent
    7:7:boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent):0:0 -> dispatchKeyEvent
androidx.core.view.LayoutInflaterCompat$Factory2Wrapper -> androidx.core.view.f:
    androidx.core.view.LayoutInflaterFactory mDelegateFactory -> a
androidx.core.view.MenuItemCompat$1 -> androidx.core.view.g:
    androidx.core.view.MenuItemCompat$OnActionExpandListener val$listener -> a
androidx.core.view.NestedScrollingChildHelper -> androidx.core.view.NestedScrollingChildHelper:
    android.view.ViewParent mNestedScrollingParentTouch -> a
    int[] mTempNestedScrollConsumed -> e
    android.view.View mView -> c
    android.view.ViewParent mNestedScrollingParentNonTouch -> b
    boolean mIsNestedScrollingEnabled -> d
    android.view.ViewParent getNestedScrollingParentForType(int) -> a
    1:1:void setNestedScrollingParentForType(int,android.view.ViewParent):0:0 -> startNestedScroll
    1:1:boolean startNestedScroll(int,int):0 -> startNestedScroll
    2:2:boolean startNestedScroll(int,int):0:0 -> startNestedScroll
    1:1:void setNestedScrollingParentForType(int,android.view.ViewParent):0:0 -> stopNestedScroll
    1:1:void stopNestedScroll(int):0 -> stopNestedScroll
androidx.core.view.NestedScrollingParentHelper -> androidx.core.view.NestedScrollingParentHelper:
    int mNestedScrollAxes -> a
androidx.core.view.PointerIconCompat -> androidx.core.view.PointerIconCompat:
    java.lang.Object mPointerIcon -> a
androidx.core.view.ViewCompat -> androidx.core.view.ViewCompat:
    java.util.concurrent.atomic.AtomicInteger sNextGeneratedId -> a
    java.lang.reflect.Method sChildrenDrawingOrderMethod -> c
    java.lang.reflect.Field sAccessibilityDelegateField -> d
    boolean sAccessibilityDelegateCheckFailed -> e
    java.util.WeakHashMap sViewPropertyAnimatorMap -> b
    1:1:androidx.core.view.ViewCompat$UnhandledKeyEventManager androidx.core.view.ViewCompat$UnhandledKeyEventManager.at(android.view.View):0:0 -> a
    1:1:boolean dispatchUnhandledKeyEventBeforeCallback(android.view.View,android.view.KeyEvent):0 -> a
    2:2:boolean dispatchUnhandledKeyEventBeforeCallback(android.view.View,android.view.KeyEvent):0:0 -> a
androidx.core.view.ViewCompat$1 -> androidx.core.view.h:
    androidx.core.view.OnApplyWindowInsetsListener val$listener -> a
androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerWrapper -> androidx.core.view.i:
    androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat mCompatListener -> a
androidx.core.view.ViewCompat$UnhandledKeyEventManager -> androidx.core.view.j:
    android.util.SparseArray mCapturedKeys -> b
    java.lang.ref.WeakReference mLastDispatchedPreViewKeyEvent -> c
    java.util.ArrayList sViewsWithListeners -> d
    int $r8$clinit -> e
    java.util.WeakHashMap mViewsContainingListeners -> a
    1:1:void recalcViewsWithUnhandled():0:0 -> a
    1:1:boolean dispatch(android.view.View,android.view.KeyEvent):0 -> a
    2:2:boolean dispatch(android.view.View,android.view.KeyEvent):0:0 -> a
    3:3:android.util.SparseArray getCapturedKeys():0:0 -> a
    3:3:boolean dispatch(android.view.View,android.view.KeyEvent):0 -> a
    4:4:boolean dispatch(android.view.View,android.view.KeyEvent):0:0 -> a
    android.view.View dispatchInOrder(android.view.View,android.view.KeyEvent) -> b
    boolean onUnhandledKeyEvent(android.view.View,android.view.KeyEvent) -> c
    1:1:android.util.SparseArray getCapturedKeys():0:0 -> d
    1:1:boolean preDispatch(android.view.KeyEvent):0 -> d
    2:2:boolean preDispatch(android.view.KeyEvent):0:0 -> d
    void registerListeningView(android.view.View) -> e
    void unregisterListeningView(android.view.View) -> f
androidx.core.view.ViewPropertyAnimatorCompat -> androidx.core.view.ViewPropertyAnimatorCompat:
    java.lang.ref.WeakReference mView -> a
    int mOldLayerType -> b
    void setListenerInternal(android.view.View,androidx.core.view.ViewPropertyAnimatorListener) -> a
androidx.core.view.ViewPropertyAnimatorCompat$1 -> androidx.core.view.k:
    androidx.core.view.ViewPropertyAnimatorListener val$listener -> a
    android.view.View val$view -> b
androidx.core.view.ViewPropertyAnimatorCompat$2 -> androidx.core.view.l:
    androidx.core.view.ViewPropertyAnimatorUpdateListener val$listener -> a
    android.view.View val$view -> b
androidx.core.view.WindowInsetsCompat -> androidx.core.view.WindowInsetsCompat:
    java.lang.Object mInsets -> a
    java.lang.Object unwrap(androidx.core.view.WindowInsetsCompat) -> a
    androidx.core.view.WindowInsetsCompat wrap(java.lang.Object) -> b
androidx.core.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerWrapper -> androidx.core.view.accessibility.a:
    androidx.core.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener mListener -> a
androidx.core.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListenerWrapper -> androidx.core.view.accessibility.b:
    androidx.core.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener mListener -> a
androidx.core.view.accessibility.AccessibilityNodeInfoCompat -> androidx.core.view.accessibility.AccessibilityNodeInfoCompat:
    android.view.accessibility.AccessibilityNodeInfo mInfo -> a
    boolean getBooleanProperty(int) -> a
    void setBooleanProperty(int,boolean) -> b
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat wrapNonNullInstance(java.lang.Object) -> c
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat -> androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat:
    java.lang.Object mAction -> a
    1:1:void <init>(java.lang.Object):0:0 -> <init>
    1:1:void <init>(int,java.lang.CharSequence):0 -> <init>
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat -> androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat:
    java.lang.Object mInfo -> a
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat -> androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat:
    java.lang.Object mInfo -> a
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$RangeInfoCompat -> androidx.core.view.accessibility.AccessibilityNodeInfoCompat$RangeInfoCompat:
    java.lang.Object mInfo -> a
androidx.core.view.accessibility.AccessibilityNodeProviderCompat -> androidx.core.view.accessibility.AccessibilityNodeProviderCompat:
    java.lang.Object mProvider -> a
androidx.core.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderApi16 -> androidx.core.view.accessibility.c:
    androidx.core.view.accessibility.AccessibilityNodeProviderCompat mCompat -> a
androidx.core.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderApi19 -> androidx.core.view.accessibility.d:
androidx.core.view.accessibility.AccessibilityRecordCompat -> androidx.core.view.accessibility.AccessibilityRecordCompat:
    android.view.accessibility.AccessibilityRecord mRecord -> a
androidx.core.view.accessibility.AccessibilityWindowInfoCompat -> androidx.core.view.accessibility.AccessibilityWindowInfoCompat:
    java.lang.Object mInfo -> a
    androidx.core.view.accessibility.AccessibilityWindowInfoCompat wrapNonNullInstance(java.lang.Object) -> a
androidx.core.view.inputmethod.EditorInfoCompat -> androidx.core.view.inputmethod.EditorInfoCompat:
    java.lang.String[] EMPTY_STRING_ARRAY -> a
androidx.core.view.inputmethod.InputConnectionCompat$1 -> androidx.core.view.inputmethod.a:
    androidx.core.view.inputmethod.InputConnectionCompat$OnCommitContentListener val$listener -> a
androidx.core.view.inputmethod.InputContentInfoCompat -> androidx.core.view.inputmethod.InputContentInfoCompat:
    androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatImpl mImpl -> a
    1:1:android.net.Uri androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatApi25Impl.getContentUri():0:0 -> getContentUri
    1:1:android.net.Uri getContentUri():0 -> getContentUri
    1:1:android.content.ClipDescription androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatApi25Impl.getDescription():0:0 -> getDescription
    1:1:android.content.ClipDescription getDescription():0 -> getDescription
    1:1:android.net.Uri androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatApi25Impl.getLinkUri():0:0 -> getLinkUri
    1:1:android.net.Uri getLinkUri():0 -> getLinkUri
androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatApi25Impl -> androidx.core.view.inputmethod.b:
    android.view.inputmethod.InputContentInfo mObject -> a
androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatImpl -> androidx.core.view.inputmethod.c:
androidx.core.widget.AutoScrollHelper -> androidx.core.widget.AutoScrollHelper:
    boolean mNeedsReset -> m
    boolean mNeedsCancel -> n
    float[] mMaximumVelocity -> k
    boolean mAnimating -> o
    boolean mEnabled -> p
    float[] mRelativeVelocity -> i
    float[] mMinimumVelocity -> j
    int mActivationDelay -> h
    android.view.animation.Interpolator mEdgeInterpolator -> b
    boolean mAlreadyDelayed -> l
    float[] mRelativeEdges -> e
    float[] mMaximumEdges -> f
    int mEdgeType -> g
    boolean mExclusive -> q
    java.lang.Runnable mRunnable -> d
    android.view.View mTarget -> c
    int DEFAULT_ACTIVATION_DELAY -> r
    androidx.core.widget.AutoScrollHelper$ClampedScroller mScroller -> a
    1:1:float getEdgeValue(float,float,float,float):0:0 -> a
    1:1:float computeTargetVelocity(int,float,float,float):0 -> a
    2:2:float computeTargetVelocity(int,float,float,float):0:0 -> a
    float constrain(float,float,float) -> b
    float constrainEdgeValue(float,float) -> c
    boolean shouldAnimate() -> d
    1:1:void requestStop():0:0 -> onTouch
    1:1:boolean onTouch(android.view.View,android.view.MotionEvent):0 -> onTouch
    2:2:boolean onTouch(android.view.View,android.view.MotionEvent):0:0 -> onTouch
    3:3:void startAnimating():0:0 -> onTouch
    3:3:boolean onTouch(android.view.View,android.view.MotionEvent):0 -> onTouch
    4:4:boolean onTouch(android.view.View,android.view.MotionEvent):0:0 -> onTouch
    1:1:void requestStop():0:0 -> setEnabled
    1:1:androidx.core.widget.AutoScrollHelper setEnabled(boolean):0 -> setEnabled
    2:2:androidx.core.widget.AutoScrollHelper setEnabled(boolean):0:0 -> setEnabled
androidx.core.widget.AutoScrollHelper$ClampedScroller -> androidx.core.widget.a:
    long mStopTime -> i
    float mStopValue -> j
    long mDeltaTime -> f
    long mStartTime -> e
    int mEffectiveRampDown -> k
    int mDeltaY -> h
    float mTargetVelocityY -> d
    float mTargetVelocityX -> c
    int mDeltaX -> g
    int mRampDownDuration -> b
    int mRampUpDuration -> a
    float getValueAt(long) -> a
    1:1:int androidx.core.widget.AutoScrollHelper.constrain(int,int,int):0:0 -> requestStop
    1:1:void requestStop():0 -> requestStop
    2:2:void requestStop():0:0 -> requestStop
androidx.core.widget.AutoScrollHelper$ScrollAnimationRunnable -> androidx.core.widget.b:
    androidx.core.widget.AutoScrollHelper this$0 -> a
    1:1:void androidx.core.widget.AutoScrollHelper.cancelTargetTouch():0:0 -> run
    1:1:void run():0 -> run
    2:2:void run():0:0 -> run
androidx.core.widget.ContentLoadingProgressBar -> androidx.core.widget.ContentLoadingProgressBar:
    java.lang.Runnable mDelayedHide -> e
    java.lang.Runnable mDelayedShow -> f
    long mStartTime -> a
    boolean mPostedHide -> b
    boolean mPostedShow -> c
    boolean mDismissed -> d
    1:1:void removeCallbacks():0:0 -> onAttachedToWindow
    1:1:void onAttachedToWindow():0 -> onAttachedToWindow
    1:1:void removeCallbacks():0:0 -> onDetachedFromWindow
    1:1:void onDetachedFromWindow():0 -> onDetachedFromWindow
androidx.core.widget.ContentLoadingProgressBar$1 -> androidx.core.widget.c:
    androidx.core.widget.ContentLoadingProgressBar this$0 -> a
androidx.core.widget.ContentLoadingProgressBar$2 -> androidx.core.widget.d:
    androidx.core.widget.ContentLoadingProgressBar this$0 -> a
androidx.core.widget.EdgeEffectCompat -> androidx.core.widget.EdgeEffectCompat:
    android.widget.EdgeEffect mEdgeEffect -> a
androidx.core.widget.ListViewAutoScrollHelper -> androidx.core.widget.ListViewAutoScrollHelper:
    android.widget.ListView mTarget -> s
androidx.core.widget.NestedScrollView -> androidx.core.widget.NestedScrollView:
    boolean mSmoothScrollingEnabled -> m
    int mTouchSlop -> n
    androidx.core.widget.NestedScrollView$OnScrollChangeListener mOnScrollChangeListener -> z
    int[] mScrollConsumed -> s
    android.view.VelocityTracker mVelocityTracker -> k
    int mLastMotionY -> f
    androidx.core.widget.NestedScrollView$SavedState mSavedState -> v
    long mLastScroll -> a
    android.view.View mChildToScrollTo -> i
    float mVerticalScrollFactor -> y
    android.widget.EdgeEffect mEdgeGlowBottom -> e
    androidx.core.view.NestedScrollingParentHelper mParentHelper -> w
    boolean mIsLaidOut -> h
    int mLastScrollerY -> u
    androidx.core.view.NestedScrollingChildHelper mChildHelper -> x
    int mActivePointerId -> q
    int mMinimumVelocity -> o
    int[] mScrollOffset -> r
    boolean mIsBeingDragged -> j
    boolean mFillViewport -> l
    androidx.core.widget.NestedScrollView$AccessibilityDelegate ACCESSIBILITY_DELEGATE -> A
    android.graphics.Rect mTempRect -> b
    android.widget.OverScroller mScroller -> c
    int[] SCROLLVIEW_STYLEABLE -> B
    android.widget.EdgeEffect mEdgeGlowTop -> d
    boolean mIsLayoutDirty -> g
    int mNestedYOffset -> t
    int mMaximumVelocity -> p
    1:1:void initScrollView():0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    2:2:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    int clamp(int,int,int) -> a
    1:1:boolean isOffScreen(android.view.View):0:0 -> arrowScroll
    1:1:boolean arrowScroll(int):0 -> arrowScroll
    2:2:boolean arrowScroll(int):0:0 -> arrowScroll
    void doScrollY(int) -> b
    void ensureGlows() -> c
    void flingWithNestedDispatch(int) -> d
    int getScrollRange() -> e
    1:1:boolean canScroll():0:0 -> executeKeyEvent
    1:1:boolean executeKeyEvent(android.view.KeyEvent):0 -> executeKeyEvent
    2:2:boolean executeKeyEvent(android.view.KeyEvent):0:0 -> executeKeyEvent
    boolean isViewDescendantOf(android.view.View,android.view.View) -> f
    boolean isWithinDeltaOfScreen(android.view.View,int,int) -> g
    void onSecondaryPointerUp(android.view.MotionEvent) -> h
    boolean overScrollByCompat(int,int,int,int,int,int,int,int,boolean) -> i
    void recycleVelocityTracker() -> j
    1:1:android.view.View findFocusableViewInBounds(boolean,int,int):0:0 -> k
    1:1:boolean scrollAndFocus(int,int,int):0 -> k
    2:2:boolean scrollAndFocus(int,int,int):0:0 -> k
    void scrollToChild(android.view.View) -> l
    1:1:float getVerticalScrollFactorCompat():0:0 -> onGenericMotionEvent
    1:1:boolean onGenericMotionEvent(android.view.MotionEvent):0 -> onGenericMotionEvent
    2:2:boolean onGenericMotionEvent(android.view.MotionEvent):0:0 -> onGenericMotionEvent
    1:1:void initVelocityTrackerIfNotExists():0:0 -> onInterceptTouchEvent
    1:1:boolean onInterceptTouchEvent(android.view.MotionEvent):0 -> onInterceptTouchEvent
    2:2:boolean onInterceptTouchEvent(android.view.MotionEvent):0:0 -> onInterceptTouchEvent
    3:3:boolean inChild(int,int):0:0 -> onInterceptTouchEvent
    3:3:boolean onInterceptTouchEvent(android.view.MotionEvent):0 -> onInterceptTouchEvent
    4:4:boolean onInterceptTouchEvent(android.view.MotionEvent):0:0 -> onInterceptTouchEvent
    5:5:void initOrResetVelocityTracker():0:0 -> onInterceptTouchEvent
    5:5:boolean onInterceptTouchEvent(android.view.MotionEvent):0 -> onInterceptTouchEvent
    6:6:boolean onInterceptTouchEvent(android.view.MotionEvent):0:0 -> onInterceptTouchEvent
    1:1:boolean isOffScreen(android.view.View):0:0 -> onRequestFocusInDescendants
    1:1:boolean onRequestFocusInDescendants(int,android.graphics.Rect):0 -> onRequestFocusInDescendants
    2:2:boolean onRequestFocusInDescendants(int,android.graphics.Rect):0:0 -> onRequestFocusInDescendants
    1:1:void initVelocityTrackerIfNotExists():0:0 -> onTouchEvent
    1:1:boolean onTouchEvent(android.view.MotionEvent):0 -> onTouchEvent
    2:2:boolean onTouchEvent(android.view.MotionEvent):0:0 -> onTouchEvent
    3:3:void endDrag():0:0 -> onTouchEvent
    3:3:boolean onTouchEvent(android.view.MotionEvent):0 -> onTouchEvent
    4:4:boolean onTouchEvent(android.view.MotionEvent):0:0 -> onTouchEvent
    5:5:void endDrag():0:0 -> onTouchEvent
    5:5:boolean onTouchEvent(android.view.MotionEvent):0 -> onTouchEvent
    6:6:boolean onTouchEvent(android.view.MotionEvent):0:0 -> onTouchEvent
    1:1:boolean scrollToChildRect(android.graphics.Rect,boolean):0:0 -> requestChildRectangleOnScreen
    1:1:boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean):0 -> requestChildRectangleOnScreen
androidx.core.widget.NestedScrollView$AccessibilityDelegate -> androidx.core.widget.e:
androidx.core.widget.NestedScrollView$SavedState -> androidx.core.widget.NestedScrollView$SavedState:
    int scrollPosition -> a
androidx.core.widget.NestedScrollView$SavedState$1 -> androidx.core.widget.f:
    1:1:androidx.core.widget.NestedScrollView$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.core.widget.NestedScrollView$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.core.widget.ScrollerCompat -> androidx.core.widget.ScrollerCompat:
    android.widget.OverScroller mScroller -> a
androidx.core.widget.TextViewCompat -> androidx.core.widget.TextViewCompat:
    1:1:android.text.TextDirectionHeuristic getTextDirectionHeuristic(android.widget.TextView):0:0 -> getTextMetricsParams
    1:1:androidx.core.text.PrecomputedTextCompat$Params getTextMetricsParams(android.widget.TextView):0 -> getTextMetricsParams
    2:2:androidx.core.text.PrecomputedTextCompat$Params getTextMetricsParams(android.widget.TextView):0:0 -> getTextMetricsParams
    1:1:int getTextDirection(android.text.TextDirectionHeuristic):0:0 -> setTextMetricsParams
    1:1:void setTextMetricsParams(android.widget.TextView,androidx.core.text.PrecomputedTextCompat$Params):0 -> setTextMetricsParams
    2:2:void setTextMetricsParams(android.widget.TextView,androidx.core.text.PrecomputedTextCompat$Params):0:0 -> setTextMetricsParams
androidx.core.widget.TextViewCompat$OreoCallback -> androidx.core.widget.g:
    android.widget.TextView mTextView -> b
    boolean mCanUseMenuBuilderReferences -> e
    java.lang.reflect.Method mMenuBuilderRemoveItemAtMethod -> d
    boolean mInitializedMenuBuilderReferences -> f
    android.view.ActionMode$Callback mCallback -> a
    java.lang.Class mMenuBuilderClass -> c
    1:1:void recomputeProcessTextMenuItems(android.view.Menu):0:0 -> onPrepareActionMode
    1:1:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0 -> onPrepareActionMode
    2:2:java.util.List getSupportedActivities(android.content.Context,android.content.pm.PackageManager):0:0 -> onPrepareActionMode
    2:2:void recomputeProcessTextMenuItems(android.view.Menu):0 -> onPrepareActionMode
    2:2:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0 -> onPrepareActionMode
    3:3:android.content.Intent createProcessTextIntent():0:0 -> onPrepareActionMode
    3:3:java.util.List getSupportedActivities(android.content.Context,android.content.pm.PackageManager):0 -> onPrepareActionMode
    3:3:void recomputeProcessTextMenuItems(android.view.Menu):0 -> onPrepareActionMode
    3:3:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0 -> onPrepareActionMode
    4:4:java.util.List getSupportedActivities(android.content.Context,android.content.pm.PackageManager):0:0 -> onPrepareActionMode
    4:4:void recomputeProcessTextMenuItems(android.view.Menu):0 -> onPrepareActionMode
    4:4:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0 -> onPrepareActionMode
    5:5:boolean isSupportedActivity(android.content.pm.ResolveInfo,android.content.Context):0:0 -> onPrepareActionMode
    5:5:java.util.List getSupportedActivities(android.content.Context,android.content.pm.PackageManager):0 -> onPrepareActionMode
    5:5:void recomputeProcessTextMenuItems(android.view.Menu):0 -> onPrepareActionMode
    5:5:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0 -> onPrepareActionMode
    6:6:java.util.List getSupportedActivities(android.content.Context,android.content.pm.PackageManager):0:0 -> onPrepareActionMode
    6:6:void recomputeProcessTextMenuItems(android.view.Menu):0 -> onPrepareActionMode
    6:6:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0 -> onPrepareActionMode
    7:7:void recomputeProcessTextMenuItems(android.view.Menu):0:0 -> onPrepareActionMode
    7:7:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0 -> onPrepareActionMode
    8:8:android.content.Intent createProcessTextIntent():0:0 -> onPrepareActionMode
    8:8:android.content.Intent createProcessTextIntentForResolveInfo(android.content.pm.ResolveInfo,android.widget.TextView):0 -> onPrepareActionMode
    8:8:void recomputeProcessTextMenuItems(android.view.Menu):0 -> onPrepareActionMode
    8:8:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0 -> onPrepareActionMode
    9:9:boolean isEditable(android.widget.TextView):0:0 -> onPrepareActionMode
    9:9:android.content.Intent createProcessTextIntentForResolveInfo(android.content.pm.ResolveInfo,android.widget.TextView):0 -> onPrepareActionMode
    9:9:void recomputeProcessTextMenuItems(android.view.Menu):0 -> onPrepareActionMode
    9:9:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0 -> onPrepareActionMode
    10:10:android.content.Intent createProcessTextIntentForResolveInfo(android.content.pm.ResolveInfo,android.widget.TextView):0:0 -> onPrepareActionMode
    10:10:void recomputeProcessTextMenuItems(android.view.Menu):0 -> onPrepareActionMode
    10:10:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0 -> onPrepareActionMode
    11:11:void recomputeProcessTextMenuItems(android.view.Menu):0:0 -> onPrepareActionMode
    11:11:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0 -> onPrepareActionMode
    12:12:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0:0 -> onPrepareActionMode
androidx.cursoradapter.widget.CursorAdapter -> androidx.cursoradapter.widget.CursorAdapter:
    void init(android.content.Context,android.database.Cursor,int) -> a
androidx.cursoradapter.widget.CursorAdapter$ChangeObserver -> androidx.cursoradapter.widget.a:
    androidx.cursoradapter.widget.CursorAdapter this$0 -> a
androidx.cursoradapter.widget.CursorAdapter$MyDataSetObserver -> androidx.cursoradapter.widget.b:
    androidx.cursoradapter.widget.CursorAdapter this$0 -> a
androidx.cursoradapter.widget.CursorFilter -> androidx.cursoradapter.widget.d:
    androidx.cursoradapter.widget.CursorFilter$CursorFilterClient mClient -> a
androidx.cursoradapter.widget.CursorFilter$CursorFilterClient -> androidx.cursoradapter.widget.c:
androidx.cursoradapter.widget.ResourceCursorAdapter -> androidx.cursoradapter.widget.ResourceCursorAdapter:
    android.view.LayoutInflater mInflater -> c
    int mDropDownLayout -> b
    int mLayout -> a
androidx.cursoradapter.widget.SimpleCursorAdapter -> androidx.cursoradapter.widget.SimpleCursorAdapter:
    int mStringConversionColumn -> d
    java.lang.String[] mOriginalFrom -> g
    androidx.cursoradapter.widget.SimpleCursorAdapter$ViewBinder mViewBinder -> f
    androidx.cursoradapter.widget.SimpleCursorAdapter$CursorToStringConverter mCursorToStringConverter -> e
    void findColumns(android.database.Cursor,java.lang.String[]) -> b
androidx.customview.view.AbsSavedState -> androidx.customview.view.AbsSavedState:
    android.os.Parcelable mSuperState -> a
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(androidx.customview.view.AbsSavedState$1):0 -> <init>
androidx.customview.view.AbsSavedState$2 -> androidx.customview.view.a:
    1:1:androidx.customview.view.AbsSavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    1:1:androidx.customview.view.AbsSavedState createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    2:2:androidx.customview.view.AbsSavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    2:2:java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader):0 -> createFromParcel
    1:1:androidx.customview.view.AbsSavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.customview.widget.ExploreByTouchHelper -> androidx.customview.widget.ExploreByTouchHelper:
    int mHoveredVirtualViewId -> l
    int mAccessibilityFocusedVirtualViewId -> j
    int mKeyboardFocusedVirtualViewId -> k
    android.graphics.Rect mTempVisibleRect -> e
    android.graphics.Rect mTempScreenRect -> c
    androidx.customview.widget.ExploreByTouchHelper$MyNodeProvider mNodeProvider -> i
    android.graphics.Rect mTempParentRect -> d
    int[] mTempGlobalRect -> f
    android.view.View mHost -> h
    android.graphics.Rect INVALID_PARENT_BOUNDS -> m
    android.view.accessibility.AccessibilityManager mManager -> g
    androidx.customview.widget.FocusStrategy$CollectionAdapter SPARSE_VALUES_ADAPTER -> o
    androidx.customview.widget.FocusStrategy$BoundsAdapter NODE_ADAPTER -> n
    boolean clearAccessibilityFocus(int) -> b
    1:1:android.view.accessibility.AccessibilityEvent createEventForChild(int,int):0:0 -> c
    1:1:android.view.accessibility.AccessibilityEvent createEvent(int,int):0 -> c
    2:2:android.view.accessibility.AccessibilityEvent createEventForHost(int):0:0 -> c
    2:2:android.view.accessibility.AccessibilityEvent createEvent(int,int):0 -> c
    1:1:boolean isVisibleToUser(android.graphics.Rect):0:0 -> d
    1:1:androidx.core.view.accessibility.AccessibilityNodeInfoCompat createNodeForChild(int):0 -> d
    2:2:androidx.core.view.accessibility.AccessibilityNodeInfoCompat createNodeForChild(int):0:0 -> d
    1:1:void updateHoveredVirtualView(int):0:0 -> dispatchHoverEvent
    1:1:boolean dispatchHoverEvent(android.view.MotionEvent):0 -> dispatchHoverEvent
    2:2:boolean dispatchHoverEvent(android.view.MotionEvent):0:0 -> dispatchHoverEvent
    3:3:void updateHoveredVirtualView(int):0:0 -> dispatchHoverEvent
    3:3:boolean dispatchHoverEvent(android.view.MotionEvent):0 -> dispatchHoverEvent
    1:1:boolean clickKeyboardFocusedVirtualView():0:0 -> dispatchKeyEvent
    1:1:boolean dispatchKeyEvent(android.view.KeyEvent):0 -> dispatchKeyEvent
    2:2:boolean dispatchKeyEvent(android.view.KeyEvent):0:0 -> dispatchKeyEvent
    1:1:androidx.collection.SparseArrayCompat getAllNodes():0:0 -> e
    1:1:boolean moveFocus(int,android.graphics.Rect):0 -> e
    2:2:boolean moveFocus(int,android.graphics.Rect):0:0 -> e
    3:3:void getBoundsInParent(int,android.graphics.Rect):0:0 -> e
    3:3:boolean moveFocus(int,android.graphics.Rect):0 -> e
    4:4:boolean moveFocus(int,android.graphics.Rect):0:0 -> e
    5:5:android.graphics.Rect guessPreviouslyFocusedRect(android.view.View,int,android.graphics.Rect):0:0 -> e
    5:5:boolean moveFocus(int,android.graphics.Rect):0 -> e
    6:6:boolean moveFocus(int,android.graphics.Rect):0:0 -> e
    7:7:java.lang.Object androidx.customview.widget.FocusStrategy.findNextFocusInRelativeDirection(java.lang.Object,androidx.customview.widget.FocusStrategy$CollectionAdapter,androidx.customview.widget.FocusStrategy$BoundsAdapter,java.lang.Object,int,boolean,boolean):0:0 -> e
    7:7:boolean moveFocus(int,android.graphics.Rect):0 -> e
    8:8:java.lang.Object androidx.customview.widget.FocusStrategy.getNextFocusable(java.lang.Object,java.util.ArrayList,boolean):0:0 -> e
    8:8:java.lang.Object androidx.customview.widget.FocusStrategy.findNextFocusInRelativeDirection(java.lang.Object,androidx.customview.widget.FocusStrategy$CollectionAdapter,androidx.customview.widget.FocusStrategy$BoundsAdapter,java.lang.Object,int,boolean,boolean):0 -> e
    8:8:boolean moveFocus(int,android.graphics.Rect):0 -> e
    9:9:java.lang.Object androidx.customview.widget.FocusStrategy.findNextFocusInRelativeDirection(java.lang.Object,androidx.customview.widget.FocusStrategy$CollectionAdapter,androidx.customview.widget.FocusStrategy$BoundsAdapter,java.lang.Object,int,boolean,boolean):0:0 -> e
    9:9:boolean moveFocus(int,android.graphics.Rect):0 -> e
    10:10:java.lang.Object androidx.customview.widget.FocusStrategy.getPreviousFocusable(java.lang.Object,java.util.ArrayList,boolean):0:0 -> e
    10:10:java.lang.Object androidx.customview.widget.FocusStrategy.findNextFocusInRelativeDirection(java.lang.Object,androidx.customview.widget.FocusStrategy$CollectionAdapter,androidx.customview.widget.FocusStrategy$BoundsAdapter,java.lang.Object,int,boolean,boolean):0 -> e
    10:10:boolean moveFocus(int,android.graphics.Rect):0 -> e
    11:11:boolean moveFocus(int,android.graphics.Rect):0:0 -> e
    1:1:androidx.core.view.accessibility.AccessibilityNodeInfoCompat createNodeForHost():0:0 -> f
    1:1:androidx.core.view.accessibility.AccessibilityNodeInfoCompat obtainAccessibilityNodeInfo(int):0 -> f
    2:2:androidx.core.view.accessibility.AccessibilityNodeInfoCompat obtainAccessibilityNodeInfo(int):0:0 -> f
    1:1:boolean performActionForChild(int,int,android.os.Bundle):0:0 -> g
    1:1:boolean performAction(int,int,android.os.Bundle):0 -> g
    2:2:boolean requestAccessibilityFocus(int):0:0 -> g
    2:2:boolean performActionForChild(int,int,android.os.Bundle):0 -> g
    2:2:boolean performAction(int,int,android.os.Bundle):0 -> g
    3:3:boolean performActionForChild(int,int,android.os.Bundle):0:0 -> g
    3:3:boolean performAction(int,int,android.os.Bundle):0 -> g
    4:4:boolean performActionForHost(int,android.os.Bundle):0:0 -> g
    4:4:boolean performAction(int,int,android.os.Bundle):0 -> g
    void updateHoveredVirtualView(int) -> h
androidx.customview.widget.ExploreByTouchHelper$1 -> androidx.customview.widget.a:
    1:1:void obtainBounds(androidx.core.view.accessibility.AccessibilityNodeInfoCompat,android.graphics.Rect):0:0 -> obtainBounds
    1:1:void obtainBounds(java.lang.Object,android.graphics.Rect):0 -> obtainBounds
androidx.customview.widget.ExploreByTouchHelper$2 -> androidx.customview.widget.b:
    1:1:androidx.core.view.accessibility.AccessibilityNodeInfoCompat get(androidx.collection.SparseArrayCompat,int):0:0 -> get
    1:1:java.lang.Object get(java.lang.Object,int):0 -> get
    1:1:int size(androidx.collection.SparseArrayCompat):0:0 -> size
    1:1:int size(java.lang.Object):0 -> size
androidx.customview.widget.ExploreByTouchHelper$MyNodeProvider -> androidx.customview.widget.c:
    androidx.customview.widget.ExploreByTouchHelper this$0 -> b
    1:1:androidx.core.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int):0:0 -> findFocus
    1:1:androidx.core.view.accessibility.AccessibilityNodeInfoCompat findFocus(int):0 -> findFocus
androidx.customview.widget.FocusStrategy -> androidx.customview.widget.e:
    1:1:boolean isToDirectionOf(int,android.graphics.Rect,android.graphics.Rect):0:0 -> a
    1:1:boolean beamBeats(int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect):0 -> a
    2:2:boolean beamBeats(int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect):0:0 -> a
    3:3:int majorAxisDistanceToFarEdgeRaw(int,android.graphics.Rect,android.graphics.Rect):0:0 -> a
    3:3:int majorAxisDistanceToFarEdge(int,android.graphics.Rect,android.graphics.Rect):0 -> a
    3:3:boolean beamBeats(int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect):0 -> a
    4:4:int majorAxisDistanceToFarEdge(int,android.graphics.Rect,android.graphics.Rect):0:0 -> a
    4:4:boolean beamBeats(int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect):0 -> a
    boolean beamsOverlap(int,android.graphics.Rect,android.graphics.Rect) -> b
    boolean isCandidate(android.graphics.Rect,android.graphics.Rect,int) -> c
    1:1:int majorAxisDistanceRaw(int,android.graphics.Rect,android.graphics.Rect):0:0 -> d
    1:1:int majorAxisDistance(int,android.graphics.Rect,android.graphics.Rect):0 -> d
    2:2:int majorAxisDistance(int,android.graphics.Rect,android.graphics.Rect):0:0 -> d
    int minorAxisDistance(int,android.graphics.Rect,android.graphics.Rect) -> e
    1:1:boolean isBetterCandidate(int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect):0:0 -> findNextFocusInAbsoluteDirection
    1:1:java.lang.Object findNextFocusInAbsoluteDirection(java.lang.Object,androidx.customview.widget.FocusStrategy$CollectionAdapter,androidx.customview.widget.FocusStrategy$BoundsAdapter,java.lang.Object,android.graphics.Rect,int):0 -> findNextFocusInAbsoluteDirection
    2:2:java.lang.Object findNextFocusInAbsoluteDirection(java.lang.Object,androidx.customview.widget.FocusStrategy$CollectionAdapter,androidx.customview.widget.FocusStrategy$BoundsAdapter,java.lang.Object,android.graphics.Rect,int):0:0 -> findNextFocusInAbsoluteDirection
androidx.customview.widget.FocusStrategy$SequentialComparator -> androidx.customview.widget.d:
    androidx.customview.widget.FocusStrategy$BoundsAdapter mAdapter -> d
    android.graphics.Rect mTemp1 -> a
    boolean mIsLayoutRtl -> c
    android.graphics.Rect mTemp2 -> b
androidx.customview.widget.ViewDragHelper -> androidx.customview.widget.ViewDragHelper:
    int mEdgeSize -> o
    int mPointersDown -> k
    android.view.VelocityTracker mVelocityTracker -> l
    android.view.ViewGroup mParentView -> u
    float[] mLastMotionY -> g
    java.lang.Runnable mSetIdleRunnable -> v
    float[] mInitialMotionY -> e
    float[] mLastMotionX -> f
    android.view.View mCapturedView -> s
    float[] mInitialMotionX -> d
    int mTouchSlop -> b
    int mActivePointerId -> c
    androidx.customview.widget.ViewDragHelper$Callback mCallback -> r
    int mDragState -> a
    boolean mReleaseInProgress -> t
    android.widget.OverScroller mScroller -> q
    int[] mInitialEdgesTouched -> h
    int[] mEdgeDragsInProgress -> i
    android.view.animation.Interpolator sInterpolator -> w
    int[] mEdgeDragsLocked -> j
    float mMinVelocity -> n
    int mTrackingEdges -> p
    float mMaxVelocity -> m
    boolean checkNewEdgeDrag(float,float,int,int) -> a
    boolean checkTouchSlop(android.view.View,float,float) -> b
    float clampMag(float,float,float) -> c
    1:1:void clearMotionHistory():0:0 -> cancel
    1:1:void cancel():0 -> cancel
    2:2:void cancel():0:0 -> cancel
    int clampMag(int,int,int) -> d
    void clearMotionHistory(int) -> e
    1:1:float distanceInfluenceForSnapDuration(float):0:0 -> f
    1:1:int computeAxisDuration(int,int,int):0 -> f
    2:2:int computeAxisDuration(int,int,int):0:0 -> f
    void dispatchViewReleased(float,float) -> g
    1:1:int computeSettleDuration(android.view.View,int,int,int,int):0:0 -> h
    1:1:boolean forceSettleCapturedViewAt(int,int,int,int):0 -> h
    2:2:boolean forceSettleCapturedViewAt(int,int,int,int):0:0 -> h
    boolean isValidPointerForActionMove(int) -> i
    void releaseViewForPointerUp() -> j
    void reportNewEdgeDrags(float,float,int) -> k
    1:1:void ensureMotionHistorySizeForId(int):0:0 -> l
    1:1:void saveInitialMotion(float,float,int):0 -> l
    2:2:void saveInitialMotion(float,float,int):0:0 -> l
    3:3:int getEdgesTouched(int,int):0:0 -> l
    3:3:void saveInitialMotion(float,float,int):0 -> l
    4:4:void saveInitialMotion(float,float,int):0:0 -> l
    void saveLastMotion(android.view.MotionEvent) -> m
    void setDragState(int) -> n
    boolean tryCaptureViewForDrag(android.view.View,int) -> o
    1:1:void dragTo(int,int,int,int):0:0 -> processTouchEvent
    1:1:void processTouchEvent(android.view.MotionEvent):0 -> processTouchEvent
    2:2:void processTouchEvent(android.view.MotionEvent):0:0 -> processTouchEvent
androidx.customview.widget.ViewDragHelper$1 -> androidx.customview.widget.f:
androidx.customview.widget.ViewDragHelper$2 -> androidx.customview.widget.g:
    androidx.customview.widget.ViewDragHelper this$0 -> a
androidx.documentfile.provider.DocumentFile -> androidx.documentfile.provider.DocumentFile:
    androidx.documentfile.provider.DocumentFile mParent -> a
androidx.documentfile.provider.DocumentsContractApi19 -> androidx.documentfile.provider.a:
    void closeQuietly(java.lang.AutoCloseable) -> a
    long queryForLong(android.content.Context,android.net.Uri,java.lang.String,long) -> b
    java.lang.String queryForString(android.content.Context,android.net.Uri,java.lang.String,java.lang.String) -> c
    1:1:java.lang.String getRawType(android.content.Context,android.net.Uri):0:0 -> canRead
    1:1:boolean canRead(android.content.Context,android.net.Uri):0 -> canRead
    2:2:boolean canRead(android.content.Context,android.net.Uri):0:0 -> canRead
    1:1:java.lang.String getRawType(android.content.Context,android.net.Uri):0:0 -> canWrite
    1:1:boolean canWrite(android.content.Context,android.net.Uri):0 -> canWrite
    2:2:int queryForInt(android.content.Context,android.net.Uri,java.lang.String,int):0:0 -> canWrite
    2:2:boolean canWrite(android.content.Context,android.net.Uri):0 -> canWrite
    3:3:boolean canWrite(android.content.Context,android.net.Uri):0:0 -> canWrite
    1:1:java.lang.String getRawType(android.content.Context,android.net.Uri):0:0 -> getType
    1:1:java.lang.String getType(android.content.Context,android.net.Uri):0 -> getType
    2:2:java.lang.String getType(android.content.Context,android.net.Uri):0:0 -> getType
    1:1:java.lang.String getRawType(android.content.Context,android.net.Uri):0:0 -> isDirectory
    1:1:boolean isDirectory(android.content.Context,android.net.Uri):0 -> isDirectory
    2:2:boolean isDirectory(android.content.Context,android.net.Uri):0:0 -> isDirectory
    1:1:java.lang.String getRawType(android.content.Context,android.net.Uri):0:0 -> isFile
    1:1:boolean isFile(android.content.Context,android.net.Uri):0 -> isFile
    2:2:boolean isFile(android.content.Context,android.net.Uri):0:0 -> isFile
    1:1:long getFlags(android.content.Context,android.net.Uri):0:0 -> isVirtual
    1:1:boolean isVirtual(android.content.Context,android.net.Uri):0 -> isVirtual
androidx.documentfile.provider.RawDocumentFile -> androidx.documentfile.provider.b:
    java.io.File mFile -> b
    boolean deleteContents(java.io.File) -> a
    1:1:java.lang.String getTypeForName(java.lang.String):0:0 -> getType
    1:1:java.lang.String getType():0 -> getType
androidx.documentfile.provider.SingleDocumentFile -> androidx.documentfile.provider.c:
    android.content.Context mContext -> b
    android.net.Uri mUri -> c
androidx.documentfile.provider.TreeDocumentFile -> androidx.documentfile.provider.d:
    android.content.Context mContext -> b
    android.net.Uri mUri -> c
    void closeQuietly(java.lang.AutoCloseable) -> a
    1:1:android.net.Uri createFile(android.content.Context,android.net.Uri,java.lang.String,java.lang.String):0:0 -> createDirectory
    1:1:androidx.documentfile.provider.DocumentFile createDirectory(java.lang.String):0 -> createDirectory
    2:2:androidx.documentfile.provider.DocumentFile createDirectory(java.lang.String):0:0 -> createDirectory
    1:1:android.net.Uri createFile(android.content.Context,android.net.Uri,java.lang.String,java.lang.String):0:0 -> createFile
    1:1:androidx.documentfile.provider.DocumentFile createFile(java.lang.String,java.lang.String):0 -> createFile
    2:2:androidx.documentfile.provider.DocumentFile createFile(java.lang.String,java.lang.String):0:0 -> createFile
androidx.drawerlayout.widget.DrawerLayout -> androidx.drawerlayout.widget.DrawerLayout:
    boolean mFirstLayout -> m
    int mLockModeLeft -> n
    java.util.List mListeners -> t
    float mScrimOpacity -> e
    int mScrimColor -> d
    androidx.customview.widget.ViewDragHelper mLeftDragger -> g
    java.util.ArrayList mNonDrawerViews -> B
    androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback mLeftCallback -> i
    androidx.drawerlayout.widget.DrawerLayout$ChildAccessibilityDelegate mChildAccessibilityDelegate -> a
    android.graphics.Paint mScrimPaint -> f
    int[] THEME_ATTRS -> E
    float mInitialMotionX -> u
    android.graphics.Matrix mChildInvertedMatrix -> D
    boolean mDrawStatusBarBackground -> A
    java.lang.CharSequence mTitleRight -> y
    int mLockModeEnd -> q
    int mLockModeRight -> o
    androidx.drawerlayout.widget.DrawerLayout$DrawerListener mListener -> s
    int mDrawerState -> k
    boolean mInLayout -> l
    float mDrawerElevation -> b
    androidx.customview.widget.ViewDragHelper mRightDragger -> h
    android.graphics.Rect mChildHitRect -> C
    int mMinDrawerMargin -> c
    androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback mRightCallback -> j
    boolean mChildrenCanceledTouch -> r
    int[] LAYOUT_ATTRS -> F
    java.lang.Object mLastInsets -> z
    android.graphics.drawable.Drawable mStatusBarBackground -> w
    float mInitialMotionY -> v
    java.lang.CharSequence mTitleLeft -> x
    int mLockModeStart -> p
    void cancelChildViewTouch() -> a
    boolean checkDrawerViewAbsoluteGravity(android.view.View,int) -> b
    void closeDrawers(boolean) -> c
    android.view.View findDrawerWithGravity(int) -> d
    1:1:boolean isInBoundsOfChild(float,float,android.view.View):0:0 -> dispatchGenericMotionEvent
    1:1:boolean dispatchGenericMotionEvent(android.view.MotionEvent):0 -> dispatchGenericMotionEvent
    2:2:boolean dispatchGenericMotionEvent(android.view.MotionEvent):0:0 -> dispatchGenericMotionEvent
    3:3:boolean dispatchTransformedGenericPointerEvent(android.view.MotionEvent,android.view.View):0:0 -> dispatchGenericMotionEvent
    3:3:boolean dispatchGenericMotionEvent(android.view.MotionEvent):0 -> dispatchGenericMotionEvent
    4:4:android.view.MotionEvent getTransformedMotionEvent(android.view.MotionEvent,android.view.View):0:0 -> dispatchGenericMotionEvent
    4:4:boolean dispatchTransformedGenericPointerEvent(android.view.MotionEvent,android.view.View):0 -> dispatchGenericMotionEvent
    4:4:boolean dispatchGenericMotionEvent(android.view.MotionEvent):0 -> dispatchGenericMotionEvent
    5:5:boolean dispatchTransformedGenericPointerEvent(android.view.MotionEvent,android.view.View):0:0 -> dispatchGenericMotionEvent
    5:5:boolean dispatchGenericMotionEvent(android.view.MotionEvent):0 -> dispatchGenericMotionEvent
    6:6:boolean dispatchGenericMotionEvent(android.view.MotionEvent):0:0 -> dispatchGenericMotionEvent
    1:1:boolean hasOpaqueBackground(android.view.View):0:0 -> drawChild
    1:1:boolean drawChild(android.graphics.Canvas,android.view.View,long):0 -> drawChild
    2:2:boolean drawChild(android.graphics.Canvas,android.view.View,long):0:0 -> drawChild
    android.view.View findOpenDrawer() -> e
    android.view.View findVisibleDrawer() -> f
    int getDrawerViewAbsoluteGravity(android.view.View) -> g
    java.lang.String gravityToString(int) -> h
    boolean includeChildForAccessibility(android.view.View) -> i
    boolean isContentView(android.view.View) -> j
    boolean isDrawerView(android.view.View) -> k
    1:1:float getDrawerViewOffset(android.view.View):0:0 -> l
    1:1:void moveDrawerToOffset(android.view.View,float):0 -> l
    2:2:void moveDrawerToOffset(android.view.View,float):0:0 -> l
    1:1:void dispatchOnDrawerSlide(android.view.View,float):0:0 -> m
    1:1:void setDrawerViewOffset(android.view.View,float):0 -> m
    void updateChildrenImportantForAccessibility(android.view.View,boolean) -> n
    1:1:void dispatchOnDrawerClosed(android.view.View):0:0 -> o
    1:1:void updateDrawerState(int,int,android.view.View):0 -> o
    2:2:void dispatchOnDrawerOpened(android.view.View):0:0 -> o
    2:2:void updateDrawerState(int,int,android.view.View):0 -> o
    3:3:void updateDrawerState(int,int,android.view.View):0:0 -> o
    1:1:boolean hasPeekingDrawer():0:0 -> onInterceptTouchEvent
    1:1:boolean onInterceptTouchEvent(android.view.MotionEvent):0 -> onInterceptTouchEvent
    2:2:boolean onInterceptTouchEvent(android.view.MotionEvent):0:0 -> onInterceptTouchEvent
    1:1:boolean hasVisibleDrawer():0:0 -> onKeyDown
    1:1:boolean onKeyDown(int,android.view.KeyEvent):0 -> onKeyDown
    2:2:boolean onKeyDown(int,android.view.KeyEvent):0:0 -> onKeyDown
androidx.drawerlayout.widget.DrawerLayout$1 -> androidx.drawerlayout.widget.a:
androidx.drawerlayout.widget.DrawerLayout$AccessibilityDelegate -> androidx.drawerlayout.widget.b:
    androidx.drawerlayout.widget.DrawerLayout this$0 -> d
    android.graphics.Rect mTmpRect -> c
androidx.drawerlayout.widget.DrawerLayout$ChildAccessibilityDelegate -> androidx.drawerlayout.widget.c:
androidx.drawerlayout.widget.DrawerLayout$LayoutParams -> androidx.drawerlayout.widget.DrawerLayout$LayoutParams:
    float onScreen -> a
    boolean isPeeking -> b
    int openState -> c
androidx.drawerlayout.widget.DrawerLayout$SavedState -> androidx.drawerlayout.widget.DrawerLayout$SavedState:
    int lockModeEnd -> f
    int lockModeRight -> d
    int lockModeStart -> e
    int openDrawerGravity -> b
    int lockModeLeft -> c
androidx.drawerlayout.widget.DrawerLayout$SavedState$1 -> androidx.drawerlayout.widget.d:
    1:1:androidx.drawerlayout.widget.DrawerLayout$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    2:2:androidx.drawerlayout.widget.DrawerLayout$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    2:2:java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader):0 -> createFromParcel
    1:1:androidx.drawerlayout.widget.DrawerLayout$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback -> androidx.drawerlayout.widget.f:
    androidx.customview.widget.ViewDragHelper mDragger -> b
    java.lang.Runnable mPeekRunnable -> c
    androidx.drawerlayout.widget.DrawerLayout this$0 -> d
    int mAbsGravity -> a
    void closeOtherDrawer() -> a
    void peekDrawer() -> b
    1:1:float androidx.drawerlayout.widget.DrawerLayout.getDrawerViewOffset(android.view.View):0:0 -> onViewReleased
    1:1:void onViewReleased(android.view.View,float,float):0 -> onViewReleased
    2:2:void onViewReleased(android.view.View,float,float):0:0 -> onViewReleased
androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback$1 -> androidx.drawerlayout.widget.e:
    androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback this$1 -> a
androidx.fragment.app.BackStackRecord -> androidx.fragment.app.b:
    androidx.fragment.app.FragmentManagerImpl mManager -> a
    int mBreadCrumbTitleRes -> n
    int mIndex -> m
    boolean mAddToBackStack -> i
    java.lang.String mName -> k
    boolean mAllowAddToBackStack -> j
    int mTransitionStyle -> h
    boolean mCommitted -> l
    int mPopExitAnim -> f
    int mTransition -> g
    int mExitAnim -> d
    int mPopEnterAnim -> e
    java.util.ArrayList mOps -> b
    int mEnterAnim -> c
    boolean mReorderingAllowed -> t
    java.lang.CharSequence mBreadCrumbTitleText -> o
    java.lang.CharSequence mBreadCrumbShortTitleText -> q
    java.util.ArrayList mCommitRunnables -> u
    java.util.ArrayList mSharedElementTargetNames -> s
    java.util.ArrayList mSharedElementSourceNames -> r
    int mBreadCrumbShortTitleRes -> p
    void addOp(androidx.fragment.app.BackStackRecord$Op) -> a
    void bumpBackStackNesting(int) -> b
    1:1:void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]):0:0 -> c
    1:1:int commitInternal(boolean):0 -> c
    2:2:int commitInternal(boolean):0:0 -> c
    3:3:int androidx.fragment.app.FragmentManagerImpl.allocBackStackIndex(androidx.fragment.app.BackStackRecord):0:0 -> c
    3:3:int commitInternal(boolean):0 -> c
    4:4:int commitInternal(boolean):0:0 -> c
    void doAddOp(int,androidx.fragment.app.Fragment,java.lang.String,int) -> d
    void executeOps() -> e
    1:1:int androidx.fragment.app.FragmentManagerImpl.reverseTransit(int):0:0 -> f
    1:1:void executePopOps(boolean):0 -> f
    2:2:void executePopOps(boolean):0:0 -> f
    boolean interactsWith(int) -> g
    1:1:void androidx.fragment.app.FragmentManagerImpl.addBackStackState(androidx.fragment.app.BackStackRecord):0:0 -> generateOps
    1:1:boolean generateOps(java.util.ArrayList,java.util.ArrayList):0 -> generateOps
    boolean interactsWith(java.util.ArrayList,int,int) -> h
    1:1:boolean androidx.fragment.app.Fragment.isPostponed():0:0 -> i
    1:1:boolean isFragmentPostponed(androidx.fragment.app.BackStackRecord$Op):0 -> i
    boolean isPostponed() -> j
    void setOnStartPostponedListener(androidx.fragment.app.Fragment$OnStartEnterTransitionListener) -> k
    1:1:androidx.fragment.app.FragmentTransaction replace(int,androidx.fragment.app.Fragment,java.lang.String):0:0 -> replace
    1:1:androidx.fragment.app.FragmentTransaction replace(int,androidx.fragment.app.Fragment):0 -> replace
    1:1:androidx.fragment.app.FragmentTransaction setReorderingAllowed(boolean):0:0 -> setAllowOptimization
    1:1:androidx.fragment.app.FragmentTransaction setAllowOptimization(boolean):0 -> setAllowOptimization
    1:1:androidx.fragment.app.FragmentTransaction setCustomAnimations(int,int,int,int):0:0 -> setCustomAnimations
    1:1:androidx.fragment.app.FragmentTransaction setCustomAnimations(int,int):0 -> setCustomAnimations
androidx.fragment.app.BackStackRecord$Op -> androidx.fragment.app.a:
    int popExitAnim -> f
    androidx.fragment.app.Fragment fragment -> b
    int exitAnim -> d
    int popEnterAnim -> e
    int enterAnim -> c
    int cmd -> a
androidx.fragment.app.BackStackState -> androidx.fragment.app.BackStackState:
    java.util.ArrayList mSharedElementTargetNames -> k
    java.util.ArrayList mSharedElementSourceNames -> j
    int mBreadCrumbShortTitleRes -> h
    boolean mReorderingAllowed -> l
    int mBreadCrumbTitleRes -> f
    int[] mOps -> a
    int mIndex -> e
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    java.lang.String mName -> d
androidx.fragment.app.BackStackState$1 -> androidx.fragment.app.c:
    1:1:androidx.fragment.app.BackStackState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.fragment.app.BackStackState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.fragment.app.DialogFragment -> androidx.fragment.app.DialogFragment:
    int mBackStackId -> c0
    boolean mViewDestroyed -> e0
    boolean mDismissed -> f0
    boolean mShownByMe -> g0
    int mTheme -> Z
    boolean mCancelable -> a0
    boolean mShowsDialog -> b0
    int mStyle -> Y
    android.app.Dialog mDialog -> d0
    void dismissInternal(boolean) -> F
androidx.fragment.app.Fragment -> androidx.fragment.app.Fragment:
    boolean mFromLayout -> m
    java.lang.String mWho -> f
    boolean mUserVisibleHint -> L
    android.os.Bundle mArguments -> g
    android.view.View mInnerView -> J
    java.lang.String mTag -> z
    int mContainerId -> y
    android.view.LayoutInflater mLayoutInflater -> Q
    androidx.lifecycle.LifecycleRegistry mViewLifecycleRegistry -> T
    boolean mCalled -> G
    androidx.lifecycle.LifecycleOwner mViewLifecycleOwner -> U
    boolean mRetainInstance -> C
    int mBackStackNesting -> q
    boolean mInLayout -> n
    android.os.Bundle mSavedFragmentState -> b
    int mTargetIndex -> i
    int mIndex -> e
    androidx.lifecycle.MutableLiveData mViewLifecycleOwnerLiveData -> V
    int mState -> a
    android.view.View mView -> I
    androidx.fragment.app.Fragment mParentFragment -> w
    androidx.fragment.app.FragmentManagerImpl mFragmentManager -> r
    android.util.SparseArray mSavedViewState -> c
    boolean mRetaining -> D
    boolean mIsNewlyAdded -> N
    boolean mRestored -> o
    int mTargetRequestCode -> j
    boolean mAdded -> k
    boolean mIsCreated -> R
    java.lang.Object USE_DEFAULT_TRANSITION -> X
    androidx.collection.SimpleArrayMap sClassMap -> W
    boolean mHasMenu -> E
    boolean mHidden -> A
    float mPostponedAlpha -> P
    androidx.fragment.app.Fragment mTarget -> h
    androidx.fragment.app.Fragment$AnimationInfo mAnimationInfo -> M
    boolean mHiddenChanged -> O
    boolean mPerformedCreateView -> p
    boolean mDeferStart -> K
    boolean mRemoving -> l
    androidx.lifecycle.ViewModelStore mViewModelStore -> v
    androidx.fragment.app.FragmentHostCallback mHost -> s
    androidx.fragment.app.FragmentManagerImpl mChildFragmentManager -> t
    int mFragmentId -> x
    android.view.ViewGroup mContainer -> H
    androidx.fragment.app.FragmentManagerNonConfig mChildNonConfig -> u
    androidx.lifecycle.LifecycleRegistry mLifecycleRegistry -> S
    boolean mMenuVisible -> F
    java.lang.Boolean mSavedUserVisibleHint -> d
    boolean mDetached -> B
    void setIndex(int,androidx.fragment.app.Fragment) -> A
    void setNextAnim(int) -> B
    void setNextTransition(int,int) -> C
    void setOnStartEnterTransitionListener(androidx.fragment.app.Fragment$OnStartEnterTransitionListener) -> D
    void setStateAfterAnimating(int) -> E
    void callStartTransitionListener() -> a
    androidx.fragment.app.Fragment$AnimationInfo ensureAnimationInfo() -> b
    androidx.fragment.app.Fragment findFragmentByWho(java.lang.String) -> c
    android.view.View getAnimatingAway() -> d
    android.animation.Animator getAnimator() -> e
    androidx.core.app.SharedElementCallback getEnterTransitionCallback() -> f
    int getNextAnim() -> g
    1:1:android.view.LayoutInflater$Factory2 androidx.fragment.app.FragmentManagerImpl.getLayoutInflaterFactory():0:0 -> getLayoutInflater
    1:1:android.view.LayoutInflater getLayoutInflater(android.os.Bundle):0 -> getLayoutInflater
    2:2:android.view.LayoutInflater getLayoutInflater(android.os.Bundle):0:0 -> getLayoutInflater
    int getNextTransition() -> h
    int getNextTransitionStyle() -> i
    int getStateAfterAnimating() -> j
    1:1:void androidx.fragment.app.FragmentManagerImpl.attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment):0:0 -> k
    1:1:void instantiateChildFragmentManager():0 -> k
    2:2:void instantiateChildFragmentManager():0:0 -> k
    boolean isHideReplaced() -> l
    boolean isInBackStack() -> m
    boolean isSupportFragmentClass(android.content.Context,java.lang.String) -> n
    boolean performContextItemSelected(android.view.MenuItem) -> o
    1:1:boolean androidx.fragment.app.FragmentManagerImpl.isStateAtLeast(int):0:0 -> onCreate
    1:1:void onCreate(android.os.Bundle):0 -> onCreate
    2:2:void onCreate(android.os.Bundle):0:0 -> onCreate
    void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> p
    android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle) -> q
    void performLowMemory() -> r
    boolean performOptionsItemSelected(android.view.MenuItem) -> s
    void performOptionsMenuClosed(android.view.Menu) -> t
    boolean performPrepareOptionsMenu(android.view.Menu) -> u
    void performSaveInstanceState(android.os.Bundle) -> v
    void restoreChildFragmentState(android.os.Bundle) -> w
    void setAnimatingAway(android.view.View) -> x
    void setAnimator(android.animation.Animator) -> y
    void setHideReplaced(boolean) -> z
androidx.fragment.app.Fragment$1 -> androidx.fragment.app.d:
    androidx.fragment.app.Fragment this$0 -> a
androidx.fragment.app.Fragment$2 -> androidx.fragment.app.e:
    androidx.fragment.app.Fragment this$0 -> a
androidx.fragment.app.Fragment$3 -> androidx.fragment.app.f:
    androidx.fragment.app.Fragment this$0 -> a
androidx.fragment.app.Fragment$AnimationInfo -> androidx.fragment.app.g:
    java.lang.Object mReenterTransition -> j
    java.lang.Object mSharedElementEnterTransition -> k
    java.lang.Object mReturnTransition -> h
    java.lang.Object mExitTransition -> i
    androidx.core.app.SharedElementCallback mEnterTransitionCallback -> o
    java.lang.Object mEnterTransition -> g
    androidx.core.app.SharedElementCallback mExitTransitionCallback -> p
    int mNextTransitionStyle -> f
    int mNextAnim -> d
    java.lang.Boolean mAllowReturnTransitionOverlap -> m
    int mNextTransition -> e
    java.lang.Boolean mAllowEnterTransitionOverlap -> n
    boolean mEnterTransitionPostponed -> q
    int mStateAfterAnimating -> c
    java.lang.Object mSharedElementReturnTransition -> l
    boolean mIsHideReplaced -> s
    androidx.fragment.app.Fragment$OnStartEnterTransitionListener mStartEnterTransitionListener -> r
    android.animation.Animator mAnimator -> b
    android.view.View mAnimatingAway -> a
androidx.fragment.app.Fragment$SavedState -> androidx.fragment.app.Fragment$SavedState:
    android.os.Bundle mState -> a
androidx.fragment.app.Fragment$SavedState$1 -> androidx.fragment.app.h:
    1:1:androidx.fragment.app.Fragment$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    2:2:androidx.fragment.app.Fragment$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    2:2:java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader):0 -> createFromParcel
    1:1:androidx.fragment.app.Fragment$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.fragment.app.FragmentActivity -> androidx.fragment.app.FragmentActivity:
    int mNextCandidateRequestIndex -> l
    android.os.Handler mHandler -> c
    boolean mRequestedPermissionsFromFragment -> i
    androidx.fragment.app.FragmentController mFragments -> d
    boolean mStartedIntentSenderFromFragment -> j
    androidx.lifecycle.ViewModelStore mViewModelStore -> e
    boolean mStartedActivityFromFragment -> k
    boolean mCreated -> f
    boolean mResumed -> g
    androidx.collection.SparseArrayCompat mPendingFragmentActivityResults -> m
    boolean mStopped -> h
    int allocateRequestIndex(androidx.fragment.app.Fragment) -> a
    void checkForValidRequestCode(int) -> b
    1:1:androidx.fragment.app.FragmentManager androidx.fragment.app.Fragment.peekChildFragmentManager():0:0 -> c
    1:1:boolean markState(androidx.fragment.app.FragmentManager,androidx.lifecycle.Lifecycle$State):0 -> c
    2:2:boolean markState(androidx.fragment.app.FragmentManager,androidx.lifecycle.Lifecycle$State):0:0 -> c
    void requestPermissionsFromFragment(androidx.fragment.app.Fragment,java.lang.String[],int) -> d
    1:1:android.view.View dispatchFragmentsOnCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet):0:0 -> onCreateView
    1:1:android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet):0 -> onCreateView
    2:2:android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet):0:0 -> onCreateView
    3:3:android.view.View dispatchFragmentsOnCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet):0:0 -> onCreateView
    3:3:android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet):0 -> onCreateView
    4:4:android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet):0:0 -> onCreateView
    1:1:void markFragmentsCreated():0:0 -> onSaveInstanceState
    1:1:void onSaveInstanceState(android.os.Bundle):0 -> onSaveInstanceState
    2:2:void onSaveInstanceState(android.os.Bundle):0:0 -> onSaveInstanceState
    1:1:void markFragmentsCreated():0:0 -> onStop
    1:1:void onStop():0 -> onStop
    2:2:void onStop():0:0 -> onStop
androidx.fragment.app.FragmentActivity$1 -> androidx.fragment.app.i:
    androidx.fragment.app.FragmentActivity this$0 -> a
androidx.fragment.app.FragmentActivity$HostCallbacks -> androidx.fragment.app.j:
    androidx.fragment.app.FragmentActivity this$0 -> f
    1:1:void androidx.fragment.app.FragmentHostCallback.<init>(androidx.fragment.app.FragmentActivity):0:0 -> <init>
    1:1:void <init>(androidx.fragment.app.FragmentActivity):0 -> <init>
    1:1:androidx.fragment.app.FragmentActivity onGetHost():0:0 -> onGetHost
    1:1:java.lang.Object onGetHost():0 -> onGetHost
androidx.fragment.app.FragmentActivity$NonConfigurationInstances -> androidx.fragment.app.k:
    androidx.lifecycle.ViewModelStore viewModelStore -> b
    java.lang.Object custom -> a
    androidx.fragment.app.FragmentManagerNonConfig fragments -> c
androidx.fragment.app.FragmentController -> androidx.fragment.app.FragmentController:
    androidx.fragment.app.FragmentHostCallback mHost -> a
    1:1:void androidx.fragment.app.FragmentManagerImpl.attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment):0:0 -> attachHost
    1:1:void attachHost(androidx.fragment.app.Fragment):0 -> attachHost
    1:1:java.util.List androidx.fragment.app.FragmentManagerImpl.getActiveFragments():0:0 -> getActiveFragments
    1:1:java.util.List getActiveFragments(java.util.List):0 -> getActiveFragments
    1:1:int androidx.fragment.app.FragmentManagerImpl.getActiveFragmentCount():0:0 -> getActiveFragmentsCount
    1:1:int getActiveFragmentsCount():0 -> getActiveFragmentsCount
    1:1:androidx.fragment.app.FragmentManagerImpl androidx.fragment.app.FragmentHostCallback.getFragmentManagerImpl():0:0 -> getSupportFragmentManager
    1:1:androidx.fragment.app.FragmentManager getSupportFragmentManager():0 -> getSupportFragmentManager
androidx.fragment.app.FragmentHostCallback -> androidx.fragment.app.FragmentHostCallback:
    android.content.Context mContext -> b
    android.os.Handler mHandler -> c
    androidx.fragment.app.FragmentManagerImpl mFragmentManager -> e
    int mWindowAnimations -> d
    android.app.Activity mActivity -> a
    android.app.Activity getActivity() -> a
    android.content.Context getContext() -> b
    android.os.Handler getHandler() -> c
androidx.fragment.app.FragmentManagerImpl -> androidx.fragment.app.b0:
    int mCurState -> l
    java.util.concurrent.CopyOnWriteArrayList mLifecycleCallbacks -> k
    java.util.ArrayList mTmpAddedFragments -> x
    java.util.ArrayList mCreatedMenus -> g
    boolean mHavePendingDeferredStart -> u
    java.lang.reflect.Field sAnimationListenerField -> E
    androidx.fragment.app.Fragment mParent -> o
    android.view.animation.Interpolator DECELERATE_CUBIC -> G
    boolean mNeedMenuInvalidate -> q
    java.util.ArrayList mPendingActions -> a
    boolean mStopped -> s
    androidx.fragment.app.FragmentContainer mContainer -> n
    java.util.ArrayList mAvailBackStackIndices -> i
    java.util.ArrayList mTmpIsPop -> w
    boolean mExecutingActions -> b
    androidx.fragment.app.Fragment mPrimaryNav -> p
    java.util.ArrayList mBackStack -> f
    android.view.animation.Interpolator DECELERATE_QUINT -> F
    java.util.ArrayList mAdded -> d
    int mNextFragmentIndex -> c
    boolean mStateSaved -> r
    androidx.fragment.app.FragmentManagerNonConfig mSavedNonConfig -> B
    java.util.ArrayList mPostponedTransactions -> A
    boolean mDestroyed -> t
    android.util.SparseArray mStateArray -> z
    java.lang.Runnable mExecCommit -> C
    java.util.ArrayList mBackStackChangeListeners -> j
    java.util.ArrayList mBackStackIndices -> h
    androidx.fragment.app.FragmentHostCallback mHost -> m
    java.util.ArrayList mTmpRecords -> v
    android.util.SparseArray mActive -> e
    android.os.Bundle mStateBundle -> y
    boolean DEBUG -> D
    1:1:androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator makeFadeAnimation(android.content.Context,float,float):0:0 -> A
    1:1:androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(androidx.fragment.app.Fragment,int,boolean,int):0 -> A
    2:2:androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(androidx.fragment.app.Fragment,int,boolean,int):0:0 -> A
    3:3:androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator makeFadeAnimation(android.content.Context,float,float):0:0 -> A
    3:3:androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(androidx.fragment.app.Fragment,int,boolean,int):0 -> A
    4:4:androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(androidx.fragment.app.Fragment,int,boolean,int):0:0 -> A
    void makeActive(androidx.fragment.app.Fragment) -> B
    androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> C
    boolean modifiesAlpha(android.animation.Animator) -> D
    1:1:androidx.fragment.app.Fragment findFragmentUnder(androidx.fragment.app.Fragment):0:0 -> E
    1:1:void moveFragmentToExpectedState(androidx.fragment.app.Fragment):0 -> E
    2:2:void moveFragmentToExpectedState(androidx.fragment.app.Fragment):0:0 -> E
    3:3:void completeShowHideFragment(androidx.fragment.app.Fragment):0:0 -> E
    3:3:void moveFragmentToExpectedState(androidx.fragment.app.Fragment):0 -> E
    void moveToState(int,boolean) -> F
    1:1:androidx.fragment.app.FragmentManagerImpl androidx.fragment.app.FragmentHostCallback.getFragmentManagerImpl():0:0 -> G
    1:1:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    2:2:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    3:3:void androidx.fragment.app.Fragment.performCreate(android.os.Bundle):0:0 -> G
    3:3:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    4:4:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    5:5:void androidx.fragment.app.Fragment.performCreate(android.os.Bundle):0:0 -> G
    5:5:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    6:6:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    7:7:void ensureInflatedFragmentView(androidx.fragment.app.Fragment):0:0 -> G
    7:7:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    8:8:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    9:9:void androidx.fragment.app.Fragment.performActivityCreated(android.os.Bundle):0:0 -> G
    9:9:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    10:10:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    11:11:void androidx.fragment.app.Fragment.restoreViewState(android.os.Bundle):0:0 -> G
    11:11:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    12:12:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    13:13:void androidx.fragment.app.Fragment.performActivityCreated(android.os.Bundle):0:0 -> G
    13:13:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    14:14:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    15:15:void androidx.fragment.app.Fragment.performStart():0:0 -> G
    15:15:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    16:16:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    17:17:void androidx.fragment.app.Fragment.performStart():0:0 -> G
    17:17:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    18:18:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    19:19:void androidx.fragment.app.Fragment.performResume():0:0 -> G
    19:19:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    20:20:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    21:21:void androidx.fragment.app.Fragment.performResume():0:0 -> G
    21:21:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    22:22:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    23:23:void androidx.fragment.app.Fragment.performPause():0:0 -> G
    23:23:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    24:24:void dispatchPause():0:0 -> G
    24:24:void androidx.fragment.app.Fragment.performPause():0 -> G
    24:24:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    25:25:void androidx.fragment.app.Fragment.performPause():0:0 -> G
    25:25:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    26:26:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    27:27:void androidx.fragment.app.Fragment.performPause():0:0 -> G
    27:27:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    28:28:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    29:29:void androidx.fragment.app.Fragment.performStop():0:0 -> G
    29:29:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    30:30:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    31:31:void androidx.fragment.app.Fragment.performStop():0:0 -> G
    31:31:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    32:32:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    33:33:void androidx.fragment.app.Fragment.performDestroyView():0:0 -> G
    33:33:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    34:34:void dispatchDestroyView():0:0 -> G
    34:34:void androidx.fragment.app.Fragment.performDestroyView():0 -> G
    34:34:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    35:35:void androidx.fragment.app.Fragment.performDestroyView():0:0 -> G
    35:35:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    36:36:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    37:37:void animateRemoveFragment(androidx.fragment.app.Fragment,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator,int):0:0 -> G
    37:37:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    38:38:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    39:39:void androidx.fragment.app.Fragment.performDestroyView():0:0 -> G
    39:39:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    40:40:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    41:41:void androidx.fragment.app.Fragment.performDestroy():0:0 -> G
    41:41:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    42:42:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    43:43:void androidx.fragment.app.Fragment.performDestroy():0:0 -> G
    43:43:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    44:44:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    45:45:void androidx.fragment.app.Fragment.performDetach():0:0 -> G
    45:45:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    46:46:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    47:47:void makeInactive(androidx.fragment.app.Fragment):0:0 -> G
    47:47:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    48:48:void androidx.fragment.app.Fragment.initState():0:0 -> G
    48:48:void makeInactive(androidx.fragment.app.Fragment):0 -> G
    48:48:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    49:49:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    50:50:void androidx.fragment.app.Fragment.performDetach():0:0 -> G
    50:50:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> G
    51:51:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> G
    1:1:androidx.fragment.app.FragmentManager androidx.fragment.app.Fragment.peekChildFragmentManager():0:0 -> H
    1:1:boolean popBackStackImmediate(java.lang.String,int,int):0 -> H
    2:2:boolean popBackStackImmediate(java.lang.String,int,int):0:0 -> H
    1:1:java.lang.String androidx.fragment.app.BackStackRecord.getName():0:0 -> I
    1:1:boolean popBackStackState(java.util.ArrayList,java.util.ArrayList,java.lang.String,int,int):0 -> I
    2:2:boolean popBackStackState(java.util.ArrayList,java.util.ArrayList,java.lang.String,int,int):0:0 -> I
    3:3:java.lang.String androidx.fragment.app.BackStackRecord.getName():0:0 -> I
    3:3:boolean popBackStackState(java.util.ArrayList,java.util.ArrayList,java.lang.String,int,int):0 -> I
    4:4:boolean popBackStackState(java.util.ArrayList,java.util.ArrayList,java.lang.String,int,int):0:0 -> I
    int postponePostponableTransactions(java.util.ArrayList,java.util.ArrayList,int,int,androidx.collection.ArraySet) -> J
    void removeRedundantOperationsAndExecute(java.util.ArrayList,java.util.ArrayList) -> K
    1:1:androidx.fragment.app.Fragment androidx.fragment.app.FragmentState.instantiate(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment,androidx.fragment.app.FragmentManagerNonConfig,androidx.lifecycle.ViewModelStore):0:0 -> L
    1:1:void restoreAllState(android.os.Parcelable,androidx.fragment.app.FragmentManagerNonConfig):0 -> L
    2:2:void restoreAllState(android.os.Parcelable,androidx.fragment.app.FragmentManagerNonConfig):0:0 -> L
    3:3:androidx.fragment.app.BackStackRecord androidx.fragment.app.BackStackState.instantiate(androidx.fragment.app.FragmentManagerImpl):0:0 -> L
    3:3:void restoreAllState(android.os.Parcelable,androidx.fragment.app.FragmentManagerNonConfig):0 -> L
    4:4:void restoreAllState(android.os.Parcelable,androidx.fragment.app.FragmentManagerNonConfig):0:0 -> L
    5:5:void setBackStackIndex(int,androidx.fragment.app.BackStackRecord):0:0 -> L
    5:5:void restoreAllState(android.os.Parcelable,androidx.fragment.app.FragmentManagerNonConfig):0 -> L
    6:6:void restoreAllState(android.os.Parcelable,androidx.fragment.app.FragmentManagerNonConfig):0:0 -> L
    androidx.fragment.app.FragmentManagerNonConfig retainNonConfig() -> M
    1:1:void endAnimatingAwayFragments():0:0 -> N
    1:1:android.os.Parcelable saveAllState():0 -> N
    2:2:android.os.Parcelable saveAllState():0:0 -> N
    android.os.Bundle saveFragmentBasicState(androidx.fragment.app.Fragment) -> O
    void saveFragmentViewState(androidx.fragment.app.Fragment) -> P
    void saveNonConfig() -> Q
    void scheduleCommit() -> R
    1:1:boolean shouldRunOnHWLayer(android.view.View,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator):0:0 -> S
    1:1:void setHWLayerAnimListenerIfAlpha(android.view.View,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator):0 -> S
    2:2:boolean modifiesAlpha(androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator):0:0 -> S
    2:2:boolean shouldRunOnHWLayer(android.view.View,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator):0 -> S
    2:2:void setHWLayerAnimListenerIfAlpha(android.view.View,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator):0 -> S
    3:3:void setHWLayerAnimListenerIfAlpha(android.view.View,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator):0:0 -> S
    void setRetaining(androidx.fragment.app.FragmentManagerNonConfig) -> T
    void startPendingDeferredFragments() -> U
    void throwException(java.lang.RuntimeException) -> V
    void addAddedFragments(androidx.collection.ArraySet) -> a
    1:1:void moveToState(androidx.fragment.app.Fragment):0:0 -> addFragment
    1:1:void addFragment(androidx.fragment.app.Fragment,boolean):0 -> addFragment
    2:2:void addFragment(androidx.fragment.app.Fragment,boolean):0:0 -> addFragment
    void burpActive() -> b
    void checkStateLoss() -> c
    void cleanupExec() -> d
    1:1:void androidx.fragment.app.Fragment.performConfigurationChanged(android.content.res.Configuration):0:0 -> dispatchConfigurationChanged
    1:1:void dispatchConfigurationChanged(android.content.res.Configuration):0 -> dispatchConfigurationChanged
    1:1:boolean androidx.fragment.app.Fragment.performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater):0:0 -> dispatchCreateOptionsMenu
    1:1:boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater):0 -> dispatchCreateOptionsMenu
    2:2:boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater):0:0 -> dispatchCreateOptionsMenu
    1:1:void androidx.fragment.app.Fragment.performMultiWindowModeChanged(boolean):0:0 -> dispatchMultiWindowModeChanged
    1:1:void dispatchMultiWindowModeChanged(boolean):0 -> dispatchMultiWindowModeChanged
    1:1:void androidx.fragment.app.Fragment.performPictureInPictureModeChanged(boolean):0:0 -> dispatchPictureInPictureModeChanged
    1:1:void dispatchPictureInPictureModeChanged(boolean):0 -> dispatchPictureInPictureModeChanged
    1:1:void androidx.fragment.app.BackStackRecord.dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]):0:0 -> dump
    1:1:void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]):0 -> dump
    2:2:void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]):0:0 -> dump
    void completeExecute(androidx.fragment.app.BackStackRecord,boolean,boolean,boolean) -> e
    1:1:boolean generateOpsForPendingActions(java.util.ArrayList,java.util.ArrayList):0:0 -> execPendingActions
    1:1:boolean execPendingActions():0 -> execPendingActions
    2:2:boolean execPendingActions():0:0 -> execPendingActions
    3:3:boolean generateOpsForPendingActions(java.util.ArrayList,java.util.ArrayList):0:0 -> execPendingActions
    3:3:boolean execPendingActions():0 -> execPendingActions
    void dispatchOnFragmentActivityCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean) -> f
    void dispatchOnFragmentAttached(androidx.fragment.app.Fragment,android.content.Context,boolean) -> g
    void dispatchOnFragmentCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean) -> h
    void dispatchOnFragmentDestroyed(androidx.fragment.app.Fragment,boolean) -> i
    void dispatchOnFragmentDetached(androidx.fragment.app.Fragment,boolean) -> j
    void dispatchOnFragmentPaused(androidx.fragment.app.Fragment,boolean) -> k
    void dispatchOnFragmentPreAttached(androidx.fragment.app.Fragment,android.content.Context,boolean) -> l
    void dispatchOnFragmentPreCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean) -> m
    void dispatchOnFragmentResumed(androidx.fragment.app.Fragment,boolean) -> n
    1:1:void androidx.fragment.app.Fragment.noteStateNotSaved():0:0 -> noteStateNotSaved
    1:1:void noteStateNotSaved():0 -> noteStateNotSaved
    void dispatchOnFragmentSaveInstanceState(androidx.fragment.app.Fragment,android.os.Bundle,boolean) -> o
    1:1:void moveToState(androidx.fragment.app.Fragment):0:0 -> onCreateView
    1:1:android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet):0 -> onCreateView
    2:2:android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet):0:0 -> onCreateView
    void dispatchOnFragmentStarted(androidx.fragment.app.Fragment,boolean) -> p
    void dispatchOnFragmentStopped(androidx.fragment.app.Fragment,boolean) -> q
    void dispatchOnFragmentViewCreated(androidx.fragment.app.Fragment,android.view.View,android.os.Bundle,boolean) -> r
    void dispatchOnFragmentViewDestroyed(androidx.fragment.app.Fragment,boolean) -> s
    void dispatchStateChange(int) -> t
    void doPendingDeferredStart() -> u
    void ensureExecReady(boolean) -> v
    1:1:androidx.fragment.app.Fragment getPrimaryNavigationFragment():0:0 -> w
    1:1:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0 -> w
    2:2:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0:0 -> w
    3:3:androidx.fragment.app.Fragment androidx.fragment.app.BackStackRecord.expandOps(java.util.ArrayList,androidx.fragment.app.Fragment):0:0 -> w
    3:3:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0 -> w
    4:4:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0:0 -> w
    5:5:androidx.fragment.app.Fragment androidx.fragment.app.BackStackRecord.trackAddedFragmentsInPop(java.util.ArrayList,androidx.fragment.app.Fragment):0:0 -> w
    5:5:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0 -> w
    6:6:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0:0 -> w
    7:7:void executeOps(java.util.ArrayList,java.util.ArrayList,int,int):0:0 -> w
    7:7:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0 -> w
    8:8:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0:0 -> w
    9:9:void makeRemovedFragmentsInvisible(androidx.collection.ArraySet):0:0 -> w
    9:9:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0 -> w
    10:10:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0:0 -> w
    11:11:void freeBackStackIndex(int):0:0 -> w
    11:11:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0 -> w
    12:12:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0:0 -> w
    13:13:void freeBackStackIndex(int):0:0 -> w
    13:13:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0 -> w
    14:14:void androidx.fragment.app.BackStackRecord.runOnCommitRunnables():0:0 -> w
    14:14:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0 -> w
    15:15:void reportBackStackChanged():0:0 -> w
    15:15:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0 -> w
    1:1:void executePostponedTransaction(java.util.ArrayList,java.util.ArrayList):0:0 -> x
    2:2:void androidx.fragment.app.FragmentManagerImpl$StartEnterTransitionListener.cancelTransaction():0:0 -> x
    2:2:void executePostponedTransaction(java.util.ArrayList,java.util.ArrayList):0 -> x
    3:3:void executePostponedTransaction(java.util.ArrayList,java.util.ArrayList):0:0 -> x
    void forcePostponedTransactions() -> y
    android.view.animation.Animation$AnimationListener getAnimationListener(android.view.animation.Animation) -> z
androidx.fragment.app.FragmentManagerImpl$1 -> androidx.fragment.app.l:
    androidx.fragment.app.FragmentManagerImpl this$0 -> a
androidx.fragment.app.FragmentManagerImpl$2 -> androidx.fragment.app.n:
    android.view.ViewGroup val$container -> b
    androidx.fragment.app.FragmentManagerImpl this$0 -> d
    androidx.fragment.app.Fragment val$fragment -> c
androidx.fragment.app.FragmentManagerImpl$2$1 -> androidx.fragment.app.m:
    androidx.fragment.app.FragmentManagerImpl$2 this$1 -> a
androidx.fragment.app.FragmentManagerImpl$3 -> androidx.fragment.app.o:
    android.view.ViewGroup val$container -> a
    androidx.fragment.app.FragmentManagerImpl this$0 -> d
    android.view.View val$viewToAnimate -> b
    androidx.fragment.app.Fragment val$fragment -> c
androidx.fragment.app.FragmentManagerImpl$4 -> androidx.fragment.app.p:
    android.view.ViewGroup val$container -> a
    android.view.View val$animatingView -> b
    androidx.fragment.app.Fragment val$fragment -> c
androidx.fragment.app.FragmentManagerImpl$AnimateOnHWLayerIfNeededListener -> androidx.fragment.app.r:
    android.view.View mView -> b
androidx.fragment.app.FragmentManagerImpl$AnimateOnHWLayerIfNeededListener$1 -> androidx.fragment.app.q:
    androidx.fragment.app.FragmentManagerImpl$AnimateOnHWLayerIfNeededListener this$0 -> a
androidx.fragment.app.FragmentManagerImpl$AnimationListenerWrapper -> androidx.fragment.app.s:
    android.view.animation.Animation$AnimationListener mWrapped -> a
androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator -> androidx.fragment.app.t:
    android.view.animation.Animation animation -> a
    android.animation.Animator animator -> b
androidx.fragment.app.FragmentManagerImpl$AnimatorOnHWLayerIfNeededListener -> androidx.fragment.app.u:
    android.view.View mView -> a
androidx.fragment.app.FragmentManagerImpl$EndViewTransitionAnimator -> androidx.fragment.app.v:
    android.view.ViewGroup mParent -> a
    boolean mAnimating -> e
    android.view.View mChild -> b
    boolean mEnded -> c
    boolean mTransitionEnded -> d
androidx.fragment.app.FragmentManagerImpl$FragmentLifecycleCallbacksHolder -> androidx.fragment.app.w:
    boolean mRecursive -> b
    androidx.fragment.app.FragmentManager$FragmentLifecycleCallbacks mCallback -> a
androidx.fragment.app.FragmentManagerImpl$FragmentTag -> androidx.fragment.app.x:
    int[] Fragment -> a
androidx.fragment.app.FragmentManagerImpl$OpGenerator -> androidx.fragment.app.y:
androidx.fragment.app.FragmentManagerImpl$PopBackStackState -> androidx.fragment.app.z:
    androidx.fragment.app.FragmentManagerImpl this$0 -> d
    java.lang.String mName -> a
    int mId -> b
    int mFlags -> c
    1:1:androidx.fragment.app.FragmentManager androidx.fragment.app.Fragment.peekChildFragmentManager():0:0 -> generateOps
    1:1:boolean generateOps(java.util.ArrayList,java.util.ArrayList):0 -> generateOps
    2:2:boolean generateOps(java.util.ArrayList,java.util.ArrayList):0:0 -> generateOps
androidx.fragment.app.FragmentManagerImpl$StartEnterTransitionListener -> androidx.fragment.app.a0:
    boolean mIsBack -> a
    int mNumPostponed -> c
    androidx.fragment.app.BackStackRecord mRecord -> b
    1:1:boolean androidx.fragment.app.Fragment.isPostponed():0:0 -> completeTransaction
    1:1:void completeTransaction():0 -> completeTransaction
    2:2:void completeTransaction():0:0 -> completeTransaction
androidx.fragment.app.FragmentManagerNonConfig -> androidx.fragment.app.FragmentManagerNonConfig:
    java.util.List mChildNonConfigs -> b
    java.util.List mFragments -> a
    java.util.List mViewModelStores -> c
    java.util.List getChildNonConfigs() -> a
    java.util.List getFragments() -> b
    java.util.List getViewModelStores() -> c
androidx.fragment.app.FragmentManagerState -> androidx.fragment.app.FragmentManagerState:
    androidx.fragment.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    int mPrimaryNavActiveIndex -> d
    int mNextFragmentIndex -> e
    androidx.fragment.app.BackStackState[] mBackStack -> c
androidx.fragment.app.FragmentManagerState$1 -> androidx.fragment.app.c0:
    1:1:androidx.fragment.app.FragmentManagerState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.fragment.app.FragmentManagerState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.fragment.app.FragmentPagerAdapter -> androidx.fragment.app.FragmentPagerAdapter:
    androidx.fragment.app.FragmentTransaction mCurTransaction -> d
    androidx.fragment.app.FragmentManager mFragmentManager -> c
    androidx.fragment.app.Fragment mCurrentPrimaryItem -> e
    java.lang.String makeFragmentName(int,long) -> b
androidx.fragment.app.FragmentState -> androidx.fragment.app.FragmentState:
    java.lang.String mTag -> f
    androidx.fragment.app.Fragment mInstance -> l
    boolean mHidden -> j
    java.lang.String mClassName -> a
    int mFragmentId -> d
    boolean mRetainInstance -> g
    android.os.Bundle mArguments -> i
    int mContainerId -> e
    boolean mDetached -> h
    int mIndex -> b
    android.os.Bundle mSavedFragmentState -> k
    boolean mFromLayout -> c
androidx.fragment.app.FragmentState$1 -> androidx.fragment.app.d0:
    1:1:androidx.fragment.app.FragmentState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.fragment.app.FragmentState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.fragment.app.FragmentStatePagerAdapter -> androidx.fragment.app.FragmentStatePagerAdapter:
    androidx.fragment.app.FragmentTransaction mCurTransaction -> d
    androidx.fragment.app.FragmentManager mFragmentManager -> c
    androidx.fragment.app.Fragment mCurrentPrimaryItem -> g
    java.util.ArrayList mFragments -> f
    java.util.ArrayList mSavedState -> e
androidx.fragment.app.FragmentTabHost -> androidx.fragment.app.FragmentTabHost:
    android.widget.TabHost$OnTabChangeListener mOnTabChangeListener -> f
    android.content.Context mContext -> c
    androidx.fragment.app.FragmentManager mFragmentManager -> d
    androidx.fragment.app.FragmentTabHost$TabInfo mLastTab -> g
    int mContainerId -> e
    boolean mAttached -> h
    java.util.ArrayList mTabs -> a
    android.widget.FrameLayout mRealTabContent -> b
    1:1:androidx.fragment.app.FragmentTabHost$TabInfo getTabInfoForTag(java.lang.String):0:0 -> a
    1:1:androidx.fragment.app.FragmentTransaction doTabChanged(java.lang.String,androidx.fragment.app.FragmentTransaction):0 -> a
    2:2:androidx.fragment.app.FragmentTransaction doTabChanged(java.lang.String,androidx.fragment.app.FragmentTransaction):0:0 -> a
    void ensureContent() -> b
    void ensureHierarchy(android.content.Context) -> c
    void initFragmentTabHost(android.content.Context,android.util.AttributeSet) -> d
androidx.fragment.app.FragmentTabHost$DummyTabFactory -> androidx.fragment.app.e0:
    android.content.Context mContext -> a
androidx.fragment.app.FragmentTabHost$SavedState -> androidx.fragment.app.FragmentTabHost$SavedState:
    java.lang.String curTab -> a
androidx.fragment.app.FragmentTabHost$SavedState$1 -> androidx.fragment.app.f0:
    1:1:androidx.fragment.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.fragment.app.FragmentTabHost$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.fragment.app.FragmentTabHost$TabInfo -> androidx.fragment.app.g0:
    android.os.Bundle args -> c
    java.lang.String tag -> a
    java.lang.Class clss -> b
    androidx.fragment.app.Fragment fragment -> d
androidx.fragment.app.FragmentTransition -> androidx.fragment.app.m0:
    androidx.fragment.app.FragmentTransitionImpl PLATFORM_IMPL -> b
    androidx.fragment.app.FragmentTransitionImpl SUPPORT_IMPL -> c
    int[] INVERSE_OPS -> a
    1:1:androidx.fragment.app.FragmentTransitionImpl resolveSupportImpl():0:0 -> <clinit>
    1:1:void <clinit>():0 -> <clinit>
    2:2:void <clinit>():0:0 -> <clinit>
    void addSharedElementsWithMatchingNames(java.util.ArrayList,androidx.collection.ArrayMap,java.util.Collection) -> a
    1:1:androidx.fragment.app.FragmentTransition$FragmentContainerTransition ensureContainer(androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.util.SparseArray,int):0:0 -> b
    1:1:void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.BackStackRecord$Op,android.util.SparseArray,boolean,boolean):0 -> b
    2:2:void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.BackStackRecord$Op,android.util.SparseArray,boolean,boolean):0:0 -> b
    3:3:androidx.fragment.app.FragmentTransition$FragmentContainerTransition ensureContainer(androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.util.SparseArray,int):0:0 -> b
    3:3:void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.BackStackRecord$Op,android.util.SparseArray,boolean,boolean):0 -> b
    4:4:void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.BackStackRecord$Op,android.util.SparseArray,boolean,boolean):0:0 -> b
    void callSharedElementStartEnd(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,androidx.collection.ArrayMap,boolean) -> c
    boolean canHandleAll(androidx.fragment.app.FragmentTransitionImpl,java.util.List) -> d
    1:1:androidx.core.app.SharedElementCallback androidx.fragment.app.Fragment.getExitTransitionCallback():0:0 -> e
    1:1:androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition):0 -> e
    2:2:androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition):0:0 -> e
    3:3:void retainValues(androidx.collection.ArrayMap,androidx.collection.ArrayMap):0:0 -> e
    3:3:androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition):0 -> e
    4:4:androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition):0:0 -> e
    1:1:androidx.core.app.SharedElementCallback androidx.fragment.app.Fragment.getExitTransitionCallback():0:0 -> f
    1:1:androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition):0 -> f
    2:2:androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition):0:0 -> f
    androidx.fragment.app.FragmentTransitionImpl chooseImpl(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment) -> g
    java.util.ArrayList configureEnteringExitingViews(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList,android.view.View) -> h
    java.lang.String findKeyForValue(androidx.collection.ArrayMap,java.lang.String) -> i
    java.lang.Object getEnterTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean) -> j
    java.lang.Object getExitTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean) -> k
    android.view.View getInEpicenterView(androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.lang.Object,boolean) -> l
    java.lang.Object getSharedElementTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean) -> m
    java.lang.Object mergeTransitions(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,java.lang.Object,androidx.fragment.app.Fragment,boolean) -> n
    void setOutEpicenter(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,androidx.collection.ArrayMap,boolean,androidx.fragment.app.BackStackRecord) -> o
    void setViewVisibility(java.util.ArrayList,int) -> p
    1:1:void calculatePopFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean):0:0 -> q
    1:1:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> q
    2:2:void calculateFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean):0:0 -> q
    2:2:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> q
    3:3:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0:0 -> q
    4:4:androidx.collection.ArrayMap calculateNameOverrides(int,java.util.ArrayList,java.util.ArrayList,int,int):0:0 -> q
    4:4:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> q
    5:5:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0:0 -> q
    6:6:void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0:0 -> q
    6:6:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> q
    7:7:java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object):0:0 -> q
    7:7:void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0 -> q
    7:7:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> q
    8:8:void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0:0 -> q
    8:8:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> q
    9:9:void replaceHide(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList):0:0 -> q
    9:9:void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0 -> q
    9:9:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> q
    10:10:java.util.ArrayList androidx.fragment.app.FragmentTransitionImpl.prepareSetNameOverridesReordered(java.util.ArrayList):0:0 -> q
    10:10:void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0 -> q
    10:10:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> q
    11:11:void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0:0 -> q
    11:11:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> q
    12:12:void androidx.fragment.app.FragmentTransitionImpl.setNameOverridesReordered(android.view.View,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.Map):0:0 -> q
    12:12:void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0 -> q
    12:12:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> q
    13:13:void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0:0 -> q
    13:13:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> q
    14:14:void configureTransitionsOrdered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0:0 -> q
    14:14:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> q
    15:15:java.lang.Object configureSharedElementsOrdered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object):0:0 -> q
    15:15:void configureTransitionsOrdered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0 -> q
    15:15:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> q
    16:16:void configureTransitionsOrdered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0:0 -> q
    16:16:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> q
    17:17:void scheduleTargetChange(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,androidx.fragment.app.Fragment,android.view.View,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList):0:0 -> q
    17:17:void configureTransitionsOrdered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0 -> q
    17:17:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> q
    18:18:void androidx.fragment.app.FragmentTransitionImpl.setNameOverridesOrdered(android.view.View,java.util.ArrayList,java.util.Map):0:0 -> q
    18:18:void configureTransitionsOrdered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0 -> q
    18:18:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> q
    19:19:void configureTransitionsOrdered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0:0 -> q
    19:19:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> q
    20:20:void androidx.fragment.app.FragmentTransitionImpl.scheduleNameReset(android.view.ViewGroup,java.util.ArrayList,java.util.Map):0:0 -> q
    20:20:void configureTransitionsOrdered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0 -> q
    20:20:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> q
    boolean supportsTransition() -> r
androidx.fragment.app.FragmentTransition$1 -> androidx.fragment.app.h0:
    java.util.ArrayList val$exitingViews -> a
androidx.fragment.app.FragmentTransition$2 -> androidx.fragment.app.i0:
    java.lang.Object val$exitTransition -> h
    androidx.fragment.app.FragmentTransitionImpl val$impl -> b
    java.util.ArrayList val$exitingViews -> g
    java.util.ArrayList val$enteringViews -> f
    android.view.View val$nonExistentView -> c
    java.util.ArrayList val$sharedElementsIn -> e
    java.lang.Object val$enterTransition -> a
    androidx.fragment.app.Fragment val$inFragment -> d
androidx.fragment.app.FragmentTransition$3 -> androidx.fragment.app.j0:
    androidx.fragment.app.FragmentTransitionImpl val$impl -> f
    android.graphics.Rect val$epicenter -> g
    androidx.fragment.app.Fragment val$outFragment -> b
    androidx.fragment.app.Fragment val$inFragment -> a
    androidx.collection.ArrayMap val$inSharedElements -> d
    android.view.View val$epicenterView -> e
    boolean val$inIsPop -> c
androidx.fragment.app.FragmentTransition$4 -> androidx.fragment.app.k0:
    androidx.fragment.app.Fragment val$outFragment -> h
    androidx.fragment.app.Fragment val$inFragment -> g
    java.lang.Object val$enterTransition -> k
    boolean val$inIsPop -> i
    java.util.ArrayList val$sharedElementsOut -> j
    android.graphics.Rect val$inEpicenter -> l
    androidx.fragment.app.FragmentTransitionImpl val$impl -> a
    java.lang.Object val$finalSharedElementTransition -> c
    java.util.ArrayList val$sharedElementsIn -> e
    androidx.fragment.app.FragmentTransition$FragmentContainerTransition val$fragments -> d
    androidx.collection.ArrayMap val$nameOverrides -> b
    android.view.View val$nonExistentView -> f
androidx.fragment.app.FragmentTransition$FragmentContainerTransition -> androidx.fragment.app.l0:
    androidx.fragment.app.BackStackRecord firstOutTransaction -> f
    boolean firstOutIsPop -> e
    androidx.fragment.app.Fragment lastIn -> a
    androidx.fragment.app.Fragment firstOut -> d
    boolean lastInIsPop -> b
    androidx.fragment.app.BackStackRecord lastInTransaction -> c
androidx.fragment.app.FragmentTransitionCompat21 -> androidx.fragment.app.r0:
    boolean hasSimpleTarget(android.transition.Transition) -> d
androidx.fragment.app.FragmentTransitionCompat21$1 -> androidx.fragment.app.n0:
    android.graphics.Rect val$epicenter -> a
androidx.fragment.app.FragmentTransitionCompat21$2 -> androidx.fragment.app.o0:
    android.view.View val$fragmentView -> a
    java.util.ArrayList val$exitingViews -> b
androidx.fragment.app.FragmentTransitionCompat21$3 -> androidx.fragment.app.p0:
    java.lang.Object val$sharedElementTransition -> e
    java.lang.Object val$exitTransition -> c
    java.util.ArrayList val$sharedElementsIn -> f
    java.lang.Object val$enterTransition -> a
    java.util.ArrayList val$exitingViews -> d
    java.util.ArrayList val$enteringViews -> b
    androidx.fragment.app.FragmentTransitionCompat21 this$0 -> g
androidx.fragment.app.FragmentTransitionCompat21$4 -> androidx.fragment.app.q0:
    android.graphics.Rect val$epicenter -> a
androidx.fragment.app.FragmentTransitionImpl -> androidx.fragment.app.FragmentTransitionImpl:
    void captureTransitioningViews(java.util.ArrayList,android.view.View) -> a
    boolean containedBeforeIndex(java.util.List,android.view.View,int) -> b
    void findNamedViews(java.util.Map,android.view.View) -> c
androidx.fragment.app.FragmentTransitionImpl$1 -> androidx.fragment.app.s0:
    java.util.ArrayList val$outNames -> e
    java.util.ArrayList val$sharedElementsOut -> d
    java.util.ArrayList val$inNames -> c
    java.util.ArrayList val$sharedElementsIn -> b
    int val$numSharedElements -> a
androidx.fragment.app.FragmentTransitionImpl$2 -> androidx.fragment.app.t0:
    java.util.Map val$nameOverrides -> b
    java.util.ArrayList val$sharedElementsIn -> a
    1:1:java.lang.String androidx.fragment.app.FragmentTransitionImpl.findKeyForValue(java.util.Map,java.lang.String):0:0 -> run
    1:1:void run():0 -> run
    2:2:void run():0:0 -> run
androidx.fragment.app.FragmentTransitionImpl$3 -> androidx.fragment.app.u0:
    java.util.Map val$nameOverrides -> b
    java.util.ArrayList val$sharedElementsIn -> a
androidx.fragment.app.ListFragment -> androidx.fragment.app.ListFragment:
    android.view.View mListContainer -> g0
    android.view.View mProgressContainer -> f0
    java.lang.CharSequence mEmptyText -> h0
    android.view.View mEmptyView -> d0
    android.widget.AdapterView$OnItemClickListener mOnClickListener -> a0
    android.widget.ListView mList -> c0
    java.lang.Runnable mRequestFocus -> Z
    android.widget.ListAdapter mAdapter -> b0
    android.widget.TextView mStandardEmptyView -> e0
    boolean mListShown -> i0
    android.os.Handler mHandler -> Y
    void ensureList() -> F
    void setListShown(boolean,boolean) -> G
androidx.fragment.app.ListFragment$1 -> androidx.fragment.app.v0:
    androidx.fragment.app.ListFragment this$0 -> a
androidx.fragment.app.ListFragment$2 -> androidx.fragment.app.w0:
    androidx.fragment.app.ListFragment this$0 -> a
androidx.fragment.app.OneShotPreDrawListener -> androidx.fragment.app.x0:
    java.lang.Runnable mRunnable -> c
    android.view.View mView -> a
    android.view.ViewTreeObserver mViewTreeObserver -> b
androidx.fragment.app.SuperNotCalledException -> androidx.fragment.app.y0:
androidx.interpolator.view.animation.FastOutLinearInInterpolator -> androidx.interpolator.view.animation.FastOutLinearInInterpolator:
    float[] VALUES -> c
androidx.interpolator.view.animation.FastOutSlowInInterpolator -> androidx.interpolator.view.animation.FastOutSlowInInterpolator:
    float[] VALUES -> c
androidx.interpolator.view.animation.LinearOutSlowInInterpolator -> androidx.interpolator.view.animation.LinearOutSlowInInterpolator:
    float[] VALUES -> c
androidx.interpolator.view.animation.LookupTableInterpolator -> androidx.interpolator.view.animation.a:
    float mStepSize -> b
    float[] mValues -> a
androidx.legacy.app.ActionBarDrawerToggle -> androidx.legacy.app.ActionBarDrawerToggle:
    androidx.legacy.app.ActionBarDrawerToggle$Delegate mActivityImpl -> b
    androidx.drawerlayout.widget.DrawerLayout mDrawerLayout -> c
    android.graphics.drawable.Drawable mHomeAsUpIndicator -> f
    android.graphics.drawable.Drawable mDrawerImage -> g
    androidx.legacy.app.ActionBarDrawerToggle$SlideDrawable mSlider -> h
    int mOpenDrawerContentDescRes -> j
    int mCloseDrawerContentDescRes -> k
    int mDrawerImageResource -> i
    boolean mHasCustomUpIndicator -> e
    android.app.Activity mActivity -> a
    int[] THEME_ATTRS -> l
    boolean mDrawerIndicatorEnabled -> d
    1:1:boolean assumeMaterial(android.content.Context):0:0 -> <init>
    1:1:void <init>(android.app.Activity,androidx.drawerlayout.widget.DrawerLayout,int,int,int):0 -> <init>
    2:2:void <init>(android.app.Activity,androidx.drawerlayout.widget.DrawerLayout,int,int,int):0:0 -> <init>
    android.graphics.drawable.Drawable getThemeUpIndicator() -> a
    void setActionBarUpIndicator(android.graphics.drawable.Drawable,int) -> b
    1:1:void setActionBarDescription(int):0:0 -> onDrawerClosed
    1:1:void onDrawerClosed(android.view.View):0 -> onDrawerClosed
    1:1:void setActionBarDescription(int):0:0 -> onDrawerOpened
    1:1:void onDrawerOpened(android.view.View):0 -> onDrawerOpened
androidx.legacy.app.ActionBarDrawerToggle$SlideDrawable -> androidx.legacy.app.a:
    androidx.legacy.app.ActionBarDrawerToggle this$0 -> e
    float mOffset -> d
    float mPosition -> c
    boolean mHasMirroring -> a
    android.graphics.Rect mTmpRect -> b
androidx.legacy.content.WakefulBroadcastReceiver -> androidx.legacy.content.WakefulBroadcastReceiver:
    android.util.SparseArray sActiveWakeLocks -> a
    int mNextId -> b
androidx.legacy.widget.Space -> androidx.legacy.widget.Space:
    int getDefaultSize2(int,int) -> a
androidx.lifecycle.AndroidViewModel -> androidx.lifecycle.AndroidViewModel:
    android.app.Application mApplication -> a
androidx.lifecycle.ClassesInfoCache -> androidx.lifecycle.c:
    java.util.Map mCallbackMap -> a
    java.util.Map mHasLifecycleMethods -> b
    androidx.lifecycle.ClassesInfoCache sInstance -> c
    1:1:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class):0:0 -> a
    1:1:androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[]):0 -> a
    2:2:androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[]):0:0 -> a
    3:3:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class):0:0 -> a
    3:3:androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[]):0 -> a
    androidx.lifecycle.ClassesInfoCache$CallbackInfo getInfo(java.lang.Class) -> b
    1:1:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class):0:0 -> c
    1:1:boolean hasLifecycleMethods(java.lang.Class):0 -> c
    2:2:boolean hasLifecycleMethods(java.lang.Class):0:0 -> c
    3:3:java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class):0:0 -> c
    3:3:boolean hasLifecycleMethods(java.lang.Class):0 -> c
    void verifyAndPutHandler(java.util.Map,androidx.lifecycle.ClassesInfoCache$MethodReference,androidx.lifecycle.Lifecycle$Event,java.lang.Class) -> d
androidx.lifecycle.ClassesInfoCache$CallbackInfo -> androidx.lifecycle.a:
    java.util.Map mEventToHandlers -> a
    java.util.Map mHandlerToEvent -> b
    void invokeCallbacks(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object) -> a
    1:1:void androidx.lifecycle.ClassesInfoCache$MethodReference.invokeCallback(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object):0:0 -> b
    1:1:void invokeMethodsForEvent(java.util.List,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object):0 -> b
androidx.lifecycle.ClassesInfoCache$MethodReference -> androidx.lifecycle.b:
    int mCallType -> a
    java.lang.reflect.Method mMethod -> b
androidx.lifecycle.CompositeGeneratedAdaptersObserver -> androidx.lifecycle.CompositeGeneratedAdaptersObserver:
    androidx.lifecycle.GeneratedAdapter[] mGeneratedAdapters -> a
androidx.lifecycle.ComputableLiveData -> androidx.lifecycle.ComputableLiveData:
    java.lang.Runnable mRefreshRunnable -> e
    androidx.lifecycle.LiveData mLiveData -> b
    java.util.concurrent.atomic.AtomicBoolean mComputing -> d
    java.util.concurrent.Executor mExecutor -> a
    java.util.concurrent.atomic.AtomicBoolean mInvalid -> c
    java.lang.Runnable mInvalidationRunnable -> f
androidx.lifecycle.ComputableLiveData$1 -> androidx.lifecycle.d:
    androidx.lifecycle.ComputableLiveData this$0 -> k
androidx.lifecycle.ComputableLiveData$2 -> androidx.lifecycle.e:
    androidx.lifecycle.ComputableLiveData this$0 -> a
androidx.lifecycle.ComputableLiveData$3 -> androidx.lifecycle.f:
    androidx.lifecycle.ComputableLiveData this$0 -> a
androidx.lifecycle.FullLifecycleObserver -> androidx.lifecycle.g:
androidx.lifecycle.FullLifecycleObserverAdapter -> androidx.lifecycle.FullLifecycleObserverAdapter:
    androidx.lifecycle.FullLifecycleObserver mObserver -> a
androidx.lifecycle.Lifecycle$State -> androidx.lifecycle.Lifecycle$State:
    androidx.lifecycle.Lifecycle$State[] $VALUES -> a
androidx.lifecycle.LifecycleRegistry -> androidx.lifecycle.LifecycleRegistry:
    androidx.lifecycle.Lifecycle$State mState -> b
    androidx.arch.core.internal.FastSafeIterableMap mObserverMap -> a
    boolean mHandlingEvent -> e
    java.util.ArrayList mParentStates -> g
    java.lang.ref.WeakReference mLifecycleOwner -> c
    boolean mNewEventOccurred -> f
    int mAddingObserverCounter -> d
    androidx.lifecycle.Lifecycle$State calculateTargetState(androidx.lifecycle.LifecycleObserver) -> a
    1:1:void pushParentState(androidx.lifecycle.Lifecycle$State):0:0 -> addObserver
    1:1:void addObserver(androidx.lifecycle.LifecycleObserver):0 -> addObserver
    2:2:void addObserver(androidx.lifecycle.LifecycleObserver):0:0 -> addObserver
    androidx.lifecycle.Lifecycle$State getStateAfter(androidx.lifecycle.Lifecycle$Event) -> b
    androidx.lifecycle.Lifecycle$State min(androidx.lifecycle.Lifecycle$State,androidx.lifecycle.Lifecycle$State) -> c
    void moveToState(androidx.lifecycle.Lifecycle$State) -> d
    void popParentState() -> e
    1:1:boolean isSynced():0:0 -> f
    1:1:void sync():0 -> f
    2:2:void sync():0:0 -> f
    3:3:void backwardPass(androidx.lifecycle.LifecycleOwner):0:0 -> f
    3:3:void sync():0 -> f
    4:4:androidx.lifecycle.Lifecycle$Event downEvent(androidx.lifecycle.Lifecycle$State):0:0 -> f
    4:4:void backwardPass(androidx.lifecycle.LifecycleOwner):0 -> f
    4:4:void sync():0 -> f
    5:5:void backwardPass(androidx.lifecycle.LifecycleOwner):0:0 -> f
    5:5:void sync():0 -> f
    6:6:void pushParentState(androidx.lifecycle.Lifecycle$State):0:0 -> f
    6:6:void backwardPass(androidx.lifecycle.LifecycleOwner):0 -> f
    6:6:void sync():0 -> f
    7:7:void backwardPass(androidx.lifecycle.LifecycleOwner):0:0 -> f
    7:7:void sync():0 -> f
    8:8:androidx.lifecycle.Lifecycle$Event downEvent(androidx.lifecycle.Lifecycle$State):0:0 -> f
    8:8:void backwardPass(androidx.lifecycle.LifecycleOwner):0 -> f
    8:8:void sync():0 -> f
    9:9:void sync():0:0 -> f
    10:10:void forwardPass(androidx.lifecycle.LifecycleOwner):0:0 -> f
    10:10:void sync():0 -> f
    11:11:void pushParentState(androidx.lifecycle.Lifecycle$State):0:0 -> f
    11:11:void forwardPass(androidx.lifecycle.LifecycleOwner):0 -> f
    11:11:void sync():0 -> f
    12:12:void forwardPass(androidx.lifecycle.LifecycleOwner):0:0 -> f
    12:12:void sync():0 -> f
    androidx.lifecycle.Lifecycle$Event upEvent(androidx.lifecycle.Lifecycle$State) -> g
androidx.lifecycle.LifecycleRegistry$ObserverWithState -> androidx.lifecycle.h:
    androidx.lifecycle.Lifecycle$State mState -> a
    androidx.lifecycle.GenericLifecycleObserver mLifecycleObserver -> b
    void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.Lifecycling -> androidx.lifecycle.Lifecycling:
    java.util.Map sCallbackCache -> a
    java.util.Map sClassToAdapters -> b
    androidx.lifecycle.GeneratedAdapter createGeneratedAdapter(java.lang.reflect.Constructor,java.lang.Object) -> a
    androidx.lifecycle.GenericLifecycleObserver getCallback(java.lang.Object) -> b
    1:1:int resolveObserverCallbackType(java.lang.Class):0:0 -> c
    1:1:int getObserverConstructorType(java.lang.Class):0 -> c
    2:2:java.lang.reflect.Constructor generatedConstructor(java.lang.Class):0:0 -> c
    2:2:int resolveObserverCallbackType(java.lang.Class):0 -> c
    2:2:int getObserverConstructorType(java.lang.Class):0 -> c
    3:3:int resolveObserverCallbackType(java.lang.Class):0:0 -> c
    3:3:int getObserverConstructorType(java.lang.Class):0 -> c
    4:4:boolean isLifecycleParent(java.lang.Class):0:0 -> c
    4:4:int resolveObserverCallbackType(java.lang.Class):0 -> c
    4:4:int getObserverConstructorType(java.lang.Class):0 -> c
    5:5:int resolveObserverCallbackType(java.lang.Class):0:0 -> c
    5:5:int getObserverConstructorType(java.lang.Class):0 -> c
    6:6:boolean isLifecycleParent(java.lang.Class):0:0 -> c
    6:6:int resolveObserverCallbackType(java.lang.Class):0 -> c
    6:6:int getObserverConstructorType(java.lang.Class):0 -> c
    7:7:int resolveObserverCallbackType(java.lang.Class):0:0 -> c
    7:7:int getObserverConstructorType(java.lang.Class):0 -> c
    8:8:int getObserverConstructorType(java.lang.Class):0:0 -> c
androidx.lifecycle.LiveData -> androidx.lifecycle.LiveData:
    java.lang.Object NOT_SET -> j
    java.lang.Runnable mPostValueRunnable -> i
    java.lang.Object mData -> d
    java.lang.Object mPendingData -> e
    androidx.arch.core.internal.SafeIterableMap mObservers -> b
    int mVersion -> f
    boolean mDispatchingValue -> g
    java.lang.Object mDataLock -> a
    boolean mDispatchInvalidated -> h
    int mActiveCount -> c
    void assertMainThread(java.lang.String) -> a
    void considerNotify(androidx.lifecycle.LiveData$ObserverWrapper) -> b
    void dispatchingValue(androidx.lifecycle.LiveData$ObserverWrapper) -> c
    int getVersion() -> d
androidx.lifecycle.LiveData$1 -> androidx.lifecycle.i:
    androidx.lifecycle.LiveData this$0 -> a
androidx.lifecycle.LiveData$AlwaysActiveObserver -> androidx.lifecycle.j:
    boolean shouldBeActive() -> d
androidx.lifecycle.LiveData$LifecycleBoundObserver -> androidx.lifecycle.LiveData$LifecycleBoundObserver:
    androidx.lifecycle.LiveData this$0 -> f
    androidx.lifecycle.LifecycleOwner mOwner -> e
    void detachObserver() -> b
    boolean isAttachedTo(androidx.lifecycle.LifecycleOwner) -> c
    boolean shouldBeActive() -> d
    1:1:boolean shouldBeActive():0:0 -> onStateChanged
    1:1:void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event):0 -> onStateChanged
    2:2:void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event):0:0 -> onStateChanged
androidx.lifecycle.LiveData$ObserverWrapper -> androidx.lifecycle.k:
    androidx.lifecycle.Observer mObserver -> a
    androidx.lifecycle.LiveData this$0 -> d
    boolean mActive -> b
    int mLastVersion -> c
    void activeStateChanged(boolean) -> a
    void detachObserver() -> b
    boolean isAttachedTo(androidx.lifecycle.LifecycleOwner) -> c
    boolean shouldBeActive() -> d
androidx.lifecycle.MediatorLiveData -> androidx.lifecycle.MediatorLiveData:
    androidx.arch.core.internal.SafeIterableMap mSources -> k
    1:1:void androidx.lifecycle.MediatorLiveData$Source.plug():0:0 -> addSource
    1:1:void addSource(androidx.lifecycle.LiveData,androidx.lifecycle.Observer):0 -> addSource
    1:1:void androidx.lifecycle.MediatorLiveData$Source.plug():0:0 -> onActive
    1:1:void onActive():0 -> onActive
    1:1:void androidx.lifecycle.MediatorLiveData$Source.unplug():0:0 -> onInactive
    1:1:void onInactive():0 -> onInactive
    1:1:void androidx.lifecycle.MediatorLiveData$Source.unplug():0:0 -> removeSource
    1:1:void removeSource(androidx.lifecycle.LiveData):0 -> removeSource
androidx.lifecycle.MediatorLiveData$Source -> androidx.lifecycle.l:
    androidx.lifecycle.LiveData mLiveData -> a
    androidx.lifecycle.Observer mObserver -> b
    int mVersion -> c
androidx.lifecycle.MethodCallsLogger -> androidx.lifecycle.MethodCallsLogger:
    java.util.Map mCalledMethods -> a
androidx.lifecycle.ReflectiveGenericLifecycleObserver -> androidx.lifecycle.ReflectiveGenericLifecycleObserver:
    androidx.lifecycle.ClassesInfoCache$CallbackInfo mInfo -> b
    java.lang.Object mWrapped -> a
androidx.lifecycle.ReportFragment -> androidx.lifecycle.ReportFragment:
    void dispatch(androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.SingleGeneratedAdapterObserver -> androidx.lifecycle.SingleGeneratedAdapterObserver:
    androidx.lifecycle.GeneratedAdapter mGeneratedAdapter -> a
androidx.lifecycle.Transformations$1 -> androidx.lifecycle.m:
    androidx.arch.core.util.Function val$mapFunction -> b
    androidx.lifecycle.MediatorLiveData val$result -> a
androidx.lifecycle.Transformations$2 -> androidx.lifecycle.o:
    androidx.lifecycle.LiveData mSource -> a
    androidx.lifecycle.MediatorLiveData val$result -> c
    androidx.arch.core.util.Function val$switchMapFunction -> b
androidx.lifecycle.Transformations$2$1 -> androidx.lifecycle.n:
    androidx.lifecycle.Transformations$2 this$0 -> a
androidx.lifecycle.ViewModelProvider -> androidx.lifecycle.ViewModelProvider:
    androidx.lifecycle.ViewModelStore mViewModelStore -> b
    androidx.lifecycle.ViewModelProvider$Factory mFactory -> a
androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory -> androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory:
    android.app.Application mApplication -> a
    androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory sInstance -> b
androidx.lifecycle.ViewModelStore -> androidx.lifecycle.ViewModelStore:
    java.util.HashMap mMap -> a
    androidx.lifecycle.ViewModel get(java.lang.String) -> a
    void put(java.lang.String,androidx.lifecycle.ViewModel) -> b
androidx.loader.app.LoaderManagerImpl -> androidx.loader.app.d:
    androidx.lifecycle.LifecycleOwner mLifecycleOwner -> a
    androidx.loader.app.LoaderManagerImpl$LoaderViewModel mLoaderViewModel -> b
    boolean DEBUG -> c
    androidx.loader.content.Loader createAndInstallLoader(int,android.os.Bundle,androidx.loader.app.LoaderManager$LoaderCallbacks,androidx.loader.content.Loader) -> a
androidx.loader.app.LoaderManagerImpl$LoaderInfo -> androidx.loader.app.LoaderManagerImpl$LoaderInfo:
    androidx.loader.content.Loader mLoader -> m
    androidx.lifecycle.LifecycleOwner mLifecycleOwner -> n
    int mId -> k
    androidx.loader.app.LoaderManagerImpl$LoaderObserver mObserver -> o
    androidx.loader.content.Loader mPriorLoader -> p
    android.os.Bundle mArgs -> l
    1:1:androidx.loader.content.Loader getLoader():0:0 -> dump
    1:1:void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]):0 -> dump
    2:2:void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]):0:0 -> dump
    androidx.loader.content.Loader destroy(boolean) -> e
    androidx.loader.content.Loader getLoader() -> f
    boolean isCallbackWaitingForData() -> g
    void markForRedelivery() -> h
    androidx.loader.content.Loader setCallback(androidx.lifecycle.LifecycleOwner,androidx.loader.app.LoaderManager$LoaderCallbacks) -> i
androidx.loader.app.LoaderManagerImpl$LoaderObserver -> androidx.loader.app.a:
    androidx.loader.app.LoaderManager$LoaderCallbacks mCallback -> b
    boolean mDeliveredData -> c
    androidx.loader.content.Loader mLoader -> a
    boolean hasDeliveredData() -> a
    void reset() -> b
androidx.loader.app.LoaderManagerImpl$LoaderViewModel -> androidx.loader.app.c:
    androidx.lifecycle.ViewModelProvider$Factory FACTORY -> c
    androidx.collection.SparseArrayCompat mLoaders -> a
    boolean mCreatingLoader -> b
    void finishCreatingLoader() -> a
    androidx.loader.app.LoaderManagerImpl$LoaderViewModel getInstance(androidx.lifecycle.ViewModelStore) -> b
    androidx.loader.app.LoaderManagerImpl$LoaderInfo getLoader(int) -> c
    boolean hasRunningLoaders() -> d
    boolean isCreatingLoader() -> e
    void markForRedelivery() -> f
    void putLoader(int,androidx.loader.app.LoaderManagerImpl$LoaderInfo) -> g
    void removeLoader(int) -> h
    void startCreatingLoader() -> i
androidx.loader.app.LoaderManagerImpl$LoaderViewModel$1 -> androidx.loader.app.b:
androidx.loader.content.AsyncTaskLoader -> androidx.loader.content.AsyncTaskLoader:
    androidx.loader.content.AsyncTaskLoader$LoadTask mTask -> k
    androidx.loader.content.AsyncTaskLoader$LoadTask mCancellingTask -> l
    android.os.Handler mHandler -> o
    long mLastLoadCompleteTime -> n
    long mUpdateThrottle -> m
    java.util.concurrent.Executor mExecutor -> j
    1:1:void <init>(android.content.Context,java.util.concurrent.Executor):0:0 -> <init>
    1:1:void <init>(android.content.Context):0 -> <init>
    void dispatchOnCancelled(androidx.loader.content.AsyncTaskLoader$LoadTask,java.lang.Object) -> a
    void executePendingTask() -> b
androidx.loader.content.AsyncTaskLoader$LoadTask -> androidx.loader.content.a:
    androidx.loader.content.AsyncTaskLoader this$0 -> l
    boolean waiting -> k
    java.util.concurrent.CountDownLatch mDone -> j
    1:1:java.lang.Object doInBackground(java.lang.Void[]):0:0 -> doInBackground
    1:1:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    2:2:boolean androidx.loader.content.ModernAsyncTask.isCancelled():0:0 -> doInBackground
    2:2:java.lang.Object doInBackground(java.lang.Void[]):0 -> doInBackground
    2:2:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    3:3:java.lang.Object doInBackground(java.lang.Void[]):0:0 -> doInBackground
    3:3:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    1:1:void androidx.loader.content.AsyncTaskLoader.dispatchOnLoadComplete(androidx.loader.content.AsyncTaskLoader$LoadTask,java.lang.Object):0:0 -> onPostExecute
    1:1:void onPostExecute(java.lang.Object):0 -> onPostExecute
    2:2:void onPostExecute(java.lang.Object):0:0 -> onPostExecute
androidx.loader.content.CursorLoader -> androidx.loader.content.CursorLoader:
    android.database.Cursor mCursor -> v
    androidx.core.os.CancellationSignal mCancellationSignal -> w
    java.lang.String[] mSelectionArgs -> t
    androidx.loader.content.Loader$ForceLoadContentObserver mObserver -> p
    java.lang.String mSelection -> s
    java.lang.String mSortOrder -> u
    android.net.Uri mUri -> q
    java.lang.String[] mProjection -> r
androidx.loader.content.Loader -> androidx.loader.content.Loader:
    androidx.loader.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mProcessingChange -> i
    boolean mStarted -> e
    androidx.loader.content.Loader$OnLoadCanceledListener mOnLoadCanceledListener -> c
    boolean mAbandoned -> f
    boolean mReset -> g
    boolean mContentChanged -> h
    android.content.Context mContext -> d
    int mId -> a
androidx.loader.content.Loader$ForceLoadContentObserver -> androidx.loader.content.Loader$ForceLoadContentObserver:
    androidx.loader.content.Loader this$0 -> a
androidx.loader.content.ModernAsyncTask -> androidx.loader.content.g:
    java.util.concurrent.BlockingQueue sPoolWorkQueue -> g
    androidx.loader.content.ModernAsyncTask$WorkerRunnable mWorker -> a
    java.util.concurrent.atomic.AtomicBoolean mTaskInvoked -> e
    java.util.concurrent.atomic.AtomicBoolean mCancelled -> d
    java.util.concurrent.ThreadFactory sThreadFactory -> f
    androidx.loader.content.ModernAsyncTask$InternalHandler sHandler -> i
    androidx.loader.content.ModernAsyncTask$Status mStatus -> c
    java.util.concurrent.FutureTask mFuture -> b
    java.util.concurrent.Executor THREAD_POOL_EXECUTOR -> h
    1:1:boolean isCancelled():0:0 -> a
    1:1:void finish(java.lang.Object):0 -> a
    2:2:void finish(java.lang.Object):0:0 -> a
    1:1:android.os.Handler getHandler():0:0 -> b
    1:1:java.lang.Object postResult(java.lang.Object):0 -> b
    2:2:java.lang.Object postResult(java.lang.Object):0:0 -> b
    3:3:android.os.Handler getHandler():0:0 -> b
    3:3:java.lang.Object postResult(java.lang.Object):0 -> b
androidx.loader.content.ModernAsyncTask$1 -> androidx.loader.content.b:
    java.util.concurrent.atomic.AtomicInteger mCount -> a
androidx.loader.content.ModernAsyncTask$2 -> androidx.loader.content.c:
    java.lang.Object[] androidx.loader.content.ModernAsyncTask$WorkerRunnable.mParams -> a
    androidx.loader.content.ModernAsyncTask this$0 -> b
    1:1:void androidx.loader.content.ModernAsyncTask$WorkerRunnable.<init>():0:0 -> <init>
    1:1:void <init>(androidx.loader.content.ModernAsyncTask):0 -> <init>
androidx.loader.content.ModernAsyncTask$3 -> androidx.loader.content.d:
    androidx.loader.content.ModernAsyncTask this$0 -> a
    1:1:void androidx.loader.content.ModernAsyncTask.postResultIfNotInvoked(java.lang.Object):0:0 -> done
    1:1:void done():0 -> done
    2:2:void done():0:0 -> done
    3:3:void androidx.loader.content.ModernAsyncTask.postResultIfNotInvoked(java.lang.Object):0:0 -> done
    3:3:void done():0 -> done
    4:4:void done():0:0 -> done
androidx.loader.content.ModernAsyncTask$AsyncTaskResult -> androidx.loader.content.e:
    java.lang.Object[] mData -> b
    androidx.loader.content.ModernAsyncTask mTask -> a
androidx.loader.content.ModernAsyncTask$InternalHandler -> androidx.loader.content.f:
    1:1:void androidx.loader.content.ModernAsyncTask.onProgressUpdate(java.lang.Object[]):0:0 -> handleMessage
    1:1:void handleMessage(android.os.Message):0 -> handleMessage
    2:2:void handleMessage(android.os.Message):0:0 -> handleMessage
androidx.loader.content.ModernAsyncTask$Status -> androidx.loader.content.ModernAsyncTask$Status:
    androidx.loader.content.ModernAsyncTask$Status[] $VALUES -> a
androidx.localbroadcastmanager.content.LocalBroadcastManager -> androidx.localbroadcastmanager.content.LocalBroadcastManager:
    android.content.Context mAppContext -> a
    android.os.Handler mHandler -> e
    androidx.localbroadcastmanager.content.LocalBroadcastManager mInstance -> g
    java.lang.Object mLock -> f
    java.util.HashMap mReceivers -> b
    java.util.ArrayList mPendingBroadcasts -> d
    java.util.HashMap mActions -> c
    void executePendingBroadcasts() -> a
androidx.localbroadcastmanager.content.LocalBroadcastManager$1 -> androidx.localbroadcastmanager.content.a:
    androidx.localbroadcastmanager.content.LocalBroadcastManager this$0 -> a
androidx.localbroadcastmanager.content.LocalBroadcastManager$BroadcastRecord -> androidx.localbroadcastmanager.content.b:
    android.content.Intent intent -> a
    java.util.ArrayList receivers -> b
androidx.localbroadcastmanager.content.LocalBroadcastManager$ReceiverRecord -> androidx.localbroadcastmanager.content.c:
    android.content.IntentFilter filter -> a
    android.content.BroadcastReceiver receiver -> b
    boolean broadcasting -> c
    boolean dead -> d
androidx.palette.graphics.ColorCutQuantizer -> androidx.palette.graphics.c:
    int[] mHistogram -> b
    java.util.List mQuantizedColors -> c
    androidx.palette.graphics.Palette$Filter[] mFilters -> d
    float[] mTempHsl -> e
    java.util.Comparator VBOX_COMPARATOR_VOLUME -> f
    int[] mColors -> a
    1:1:int quantizeFromRgb888(int):0:0 -> <init>
    1:1:void <init>(int[],int,androidx.palette.graphics.Palette$Filter[]):0 -> <init>
    2:2:void <init>(int[],int,androidx.palette.graphics.Palette$Filter[]):0:0 -> <init>
    3:3:int approximateToRgb888(int):0:0 -> <init>
    3:3:boolean shouldIgnoreColor(int):0 -> <init>
    3:3:void <init>(int[],int,androidx.palette.graphics.Palette$Filter[]):0 -> <init>
    4:4:boolean shouldIgnoreColor(int):0:0 -> <init>
    4:4:void <init>(int[],int,androidx.palette.graphics.Palette$Filter[]):0 -> <init>
    5:5:void <init>(int[],int,androidx.palette.graphics.Palette$Filter[]):0:0 -> <init>
    6:6:int approximateToRgb888(int):0:0 -> <init>
    6:6:void <init>(int[],int,androidx.palette.graphics.Palette$Filter[]):0 -> <init>
    7:7:void <init>(int[],int,androidx.palette.graphics.Palette$Filter[]):0:0 -> <init>
    8:8:java.util.List quantizePixels(int):0:0 -> <init>
    8:8:void <init>(int[],int,androidx.palette.graphics.Palette$Filter[]):0 -> <init>
    9:9:void splitBoxes(java.util.PriorityQueue,int):0:0 -> <init>
    9:9:java.util.List quantizePixels(int):0 -> <init>
    9:9:void <init>(int[],int,androidx.palette.graphics.Palette$Filter[]):0 -> <init>
    10:10:java.util.List generateAverageColors(java.util.Collection):0:0 -> <init>
    10:10:java.util.List quantizePixels(int):0 -> <init>
    10:10:void <init>(int[],int,androidx.palette.graphics.Palette$Filter[]):0 -> <init>
    11:11:boolean shouldIgnoreColor(androidx.palette.graphics.Palette$Swatch):0:0 -> <init>
    11:11:java.util.List generateAverageColors(java.util.Collection):0 -> <init>
    11:11:java.util.List quantizePixels(int):0 -> <init>
    11:11:void <init>(int[],int,androidx.palette.graphics.Palette$Filter[]):0 -> <init>
    12:12:java.util.List generateAverageColors(java.util.Collection):0:0 -> <init>
    12:12:java.util.List quantizePixels(int):0 -> <init>
    12:12:void <init>(int[],int,androidx.palette.graphics.Palette$Filter[]):0 -> <init>
    13:13:void <init>(int[],int,androidx.palette.graphics.Palette$Filter[]):0:0 -> <init>
    int approximateToRgb888(int,int,int) -> a
    void modifySignificantOctet(int[],int,int,int) -> b
    int modifyWordWidth(int,int,int) -> c
    boolean shouldIgnoreColor(int,float[]) -> d
androidx.palette.graphics.ColorCutQuantizer$1 -> androidx.palette.graphics.a:
    1:1:int compare(androidx.palette.graphics.ColorCutQuantizer$Vbox,androidx.palette.graphics.ColorCutQuantizer$Vbox):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
androidx.palette.graphics.ColorCutQuantizer$Vbox -> androidx.palette.graphics.b:
    androidx.palette.graphics.ColorCutQuantizer this$0 -> j
    int mMinBlue -> h
    int mMaxBlue -> i
    int mMinGreen -> f
    int mMaxGreen -> g
    int mMinRed -> d
    int mMaxRed -> e
    int mUpperIndex -> b
    int mPopulation -> c
    int mLowerIndex -> a
    1:1:int getColorCount():0:0 -> a
    1:1:boolean canSplit():0 -> a
    void fitBox() -> b
    androidx.palette.graphics.Palette$Swatch getAverageColor() -> c
    int getVolume() -> d
    1:1:int getColorCount():0:0 -> e
    1:1:boolean canSplit():0 -> e
    1:1:androidx.palette.graphics.ColorCutQuantizer$Vbox splitBox():0 -> e
    2:2:int getLongestColorDimension():0:0 -> e
    2:2:int findSplitPoint():0 -> e
    2:2:androidx.palette.graphics.ColorCutQuantizer$Vbox splitBox():0 -> e
    3:3:int findSplitPoint():0:0 -> e
    3:3:androidx.palette.graphics.ColorCutQuantizer$Vbox splitBox():0 -> e
    4:4:androidx.palette.graphics.ColorCutQuantizer$Vbox splitBox():0:0 -> e
androidx.palette.graphics.Palette -> androidx.palette.graphics.Palette:
    java.util.List mTargets -> b
    java.util.List mSwatches -> a
    java.util.Map mSelectedSwatches -> c
    androidx.palette.graphics.Palette$Swatch mDominantSwatch -> e
    android.util.SparseBooleanArray mUsedColors -> d
    androidx.palette.graphics.Palette$Filter DEFAULT_FILTER -> f
    1:1:androidx.palette.graphics.Palette$Swatch findDominantSwatch():0:0 -> <init>
    1:1:void <init>(java.util.List,java.util.List):0 -> <init>
    2:2:void <init>(java.util.List,java.util.List):0:0 -> <init>
    1:1:void androidx.palette.graphics.Target.normalizeWeights():0:0 -> a
    1:1:void generate():0 -> a
    2:2:void generate():0:0 -> a
    3:3:androidx.palette.graphics.Palette$Swatch getMaxScoredSwatchForTarget(androidx.palette.graphics.Target):0:0 -> a
    3:3:androidx.palette.graphics.Palette$Swatch generateScoredTarget(androidx.palette.graphics.Target):0 -> a
    3:3:void generate():0 -> a
    4:4:boolean shouldBeScoredForTarget(androidx.palette.graphics.Palette$Swatch,androidx.palette.graphics.Target):0:0 -> a
    4:4:androidx.palette.graphics.Palette$Swatch getMaxScoredSwatchForTarget(androidx.palette.graphics.Target):0 -> a
    4:4:androidx.palette.graphics.Palette$Swatch generateScoredTarget(androidx.palette.graphics.Target):0 -> a
    4:4:void generate():0 -> a
    5:5:float generateScore(androidx.palette.graphics.Palette$Swatch,androidx.palette.graphics.Target):0:0 -> a
    5:5:androidx.palette.graphics.Palette$Swatch getMaxScoredSwatchForTarget(androidx.palette.graphics.Target):0 -> a
    5:5:androidx.palette.graphics.Palette$Swatch generateScoredTarget(androidx.palette.graphics.Target):0 -> a
    5:5:void generate():0 -> a
    6:6:androidx.palette.graphics.Palette$Swatch generateScoredTarget(androidx.palette.graphics.Target):0:0 -> a
    6:6:void generate():0 -> a
    7:7:void generate():0:0 -> a
androidx.palette.graphics.Palette$1 -> androidx.palette.graphics.d:
    1:1:boolean isWhite(float[]):0:0 -> isAllowed
    1:1:boolean isAllowed(int,float[]):0 -> isAllowed
    2:2:boolean isBlack(float[]):0:0 -> isAllowed
    2:2:boolean isAllowed(int,float[]):0 -> isAllowed
    3:3:boolean isNearRedILine(float[]):0:0 -> isAllowed
    3:3:boolean isAllowed(int,float[]):0 -> isAllowed
androidx.palette.graphics.Palette$Builder -> androidx.palette.graphics.Palette$Builder:
    java.util.List mSwatches -> a
    android.graphics.Bitmap mBitmap -> b
    java.util.List mTargets -> c
    int mResizeMaxDimension -> f
    android.graphics.Rect mRegion -> h
    int mMaxColors -> d
    int mResizeArea -> e
    java.util.List mFilters -> g
    1:1:android.graphics.Bitmap scaleBitmapDown(android.graphics.Bitmap):0:0 -> generate
    1:1:androidx.palette.graphics.Palette generate():0 -> generate
    2:2:androidx.palette.graphics.Palette generate():0:0 -> generate
    3:3:int[] getPixelsFromBitmap(android.graphics.Bitmap):0:0 -> generate
    3:3:androidx.palette.graphics.Palette generate():0 -> generate
    4:4:androidx.palette.graphics.Palette generate():0:0 -> generate
    5:5:java.util.List androidx.palette.graphics.ColorCutQuantizer.getQuantizedColors():0:0 -> generate
    5:5:androidx.palette.graphics.Palette generate():0 -> generate
    6:6:androidx.palette.graphics.Palette generate():0:0 -> generate
androidx.palette.graphics.Palette$Builder$1 -> androidx.palette.graphics.e:
    androidx.palette.graphics.Palette$PaletteAsyncListener val$listener -> a
    androidx.palette.graphics.Palette$Builder this$0 -> b
    1:1:androidx.palette.graphics.Palette doInBackground(android.graphics.Bitmap[]):0:0 -> doInBackground
    1:1:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    1:1:void onPostExecute(androidx.palette.graphics.Palette):0:0 -> onPostExecute
    1:1:void onPostExecute(java.lang.Object):0 -> onPostExecute
androidx.palette.graphics.Palette$Swatch -> androidx.palette.graphics.Palette$Swatch:
    float[] mHsl -> i
    int mBodyTextColor -> h
    boolean mGeneratedTextColors -> f
    int mTitleTextColor -> g
    int mRgb -> d
    int mPopulation -> e
    int mGreen -> b
    int mBlue -> c
    int mRed -> a
    void ensureTextColorsGenerated() -> a
androidx.palette.graphics.Target -> androidx.palette.graphics.Target:
    float[] mWeights -> c
    float[] mSaturationTargets -> a
    float[] mLightnessTargets -> b
    boolean mIsExclusive -> d
    1:1:void setDefaultLightLightnessValues(androidx.palette.graphics.Target):0:0 -> <clinit>
    1:1:void <clinit>():0 -> <clinit>
    2:2:void <clinit>():0:0 -> <clinit>
    3:3:void setDefaultDarkLightnessValues(androidx.palette.graphics.Target):0:0 -> <clinit>
    3:3:void <clinit>():0 -> <clinit>
    4:4:void <clinit>():0:0 -> <clinit>
    5:5:void setDefaultLightLightnessValues(androidx.palette.graphics.Target):0:0 -> <clinit>
    5:5:void <clinit>():0 -> <clinit>
    6:6:void <clinit>():0:0 -> <clinit>
    7:7:void setDefaultDarkLightnessValues(androidx.palette.graphics.Target):0:0 -> <clinit>
    7:7:void <clinit>():0 -> <clinit>
    8:8:void <clinit>():0:0 -> <clinit>
    void setDefaultMutedSaturationValues(androidx.palette.graphics.Target) -> a
    void setDefaultNormalLightnessValues(androidx.palette.graphics.Target) -> b
    void setDefaultVibrantSaturationValues(androidx.palette.graphics.Target) -> c
androidx.palette.graphics.Target$Builder -> androidx.palette.graphics.Target$Builder:
    androidx.palette.graphics.Target mTarget -> a
androidx.preference.CheckBoxPreference -> androidx.preference.CheckBoxPreference:
    androidx.preference.CheckBoxPreference$Listener mListener -> S
    void syncCheckboxView(android.view.View) -> f
    1:1:void syncViewIfAccessibilityEnabled(android.view.View):0:0 -> performClick
    1:1:void performClick(android.view.View):0 -> performClick
androidx.preference.CheckBoxPreference$Listener -> androidx.preference.a:
    androidx.preference.CheckBoxPreference this$0 -> a
androidx.preference.CollapsiblePreferenceGroupController -> androidx.preference.d:
    androidx.preference.PreferenceGroupAdapter mPreferenceGroupAdapter -> a
    android.content.Context mContext -> b
    boolean mHasExpandablePreference -> c
    1:1:androidx.preference.CollapsiblePreferenceGroupController$ExpandButton createExpandButton(androidx.preference.PreferenceGroup,java.util.List):0:0 -> a
    1:1:java.util.List createInnerVisiblePreferencesList(androidx.preference.PreferenceGroup):0 -> a
    2:2:java.util.List createInnerVisiblePreferencesList(androidx.preference.PreferenceGroup):0:0 -> a
androidx.preference.CollapsiblePreferenceGroupController$1 -> androidx.preference.b:
    androidx.preference.CollapsiblePreferenceGroupController this$0 -> b
    androidx.preference.PreferenceGroup val$group -> a
androidx.preference.CollapsiblePreferenceGroupController$ExpandButton -> androidx.preference.c:
    long mId -> O
    1:1:void initLayout():0:0 -> <init>
    1:1:void <init>(android.content.Context,java.util.List,long):0 -> <init>
    2:2:void setSummary(java.util.List):0:0 -> <init>
    2:2:void <init>(android.content.Context,java.util.List,long):0 -> <init>
    3:3:void <init>(android.content.Context,java.util.List,long):0:0 -> <init>
androidx.preference.DialogPreference -> androidx.preference.DialogPreference:
    java.lang.CharSequence mDialogTitle -> O
    java.lang.CharSequence mDialogMessage -> P
    java.lang.CharSequence mPositiveButtonText -> R
    java.lang.CharSequence mNegativeButtonText -> S
    int mDialogLayoutResId -> T
    android.graphics.drawable.Drawable mDialogIcon -> Q
androidx.preference.DropDownPreference -> androidx.preference.DropDownPreference:
    android.widget.Spinner mSpinner -> b0
    android.widget.ArrayAdapter mAdapter -> a0
    android.content.Context mContext -> Z
    android.widget.AdapterView$OnItemSelectedListener mItemSelectedListener -> c0
    void updateEntries() -> f
androidx.preference.DropDownPreference$1 -> androidx.preference.e:
    androidx.preference.DropDownPreference this$0 -> a
androidx.preference.EditTextPreference -> androidx.preference.EditTextPreference:
    java.lang.String mText -> U
androidx.preference.EditTextPreference$SavedState -> androidx.preference.EditTextPreference$SavedState:
    java.lang.String text -> a
androidx.preference.EditTextPreference$SavedState$1 -> androidx.preference.f:
    1:1:androidx.preference.EditTextPreference$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.preference.EditTextPreference$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.preference.EditTextPreferenceDialogFragment -> androidx.preference.EditTextPreferenceDialogFragment:
    android.widget.EditText mEditText -> i
    java.lang.CharSequence mText -> j
    androidx.preference.EditTextPreference getEditTextPreference() -> a
androidx.preference.EditTextPreferenceDialogFragmentCompat -> androidx.preference.EditTextPreferenceDialogFragmentCompat:
    android.widget.EditText mEditText -> p0
    java.lang.CharSequence mText -> q0
    androidx.preference.EditTextPreference getEditTextPreference() -> G
androidx.preference.ListPreference -> androidx.preference.ListPreference:
    java.lang.String mValue -> W
    java.lang.String mSummary -> X
    boolean mValueSet -> Y
    java.lang.CharSequence[] mEntryValues -> V
    java.lang.CharSequence[] mEntries -> U
    1:1:int getValueIndex():0:0 -> getEntry
    1:1:java.lang.CharSequence getEntry():0 -> getEntry
    2:2:java.lang.CharSequence getEntry():0:0 -> getEntry
androidx.preference.ListPreference$SavedState -> androidx.preference.ListPreference$SavedState:
    java.lang.String value -> a
androidx.preference.ListPreference$SavedState$1 -> androidx.preference.g:
    1:1:androidx.preference.ListPreference$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.preference.ListPreference$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.preference.ListPreferenceDialogFragment -> androidx.preference.ListPreferenceDialogFragment:
    java.lang.CharSequence[] mEntries -> j
    java.lang.CharSequence[] mEntryValues -> k
    int mClickedDialogEntryIndex -> i
    1:1:androidx.preference.ListPreference getListPreference():0:0 -> onCreate
    1:1:void onCreate(android.os.Bundle):0 -> onCreate
    2:2:void onCreate(android.os.Bundle):0:0 -> onCreate
    1:1:androidx.preference.ListPreference getListPreference():0:0 -> onDialogClosed
    1:1:void onDialogClosed(boolean):0 -> onDialogClosed
    2:2:void onDialogClosed(boolean):0:0 -> onDialogClosed
androidx.preference.ListPreferenceDialogFragment$1 -> androidx.preference.h:
    androidx.preference.ListPreferenceDialogFragment this$0 -> a
androidx.preference.ListPreferenceDialogFragmentCompat -> androidx.preference.ListPreferenceDialogFragmentCompat:
    int mClickedDialogEntryIndex -> p0
    java.lang.CharSequence[] mEntryValues -> r0
    java.lang.CharSequence[] mEntries -> q0
    1:1:androidx.preference.ListPreference getListPreference():0:0 -> onCreate
    1:1:void onCreate(android.os.Bundle):0 -> onCreate
    2:2:void onCreate(android.os.Bundle):0:0 -> onCreate
    1:1:androidx.preference.ListPreference getListPreference():0:0 -> onDialogClosed
    1:1:void onDialogClosed(boolean):0 -> onDialogClosed
    2:2:void onDialogClosed(boolean):0:0 -> onDialogClosed
androidx.preference.ListPreferenceDialogFragmentCompat$1 -> androidx.preference.i:
    androidx.preference.ListPreferenceDialogFragmentCompat this$0 -> a
androidx.preference.MultiSelectListPreference -> androidx.preference.MultiSelectListPreference:
    java.util.Set mValues -> W
    java.lang.CharSequence[] mEntryValues -> V
    java.lang.CharSequence[] mEntries -> U
androidx.preference.MultiSelectListPreference$SavedState -> androidx.preference.MultiSelectListPreference$SavedState:
    java.util.Set mValues -> a
androidx.preference.MultiSelectListPreference$SavedState$1 -> androidx.preference.j:
    1:1:androidx.preference.MultiSelectListPreference$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.preference.MultiSelectListPreference$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.preference.MultiSelectListPreferenceDialogFragment -> androidx.preference.MultiSelectListPreferenceDialogFragment:
    java.lang.CharSequence[] mEntryValues -> l
    java.util.Set mNewValues -> i
    java.lang.CharSequence[] mEntries -> k
    boolean mPreferenceChanged -> j
    1:1:androidx.preference.internal.AbstractMultiSelectListPreference getListPreference():0:0 -> onCreate
    1:1:void onCreate(android.os.Bundle):0 -> onCreate
    2:2:void onCreate(android.os.Bundle):0:0 -> onCreate
    1:1:androidx.preference.internal.AbstractMultiSelectListPreference getListPreference():0:0 -> onDialogClosed
    1:1:void onDialogClosed(boolean):0 -> onDialogClosed
    2:2:void onDialogClosed(boolean):0:0 -> onDialogClosed
androidx.preference.MultiSelectListPreferenceDialogFragment$1 -> androidx.preference.k:
    androidx.preference.MultiSelectListPreferenceDialogFragment this$0 -> a
androidx.preference.MultiSelectListPreferenceDialogFragmentCompat -> androidx.preference.MultiSelectListPreferenceDialogFragmentCompat:
    java.lang.CharSequence[] mEntryValues -> s0
    boolean mPreferenceChanged -> q0
    java.lang.CharSequence[] mEntries -> r0
    java.util.Set mNewValues -> p0
    1:1:androidx.preference.internal.AbstractMultiSelectListPreference getListPreference():0:0 -> onCreate
    1:1:void onCreate(android.os.Bundle):0 -> onCreate
    2:2:void onCreate(android.os.Bundle):0:0 -> onCreate
    1:1:androidx.preference.internal.AbstractMultiSelectListPreference getListPreference():0:0 -> onDialogClosed
    1:1:void onDialogClosed(boolean):0 -> onDialogClosed
    2:2:void onDialogClosed(boolean):0:0 -> onDialogClosed
androidx.preference.MultiSelectListPreferenceDialogFragmentCompat$1 -> androidx.preference.l:
    androidx.preference.MultiSelectListPreferenceDialogFragmentCompat this$0 -> a
androidx.preference.Preference -> androidx.preference.Preference:
    android.content.Context mContext -> a
    int mIconResId -> l
    int mOrder -> h
    boolean mWasDetached -> L
    boolean mPersistent -> u
    java.lang.String mKey -> n
    int mLayoutResId -> G
    androidx.preference.Preference$OnPreferenceChangeInternalListener mListener -> I
    java.lang.String mFragment -> p
    java.lang.CharSequence mTitle -> j
    boolean mSelectable -> s
    java.lang.String mDependencyKey -> v
    boolean mParentDependencyMet -> y
    androidx.preference.Preference$OnPreferenceClickListener mOnClickListener -> g
    java.lang.Object mDefaultValue -> w
    boolean mIconSpaceReserved -> E
    android.content.Intent mIntent -> o
    boolean mAllowDividerAbove -> A
    boolean mHasSingleLineTitleAttr -> C
    androidx.preference.PreferenceManager mPreferenceManager -> b
    boolean mBaseMethodCalled -> M
    int mWidgetLayoutResId -> H
    int mViewId -> i
    long mId -> d
    androidx.preference.PreferenceDataStore mPreferenceDataStore -> c
    boolean mDependencyMet -> x
    boolean mEnabled -> r
    androidx.preference.Preference$OnPreferenceChangeListener mOnChangeListener -> f
    java.lang.CharSequence mSummary -> k
    boolean mRequiresKey -> t
    android.os.Bundle mExtras -> q
    android.view.View$OnClickListener mClickListener -> N
    boolean mVisible -> z
    boolean mHasId -> e
    java.util.List mDependents -> J
    boolean mShouldDisableView -> F
    android.graphics.drawable.Drawable mIcon -> m
    boolean mAllowDividerBelow -> B
    androidx.preference.PreferenceGroup mParentGroup -> K
    boolean mSingleLineTitle -> D
    void assignParent(androidx.preference.PreferenceGroup) -> a
    1:1:void registerDependent(androidx.preference.Preference):0:0 -> b
    1:1:void registerDependency():0 -> b
    2:2:void registerDependency():0:0 -> b
    void setEnabledStateOnViews(android.view.View,boolean) -> c
    void setOnPreferenceChangeInternalListener(androidx.preference.Preference$OnPreferenceChangeInternalListener) -> d
    1:1:void unregisterDependent(androidx.preference.Preference):0:0 -> e
    1:1:void unregisterDependency():0 -> e
    1:1:void dispatchSetInitialValue():0:0 -> onAttachedToHierarchy
    1:1:void onAttachedToHierarchy(androidx.preference.PreferenceManager):0 -> onAttachedToHierarchy
    1:1:void tryCommit(android.content.SharedPreferences$Editor):0:0 -> persistBoolean
    1:1:boolean persistBoolean(boolean):0 -> persistBoolean
    1:1:void tryCommit(android.content.SharedPreferences$Editor):0:0 -> persistFloat
    1:1:boolean persistFloat(float):0 -> persistFloat
    1:1:void tryCommit(android.content.SharedPreferences$Editor):0:0 -> persistInt
    1:1:boolean persistInt(int):0 -> persistInt
    1:1:void tryCommit(android.content.SharedPreferences$Editor):0:0 -> persistLong
    1:1:boolean persistLong(long):0 -> persistLong
    1:1:void tryCommit(android.content.SharedPreferences$Editor):0:0 -> persistString
    1:1:boolean persistString(java.lang.String):0 -> persistString
    1:1:void tryCommit(android.content.SharedPreferences$Editor):0:0 -> persistStringSet
    1:1:boolean persistStringSet(java.util.Set):0 -> persistStringSet
    1:1:void requireKey():0:0 -> setKey
    1:1:void setKey(java.lang.String):0 -> setKey
    1:1:java.lang.StringBuilder getFilterableStringBuilder():0:0 -> toString
    1:1:java.lang.String toString():0 -> toString
    2:2:java.lang.String toString():0:0 -> toString
androidx.preference.Preference$1 -> androidx.preference.m:
    androidx.preference.Preference this$0 -> a
androidx.preference.Preference$BaseSavedState$1 -> androidx.preference.n:
    1:1:androidx.preference.Preference$BaseSavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.preference.Preference$BaseSavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.preference.PreferenceDialogFragment -> androidx.preference.PreferenceDialogFragment:
    android.graphics.drawable.BitmapDrawable mDialogIcon -> g
    java.lang.CharSequence mDialogTitle -> b
    int mWhichButtonClicked -> h
    java.lang.CharSequence mPositiveButtonText -> c
    androidx.preference.DialogPreference mPreference -> a
    java.lang.CharSequence mNegativeButtonText -> d
    int mDialogLayoutRes -> f
    java.lang.CharSequence mDialogMessage -> e
    1:1:void requestInputMethod(android.app.Dialog):0:0 -> onCreateDialog
    1:1:android.app.Dialog onCreateDialog(android.os.Bundle):0 -> onCreateDialog
androidx.preference.PreferenceDialogFragmentCompat -> androidx.preference.PreferenceDialogFragmentCompat:
    androidx.preference.DialogPreference mPreference -> h0
    java.lang.CharSequence mPositiveButtonText -> j0
    android.graphics.drawable.BitmapDrawable mDialogIcon -> n0
    java.lang.CharSequence mDialogTitle -> i0
    java.lang.CharSequence mDialogMessage -> l0
    java.lang.CharSequence mNegativeButtonText -> k0
    int mWhichButtonClicked -> o0
    int mDialogLayoutRes -> m0
    1:1:void requestInputMethod(android.app.Dialog):0:0 -> onCreateDialog
    1:1:android.app.Dialog onCreateDialog(android.os.Bundle):0 -> onCreateDialog
androidx.preference.PreferenceFragment -> androidx.preference.PreferenceFragment:
    androidx.preference.PreferenceFragment$DividerDecoration mDividerDecoration -> g
    java.lang.Runnable mRequestFocus -> i
    androidx.recyclerview.widget.RecyclerView mList -> b
    int mLayoutResId -> f
    java.lang.Runnable mSelectPreferenceRunnable -> j
    android.content.Context mStyledContext -> e
    androidx.preference.PreferenceManager mPreferenceManager -> a
    boolean mHavePrefs -> c
    boolean mInitDone -> d
    android.os.Handler mHandler -> h
    void bindPreferences() -> a
    1:1:void requirePreferenceManager():0:0 -> addPreferencesFromResource
    1:1:void addPreferencesFromResource(int):0 -> addPreferencesFromResource
    2:2:void addPreferencesFromResource(int):0:0 -> addPreferencesFromResource
    3:3:void requirePreferenceManager():0:0 -> addPreferencesFromResource
    3:3:void addPreferencesFromResource(int):0 -> addPreferencesFromResource
    1:1:void unbindPreferences():0:0 -> onDestroyView
    1:1:void onDestroyView():0 -> onDestroyView
    2:2:void onDestroyView():0:0 -> onDestroyView
    1:1:void scrollToPreferenceInternal(androidx.preference.Preference,java.lang.String):0:0 -> scrollToPreference
    1:1:void scrollToPreference(androidx.preference.Preference):0 -> scrollToPreference
    2:2:void scrollToPreferenceInternal(androidx.preference.Preference,java.lang.String):0:0 -> scrollToPreference
    2:2:void scrollToPreference(java.lang.String):0 -> scrollToPreference
    1:1:void postBindPreferences():0:0 -> setPreferenceScreen
    1:1:void setPreferenceScreen(androidx.preference.PreferenceScreen):0 -> setPreferenceScreen
    1:1:void requirePreferenceManager():0:0 -> setPreferencesFromResource
    1:1:void setPreferencesFromResource(int,java.lang.String):0 -> setPreferencesFromResource
    2:2:void setPreferencesFromResource(int,java.lang.String):0:0 -> setPreferencesFromResource
    3:3:void requirePreferenceManager():0:0 -> setPreferencesFromResource
    3:3:void setPreferencesFromResource(int,java.lang.String):0 -> setPreferencesFromResource
androidx.preference.PreferenceFragment$1 -> androidx.preference.o:
    androidx.preference.PreferenceFragment this$0 -> a
androidx.preference.PreferenceFragment$2 -> androidx.preference.p:
    androidx.preference.PreferenceFragment this$0 -> a
androidx.preference.PreferenceFragment$3 -> androidx.preference.q:
    androidx.preference.PreferenceFragment this$0 -> c
    androidx.preference.Preference val$preference -> a
    java.lang.String val$key -> b
androidx.preference.PreferenceFragment$DividerDecoration -> androidx.preference.s:
    androidx.preference.PreferenceFragment this$0 -> d
    int mDividerHeight -> b
    android.graphics.drawable.Drawable mDivider -> a
    boolean mAllowDividerAfterLastItem -> c
    boolean shouldDrawDividerBelow(android.view.View,androidx.recyclerview.widget.RecyclerView) -> a
androidx.preference.PreferenceFragment$ScrollToPreferenceObserver -> androidx.preference.t:
    androidx.recyclerview.widget.RecyclerView$Adapter mAdapter -> a
    androidx.preference.Preference mPreference -> c
    androidx.recyclerview.widget.RecyclerView mList -> b
    java.lang.String mKey -> d
    void scrollToPreference() -> a
androidx.preference.PreferenceFragmentCompat -> androidx.preference.PreferenceFragmentCompat:
    int mLayoutResId -> d0
    android.content.Context mStyledContext -> c0
    java.lang.Runnable mSelectPreferenceRunnable -> h0
    boolean mHavePrefs -> a0
    java.lang.Runnable mRequestFocus -> g0
    androidx.preference.PreferenceManager mPreferenceManager -> Y
    boolean mInitDone -> b0
    androidx.recyclerview.widget.RecyclerView mList -> Z
    androidx.preference.PreferenceFragmentCompat$DividerDecoration mDividerDecoration -> e0
    android.os.Handler mHandler -> f0
    void bindPreferences() -> F
    1:1:void requirePreferenceManager():0:0 -> addPreferencesFromResource
    1:1:void addPreferencesFromResource(int):0 -> addPreferencesFromResource
    2:2:void addPreferencesFromResource(int):0:0 -> addPreferencesFromResource
    3:3:void requirePreferenceManager():0:0 -> addPreferencesFromResource
    3:3:void addPreferencesFromResource(int):0 -> addPreferencesFromResource
    1:1:void unbindPreferences():0:0 -> onDestroyView
    1:1:void onDestroyView():0 -> onDestroyView
    2:2:void onDestroyView():0:0 -> onDestroyView
    1:1:void scrollToPreferenceInternal(androidx.preference.Preference,java.lang.String):0:0 -> scrollToPreference
    1:1:void scrollToPreference(androidx.preference.Preference):0 -> scrollToPreference
    2:2:void scrollToPreferenceInternal(androidx.preference.Preference,java.lang.String):0:0 -> scrollToPreference
    2:2:void scrollToPreference(java.lang.String):0 -> scrollToPreference
    1:1:void postBindPreferences():0:0 -> setPreferenceScreen
    1:1:void setPreferenceScreen(androidx.preference.PreferenceScreen):0 -> setPreferenceScreen
    1:1:void requirePreferenceManager():0:0 -> setPreferencesFromResource
    1:1:void setPreferencesFromResource(int,java.lang.String):0 -> setPreferencesFromResource
    2:2:void setPreferencesFromResource(int,java.lang.String):0:0 -> setPreferencesFromResource
    3:3:void requirePreferenceManager():0:0 -> setPreferencesFromResource
    3:3:void setPreferencesFromResource(int,java.lang.String):0 -> setPreferencesFromResource
androidx.preference.PreferenceFragmentCompat$1 -> androidx.preference.u:
    androidx.preference.PreferenceFragmentCompat this$0 -> a
androidx.preference.PreferenceFragmentCompat$2 -> androidx.preference.v:
    androidx.preference.PreferenceFragmentCompat this$0 -> a
androidx.preference.PreferenceFragmentCompat$3 -> androidx.preference.w:
    androidx.preference.Preference val$preference -> a
    java.lang.String val$key -> b
    androidx.preference.PreferenceFragmentCompat this$0 -> c
androidx.preference.PreferenceFragmentCompat$DividerDecoration -> androidx.preference.x:
    androidx.preference.PreferenceFragmentCompat this$0 -> d
    int mDividerHeight -> b
    android.graphics.drawable.Drawable mDivider -> a
    boolean mAllowDividerAfterLastItem -> c
    boolean shouldDrawDividerBelow(android.view.View,androidx.recyclerview.widget.RecyclerView) -> a
androidx.preference.PreferenceFragmentCompat$ScrollToPreferenceObserver -> androidx.preference.y:
    androidx.recyclerview.widget.RecyclerView$Adapter mAdapter -> a
    androidx.preference.Preference mPreference -> c
    androidx.recyclerview.widget.RecyclerView mList -> b
    java.lang.String mKey -> d
    void scrollToPreference() -> a
androidx.preference.PreferenceGroup -> androidx.preference.PreferenceGroup:
    android.os.Handler mHandler -> V
    java.util.List mPreferenceList -> O
    boolean mOrderingAsAdded -> P
    androidx.collection.SimpleArrayMap mIdRecycleCache -> U
    java.lang.Runnable mClearRecycleCacheRunnable -> W
    boolean mAttachedToHierarchy -> R
    int mInitialExpandedChildrenCount -> S
    int mCurrentPreferenceOrder -> Q
    androidx.preference.PreferenceGroup$OnExpandButtonClickListener mOnExpandButtonClickListener -> T
    boolean removePreferenceInt(androidx.preference.Preference) -> f
    void sortPreferences() -> g
androidx.preference.PreferenceGroup$1 -> androidx.preference.z:
    androidx.preference.PreferenceGroup this$0 -> a
androidx.preference.PreferenceGroup$SavedState -> androidx.preference.PreferenceGroup$SavedState:
    int mInitialExpandedChildrenCount -> a
androidx.preference.PreferenceGroup$SavedState$1 -> androidx.preference.a0:
    1:1:androidx.preference.PreferenceGroup$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.preference.PreferenceGroup$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.preference.PreferenceGroupAdapter -> androidx.preference.PreferenceGroupAdapter:
    java.util.List mPreferenceLayouts -> f
    androidx.preference.PreferenceGroup mPreferenceGroup -> c
    java.util.List mPreferenceListInternal -> e
    java.util.List mPreferenceList -> d
    androidx.preference.CollapsiblePreferenceGroupController mPreferenceGroupController -> i
    java.lang.Runnable mSyncRunnable -> j
    androidx.preference.PreferenceGroupAdapter$PreferenceLayout mTempPreferenceLayout -> g
    android.os.Handler mHandler -> h
    1:1:void <init>(androidx.preference.PreferenceGroup,android.os.Handler):0:0 -> <init>
    1:1:void <init>(androidx.preference.PreferenceGroup):0 -> <init>
    androidx.preference.PreferenceGroupAdapter$PreferenceLayout createPreferenceLayout(androidx.preference.Preference,androidx.preference.PreferenceGroupAdapter$PreferenceLayout) -> a
    1:1:void addPreferenceClassName(androidx.preference.Preference):0:0 -> b
    1:1:void flattenPreferenceGroup(java.util.List,androidx.preference.PreferenceGroup):0 -> b
    2:2:void flattenPreferenceGroup(java.util.List,androidx.preference.PreferenceGroup):0:0 -> b
    void syncMyPreferences() -> c
androidx.preference.PreferenceGroupAdapter$1 -> androidx.preference.b0:
    androidx.preference.PreferenceGroupAdapter this$0 -> a
androidx.preference.PreferenceGroupAdapter$2 -> androidx.preference.c0:
    java.util.List val$visiblePreferenceList -> b
    java.util.List val$oldVisibleList -> a
    androidx.preference.PreferenceManager$PreferenceComparisonCallback val$comparisonCallback -> c
androidx.preference.PreferenceGroupAdapter$PreferenceLayout -> androidx.preference.d0:
    int mWidgetResId -> b
    java.lang.String mName -> c
    int mResId -> a
androidx.preference.PreferenceInflater -> androidx.preference.e0:
    android.content.Context mContext -> a
    java.lang.Class[] CONSTRUCTOR_SIGNATURE -> e
    java.lang.Object[] mConstructorArgs -> b
    java.lang.String[] mDefaultPackages -> d
    java.util.HashMap CONSTRUCTOR_MAP -> f
    androidx.preference.PreferenceManager mPreferenceManager -> c
    1:1:void init(androidx.preference.PreferenceManager):0:0 -> <init>
    1:1:void <init>(android.content.Context,androidx.preference.PreferenceManager):0 -> <init>
    2:2:void setDefaultPackages(java.lang.String[]):0:0 -> <init>
    2:2:void init(androidx.preference.PreferenceManager):0 -> <init>
    2:2:void <init>(android.content.Context,androidx.preference.PreferenceManager):0 -> <init>
    androidx.preference.Preference createItem(java.lang.String,java.lang.String[],android.util.AttributeSet) -> a
    1:1:androidx.preference.Preference onCreateItem(java.lang.String,android.util.AttributeSet):0:0 -> b
    1:1:androidx.preference.Preference createItemFromTag(java.lang.String,android.util.AttributeSet):0 -> b
    2:2:androidx.preference.Preference createItemFromTag(java.lang.String,android.util.AttributeSet):0:0 -> b
    1:1:android.content.Context getContext():0:0 -> c
    1:1:void rInflate(org.xmlpull.v1.XmlPullParser,androidx.preference.Preference,android.util.AttributeSet):0 -> c
    2:2:void rInflate(org.xmlpull.v1.XmlPullParser,androidx.preference.Preference,android.util.AttributeSet):0:0 -> c
    3:3:android.content.Context getContext():0:0 -> c
    3:3:void rInflate(org.xmlpull.v1.XmlPullParser,androidx.preference.Preference,android.util.AttributeSet):0 -> c
    4:4:void rInflate(org.xmlpull.v1.XmlPullParser,androidx.preference.Preference,android.util.AttributeSet):0:0 -> c
    5:5:void skipCurrentTag(org.xmlpull.v1.XmlPullParser):0:0 -> c
    5:5:void rInflate(org.xmlpull.v1.XmlPullParser,androidx.preference.Preference,android.util.AttributeSet):0 -> c
    6:6:void rInflate(org.xmlpull.v1.XmlPullParser,androidx.preference.Preference,android.util.AttributeSet):0:0 -> c
    1:1:android.content.Context getContext():0:0 -> inflate
    1:1:androidx.preference.Preference inflate(int,androidx.preference.PreferenceGroup):0 -> inflate
    2:2:androidx.preference.Preference inflate(int,androidx.preference.PreferenceGroup):0:0 -> inflate
    3:3:androidx.preference.PreferenceGroup onMergeRoots(androidx.preference.PreferenceGroup,androidx.preference.PreferenceGroup):0:0 -> inflate
    3:3:androidx.preference.Preference inflate(org.xmlpull.v1.XmlPullParser,androidx.preference.PreferenceGroup):0 -> inflate
    4:4:androidx.preference.Preference inflate(org.xmlpull.v1.XmlPullParser,androidx.preference.PreferenceGroup):0:0 -> inflate
androidx.preference.PreferenceManager -> androidx.preference.PreferenceManager:
    android.content.Context mContext -> a
    java.lang.String mSharedPreferencesName -> g
    int mSharedPreferencesMode -> h
    int mStorage -> i
    long mNextId -> b
    androidx.preference.PreferenceDataStore mPreferenceDataStore -> d
    androidx.preference.PreferenceManager$OnPreferenceTreeClickListener mOnPreferenceTreeClickListener -> l
    androidx.preference.PreferenceManager$OnDisplayPreferenceDialogListener mOnDisplayPreferenceDialogListener -> m
    android.content.SharedPreferences mSharedPreferences -> c
    boolean mNoCommit -> f
    androidx.preference.PreferenceManager$PreferenceComparisonCallback mPreferenceComparisonCallback -> k
    androidx.preference.PreferenceManager$OnNavigateToScreenListener mOnNavigateToScreenListener -> n
    android.content.SharedPreferences$Editor mEditor -> e
    androidx.preference.PreferenceScreen mPreferenceScreen -> j
    java.lang.String getDefaultSharedPreferencesName(android.content.Context) -> a
    android.content.SharedPreferences$Editor getEditor() -> b
    long getNextId() -> c
    boolean shouldCommit() -> d
    1:1:void setNoCommit(boolean):0:0 -> inflateFromResource
    1:1:androidx.preference.PreferenceScreen inflateFromResource(android.content.Context,int,androidx.preference.PreferenceScreen):0 -> inflateFromResource
    2:2:androidx.preference.PreferenceScreen inflateFromResource(android.content.Context,int,androidx.preference.PreferenceScreen):0:0 -> inflateFromResource
    3:3:void setNoCommit(boolean):0:0 -> inflateFromResource
    3:3:androidx.preference.PreferenceScreen inflateFromResource(android.content.Context,int,androidx.preference.PreferenceScreen):0 -> inflateFromResource
androidx.preference.PreferenceRecyclerViewAccessibilityDelegate -> androidx.preference.PreferenceRecyclerViewAccessibilityDelegate:
    androidx.core.view.AccessibilityDelegateCompat mItemDelegate -> g
    androidx.recyclerview.widget.RecyclerView mRecyclerView -> e
    androidx.core.view.AccessibilityDelegateCompat mDefaultItemDelegate -> f
androidx.preference.PreferenceRecyclerViewAccessibilityDelegate$1 -> androidx.preference.f0:
    androidx.preference.PreferenceRecyclerViewAccessibilityDelegate this$0 -> c
androidx.preference.PreferenceScreen -> androidx.preference.PreferenceScreen:
    boolean mShouldUseGeneratedIds -> X
androidx.preference.PreferenceViewHolder -> androidx.preference.PreferenceViewHolder:
    android.util.SparseArray mCachedViews -> s
    boolean mDividerAllowedBelow -> u
    boolean mDividerAllowedAbove -> t
androidx.preference.SeekBarPreference -> androidx.preference.SeekBarPreference:
    int mSeekBarValue -> O
    android.widget.TextView mSeekBarValueTextView -> U
    boolean mAdjustable -> V
    boolean mShowSeekBarValue -> W
    android.view.View$OnKeyListener mSeekBarKeyListener -> Y
    int mSeekBarIncrement -> R
    android.widget.SeekBar$OnSeekBarChangeListener mSeekBarChangeListener -> X
    android.widget.SeekBar mSeekBar -> T
    int mMin -> P
    boolean mTrackingTouch -> S
    int mMax -> Q
    void setValueInternal(int,boolean) -> f
    void syncValueInternal(android.widget.SeekBar) -> g
androidx.preference.SeekBarPreference$1 -> androidx.preference.g0:
    androidx.preference.SeekBarPreference this$0 -> a
androidx.preference.SeekBarPreference$2 -> androidx.preference.h0:
    androidx.preference.SeekBarPreference this$0 -> a
androidx.preference.SeekBarPreference$SavedState -> androidx.preference.SeekBarPreference$SavedState:
    int min -> b
    int max -> c
    int seekBarValue -> a
androidx.preference.SeekBarPreference$SavedState$1 -> androidx.preference.i0:
    1:1:androidx.preference.SeekBarPreference$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.preference.SeekBarPreference$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.preference.SwitchPreference -> androidx.preference.SwitchPreference:
    androidx.preference.SwitchPreference$Listener mListener -> S
    java.lang.CharSequence mSwitchOn -> T
    java.lang.CharSequence mSwitchOff -> U
    void syncSwitchView(android.view.View) -> f
    1:1:void syncViewIfAccessibilityEnabled(android.view.View):0:0 -> performClick
    1:1:void performClick(android.view.View):0 -> performClick
androidx.preference.SwitchPreference$Listener -> androidx.preference.j0:
    androidx.preference.SwitchPreference this$0 -> a
androidx.preference.SwitchPreferenceCompat -> androidx.preference.SwitchPreferenceCompat:
    java.lang.CharSequence mSwitchOn -> T
    java.lang.CharSequence mSwitchOff -> U
    androidx.preference.SwitchPreferenceCompat$Listener mListener -> S
    void syncSwitchView(android.view.View) -> f
    1:1:void syncViewIfAccessibilityEnabled(android.view.View):0:0 -> performClick
    1:1:void performClick(android.view.View):0 -> performClick
androidx.preference.SwitchPreferenceCompat$Listener -> androidx.preference.k0:
    androidx.preference.SwitchPreferenceCompat this$0 -> a
androidx.preference.TwoStatePreference -> androidx.preference.TwoStatePreference:
    java.lang.CharSequence mSummaryOn -> O
    java.lang.CharSequence mSummaryOff -> P
    boolean mCheckedSet -> Q
    boolean mDisableDependentsState -> R
androidx.preference.TwoStatePreference$SavedState -> androidx.preference.TwoStatePreference$SavedState:
    boolean checked -> a
androidx.preference.TwoStatePreference$SavedState$1 -> androidx.preference.l0:
    1:1:androidx.preference.TwoStatePreference$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.preference.TwoStatePreference$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.preference.internal.PreferenceImageView -> androidx.preference.internal.PreferenceImageView:
    int mMaxHeight -> b
    int mMaxWidth -> a
androidx.print.PrintHelper -> androidx.print.PrintHelper:
    android.content.Context mContext -> a
    android.graphics.BitmapFactory$Options mDecodeOptions -> b
    int mOrientation -> f
    java.lang.Object mLock -> c
    int mScaleMode -> d
    int mColorMode -> e
    android.graphics.Bitmap convertBitmapForColorMode(android.graphics.Bitmap,int) -> a
    android.graphics.Bitmap loadBitmap(android.net.Uri,android.graphics.BitmapFactory$Options) -> b
    android.graphics.Bitmap loadConstrainedBitmap(android.net.Uri) -> c
    void writeBitmap(android.print.PrintAttributes,int,android.graphics.Bitmap,android.os.ParcelFileDescriptor,android.os.CancellationSignal,android.print.PrintDocumentAdapter$WriteResultCallback) -> d
    1:1:boolean isPortrait(android.graphics.Bitmap):0:0 -> printBitmap
    1:1:void printBitmap(java.lang.String,android.graphics.Bitmap,androidx.print.PrintHelper$OnPrintFinishCallback):0 -> printBitmap
    2:2:void printBitmap(java.lang.String,android.graphics.Bitmap,androidx.print.PrintHelper$OnPrintFinishCallback):0:0 -> printBitmap
androidx.print.PrintHelper$1 -> androidx.print.a:
    androidx.print.PrintHelper this$0 -> h
    android.graphics.Bitmap val$bitmap -> c
    android.os.ParcelFileDescriptor val$fileDescriptor -> f
    android.print.PrintDocumentAdapter$WriteResultCallback val$writeResultCallback -> g
    android.print.PrintAttributes val$attributes -> d
    android.os.CancellationSignal val$cancellationSignal -> a
    android.print.PrintAttributes val$pdfAttributes -> b
    int val$fittingMode -> e
    1:1:java.lang.Throwable doInBackground(java.lang.Void[]):0:0 -> doInBackground
    1:1:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    2:2:android.graphics.Matrix androidx.print.PrintHelper.getMatrix(int,int,android.graphics.RectF,int):0:0 -> doInBackground
    2:2:java.lang.Throwable doInBackground(java.lang.Void[]):0 -> doInBackground
    2:2:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    3:3:java.lang.Throwable doInBackground(java.lang.Void[]):0:0 -> doInBackground
    3:3:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    1:1:void onPostExecute(java.lang.Throwable):0:0 -> onPostExecute
    1:1:void onPostExecute(java.lang.Object):0 -> onPostExecute
androidx.print.PrintHelper$PrintBitmapAdapter -> androidx.print.b:
    androidx.print.PrintHelper this$0 -> f
    android.graphics.Bitmap mBitmap -> c
    android.print.PrintAttributes mAttributes -> e
    androidx.print.PrintHelper$OnPrintFinishCallback mCallback -> d
    java.lang.String mJobName -> a
    int mFittingMode -> b
androidx.print.PrintHelper$PrintUriAdapter -> androidx.print.e:
    androidx.print.PrintHelper$OnPrintFinishCallback mCallback -> c
    androidx.print.PrintHelper this$0 -> h
    android.os.AsyncTask mLoadBitmap -> f
    android.print.PrintAttributes mAttributes -> e
    android.graphics.Bitmap mBitmap -> g
    java.lang.String mJobName -> a
    int mFittingMode -> d
    android.net.Uri mImageFile -> b
    void cancelLoad() -> a
androidx.print.PrintHelper$PrintUriAdapter$1 -> androidx.print.d:
    android.print.PrintAttributes val$oldPrintAttributes -> c
    androidx.print.PrintHelper$PrintUriAdapter this$1 -> e
    android.print.PrintDocumentAdapter$LayoutResultCallback val$layoutResultCallback -> d
    android.os.CancellationSignal val$cancellationSignal -> a
    android.print.PrintAttributes val$newPrintAttributes -> b
    1:1:android.graphics.Bitmap doInBackground(android.net.Uri[]):0:0 -> doInBackground
    1:1:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    1:1:void onCancelled(android.graphics.Bitmap):0:0 -> onCancelled
    1:1:void onCancelled(java.lang.Object):0 -> onCancelled
    1:1:void onPostExecute(android.graphics.Bitmap):0:0 -> onPostExecute
    1:1:void onPostExecute(java.lang.Object):0 -> onPostExecute
    2:2:boolean androidx.print.PrintHelper.isPortrait(android.graphics.Bitmap):0:0 -> onPostExecute
    2:2:void onPostExecute(android.graphics.Bitmap):0 -> onPostExecute
    2:2:void onPostExecute(java.lang.Object):0 -> onPostExecute
    3:3:void onPostExecute(android.graphics.Bitmap):0:0 -> onPostExecute
    3:3:void onPostExecute(java.lang.Object):0 -> onPostExecute
androidx.print.PrintHelper$PrintUriAdapter$1$1 -> androidx.print.c:
    androidx.print.PrintHelper$PrintUriAdapter$1 this$2 -> a
androidx.recyclerview.widget.AdapterHelper -> androidx.recyclerview.widget.b:
    androidx.recyclerview.widget.AdapterHelper$Callback mCallback -> d
    int mExistingUpdateTypes -> f
    androidx.core.util.Pools$Pool mUpdateOpPool -> a
    java.util.ArrayList mPostponedList -> c
    java.util.ArrayList mPendingUpdates -> b
    androidx.recyclerview.widget.OpReorderer mOpReorderer -> e
    1:1:void <init>(androidx.recyclerview.widget.AdapterHelper$Callback,boolean):0:0 -> <init>
    1:1:void <init>(androidx.recyclerview.widget.AdapterHelper$Callback):0 -> <init>
    boolean canFindInPreLayout(int) -> a
    1:1:void androidx.recyclerview.widget.RecyclerView$6.onDispatchSecondPass(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> b
    1:1:void consumePostponedUpdates():0 -> b
    2:2:void consumePostponedUpdates():0:0 -> b
    1:1:void androidx.recyclerview.widget.RecyclerView$6.onDispatchSecondPass(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> c
    1:1:void consumeUpdatesInOnePass():0 -> c
    2:2:void consumeUpdatesInOnePass():0:0 -> c
    3:3:void androidx.recyclerview.widget.RecyclerView$6.onDispatchSecondPass(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> c
    3:3:void consumeUpdatesInOnePass():0 -> c
    4:4:void consumeUpdatesInOnePass():0:0 -> c
    5:5:void androidx.recyclerview.widget.RecyclerView$6.onDispatchSecondPass(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> c
    5:5:void consumeUpdatesInOnePass():0 -> c
    6:6:void consumeUpdatesInOnePass():0:0 -> c
    7:7:void androidx.recyclerview.widget.RecyclerView$6.offsetPositionsForRemovingInvisible(int,int):0:0 -> c
    7:7:void consumeUpdatesInOnePass():0 -> c
    8:8:void consumeUpdatesInOnePass():0:0 -> c
    9:9:void androidx.recyclerview.widget.RecyclerView$6.onDispatchSecondPass(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> c
    9:9:void consumeUpdatesInOnePass():0 -> c
    10:10:void consumeUpdatesInOnePass():0:0 -> c
    1:1:void recycleUpdateOp(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> d
    1:1:void dispatchAndUpdateViewHolders(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0 -> d
    2:2:void dispatchAndUpdateViewHolders(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> d
    3:3:void recycleUpdateOp(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> d
    3:3:void dispatchAndUpdateViewHolders(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0 -> d
    4:4:void dispatchAndUpdateViewHolders(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> d
    5:5:void recycleUpdateOp(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> d
    5:5:void dispatchAndUpdateViewHolders(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0 -> d
    6:6:void dispatchAndUpdateViewHolders(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> d
    1:1:void androidx.recyclerview.widget.RecyclerView$6.onDispatchFirstPass(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> e
    1:1:void dispatchFirstPassAndUpdateViewHolders(androidx.recyclerview.widget.AdapterHelper$UpdateOp,int):0 -> e
    2:2:void dispatchFirstPassAndUpdateViewHolders(androidx.recyclerview.widget.AdapterHelper$UpdateOp,int):0:0 -> e
    3:3:void androidx.recyclerview.widget.RecyclerView$6.offsetPositionsForRemovingInvisible(int,int):0:0 -> e
    3:3:void dispatchFirstPassAndUpdateViewHolders(androidx.recyclerview.widget.AdapterHelper$UpdateOp,int):0 -> e
    int findPositionOffset(int,int) -> f
    boolean hasAnyUpdateTypes(int) -> g
    boolean hasPendingUpdates() -> h
    boolean onItemRangeChanged(int,int,java.lang.Object) -> i
    boolean onItemRangeInserted(int,int) -> j
    boolean onItemRangeMoved(int,int,int) -> k
    boolean onItemRangeRemoved(int,int) -> l
    1:1:void androidx.recyclerview.widget.RecyclerView$6.offsetPositionsForRemovingLaidOutOrNewView(int,int):0:0 -> m
    1:1:void postponeAndUpdateViewHolders(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0 -> m
    2:2:void postponeAndUpdateViewHolders(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> m
    1:1:void androidx.recyclerview.widget.OpReorderer.reorderOps(java.util.List):0:0 -> n
    1:1:void preProcess():0 -> n
    2:2:int androidx.recyclerview.widget.OpReorderer.getLastMoveOutOfOrder(java.util.List):0:0 -> n
    2:2:void androidx.recyclerview.widget.OpReorderer.reorderOps(java.util.List):0 -> n
    2:2:void preProcess():0 -> n
    3:3:void androidx.recyclerview.widget.OpReorderer.swapMoveOp(java.util.List,int,int):0:0 -> n
    3:3:void androidx.recyclerview.widget.OpReorderer.reorderOps(java.util.List):0 -> n
    3:3:void preProcess():0 -> n
    4:4:void androidx.recyclerview.widget.OpReorderer.swapMoveUpdate(java.util.List,int,androidx.recyclerview.widget.AdapterHelper$UpdateOp,int,androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> n
    4:4:void androidx.recyclerview.widget.OpReorderer.swapMoveOp(java.util.List,int,int):0 -> n
    4:4:void androidx.recyclerview.widget.OpReorderer.reorderOps(java.util.List):0 -> n
    4:4:void preProcess():0 -> n
    5:5:void androidx.recyclerview.widget.OpReorderer.swapMoveRemove(java.util.List,int,androidx.recyclerview.widget.AdapterHelper$UpdateOp,int,androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> n
    5:5:void androidx.recyclerview.widget.OpReorderer.swapMoveOp(java.util.List,int,int):0 -> n
    5:5:void androidx.recyclerview.widget.OpReorderer.reorderOps(java.util.List):0 -> n
    5:5:void preProcess():0 -> n
    6:6:void androidx.recyclerview.widget.OpReorderer.swapMoveAdd(java.util.List,int,androidx.recyclerview.widget.AdapterHelper$UpdateOp,int,androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> n
    6:6:void androidx.recyclerview.widget.OpReorderer.swapMoveOp(java.util.List,int,int):0 -> n
    6:6:void androidx.recyclerview.widget.OpReorderer.reorderOps(java.util.List):0 -> n
    6:6:void preProcess():0 -> n
    7:7:void preProcess():0:0 -> n
    8:8:void applyMove(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> n
    8:8:void preProcess():0 -> n
    9:9:void applyUpdate(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> n
    9:9:void preProcess():0 -> n
    10:10:void recycleUpdateOp(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> n
    10:10:void applyUpdate(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0 -> n
    10:10:void preProcess():0 -> n
    11:11:void applyUpdate(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> n
    11:11:void preProcess():0 -> n
    12:12:void applyRemove(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> n
    12:12:void preProcess():0 -> n
    13:13:void recycleUpdateOp(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> n
    13:13:void applyRemove(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0 -> n
    13:13:void preProcess():0 -> n
    14:14:void applyRemove(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> n
    14:14:void preProcess():0 -> n
    15:15:void applyAdd(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> n
    15:15:void preProcess():0 -> n
    16:16:void preProcess():0:0 -> n
    void recycleUpdateOpsAndClearList(java.util.List) -> o
    void reset() -> p
    1:1:int updatePositionWithPostponed(int,int):0:0 -> q
    2:2:void recycleUpdateOp(androidx.recyclerview.widget.AdapterHelper$UpdateOp):0:0 -> q
    2:2:int updatePositionWithPostponed(int,int):0 -> q
androidx.recyclerview.widget.AdapterHelper$UpdateOp -> androidx.recyclerview.widget.a:
    java.lang.Object payload -> c
    int itemCount -> d
    int positionStart -> b
    int cmd -> a
    1:1:java.lang.String cmdToString():0:0 -> toString
    1:1:java.lang.String toString():0 -> toString
    2:2:java.lang.String toString():0:0 -> toString
androidx.recyclerview.widget.AdapterListUpdateCallback -> androidx.recyclerview.widget.AdapterListUpdateCallback:
    androidx.recyclerview.widget.RecyclerView$Adapter mAdapter -> a
androidx.recyclerview.widget.AsyncDifferConfig -> androidx.recyclerview.widget.AsyncDifferConfig:
    java.util.concurrent.Executor mMainThreadExecutor -> a
    java.util.concurrent.Executor mBackgroundThreadExecutor -> b
    androidx.recyclerview.widget.DiffUtil$ItemCallback mDiffCallback -> c
androidx.recyclerview.widget.AsyncDifferConfig$Builder -> androidx.recyclerview.widget.AsyncDifferConfig$Builder:
    java.lang.Object sExecutorLock -> d
    java.util.concurrent.Executor mMainThreadExecutor -> a
    java.util.concurrent.Executor mBackgroundThreadExecutor -> b
    java.util.concurrent.Executor sDiffExecutor -> e
    androidx.recyclerview.widget.DiffUtil$ItemCallback mDiffCallback -> c
androidx.recyclerview.widget.AsyncListDiffer -> androidx.recyclerview.widget.AsyncListDiffer:
    androidx.recyclerview.widget.AsyncDifferConfig mConfig -> b
    androidx.recyclerview.widget.ListUpdateCallback mUpdateCallback -> a
    java.util.List mReadOnlyList -> e
    java.util.List mList -> d
    java.util.concurrent.Executor mMainThreadExecutor -> c
    int mMaxScheduledGeneration -> f
    java.util.concurrent.Executor sMainThreadExecutor -> g
    void latchList(java.util.List,androidx.recyclerview.widget.DiffUtil$DiffResult) -> a
androidx.recyclerview.widget.AsyncListDiffer$1 -> androidx.recyclerview.widget.e:
    java.util.List val$newList -> b
    java.util.List val$oldList -> a
    int val$runGeneration -> c
    androidx.recyclerview.widget.AsyncListDiffer this$0 -> d
androidx.recyclerview.widget.AsyncListDiffer$1$1 -> androidx.recyclerview.widget.c:
    androidx.recyclerview.widget.AsyncListDiffer$1 this$1 -> a
androidx.recyclerview.widget.AsyncListDiffer$1$2 -> androidx.recyclerview.widget.d:
    androidx.recyclerview.widget.DiffUtil$DiffResult val$result -> a
    androidx.recyclerview.widget.AsyncListDiffer$1 this$1 -> b
androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor -> androidx.recyclerview.widget.f:
    android.os.Handler mHandler -> a
androidx.recyclerview.widget.AsyncListUtil -> androidx.recyclerview.widget.AsyncListUtil:
    int mDisplayedGeneration -> n
    int mRequestedGeneration -> o
    int mScrollHint -> l
    int mItemCount -> m
    androidx.recyclerview.widget.TileList mTileList -> e
    androidx.recyclerview.widget.AsyncListUtil$ViewCallback mViewCallback -> d
    androidx.recyclerview.widget.AsyncListUtil$DataCallback mDataCallback -> c
    boolean mAllowScrollHints -> k
    androidx.recyclerview.widget.ThreadUtil$MainThreadCallback mMainThreadProxy -> f
    int mTileSize -> b
    int[] mTmpRange -> h
    int[] mPrevRange -> i
    android.util.SparseIntArray mMissingPositions -> p
    androidx.recyclerview.widget.ThreadUtil$BackgroundCallback mBackgroundCallback -> r
    androidx.recyclerview.widget.ThreadUtil$MainThreadCallback mMainThreadCallback -> q
    int[] mTmpRangeExtended -> j
    java.lang.Class mTClass -> a
    androidx.recyclerview.widget.ThreadUtil$BackgroundCallback mBackgroundProxy -> g
    1:1:androidx.recyclerview.widget.ThreadUtil$MainThreadCallback androidx.recyclerview.widget.MessageThreadUtil.getMainThreadProxy(androidx.recyclerview.widget.ThreadUtil$MainThreadCallback):0:0 -> <init>
    1:1:void <init>(java.lang.Class,int,androidx.recyclerview.widget.AsyncListUtil$DataCallback,androidx.recyclerview.widget.AsyncListUtil$ViewCallback):0 -> <init>
    2:2:void <init>(java.lang.Class,int,androidx.recyclerview.widget.AsyncListUtil$DataCallback,androidx.recyclerview.widget.AsyncListUtil$ViewCallback):0:0 -> <init>
    3:3:androidx.recyclerview.widget.ThreadUtil$BackgroundCallback androidx.recyclerview.widget.MessageThreadUtil.getBackgroundProxy(androidx.recyclerview.widget.ThreadUtil$BackgroundCallback):0:0 -> <init>
    3:3:void <init>(java.lang.Class,int,androidx.recyclerview.widget.AsyncListUtil$DataCallback,androidx.recyclerview.widget.AsyncListUtil$ViewCallback):0 -> <init>
    4:4:void <init>(java.lang.Class,int,androidx.recyclerview.widget.AsyncListUtil$DataCallback,androidx.recyclerview.widget.AsyncListUtil$ViewCallback):0:0 -> <init>
    void updateRange() -> a
    1:1:boolean isRefreshPending():0:0 -> getItem
    1:1:java.lang.Object getItem(int):0 -> getItem
    2:2:java.lang.Object getItem(int):0:0 -> getItem
    1:1:boolean isRefreshPending():0:0 -> onRangeChanged
    1:1:void onRangeChanged():0 -> onRangeChanged
    2:2:void onRangeChanged():0:0 -> onRangeChanged
androidx.recyclerview.widget.AsyncListUtil$1 -> androidx.recyclerview.widget.g:
    androidx.recyclerview.widget.AsyncListUtil this$0 -> a
    1:1:boolean isRequestedGeneration(int):0:0 -> addTile
    1:1:void addTile(int,androidx.recyclerview.widget.TileList$Tile):0 -> addTile
    2:2:void addTile(int,androidx.recyclerview.widget.TileList$Tile):0:0 -> addTile
    1:1:boolean isRequestedGeneration(int):0:0 -> removeTile
    1:1:void removeTile(int,int):0 -> removeTile
    2:2:void removeTile(int,int):0:0 -> removeTile
    1:1:boolean isRequestedGeneration(int):0:0 -> updateItemCount
    1:1:void updateItemCount(int,int):0 -> updateItemCount
    2:2:void updateItemCount(int,int):0:0 -> updateItemCount
    3:3:void recycleAllTiles():0:0 -> updateItemCount
    3:3:void updateItemCount(int,int):0 -> updateItemCount
    4:4:void updateItemCount(int,int):0:0 -> updateItemCount
androidx.recyclerview.widget.AsyncListUtil$2 -> androidx.recyclerview.widget.h:
    android.util.SparseBooleanArray mLoadedTiles -> b
    int mLastRequiredTileStart -> f
    androidx.recyclerview.widget.TileList$Tile mRecycledRoot -> a
    int mItemCount -> d
    int mFirstRequiredTileStart -> e
    androidx.recyclerview.widget.AsyncListUtil this$0 -> g
    int mGeneration -> c
    void requestTiles(int,int,int,boolean) -> a
    1:1:boolean isTileLoaded(int):0:0 -> loadTile
    1:1:void loadTile(int,int):0 -> loadTile
    2:2:androidx.recyclerview.widget.TileList$Tile acquireTile():0:0 -> loadTile
    2:2:void loadTile(int,int):0 -> loadTile
    3:3:void loadTile(int,int):0:0 -> loadTile
    4:4:void flushTileCache(int):0:0 -> loadTile
    4:4:void loadTile(int,int):0 -> loadTile
    5:5:void removeTile(int):0:0 -> loadTile
    5:5:void flushTileCache(int):0 -> loadTile
    5:5:void loadTile(int,int):0 -> loadTile
    6:6:void addTile(androidx.recyclerview.widget.TileList$Tile):0:0 -> loadTile
    6:6:void loadTile(int,int):0 -> loadTile
    1:1:int getTileStart(int):0:0 -> updateRange
    1:1:void updateRange(int,int,int,int,int):0 -> updateRange
    2:2:void updateRange(int,int,int,int,int):0:0 -> updateRange
    3:3:int getTileStart(int):0:0 -> updateRange
    3:3:void updateRange(int,int,int,int,int):0 -> updateRange
    4:4:void updateRange(int,int,int,int,int):0:0 -> updateRange
androidx.recyclerview.widget.BatchingListUpdateCallback -> androidx.recyclerview.widget.BatchingListUpdateCallback:
    androidx.recyclerview.widget.ListUpdateCallback mWrapped -> a
    java.lang.Object mLastEventPayload -> e
    int mLastEventCount -> d
    int mLastEventType -> b
    int mLastEventPosition -> c
androidx.recyclerview.widget.ChildHelper -> androidx.recyclerview.widget.j:
    androidx.recyclerview.widget.ChildHelper$Bucket mBucket -> b
    java.util.List mHiddenViews -> c
    androidx.recyclerview.widget.ChildHelper$Callback mCallback -> a
    1:1:void androidx.recyclerview.widget.RecyclerView$5.addView(android.view.View,int):0:0 -> a
    1:1:void addView(android.view.View,int,boolean):0 -> a
    1:1:void androidx.recyclerview.widget.RecyclerView$5.attachViewToParent(android.view.View,int,android.view.ViewGroup$LayoutParams):0:0 -> b
    1:1:void attachViewToParent(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean):0 -> b
    2:2:void androidx.recyclerview.widget.RecyclerView$ViewHolder.clearTmpDetachFlag():0:0 -> b
    2:2:void androidx.recyclerview.widget.RecyclerView$5.attachViewToParent(android.view.View,int,android.view.ViewGroup$LayoutParams):0 -> b
    2:2:void attachViewToParent(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean):0 -> b
    3:3:void androidx.recyclerview.widget.RecyclerView$5.attachViewToParent(android.view.View,int,android.view.ViewGroup$LayoutParams):0:0 -> b
    3:3:void attachViewToParent(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean):0 -> b
    1:1:android.view.View androidx.recyclerview.widget.RecyclerView$5.getChildAt(int):0:0 -> c
    1:1:void androidx.recyclerview.widget.RecyclerView$5.detachViewFromParent(int):0 -> c
    1:1:void detachViewFromParent(int):0 -> c
    2:2:void androidx.recyclerview.widget.RecyclerView$5.detachViewFromParent(int):0:0 -> c
    2:2:void detachViewFromParent(int):0 -> c
    android.view.View getChildAt(int) -> d
    int getChildCount() -> e
    int getOffset(int) -> f
    1:1:android.view.View androidx.recyclerview.widget.RecyclerView$5.getChildAt(int):0:0 -> g
    1:1:android.view.View getUnfilteredChildAt(int):0 -> g
    int getUnfilteredChildCount() -> h
    1:1:int androidx.recyclerview.widget.RecyclerView$5.indexOfChild(android.view.View):0:0 -> i
    1:1:void hide(android.view.View):0 -> i
    2:2:void hide(android.view.View):0:0 -> i
    1:1:void androidx.recyclerview.widget.RecyclerView$5.onEnteredHiddenState(android.view.View):0:0 -> j
    1:1:void hideViewInternal(android.view.View):0 -> j
    1:1:int androidx.recyclerview.widget.RecyclerView$5.indexOfChild(android.view.View):0:0 -> k
    1:1:int indexOfChild(android.view.View):0 -> k
    2:2:int indexOfChild(android.view.View):0:0 -> k
    boolean isHidden(android.view.View) -> l
    1:1:int androidx.recyclerview.widget.RecyclerView$5.indexOfChild(android.view.View):0:0 -> m
    1:1:void removeView(android.view.View):0 -> m
    2:2:void removeView(android.view.View):0:0 -> m
    void removeViewAt(int) -> n
    1:1:int androidx.recyclerview.widget.RecyclerView$5.indexOfChild(android.view.View):0:0 -> o
    1:1:boolean removeViewIfHidden(android.view.View):0 -> o
    2:2:boolean removeViewIfHidden(android.view.View):0:0 -> o
    1:1:int androidx.recyclerview.widget.RecyclerView$5.indexOfChild(android.view.View):0:0 -> p
    1:1:void unhide(android.view.View):0 -> p
    2:2:void unhide(android.view.View):0:0 -> p
    1:1:void androidx.recyclerview.widget.RecyclerView$5.onLeftHiddenState(android.view.View):0:0 -> q
    1:1:boolean unhideViewInternal(android.view.View):0 -> q
androidx.recyclerview.widget.ChildHelper$Bucket -> androidx.recyclerview.widget.i:
    androidx.recyclerview.widget.ChildHelper$Bucket mNext -> b
    long mData -> a
    void clear(int) -> a
    int countOnesBefore(int) -> b
    void ensureNext() -> c
    boolean get(int) -> d
    void insert(int,boolean) -> e
    boolean remove(int) -> f
    void reset() -> g
    void set(int) -> h
androidx.recyclerview.widget.DefaultItemAnimator -> androidx.recyclerview.widget.DefaultItemAnimator:
    java.util.ArrayList mAddAnimations -> o
    java.util.ArrayList mChangesList -> n
    java.util.ArrayList mMovesList -> m
    java.util.ArrayList mAdditionsList -> l
    java.util.ArrayList mPendingChanges -> k
    android.animation.TimeInterpolator sDefaultInterpolator -> s
    java.util.ArrayList mPendingMoves -> j
    java.util.ArrayList mPendingAdditions -> i
    java.util.ArrayList mPendingRemovals -> h
    java.util.ArrayList mChangeAnimations -> r
    java.util.ArrayList mRemoveAnimations -> q
    java.util.ArrayList mMoveAnimations -> p
    void cancelAll(java.util.List) -> c
    void dispatchFinishedWhenDone() -> d
    void endChangeAnimation(java.util.List,androidx.recyclerview.widget.RecyclerView$ViewHolder) -> e
    1:1:void endChangeAnimationIfNecessary(androidx.recyclerview.widget.DefaultItemAnimator$ChangeInfo):0:0 -> endAnimations
    1:1:void endAnimations():0 -> endAnimations
    2:2:void endAnimations():0:0 -> endAnimations
    3:3:void endChangeAnimationIfNecessary(androidx.recyclerview.widget.DefaultItemAnimator$ChangeInfo):0:0 -> endAnimations
    3:3:void endAnimations():0 -> endAnimations
    4:4:void endAnimations():0:0 -> endAnimations
    boolean endChangeAnimationIfNecessary(androidx.recyclerview.widget.DefaultItemAnimator$ChangeInfo,androidx.recyclerview.widget.RecyclerView$ViewHolder) -> f
    void resetAnimation(androidx.recyclerview.widget.RecyclerView$ViewHolder) -> g
    1:1:void animateRemoveImpl(androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> runPendingAnimations
    1:1:void runPendingAnimations():0 -> runPendingAnimations
    2:2:void runPendingAnimations():0:0 -> runPendingAnimations
androidx.recyclerview.widget.DefaultItemAnimator$1 -> androidx.recyclerview.widget.k:
    androidx.recyclerview.widget.DefaultItemAnimator this$0 -> b
    java.util.ArrayList val$moves -> a
    1:1:void androidx.recyclerview.widget.DefaultItemAnimator.animateMoveImpl(androidx.recyclerview.widget.RecyclerView$ViewHolder,int,int,int,int):0:0 -> run
    1:1:void run():0 -> run
    2:2:void run():0:0 -> run
androidx.recyclerview.widget.DefaultItemAnimator$2 -> androidx.recyclerview.widget.l:
    androidx.recyclerview.widget.DefaultItemAnimator this$0 -> b
    java.util.ArrayList val$changes -> a
    1:1:void androidx.recyclerview.widget.DefaultItemAnimator.animateChangeImpl(androidx.recyclerview.widget.DefaultItemAnimator$ChangeInfo):0:0 -> run
    1:1:void run():0 -> run
    2:2:void run():0:0 -> run
androidx.recyclerview.widget.DefaultItemAnimator$3 -> androidx.recyclerview.widget.m:
    androidx.recyclerview.widget.DefaultItemAnimator this$0 -> b
    java.util.ArrayList val$additions -> a
    1:1:void androidx.recyclerview.widget.DefaultItemAnimator.animateAddImpl(androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> run
    1:1:void run():0 -> run
    2:2:void run():0:0 -> run
androidx.recyclerview.widget.DefaultItemAnimator$4 -> androidx.recyclerview.widget.n:
    androidx.recyclerview.widget.DefaultItemAnimator this$0 -> d
    androidx.recyclerview.widget.RecyclerView$ViewHolder val$holder -> a
    android.view.ViewPropertyAnimator val$animation -> b
    android.view.View val$view -> c
androidx.recyclerview.widget.DefaultItemAnimator$5 -> androidx.recyclerview.widget.o:
    androidx.recyclerview.widget.DefaultItemAnimator this$0 -> d
    androidx.recyclerview.widget.RecyclerView$ViewHolder val$holder -> a
    android.view.ViewPropertyAnimator val$animation -> c
    android.view.View val$view -> b
androidx.recyclerview.widget.DefaultItemAnimator$6 -> androidx.recyclerview.widget.p:
    androidx.recyclerview.widget.RecyclerView$ViewHolder val$holder -> a
    android.view.ViewPropertyAnimator val$animation -> e
    androidx.recyclerview.widget.DefaultItemAnimator this$0 -> f
    android.view.View val$view -> c
    int val$deltaY -> d
    int val$deltaX -> b
androidx.recyclerview.widget.DefaultItemAnimator$7 -> androidx.recyclerview.widget.q:
    androidx.recyclerview.widget.DefaultItemAnimator this$0 -> d
    androidx.recyclerview.widget.DefaultItemAnimator$ChangeInfo val$changeInfo -> a
    android.view.ViewPropertyAnimator val$oldViewAnim -> b
    android.view.View val$view -> c
androidx.recyclerview.widget.DefaultItemAnimator$8 -> androidx.recyclerview.widget.r:
    androidx.recyclerview.widget.DefaultItemAnimator this$0 -> d
    androidx.recyclerview.widget.DefaultItemAnimator$ChangeInfo val$changeInfo -> a
    android.view.ViewPropertyAnimator val$newViewAnimation -> b
    android.view.View val$newView -> c
androidx.recyclerview.widget.DefaultItemAnimator$ChangeInfo -> androidx.recyclerview.widget.s:
    androidx.recyclerview.widget.RecyclerView$ViewHolder oldHolder -> a
    androidx.recyclerview.widget.RecyclerView$ViewHolder newHolder -> b
    int toY -> f
    int fromY -> d
    int toX -> e
    int fromX -> c
    1:1:void <init>(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> <init>
    1:1:void <init>(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ViewHolder,int,int,int,int):0 -> <init>
    2:2:void <init>(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ViewHolder,int,int,int,int):0:0 -> <init>
androidx.recyclerview.widget.DefaultItemAnimator$MoveInfo -> androidx.recyclerview.widget.t:
    androidx.recyclerview.widget.RecyclerView$ViewHolder holder -> a
    int toX -> d
    int toY -> e
    int fromX -> b
    int fromY -> c
androidx.recyclerview.widget.DiffUtil -> androidx.recyclerview.widget.DiffUtil:
    java.util.Comparator SNAKE_COMPARATOR -> a
    1:1:androidx.recyclerview.widget.DiffUtil$Snake diffPartial(androidx.recyclerview.widget.DiffUtil$Callback,int,int,int,int,int[],int[],int):0:0 -> calculateDiff
    1:1:androidx.recyclerview.widget.DiffUtil$DiffResult calculateDiff(androidx.recyclerview.widget.DiffUtil$Callback,boolean):0 -> calculateDiff
    2:2:androidx.recyclerview.widget.DiffUtil$DiffResult calculateDiff(androidx.recyclerview.widget.DiffUtil$Callback,boolean):0:0 -> calculateDiff
androidx.recyclerview.widget.DiffUtil$1 -> androidx.recyclerview.widget.u:
    1:1:int compare(androidx.recyclerview.widget.DiffUtil$Snake,androidx.recyclerview.widget.DiffUtil$Snake):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
androidx.recyclerview.widget.DiffUtil$DiffResult -> androidx.recyclerview.widget.DiffUtil$DiffResult:
    java.util.List mSnakes -> a
    int[] mOldItemStatuses -> b
    int[] mNewItemStatuses -> c
    androidx.recyclerview.widget.DiffUtil$Callback mCallback -> d
    int mNewListSize -> f
    boolean mDetectMoves -> g
    int mOldListSize -> e
    1:1:void addRootSnake():0:0 -> <init>
    1:1:void <init>(androidx.recyclerview.widget.DiffUtil$Callback,java.util.List,int[],int[],boolean):0 -> <init>
    2:2:void findMatchingItems():0:0 -> <init>
    2:2:void <init>(androidx.recyclerview.widget.DiffUtil$Callback,java.util.List,int[],int[],boolean):0 -> <init>
    3:3:void findAddition(int,int,int):0:0 -> <init>
    3:3:void findMatchingItems():0 -> <init>
    3:3:void <init>(androidx.recyclerview.widget.DiffUtil$Callback,java.util.List,int[],int[],boolean):0 -> <init>
    4:4:void findRemoval(int,int,int):0:0 -> <init>
    4:4:void findMatchingItems():0 -> <init>
    4:4:void <init>(androidx.recyclerview.widget.DiffUtil$Callback,java.util.List,int[],int[],boolean):0 -> <init>
    5:5:void findMatchingItems():0:0 -> <init>
    5:5:void <init>(androidx.recyclerview.widget.DiffUtil$Callback,java.util.List,int[],int[],boolean):0 -> <init>
    boolean findMatchingItem(int,int,int,boolean) -> a
    androidx.recyclerview.widget.DiffUtil$PostponedUpdate removePostponedUpdate(java.util.List,int,boolean) -> b
    1:1:void dispatchRemovals(java.util.List,androidx.recyclerview.widget.ListUpdateCallback,int,int,int):0:0 -> dispatchUpdatesTo
    1:1:void dispatchUpdatesTo(androidx.recyclerview.widget.ListUpdateCallback):0 -> dispatchUpdatesTo
    2:2:void dispatchAdditions(java.util.List,androidx.recyclerview.widget.ListUpdateCallback,int,int,int):0:0 -> dispatchUpdatesTo
    2:2:void dispatchUpdatesTo(androidx.recyclerview.widget.ListUpdateCallback):0 -> dispatchUpdatesTo
    3:3:void dispatchUpdatesTo(androidx.recyclerview.widget.ListUpdateCallback):0:0 -> dispatchUpdatesTo
androidx.recyclerview.widget.DiffUtil$PostponedUpdate -> androidx.recyclerview.widget.v:
    int currentPos -> b
    boolean removal -> c
    int posInOwnerList -> a
androidx.recyclerview.widget.DiffUtil$Range -> androidx.recyclerview.widget.w:
    int newListEnd -> d
    int oldListEnd -> b
    int newListStart -> c
    int oldListStart -> a
androidx.recyclerview.widget.DiffUtil$Snake -> androidx.recyclerview.widget.x:
    boolean reverse -> e
    int y -> b
    int size -> c
    int x -> a
    boolean removal -> d
androidx.recyclerview.widget.DividerItemDecoration -> androidx.recyclerview.widget.DividerItemDecoration:
    int[] ATTRS -> d
    int mOrientation -> b
    android.graphics.Rect mBounds -> c
    android.graphics.drawable.Drawable mDivider -> a
    1:1:void drawVertical(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView):0:0 -> onDraw
    1:1:void onDraw(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$State):0 -> onDraw
    2:2:void drawHorizontal(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView):0:0 -> onDraw
    2:2:void onDraw(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$State):0 -> onDraw
androidx.recyclerview.widget.FastScroller -> androidx.recyclerview.widget.c0:
    int mHorizontalThumbWidth -> n
    int mVerticalThumbCenterY -> l
    int[] mHorizontalRange -> y
    int mHorizontalTrackHeight -> j
    int mVerticalTrackWidth -> f
    boolean mNeedHorizontalScrollbar -> u
    int mMargin -> b
    androidx.recyclerview.widget.RecyclerView$OnScrollListener mOnScrollListener -> C
    int mAnimationState -> A
    java.lang.Runnable mHideRunnable -> B
    int[] EMPTY_STATE_SET -> E
    int mDragState -> w
    float mVerticalDragY -> m
    int mRecyclerViewWidth -> q
    android.graphics.drawable.Drawable mVerticalTrackDrawable -> d
    int mHorizontalThumbCenterX -> o
    int[] mVerticalRange -> x
    androidx.recyclerview.widget.RecyclerView mRecyclerView -> s
    android.graphics.drawable.Drawable mHorizontalTrackDrawable -> h
    int mVerticalThumbHeight -> k
    android.animation.ValueAnimator mShowHideAnimator -> z
    int mHorizontalThumbHeight -> i
    android.graphics.drawable.StateListDrawable mVerticalThumbDrawable -> c
    int mVerticalThumbWidth -> e
    android.graphics.drawable.StateListDrawable mHorizontalThumbDrawable -> g
    int mScrollbarMinimumRange -> a
    boolean mNeedVerticalScrollbar -> t
    int[] PRESSED_STATE_SET -> D
    int mState -> v
    float mHorizontalDragX -> p
    int mRecyclerViewHeight -> r
    1:1:void attachToRecyclerView(androidx.recyclerview.widget.RecyclerView):0:0 -> <init>
    1:1:void <init>(androidx.recyclerview.widget.RecyclerView,android.graphics.drawable.StateListDrawable,android.graphics.drawable.Drawable,android.graphics.drawable.StateListDrawable,android.graphics.drawable.Drawable,int,int,int):0 -> <init>
    2:2:void destroyCallbacks():0:0 -> <init>
    2:2:void attachToRecyclerView(androidx.recyclerview.widget.RecyclerView):0 -> <init>
    2:2:void <init>(androidx.recyclerview.widget.RecyclerView,android.graphics.drawable.StateListDrawable,android.graphics.drawable.Drawable,android.graphics.drawable.StateListDrawable,android.graphics.drawable.Drawable,int,int,int):0 -> <init>
    3:3:void attachToRecyclerView(androidx.recyclerview.widget.RecyclerView):0:0 -> <init>
    3:3:void <init>(androidx.recyclerview.widget.RecyclerView,android.graphics.drawable.StateListDrawable,android.graphics.drawable.Drawable,android.graphics.drawable.StateListDrawable,android.graphics.drawable.Drawable,int,int,int):0 -> <init>
    4:4:void setupCallbacks():0:0 -> <init>
    4:4:void attachToRecyclerView(androidx.recyclerview.widget.RecyclerView):0 -> <init>
    4:4:void <init>(androidx.recyclerview.widget.RecyclerView,android.graphics.drawable.StateListDrawable,android.graphics.drawable.Drawable,android.graphics.drawable.StateListDrawable,android.graphics.drawable.Drawable,int,int,int):0 -> <init>
    void cancelHide() -> a
    boolean isPointInsideHorizontalThumb(float,float) -> b
    1:1:boolean isLayoutRTL():0:0 -> c
    1:1:boolean isPointInsideVerticalThumb(float,float):0 -> c
    2:2:boolean isPointInsideVerticalThumb(float,float):0:0 -> c
    void requestRedraw() -> d
    int scrollTo(float,float,int[],int,int,int) -> e
    1:1:void requestRedraw():0:0 -> f
    1:1:void setState(int):0 -> f
    2:2:void setState(int):0:0 -> f
    3:3:void resetHideDelay(int):0:0 -> f
    3:3:void setState(int):0 -> f
    4:4:void setState(int):0:0 -> f
    void updateScrollPosition(int,int) -> g
    1:1:void drawVerticalScrollbar(android.graphics.Canvas):0:0 -> onDrawOver
    1:1:void onDrawOver(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$State):0 -> onDrawOver
    2:2:boolean isLayoutRTL():0:0 -> onDrawOver
    2:2:void drawVerticalScrollbar(android.graphics.Canvas):0 -> onDrawOver
    2:2:void onDrawOver(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$State):0 -> onDrawOver
    3:3:void drawVerticalScrollbar(android.graphics.Canvas):0:0 -> onDrawOver
    3:3:void onDrawOver(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$State):0 -> onDrawOver
    4:4:void onDrawOver(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$State):0:0 -> onDrawOver
    5:5:void drawHorizontalScrollbar(android.graphics.Canvas):0:0 -> onDrawOver
    5:5:void onDrawOver(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$State):0 -> onDrawOver
    6:6:void onDrawOver(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$State):0:0 -> onDrawOver
    1:1:int[] getHorizontalRange():0:0 -> onTouchEvent
    1:1:void horizontalScrollTo(float):0 -> onTouchEvent
    1:1:void onTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent):0 -> onTouchEvent
    2:2:void horizontalScrollTo(float):0:0 -> onTouchEvent
    2:2:void onTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent):0 -> onTouchEvent
    3:3:void onTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent):0:0 -> onTouchEvent
    4:4:int[] getVerticalRange():0:0 -> onTouchEvent
    4:4:void verticalScrollTo(float):0 -> onTouchEvent
    4:4:void onTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent):0 -> onTouchEvent
    5:5:void verticalScrollTo(float):0:0 -> onTouchEvent
    5:5:void onTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent):0 -> onTouchEvent
androidx.recyclerview.widget.FastScroller$1 -> androidx.recyclerview.widget.y:
    androidx.recyclerview.widget.FastScroller this$0 -> a
    1:1:void androidx.recyclerview.widget.FastScroller.hide(int):0:0 -> run
    1:1:void run():0 -> run
androidx.recyclerview.widget.FastScroller$2 -> androidx.recyclerview.widget.z:
    androidx.recyclerview.widget.FastScroller this$0 -> a
androidx.recyclerview.widget.FastScroller$AnimatorListener -> androidx.recyclerview.widget.a0:
    androidx.recyclerview.widget.FastScroller this$0 -> b
    boolean mCanceled -> a
androidx.recyclerview.widget.FastScroller$AnimatorUpdater -> androidx.recyclerview.widget.b0:
    androidx.recyclerview.widget.FastScroller this$0 -> a
androidx.recyclerview.widget.GapWorker -> androidx.recyclerview.widget.g0:
    java.lang.ThreadLocal sGapWorker -> e
    long mPostTimeNs -> b
    java.util.Comparator sTaskComparator -> f
    long mFrameIntervalNs -> c
    java.util.ArrayList mTasks -> d
    java.util.ArrayList mRecyclerViews -> a
    1:1:long androidx.recyclerview.widget.RecyclerView.getNanoTime():0:0 -> a
    1:1:void postFromTraversal(androidx.recyclerview.widget.RecyclerView,int,int):0 -> a
    2:2:void postFromTraversal(androidx.recyclerview.widget.RecyclerView,int,int):0:0 -> a
    3:3:void androidx.recyclerview.widget.GapWorker$LayoutPrefetchRegistryImpl.setPrefetchVector(int,int):0:0 -> a
    3:3:void postFromTraversal(androidx.recyclerview.widget.RecyclerView,int,int):0 -> a
    1:1:void buildTaskList():0:0 -> b
    1:1:void prefetch(long):0 -> b
    2:2:void flushTasksWithDeadline(long):0:0 -> b
    2:2:void prefetch(long):0 -> b
    3:3:void flushTaskWithDeadline(androidx.recyclerview.widget.GapWorker$Task,long):0:0 -> b
    3:3:void flushTasksWithDeadline(long):0 -> b
    3:3:void prefetch(long):0 -> b
    4:4:void prefetchInnerRecyclerViewWithDeadline(androidx.recyclerview.widget.RecyclerView,long):0:0 -> b
    4:4:void flushTaskWithDeadline(androidx.recyclerview.widget.GapWorker$Task,long):0 -> b
    4:4:void flushTasksWithDeadline(long):0 -> b
    4:4:void prefetch(long):0 -> b
    5:5:void androidx.recyclerview.widget.RecyclerView$State.prepareForNestedPrefetch(androidx.recyclerview.widget.RecyclerView$Adapter):0:0 -> b
    5:5:void prefetchInnerRecyclerViewWithDeadline(androidx.recyclerview.widget.RecyclerView,long):0 -> b
    5:5:void flushTaskWithDeadline(androidx.recyclerview.widget.GapWorker$Task,long):0 -> b
    5:5:void flushTasksWithDeadline(long):0 -> b
    5:5:void prefetch(long):0 -> b
    6:6:void prefetchInnerRecyclerViewWithDeadline(androidx.recyclerview.widget.RecyclerView,long):0:0 -> b
    6:6:void flushTaskWithDeadline(androidx.recyclerview.widget.GapWorker$Task,long):0 -> b
    6:6:void flushTasksWithDeadline(long):0 -> b
    6:6:void prefetch(long):0 -> b
    7:7:void androidx.recyclerview.widget.GapWorker$Task.clear():0:0 -> b
    7:7:void flushTasksWithDeadline(long):0 -> b
    7:7:void prefetch(long):0 -> b
    1:1:boolean isPrefetchPositionAttached(androidx.recyclerview.widget.RecyclerView,int):0:0 -> c
    1:1:androidx.recyclerview.widget.RecyclerView$ViewHolder prefetchPositionWithDeadline(androidx.recyclerview.widget.RecyclerView,int,long):0 -> c
    2:2:androidx.recyclerview.widget.RecyclerView$ViewHolder prefetchPositionWithDeadline(androidx.recyclerview.widget.RecyclerView,int,long):0:0 -> c
androidx.recyclerview.widget.GapWorker$1 -> androidx.recyclerview.widget.d0:
    1:1:int compare(androidx.recyclerview.widget.GapWorker$Task,androidx.recyclerview.widget.GapWorker$Task):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
androidx.recyclerview.widget.GapWorker$LayoutPrefetchRegistryImpl -> androidx.recyclerview.widget.e0:
    int[] mPrefetchArray -> c
    int mCount -> d
    int mPrefetchDy -> b
    int mPrefetchDx -> a
    void collectPrefetchPositionsFromView(androidx.recyclerview.widget.RecyclerView,boolean) -> a
    boolean lastPrefetchIncludedPosition(int) -> b
androidx.recyclerview.widget.GapWorker$Task -> androidx.recyclerview.widget.f0:
    androidx.recyclerview.widget.RecyclerView view -> d
    int position -> e
    boolean immediate -> a
    int viewVelocity -> b
    int distanceToItem -> c
androidx.recyclerview.widget.GridLayoutManager -> androidx.recyclerview.widget.GridLayoutManager:
    android.graphics.Rect mDecorInsets -> O
    int mSpanCount -> I
    android.view.View[] mSet -> K
    android.util.SparseIntArray mPreLayoutSpanSizeCache -> L
    android.util.SparseIntArray mPreLayoutSpanIndexCache -> M
    boolean mPendingSpanCountChange -> H
    int[] mCachedBorders -> J
    androidx.recyclerview.widget.GridLayoutManager$SpanSizeLookup mSpanSizeLookup -> N
    1:1:void assignSpans(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,int,int,boolean):0:0 -> E
    1:1:void layoutChunk(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$LayoutState,androidx.recyclerview.widget.LinearLayoutManager$LayoutChunkResult):0 -> E
    2:2:void layoutChunk(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$LayoutState,androidx.recyclerview.widget.LinearLayoutManager$LayoutChunkResult):0:0 -> E
    3:3:void guessMeasurement(float,int):0:0 -> E
    3:3:void layoutChunk(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$LayoutState,androidx.recyclerview.widget.LinearLayoutManager$LayoutChunkResult):0 -> E
    4:4:void layoutChunk(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$LayoutState,androidx.recyclerview.widget.LinearLayoutManager$LayoutChunkResult):0:0 -> E
    1:1:void ensureAnchorIsInCorrectSpan(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo,int):0:0 -> F
    1:1:void onAnchorReady(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo,int):0 -> F
    2:2:void onAnchorReady(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo,int):0:0 -> F
    1:1:int[] calculateItemBorders(int[],int,int):0:0 -> O
    1:1:void calculateItemBorders(int):0 -> O
    2:2:void calculateItemBorders(int):0:0 -> O
    void ensureViewSet() -> P
    int getSpaceForSpanRange(int,int) -> Q
    int getSpanGroupIndex(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,int) -> R
    int getSpanIndex(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,int) -> S
    int getSpanSize(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,int) -> T
    void measureChild(android.view.View,int,boolean) -> U
    void measureChildWithDecorationsAndMargin(android.view.View,int,int,boolean) -> V
    void updateMeasurements() -> W
    void collectPrefetchPositionsForLayoutState(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$LayoutState,androidx.recyclerview.widget.RecyclerView$LayoutManager$LayoutPrefetchRegistry) -> m
    1:1:void cachePreLayoutSpanMapping():0:0 -> onLayoutChildren
    1:1:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onLayoutChildren
    2:2:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0:0 -> onLayoutChildren
    3:3:void clearPreLayoutSpanMappingCache():0:0 -> onLayoutChildren
    3:3:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onLayoutChildren
    android.view.View findReferenceChild(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,int,int,int) -> z
androidx.recyclerview.widget.GridLayoutManager$LayoutParams -> androidx.recyclerview.widget.GridLayoutManager$LayoutParams:
    int mSpanSize -> f
    int mSpanIndex -> e
androidx.recyclerview.widget.GridLayoutManager$SpanSizeLookup -> androidx.recyclerview.widget.GridLayoutManager$SpanSizeLookup:
    android.util.SparseIntArray mSpanIndexCache -> a
    boolean mCacheSpanIndices -> b
    int getCachedSpanIndex(int,int) -> a
    1:1:int findReferenceIndexFromCache(int):0:0 -> getSpanIndex
    1:1:int getSpanIndex(int,int):0 -> getSpanIndex
    2:2:int getSpanIndex(int,int):0:0 -> getSpanIndex
androidx.recyclerview.widget.ItemTouchHelper -> androidx.recyclerview.widget.ItemTouchHelper:
    int mActionState -> n
    float mSelectedStartY -> k
    int mActivePointerId -> l
    java.util.List mRecoverAnimations -> p
    float mDy -> i
    java.util.List mDistances -> v
    float mMaxSwipeVelocity -> g
    androidx.recyclerview.widget.RecyclerView mRecyclerView -> r
    androidx.recyclerview.widget.ItemTouchHelper$Callback mCallback -> m
    float mInitialTouchY -> e
    float[] mTmpPosition -> b
    android.graphics.Rect mTmpRect -> B
    androidx.recyclerview.widget.RecyclerView$ViewHolder mSelected -> c
    androidx.recyclerview.widget.ItemTouchHelper$ItemTouchHelperGestureListener mItemTouchHelperGestureListener -> z
    android.view.VelocityTracker mVelocityTracker -> t
    int mSlop -> q
    int mSelectedFlags -> o
    float mSelectedStartX -> j
    java.lang.Runnable mScrollRunnable -> s
    float mDx -> h
    java.util.List mSwapTargets -> u
    float mSwipeEscapeVelocity -> f
    float mInitialTouchX -> d
    long mDragScrollStartTimeInMs -> C
    androidx.core.view.GestureDetectorCompat mGestureDetector -> y
    android.view.View mOverdrawChild -> w
    java.util.List mPendingCleanup -> a
    androidx.recyclerview.widget.RecyclerView$OnItemTouchListener mOnItemTouchListener -> A
    int mOverdrawChildPosition -> x
    int checkHorizontalSwipe(androidx.recyclerview.widget.RecyclerView$ViewHolder,int) -> a
    1:1:void destroyCallbacks():0:0 -> attachToRecyclerView
    1:1:void attachToRecyclerView(androidx.recyclerview.widget.RecyclerView):0 -> attachToRecyclerView
    2:2:void releaseVelocityTracker():0:0 -> attachToRecyclerView
    2:2:void destroyCallbacks():0 -> attachToRecyclerView
    2:2:void attachToRecyclerView(androidx.recyclerview.widget.RecyclerView):0 -> attachToRecyclerView
    3:3:void stopGestureDetection():0:0 -> attachToRecyclerView
    3:3:void destroyCallbacks():0 -> attachToRecyclerView
    3:3:void attachToRecyclerView(androidx.recyclerview.widget.RecyclerView):0 -> attachToRecyclerView
    4:4:void attachToRecyclerView(androidx.recyclerview.widget.RecyclerView):0:0 -> attachToRecyclerView
    5:5:void setupCallbacks():0:0 -> attachToRecyclerView
    5:5:void attachToRecyclerView(androidx.recyclerview.widget.RecyclerView):0 -> attachToRecyclerView
    6:6:void startGestureDetection():0:0 -> attachToRecyclerView
    6:6:void setupCallbacks():0 -> attachToRecyclerView
    6:6:void attachToRecyclerView(androidx.recyclerview.widget.RecyclerView):0 -> attachToRecyclerView
    1:1:androidx.recyclerview.widget.RecyclerView$ViewHolder findSwipedView(android.view.MotionEvent):0:0 -> b
    1:1:void checkSelectForSwipe(int,android.view.MotionEvent,int):0 -> b
    2:2:void checkSelectForSwipe(int,android.view.MotionEvent,int):0:0 -> b
    int checkVerticalSwipe(androidx.recyclerview.widget.RecyclerView$ViewHolder,int) -> c
    void endRecoverAnimation(androidx.recyclerview.widget.RecyclerView$ViewHolder,boolean) -> d
    android.view.View findChildView(android.view.MotionEvent) -> e
    void getSelectedDxDy(float[]) -> f
    boolean hitTest(android.view.View,float,float,float,float) -> g
    1:1:java.util.List findSwapTargets(androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> h
    1:1:void moveIfNecessary(androidx.recyclerview.widget.RecyclerView$ViewHolder):0 -> h
    2:2:void moveIfNecessary(androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> h
    void obtainVelocityTracker() -> i
    void removeChildDrawingOrderCallbackIfNecessary(android.view.View) -> j
    boolean scrollIfNecessary() -> k
    1:1:int swipeIfNecessary(androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> l
    1:1:void select(androidx.recyclerview.widget.RecyclerView$ViewHolder,int):0 -> l
    2:2:void releaseVelocityTracker():0:0 -> l
    2:2:void select(androidx.recyclerview.widget.RecyclerView$ViewHolder,int):0 -> l
    3:3:void select(androidx.recyclerview.widget.RecyclerView$ViewHolder,int):0:0 -> l
    void updateDxDy(android.view.MotionEvent,int,int) -> m
    1:1:void androidx.recyclerview.widget.ItemTouchHelper$Callback.onDraw(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$ViewHolder,java.util.List,int,float,float):0:0 -> onDraw
    1:1:void onDraw(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$State):0 -> onDraw
    1:1:void androidx.recyclerview.widget.ItemTouchHelper$Callback.onDrawOver(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$ViewHolder,java.util.List,int,float,float):0:0 -> onDrawOver
    1:1:void onDrawOver(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$State):0 -> onDrawOver
    1:1:int androidx.recyclerview.widget.ItemTouchHelper$Callback.getAbsoluteMovementFlags(androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> startSwipe
    1:1:boolean androidx.recyclerview.widget.ItemTouchHelper$Callback.hasSwipeFlag(androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$ViewHolder):0 -> startSwipe
    1:1:void startSwipe(androidx.recyclerview.widget.RecyclerView$ViewHolder):0 -> startSwipe
    2:2:void startSwipe(androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> startSwipe
androidx.recyclerview.widget.ItemTouchHelper$1 -> androidx.recyclerview.widget.h0:
    androidx.recyclerview.widget.ItemTouchHelper this$0 -> a
androidx.recyclerview.widget.ItemTouchHelper$2 -> androidx.recyclerview.widget.i0:
    androidx.recyclerview.widget.ItemTouchHelper this$0 -> a
    1:1:androidx.recyclerview.widget.ItemTouchHelper$RecoverAnimation androidx.recyclerview.widget.ItemTouchHelper.findAnimation(android.view.MotionEvent):0:0 -> onInterceptTouchEvent
    1:1:boolean onInterceptTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent):0 -> onInterceptTouchEvent
    2:2:boolean onInterceptTouchEvent(androidx.recyclerview.widget.RecyclerView,android.view.MotionEvent):0:0 -> onInterceptTouchEvent
androidx.recyclerview.widget.ItemTouchHelper$3 -> androidx.recyclerview.widget.j0:
    int val$swipeDir -> n
    androidx.recyclerview.widget.RecyclerView$ViewHolder val$prevSelected -> o
    androidx.recyclerview.widget.ItemTouchHelper this$0 -> p
    1:1:void androidx.recyclerview.widget.ItemTouchHelper$RecoverAnimation.onAnimationEnd(android.animation.Animator):0:0 -> onAnimationEnd
    1:1:void onAnimationEnd(android.animation.Animator):0 -> onAnimationEnd
    2:2:void onAnimationEnd(android.animation.Animator):0:0 -> onAnimationEnd
    3:3:void androidx.recyclerview.widget.ItemTouchHelper.postDispatchSwipe(androidx.recyclerview.widget.ItemTouchHelper$RecoverAnimation,int):0:0 -> onAnimationEnd
    3:3:void onAnimationEnd(android.animation.Animator):0 -> onAnimationEnd
    4:4:void onAnimationEnd(android.animation.Animator):0:0 -> onAnimationEnd
androidx.recyclerview.widget.ItemTouchHelper$4 -> androidx.recyclerview.widget.k0:
    androidx.recyclerview.widget.ItemTouchHelper this$0 -> c
    int val$swipeDir -> b
    androidx.recyclerview.widget.ItemTouchHelper$RecoverAnimation val$anim -> a
    1:1:boolean androidx.recyclerview.widget.ItemTouchHelper.hasRunningRecoverAnim():0:0 -> run
    1:1:void run():0 -> run
    2:2:void run():0:0 -> run
androidx.recyclerview.widget.ItemTouchHelper$Callback -> androidx.recyclerview.widget.ItemTouchHelper$Callback:
    android.view.animation.Interpolator sDragViewScrollCapInterpolator -> c
    android.view.animation.Interpolator sDragScrollInterpolator -> b
    int mCachedMaxScrollSpeed -> a
    int getAbsoluteMovementFlags(androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$ViewHolder) -> a
    1:1:int getAbsoluteMovementFlags(androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> b
    1:1:boolean hasDragFlag(androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$ViewHolder):0 -> b
    1:1:void androidx.recyclerview.widget.ItemTouchUIUtilImpl.clearView(android.view.View):0:0 -> clearView
    1:1:void clearView(androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$ViewHolder):0 -> clearView
    1:1:int getMaxDragScroll(androidx.recyclerview.widget.RecyclerView):0:0 -> interpolateOutOfBoundsScroll
    1:1:int interpolateOutOfBoundsScroll(androidx.recyclerview.widget.RecyclerView,int,int,int,long):0 -> interpolateOutOfBoundsScroll
    2:2:int interpolateOutOfBoundsScroll(androidx.recyclerview.widget.RecyclerView,int,int,int,long):0:0 -> interpolateOutOfBoundsScroll
    1:1:void androidx.recyclerview.widget.ItemTouchUIUtilImpl.onDraw(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView,android.view.View,float,float,int,boolean):0:0 -> onChildDraw
    1:1:void onChildDraw(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$ViewHolder,float,float,int,boolean):0 -> onChildDraw
    2:2:float androidx.recyclerview.widget.ItemTouchUIUtilImpl.findMaxElevation(androidx.recyclerview.widget.RecyclerView,android.view.View):0:0 -> onChildDraw
    2:2:void androidx.recyclerview.widget.ItemTouchUIUtilImpl.onDraw(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView,android.view.View,float,float,int,boolean):0 -> onChildDraw
    2:2:void onChildDraw(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$ViewHolder,float,float,int,boolean):0 -> onChildDraw
    3:3:void androidx.recyclerview.widget.ItemTouchUIUtilImpl.onDraw(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView,android.view.View,float,float,int,boolean):0:0 -> onChildDraw
    3:3:void onChildDraw(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$ViewHolder,float,float,int,boolean):0 -> onChildDraw
androidx.recyclerview.widget.ItemTouchHelper$Callback$1 -> androidx.recyclerview.widget.l0:
androidx.recyclerview.widget.ItemTouchHelper$Callback$2 -> androidx.recyclerview.widget.m0:
androidx.recyclerview.widget.ItemTouchHelper$ItemTouchHelperGestureListener -> androidx.recyclerview.widget.n0:
    androidx.recyclerview.widget.ItemTouchHelper this$0 -> b
    boolean mShouldReactToLongPress -> a
    void doNotReactToLongPress() -> a
androidx.recyclerview.widget.ItemTouchHelper$RecoverAnimation -> androidx.recyclerview.widget.p0:
    float mY -> j
    float mX -> i
    boolean mOverridden -> k
    boolean mEnded -> l
    float mTargetY -> d
    int mActionState -> f
    float mTargetX -> c
    float mStartDy -> b
    float mStartDx -> a
    android.animation.ValueAnimator mValueAnimator -> g
    androidx.recyclerview.widget.RecyclerView$ViewHolder mViewHolder -> e
    boolean mIsPendingCleanup -> h
    float mFraction -> m
    1:1:void setFraction(float):0:0 -> <init>
    1:1:void <init>(androidx.recyclerview.widget.RecyclerView$ViewHolder,int,int,float,float,float,float):0 -> <init>
    1:1:void setFraction(float):0:0 -> onAnimationCancel
    1:1:void onAnimationCancel(android.animation.Animator):0 -> onAnimationCancel
androidx.recyclerview.widget.ItemTouchHelper$RecoverAnimation$1 -> androidx.recyclerview.widget.o0:
    androidx.recyclerview.widget.ItemTouchHelper$RecoverAnimation this$0 -> a
androidx.recyclerview.widget.ItemTouchHelper$SimpleCallback -> androidx.recyclerview.widget.ItemTouchHelper$SimpleCallback:
    int mDefaultSwipeDirs -> d
    int mDefaultDragDirs -> e
androidx.recyclerview.widget.ItemTouchUIUtilImpl -> androidx.recyclerview.widget.q0:
    androidx.recyclerview.widget.ItemTouchUIUtil INSTANCE -> a
    1:1:float findMaxElevation(androidx.recyclerview.widget.RecyclerView,android.view.View):0:0 -> onDraw
    1:1:void onDraw(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView,android.view.View,float,float,int,boolean):0 -> onDraw
    2:2:void onDraw(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView,android.view.View,float,float,int,boolean):0:0 -> onDraw
androidx.recyclerview.widget.LayoutState -> androidx.recyclerview.widget.r0:
    boolean mInfinite -> i
    int mStartLine -> f
    int mEndLine -> g
    int mItemDirection -> d
    int mLayoutDirection -> e
    boolean mStopInFocusable -> h
    boolean mRecycle -> a
    int mAvailable -> b
    int mCurrentPosition -> c
androidx.recyclerview.widget.LinearLayoutManager -> androidx.recyclerview.widget.LinearLayoutManager:
    androidx.recyclerview.widget.OrientationHelper mOrientationHelper -> u
    boolean mLastStackFromEnd -> v
    androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo mAnchorInfo -> E
    int mInitialPrefetchItemCount -> G
    boolean mReverseLayout -> w
    boolean mShouldReverseLayout -> x
    int mPendingScrollPositionOffset -> B
    androidx.recyclerview.widget.LinearLayoutManager$LayoutChunkResult mLayoutChunkResult -> F
    int mPendingScrollPosition -> A
    boolean mStackFromEnd -> y
    boolean mSmoothScrollbarEnabled -> z
    androidx.recyclerview.widget.LinearLayoutManager$LayoutState mLayoutState -> t
    androidx.recyclerview.widget.LinearLayoutManager$SavedState mPendingSavedState -> D
    int mOrientation -> s
    boolean mRecycleChildrenOnDetach -> C
    int fixLayoutEndGap(int,androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean) -> A
    int fixLayoutStartGap(int,androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean) -> B
    android.view.View getChildClosestToEnd() -> C
    android.view.View getChildClosestToStart() -> D
    void layoutChunk(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$LayoutState,androidx.recyclerview.widget.LinearLayoutManager$LayoutChunkResult) -> E
    void onAnchorReady(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo,int) -> F
    1:1:void recycleViewsFromEnd(androidx.recyclerview.widget.RecyclerView$Recycler,int):0:0 -> G
    1:1:void recycleByLayoutState(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LinearLayoutManager$LayoutState):0 -> G
    2:2:void recycleViewsFromStart(androidx.recyclerview.widget.RecyclerView$Recycler,int):0:0 -> G
    2:2:void recycleByLayoutState(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LinearLayoutManager$LayoutState):0 -> G
    void recycleChildren(androidx.recyclerview.widget.RecyclerView$Recycler,int,int) -> H
    boolean resolveIsInfinite() -> I
    void resolveShouldLayoutReverse() -> J
    int scrollBy(int,androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State) -> K
    void updateLayoutState(int,int,boolean,androidx.recyclerview.widget.RecyclerView$State) -> L
    void updateLayoutStateToFillEnd(int,int) -> M
    void updateLayoutStateToFillStart(int,int) -> N
    1:1:boolean androidx.recyclerview.widget.RecyclerView$LayoutManager.hasFlexibleChildInBothOrientations():0:0 -> k
    1:1:boolean shouldMeasureTwice():0 -> k
    void collectPrefetchPositionsForLayoutState(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$LayoutState,androidx.recyclerview.widget.RecyclerView$LayoutManager$LayoutPrefetchRegistry) -> m
    int computeScrollExtent(androidx.recyclerview.widget.RecyclerView$State) -> n
    int computeScrollOffset(androidx.recyclerview.widget.RecyclerView$State) -> o
    1:1:android.view.View findPartiallyOrCompletelyInvisibleChildClosestToStart(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0:0 -> onFocusSearchFailed
    1:1:android.view.View onFocusSearchFailed(android.view.View,int,androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onFocusSearchFailed
    2:2:android.view.View findLastPartiallyOrCompletelyInvisibleChild(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0:0 -> onFocusSearchFailed
    2:2:android.view.View findPartiallyOrCompletelyInvisibleChildClosestToStart(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onFocusSearchFailed
    2:2:android.view.View onFocusSearchFailed(android.view.View,int,androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onFocusSearchFailed
    3:3:android.view.View findFirstPartiallyOrCompletelyInvisibleChild(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0:0 -> onFocusSearchFailed
    3:3:android.view.View findPartiallyOrCompletelyInvisibleChildClosestToStart(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onFocusSearchFailed
    3:3:android.view.View onFocusSearchFailed(android.view.View,int,androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onFocusSearchFailed
    4:4:android.view.View findPartiallyOrCompletelyInvisibleChildClosestToEnd(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0:0 -> onFocusSearchFailed
    4:4:android.view.View onFocusSearchFailed(android.view.View,int,androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onFocusSearchFailed
    5:5:android.view.View findFirstPartiallyOrCompletelyInvisibleChild(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0:0 -> onFocusSearchFailed
    5:5:android.view.View findPartiallyOrCompletelyInvisibleChildClosestToEnd(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onFocusSearchFailed
    5:5:android.view.View onFocusSearchFailed(android.view.View,int,androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onFocusSearchFailed
    6:6:android.view.View findLastPartiallyOrCompletelyInvisibleChild(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0:0 -> onFocusSearchFailed
    6:6:android.view.View findPartiallyOrCompletelyInvisibleChildClosestToEnd(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onFocusSearchFailed
    6:6:android.view.View onFocusSearchFailed(android.view.View,int,androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onFocusSearchFailed
    7:7:android.view.View onFocusSearchFailed(android.view.View,int,androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0:0 -> onFocusSearchFailed
    1:1:boolean updateAnchorFromPendingData(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo):0:0 -> onLayoutChildren
    1:1:void updateAnchorInfoForLayout(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo):0 -> onLayoutChildren
    1:1:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onLayoutChildren
    2:2:boolean updateAnchorFromChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo):0:0 -> onLayoutChildren
    2:2:void updateAnchorInfoForLayout(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo):0 -> onLayoutChildren
    2:2:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onLayoutChildren
    3:3:boolean androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo.isViewValidAsAnchor(android.view.View,androidx.recyclerview.widget.RecyclerView$State):0:0 -> onLayoutChildren
    3:3:boolean updateAnchorFromChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo):0 -> onLayoutChildren
    3:3:void updateAnchorInfoForLayout(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo):0 -> onLayoutChildren
    3:3:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onLayoutChildren
    4:4:boolean updateAnchorFromChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo):0:0 -> onLayoutChildren
    4:4:void updateAnchorInfoForLayout(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo):0 -> onLayoutChildren
    4:4:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onLayoutChildren
    5:5:android.view.View findReferenceChildClosestToEnd(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0:0 -> onLayoutChildren
    5:5:boolean updateAnchorFromChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo):0 -> onLayoutChildren
    5:5:void updateAnchorInfoForLayout(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo):0 -> onLayoutChildren
    5:5:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onLayoutChildren
    6:6:android.view.View findReferenceChildClosestToStart(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0:0 -> onLayoutChildren
    6:6:boolean updateAnchorFromChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo):0 -> onLayoutChildren
    6:6:void updateAnchorInfoForLayout(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo):0 -> onLayoutChildren
    6:6:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onLayoutChildren
    7:7:boolean updateAnchorFromChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo):0:0 -> onLayoutChildren
    7:7:void updateAnchorInfoForLayout(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo):0 -> onLayoutChildren
    7:7:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onLayoutChildren
    8:8:void updateAnchorInfoForLayout(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo):0:0 -> onLayoutChildren
    8:8:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onLayoutChildren
    9:9:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0:0 -> onLayoutChildren
    10:10:void updateLayoutStateToFillStart(androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo):0:0 -> onLayoutChildren
    10:10:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onLayoutChildren
    11:11:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0:0 -> onLayoutChildren
    12:12:void updateLayoutStateToFillEnd(androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo):0:0 -> onLayoutChildren
    12:12:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onLayoutChildren
    13:13:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0:0 -> onLayoutChildren
    14:14:void updateLayoutStateToFillEnd(androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo):0:0 -> onLayoutChildren
    14:14:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onLayoutChildren
    15:15:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0:0 -> onLayoutChildren
    16:16:void updateLayoutStateToFillStart(androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo):0:0 -> onLayoutChildren
    16:16:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onLayoutChildren
    17:17:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0:0 -> onLayoutChildren
    18:18:void layoutForPredictiveAnimations(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,int,int):0:0 -> onLayoutChildren
    18:18:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onLayoutChildren
    19:19:void androidx.recyclerview.widget.LinearLayoutManager$LayoutState.assignPositionFromScrapList():0:0 -> onLayoutChildren
    19:19:void layoutForPredictiveAnimations(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,int,int):0 -> onLayoutChildren
    19:19:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onLayoutChildren
    20:20:void layoutForPredictiveAnimations(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,int,int):0:0 -> onLayoutChildren
    20:20:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onLayoutChildren
    21:21:void androidx.recyclerview.widget.LinearLayoutManager$LayoutState.assignPositionFromScrapList():0:0 -> onLayoutChildren
    21:21:void layoutForPredictiveAnimations(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,int,int):0 -> onLayoutChildren
    21:21:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onLayoutChildren
    22:22:void layoutForPredictiveAnimations(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,int,int):0:0 -> onLayoutChildren
    22:22:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onLayoutChildren
    23:23:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0:0 -> onLayoutChildren
    1:1:void androidx.recyclerview.widget.LinearLayoutManager$SavedState.invalidateAnchor():0:0 -> onSaveInstanceState
    1:1:android.os.Parcelable onSaveInstanceState():0 -> onSaveInstanceState
    int computeScrollRange(androidx.recyclerview.widget.RecyclerView$State) -> p
    int convertFocusDirectionToLayoutDirection(int) -> q
    1:1:androidx.recyclerview.widget.LinearLayoutManager$LayoutState createLayoutState():0:0 -> r
    1:1:void ensureLayoutState():0 -> r
    2:2:void ensureLayoutState():0:0 -> r
    1:1:void androidx.recyclerview.widget.LinearLayoutManager$LayoutChunkResult.resetInternal():0:0 -> s
    1:1:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LinearLayoutManager$LayoutState,androidx.recyclerview.widget.RecyclerView$State,boolean):0 -> s
    2:2:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LinearLayoutManager$LayoutState,androidx.recyclerview.widget.RecyclerView$State,boolean):0:0 -> s
    1:1:void androidx.recyclerview.widget.LinearLayoutManager$SavedState.invalidateAnchor():0:0 -> scrollToPosition
    1:1:void scrollToPosition(int):0 -> scrollToPosition
    2:2:void scrollToPosition(int):0:0 -> scrollToPosition
    1:1:void androidx.recyclerview.widget.LinearLayoutManager$SavedState.invalidateAnchor():0:0 -> scrollToPositionWithOffset
    1:1:void scrollToPositionWithOffset(int,int):0 -> scrollToPositionWithOffset
    2:2:void scrollToPositionWithOffset(int,int):0:0 -> scrollToPositionWithOffset
    android.view.View findFirstReferenceChild(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State) -> t
    android.view.View findFirstVisibleChildClosestToEnd(boolean,boolean) -> u
    android.view.View findFirstVisibleChildClosestToStart(boolean,boolean) -> v
    android.view.View findLastReferenceChild(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State) -> w
    android.view.View findOnePartiallyOrCompletelyInvisibleChild(int,int) -> x
    android.view.View findOneVisibleChild(int,int,boolean,boolean) -> y
    android.view.View findReferenceChild(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,int,int,int) -> z
androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo -> androidx.recyclerview.widget.s0:
    androidx.recyclerview.widget.OrientationHelper mOrientationHelper -> a
    boolean mValid -> e
    int mPosition -> b
    int mCoordinate -> c
    boolean mLayoutFromEnd -> d
    void assignCoordinateFromPadding() -> a
    void reset() -> b
androidx.recyclerview.widget.LinearLayoutManager$LayoutState -> androidx.recyclerview.widget.t0:
    int mExtra -> h
    boolean mInfinite -> k
    int mLastScrollDelta -> i
    int mLayoutDirection -> f
    java.util.List mScrapList -> j
    int mScrollingOffset -> g
    int mCurrentPosition -> d
    int mItemDirection -> e
    boolean mRecycle -> a
    int mOffset -> b
    int mAvailable -> c
    boolean hasMore(androidx.recyclerview.widget.RecyclerView$State) -> a
    1:1:android.view.View nextViewInLimitedList(android.view.View):0:0 -> assignPositionFromScrapList
    1:1:void assignPositionFromScrapList(android.view.View):0 -> assignPositionFromScrapList
    2:2:void assignPositionFromScrapList(android.view.View):0:0 -> assignPositionFromScrapList
    1:1:android.view.View nextViewFromScrapList():0:0 -> b
    1:1:android.view.View next(androidx.recyclerview.widget.RecyclerView$Recycler):0 -> b
    2:2:android.view.View next(androidx.recyclerview.widget.RecyclerView$Recycler):0:0 -> b
androidx.recyclerview.widget.LinearLayoutManager$SavedState -> androidx.recyclerview.widget.LinearLayoutManager$SavedState:
    int mAnchorOffset -> b
    boolean mAnchorLayoutFromEnd -> c
    int mAnchorPosition -> a
    boolean hasValidAnchor() -> a
androidx.recyclerview.widget.LinearLayoutManager$SavedState$1 -> androidx.recyclerview.widget.u0:
    1:1:androidx.recyclerview.widget.LinearLayoutManager$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.recyclerview.widget.LinearLayoutManager$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.recyclerview.widget.LinearSmoothScroller -> androidx.recyclerview.widget.LinearSmoothScroller:
    float MILLISECONDS_PER_PX -> i
androidx.recyclerview.widget.LinearSnapHelper -> androidx.recyclerview.widget.LinearSnapHelper:
    androidx.recyclerview.widget.OrientationHelper mHorizontalHelper -> e
    androidx.recyclerview.widget.OrientationHelper mVerticalHelper -> d
    int distanceToCenter(androidx.recyclerview.widget.RecyclerView$LayoutManager,android.view.View,androidx.recyclerview.widget.OrientationHelper) -> b
    1:1:float computeDistancePerChild(androidx.recyclerview.widget.RecyclerView$LayoutManager,androidx.recyclerview.widget.OrientationHelper):0:0 -> c
    1:1:int estimateNextPositionDiffForFling(androidx.recyclerview.widget.RecyclerView$LayoutManager,androidx.recyclerview.widget.OrientationHelper,int,int):0 -> c
    2:2:int estimateNextPositionDiffForFling(androidx.recyclerview.widget.RecyclerView$LayoutManager,androidx.recyclerview.widget.OrientationHelper,int,int):0:0 -> c
    android.view.View findCenterView(androidx.recyclerview.widget.RecyclerView$LayoutManager,androidx.recyclerview.widget.OrientationHelper) -> d
    androidx.recyclerview.widget.OrientationHelper getHorizontalHelper(androidx.recyclerview.widget.RecyclerView$LayoutManager) -> e
    androidx.recyclerview.widget.OrientationHelper getVerticalHelper(androidx.recyclerview.widget.RecyclerView$LayoutManager) -> f
androidx.recyclerview.widget.ListAdapter -> androidx.recyclerview.widget.ListAdapter:
    androidx.recyclerview.widget.AsyncListDiffer mHelper -> c
androidx.recyclerview.widget.MessageThreadUtil -> androidx.recyclerview.widget.b1:
androidx.recyclerview.widget.MessageThreadUtil$1 -> androidx.recyclerview.widget.w0:
    androidx.recyclerview.widget.MessageThreadUtil$MessageQueue mQueue -> a
    java.lang.Runnable mMainThreadRunnable -> c
    android.os.Handler mMainThreadHandler -> b
    androidx.recyclerview.widget.ThreadUtil$MainThreadCallback val$callback -> d
    1:1:void sendMessage(androidx.recyclerview.widget.MessageThreadUtil$SyncQueueItem):0:0 -> addTile
    1:1:void addTile(int,androidx.recyclerview.widget.TileList$Tile):0 -> addTile
    1:1:void sendMessage(androidx.recyclerview.widget.MessageThreadUtil$SyncQueueItem):0:0 -> removeTile
    1:1:void removeTile(int,int):0 -> removeTile
    1:1:void sendMessage(androidx.recyclerview.widget.MessageThreadUtil$SyncQueueItem):0:0 -> updateItemCount
    1:1:void updateItemCount(int,int):0 -> updateItemCount
androidx.recyclerview.widget.MessageThreadUtil$1$1 -> androidx.recyclerview.widget.v0:
    androidx.recyclerview.widget.MessageThreadUtil$1 this$1 -> a
androidx.recyclerview.widget.MessageThreadUtil$2 -> androidx.recyclerview.widget.y0:
    androidx.recyclerview.widget.MessageThreadUtil$MessageQueue mQueue -> a
    java.lang.Runnable mBackgroundRunnable -> d
    androidx.recyclerview.widget.ThreadUtil$BackgroundCallback val$callback -> e
    java.util.concurrent.atomic.AtomicBoolean mBackgroundRunning -> c
    java.util.concurrent.Executor mExecutor -> b
    1:1:void maybeExecuteBackgroundRunnable():0:0 -> a
    1:1:void sendMessage(androidx.recyclerview.widget.MessageThreadUtil$SyncQueueItem):0 -> a
    1:1:void maybeExecuteBackgroundRunnable():0:0 -> b
    1:1:void sendMessageAtFrontOfQueue(androidx.recyclerview.widget.MessageThreadUtil$SyncQueueItem):0 -> b
androidx.recyclerview.widget.MessageThreadUtil$2$1 -> androidx.recyclerview.widget.x0:
    androidx.recyclerview.widget.MessageThreadUtil$2 this$1 -> a
androidx.recyclerview.widget.MessageThreadUtil$MessageQueue -> androidx.recyclerview.widget.z0:
    androidx.recyclerview.widget.MessageThreadUtil$SyncQueueItem mRoot -> a
    androidx.recyclerview.widget.MessageThreadUtil$SyncQueueItem next() -> a
    void removeMessages(int) -> b
    void sendMessage(androidx.recyclerview.widget.MessageThreadUtil$SyncQueueItem) -> c
    void sendMessageAtFrontOfQueue(androidx.recyclerview.widget.MessageThreadUtil$SyncQueueItem) -> d
androidx.recyclerview.widget.MessageThreadUtil$SyncQueueItem -> androidx.recyclerview.widget.a1:
    java.lang.Object sPoolLock -> j
    androidx.recyclerview.widget.MessageThreadUtil$SyncQueueItem next -> a
    java.lang.Object data -> h
    androidx.recyclerview.widget.MessageThreadUtil$SyncQueueItem sPool -> i
    int arg4 -> f
    int arg5 -> g
    int arg2 -> d
    int arg3 -> e
    int what -> b
    int arg1 -> c
    androidx.recyclerview.widget.MessageThreadUtil$SyncQueueItem obtainMessage(int,int,int) -> a
    androidx.recyclerview.widget.MessageThreadUtil$SyncQueueItem obtainMessage(int,int,int,int,int,int,java.lang.Object) -> b
    androidx.recyclerview.widget.MessageThreadUtil$SyncQueueItem obtainMessage(int,int,java.lang.Object) -> c
    void recycle() -> d
androidx.recyclerview.widget.OpReorderer -> androidx.recyclerview.widget.c1:
    androidx.recyclerview.widget.OpReorderer$Callback mCallback -> a
androidx.recyclerview.widget.OrientationHelper -> androidx.recyclerview.widget.OrientationHelper:
    int mLastTotalSpace -> a
    android.graphics.Rect mTmpRect -> b
    1:1:void <init>(androidx.recyclerview.widget.RecyclerView$LayoutManager):0:0 -> <init>
    1:1:void <init>(androidx.recyclerview.widget.RecyclerView$LayoutManager,androidx.recyclerview.widget.OrientationHelper$1):0 -> <init>
androidx.recyclerview.widget.OrientationHelper$1 -> androidx.recyclerview.widget.d1:
androidx.recyclerview.widget.OrientationHelper$2 -> androidx.recyclerview.widget.e1:
androidx.recyclerview.widget.PagerSnapHelper -> androidx.recyclerview.widget.PagerSnapHelper:
    androidx.recyclerview.widget.OrientationHelper mHorizontalHelper -> e
    androidx.recyclerview.widget.OrientationHelper mVerticalHelper -> d
    int distanceToCenter(androidx.recyclerview.widget.RecyclerView$LayoutManager,android.view.View,androidx.recyclerview.widget.OrientationHelper) -> b
    android.view.View findCenterView(androidx.recyclerview.widget.RecyclerView$LayoutManager,androidx.recyclerview.widget.OrientationHelper) -> c
    android.view.View findStartView(androidx.recyclerview.widget.RecyclerView$LayoutManager,androidx.recyclerview.widget.OrientationHelper) -> d
    androidx.recyclerview.widget.OrientationHelper getHorizontalHelper(androidx.recyclerview.widget.RecyclerView$LayoutManager) -> e
    androidx.recyclerview.widget.OrientationHelper getVerticalHelper(androidx.recyclerview.widget.RecyclerView$LayoutManager) -> f
androidx.recyclerview.widget.PagerSnapHelper$1 -> androidx.recyclerview.widget.f1:
    androidx.recyclerview.widget.PagerSnapHelper this$0 -> j
androidx.recyclerview.widget.RecyclerView -> androidx.recyclerview.widget.RecyclerView:
    boolean mPreserveFocusAfterLayout -> d0
    int mScrollPointerId -> O
    android.view.VelocityTracker mVelocityTracker -> P
    boolean mFirstLayoutComplete -> u
    int mDispatchScrollCounter -> G
    java.util.List mPendingAccessibilityImportanceChange -> w0
    java.lang.Class[] LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE -> B0
    android.widget.EdgeEffect mTopGlow -> J
    android.view.animation.Interpolator sQuinticInterpolator -> C0
    androidx.recyclerview.widget.RecyclerView$RecyclerViewDataObserver mObserver -> a
    boolean mIgnoreMotionEventTillDown -> y
    java.util.List mOnChildAttachStateListeners -> C
    androidx.recyclerview.widget.RecyclerView$ChildDrawingOrderCallback mChildDrawingOrderCallback -> p0
    int mLastTouchY -> T
    int[] CLIP_TO_PADDING_ATTR -> A0
    androidx.recyclerview.widget.ViewInfoStore mViewInfoStore -> f
    float mScaledVerticalScrollFactor -> c0
    androidx.recyclerview.widget.RecyclerView$State mState -> h0
    androidx.recyclerview.widget.GapWorker mGapWorker -> f0
    int[] NESTED_SCROLLING_ATTRS -> z0
    int[] mScrollConsumed -> t0
    int[] mScrollStepConsumed -> v0
    androidx.recyclerview.widget.GapWorker$LayoutPrefetchRegistryImpl mPrefetchRegistry -> g0
    android.graphics.RectF mTempRectF -> k
    boolean mIsAttached -> r
    android.widget.EdgeEffect mLeftGlow -> I
    int mEatenAccessibilityChangeFlags -> z
    android.graphics.Rect mTempRect -> i
    androidx.recyclerview.widget.RecyclerView$RecyclerListener mRecyclerListener -> n
    int mInterceptRequestLayoutDepth -> v
    androidx.recyclerview.widget.RecyclerView$Recycler mRecycler -> b
    boolean mItemsChanged -> l0
    int mTouchSlop -> U
    boolean mPostedAnimatorRunner -> n0
    androidx.recyclerview.widget.RecyclerView$ItemAnimator mItemAnimator -> M
    boolean mDataSetHasChangedAfterLayout -> D
    int mInitialTouchX -> Q
    androidx.recyclerview.widget.RecyclerView$SavedState mPendingSavedState -> c
    java.lang.Runnable mItemAnimatorRunner -> x0
    androidx.recyclerview.widget.RecyclerView$Adapter mAdapter -> l
    boolean mLayoutWasDefered -> w
    androidx.recyclerview.widget.RecyclerView$EdgeEffectFactory mEdgeEffectFactory -> H
    boolean mHasFixedSize -> s
    android.widget.EdgeEffect mBottomGlow -> L
    java.util.ArrayList mItemDecorations -> o
    androidx.recyclerview.widget.ViewInfoStore$ProcessCallback mViewInfoProcessCallback -> y0
    androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate mAccessibilityDelegate -> o0
    android.graphics.Rect mTempRect2 -> j
    boolean mDispatchItemsChangedEvent -> E
    androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemAnimatorListener mItemAnimatorListener -> m0
    boolean mAdapterUpdateDuringMeasure -> A
    android.view.accessibility.AccessibilityManager mAccessibilityManager -> B
    int mInitialTouchY -> R
    androidx.core.view.NestedScrollingChildHelper mScrollingChildHelper -> r0
    float mScaledHorizontalScrollFactor -> b0
    int mScrollState -> N
    androidx.recyclerview.widget.RecyclerView$OnFlingListener mOnFlingListener -> V
    androidx.recyclerview.widget.RecyclerView$OnItemTouchListener mActiveOnItemTouchListener -> q
    int mMaxFlingVelocity -> a0
    androidx.recyclerview.widget.RecyclerView$ViewFlinger mViewFlinger -> e0
    androidx.recyclerview.widget.RecyclerView$LayoutManager mLayout -> m
    androidx.recyclerview.widget.AdapterHelper mAdapterHelper -> d
    int mLayoutOrScrollCounter -> F
    int[] mScrollOffset -> s0
    androidx.recyclerview.widget.ChildHelper mChildHelper -> e
    boolean mLayoutFrozen -> x
    int[] mNestedOffsets -> u0
    androidx.recyclerview.widget.RecyclerView$OnScrollListener mScrollListener -> i0
    android.widget.EdgeEffect mRightGlow -> K
    boolean mEnableFastScroller -> t
    int[] mMinMaxLayoutPositions -> q0
    java.lang.Runnable mUpdateChildViewsRunnable -> h
    java.util.List mScrollListeners -> j0
    int mMinFlingVelocity -> W
    boolean mClipToPadding -> g
    int mLastTouchX -> S
    boolean mItemsAddedOrRemoved -> k0
    java.util.ArrayList mOnItemTouchListeners -> p
    1:1:void initAdapterManager():0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    2:2:void initChildrenHelper():0:0 -> <init>
    2:2:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    3:3:void initAutofill():0:0 -> <init>
    3:3:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    4:4:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    5:5:void initFastScroller(android.graphics.drawable.StateListDrawable,android.graphics.drawable.Drawable,android.graphics.drawable.StateListDrawable,android.graphics.drawable.Drawable):0:0 -> <init>
    5:5:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    6:6:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    7:7:void createLayoutManager(android.content.Context,java.lang.String,android.util.AttributeSet,int,int):0:0 -> <init>
    7:7:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    8:8:java.lang.String getFullClassName(android.content.Context,java.lang.String):0:0 -> <init>
    8:8:void createLayoutManager(android.content.Context,java.lang.String,android.util.AttributeSet,int,int):0 -> <init>
    8:8:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    9:9:void createLayoutManager(android.content.Context,java.lang.String,android.util.AttributeSet,int,int):0:0 -> <init>
    9:9:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    10:10:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    void findMinMaxChildLayoutPositions(int[]) -> A
    androidx.recyclerview.widget.RecyclerView findNestedRecyclerView(android.view.View) -> B
    androidx.recyclerview.widget.RecyclerView$ViewHolder findViewHolderForPosition(int,boolean) -> C
    1:1:int androidx.recyclerview.widget.AdapterHelper.applyPendingUpdatesToPosition(int):0:0 -> D
    1:1:int getAdapterPositionFor(androidx.recyclerview.widget.RecyclerView$ViewHolder):0 -> D
    long getChangedHolderKey(androidx.recyclerview.widget.RecyclerView$ViewHolder) -> E
    androidx.recyclerview.widget.RecyclerView$ViewHolder getChildViewHolderInt(android.view.View) -> F
    void getDecoratedBoundsWithMarginsInt(android.view.View,android.graphics.Rect) -> G
    android.graphics.Rect getItemDecorInsetsForChild(android.view.View) -> H
    androidx.core.view.NestedScrollingChildHelper getScrollingChildHelper() -> I
    void invalidateGlows() -> J
    boolean isAccessibilityEnabled() -> K
    void jumpToPositionForSmoothScroller(int) -> L
    1:1:void androidx.recyclerview.widget.RecyclerView$Recycler.markItemDecorInsetsDirty():0:0 -> M
    1:1:void markItemDecorInsetsDirty():0 -> M
    1:1:void androidx.recyclerview.widget.RecyclerView$ViewHolder.flagRemovedAndOffsetPosition(int,int,boolean):0:0 -> N
    1:1:void offsetPositionRecordsForRemove(int,int,boolean):0 -> N
    2:2:void offsetPositionRecordsForRemove(int,int,boolean):0:0 -> N
    3:3:void androidx.recyclerview.widget.RecyclerView$Recycler.offsetPositionRecordsForRemove(int,int,boolean):0:0 -> N
    3:3:void offsetPositionRecordsForRemove(int,int,boolean):0 -> N
    4:4:void offsetPositionRecordsForRemove(int,int,boolean):0:0 -> N
    void onEnterLayoutOrScroll() -> O
    1:1:void dispatchContentChangedIfNecessary():0:0 -> P
    1:1:void onExitLayoutOrScroll(boolean):0 -> P
    2:2:boolean isAccessibilityEnabled():0:0 -> P
    2:2:void dispatchContentChangedIfNecessary():0 -> P
    2:2:void onExitLayoutOrScroll(boolean):0 -> P
    3:3:void dispatchContentChangedIfNecessary():0:0 -> P
    3:3:void onExitLayoutOrScroll(boolean):0 -> P
    4:4:void dispatchPendingImportantForAccessibilityChanges():0:0 -> P
    4:4:void onExitLayoutOrScroll(boolean):0 -> P
    void onPointerUp(android.view.MotionEvent) -> Q
    void postAnimationRunner() -> R
    1:1:boolean predictiveItemAnimationsEnabled():0:0 -> S
    1:1:void processAdapterUpdatesAndSetAnimationFlags():0 -> S
    2:2:void processAdapterUpdatesAndSetAnimationFlags():0:0 -> S
    3:3:boolean predictiveItemAnimationsEnabled():0:0 -> S
    3:3:void processAdapterUpdatesAndSetAnimationFlags():0 -> S
    4:4:void processAdapterUpdatesAndSetAnimationFlags():0:0 -> S
    1:1:void markKnownViewsInvalid():0:0 -> T
    1:1:void processDataSetCompletelyChanged(boolean):0 -> T
    2:2:void androidx.recyclerview.widget.RecyclerView$Recycler.markKnownViewsInvalid():0:0 -> T
    2:2:void markKnownViewsInvalid():0 -> T
    2:2:void processDataSetCompletelyChanged(boolean):0 -> T
    1:1:void androidx.recyclerview.widget.ViewInfoStore.addToOldChangeHolders(long,androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> U
    1:1:void recordAnimationInfoIfBouncedHiddenView(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo):0 -> U
    2:2:void recordAnimationInfoIfBouncedHiddenView(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo):0:0 -> U
    void removeAndRecycleViews() -> V
    void requestChildOnScreen(android.view.View,android.view.View) -> W
    1:1:void releaseGlows():0:0 -> X
    1:1:void resetTouch():0 -> X
    1:1:void pullGlows(float,float,float,float):0:0 -> Y
    1:1:boolean scrollByInternal(int,int,android.view.MotionEvent):0 -> Y
    2:2:boolean scrollByInternal(int,int,android.view.MotionEvent):0:0 -> Y
    1:1:void repositionShadowingViews():0:0 -> Z
    1:1:void scrollStep(int,int,int[]):0 -> Z
    2:2:void onExitLayoutOrScroll():0:0 -> Z
    2:2:void scrollStep(int,int,int[]):0 -> Z
    3:3:void scrollStep(int,int,int[]):0:0 -> Z
    void absorbGlows(int,int) -> a
    1:1:void androidx.recyclerview.widget.RecyclerView$Recycler.onAdapterChanged(androidx.recyclerview.widget.RecyclerView$Adapter,androidx.recyclerview.widget.RecyclerView$Adapter,boolean):0:0 -> a0
    1:1:void setAdapterInternal(androidx.recyclerview.widget.RecyclerView$Adapter,boolean,boolean):0 -> a0
    2:2:void setAdapterInternal(androidx.recyclerview.widget.RecyclerView$Adapter,boolean,boolean):0:0 -> a0
    void access$000(androidx.recyclerview.widget.RecyclerView,android.view.View,int,android.view.ViewGroup$LayoutParams) -> b
    boolean setChildImportantForAccessibilityInternal(androidx.recyclerview.widget.RecyclerView$ViewHolder,int) -> b0
    void access$100(androidx.recyclerview.widget.RecyclerView,int) -> c
    1:1:void dispatchOnScrollStateChanged(int):0:0 -> c0
    1:1:void setScrollState(int):0 -> c0
    boolean access$200(androidx.recyclerview.widget.RecyclerView) -> d
    void startInterceptRequestLayout() -> d0
    void access$300(androidx.recyclerview.widget.RecyclerView,int,int) -> e
    void stopInterceptRequestLayout(boolean) -> e0
    1:1:void androidx.recyclerview.widget.ChildHelper.addView(android.view.View,boolean):0:0 -> f
    1:1:void addAnimatingView(androidx.recyclerview.widget.RecyclerView$ViewHolder):0 -> f
    2:2:void addAnimatingView(androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> f
    1:1:void androidx.recyclerview.widget.RecyclerView$ViewFlinger.stop():0:0 -> f0
    1:1:void stopScrollersInternal():0 -> f0
    2:2:void stopScrollersInternal():0:0 -> f0
    3:3:void androidx.recyclerview.widget.RecyclerView$LayoutManager.stopSmoothScroller():0:0 -> f0
    3:3:void stopScrollersInternal():0 -> f0
    1:1:boolean isPreferredNextFocus(android.view.View,android.view.View,int):0:0 -> focusSearch
    1:1:android.view.View focusSearch(android.view.View,int):0 -> focusSearch
    2:2:android.view.View focusSearch(android.view.View,int):0:0 -> focusSearch
    void animateDisappearance(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo) -> g
    void assertNotInLayoutOrScroll(java.lang.String) -> h
    void cancelTouch() -> i
    void clearNestedRecyclerViewIfNotNested(androidx.recyclerview.widget.RecyclerView$ViewHolder) -> j
    1:1:void androidx.recyclerview.widget.RecyclerView$Recycler.clearOldPositions():0:0 -> k
    1:1:void clearOldPositions():0 -> k
    void considerReleasingGlowsOnScroll(int,int) -> l
    1:1:boolean hasUpdatedView():0:0 -> m
    1:1:void consumePendingUpdateOperations():0 -> m
    2:2:void consumePendingUpdateOperations():0:0 -> m
    3:3:void onExitLayoutOrScroll():0:0 -> m
    3:3:void consumePendingUpdateOperations():0 -> m
    4:4:void consumePendingUpdateOperations():0:0 -> m
    void defaultOnMeasure(int,int) -> n
    void dispatchChildAttached(android.view.View) -> o
    1:1:void androidx.recyclerview.widget.RecyclerView$LayoutManager.dispatchAttachedToWindow(androidx.recyclerview.widget.RecyclerView):0:0 -> onAttachedToWindow
    1:1:void onAttachedToWindow():0 -> onAttachedToWindow
    2:2:void onAttachedToWindow():0:0 -> onAttachedToWindow
    3:3:void androidx.recyclerview.widget.GapWorker.add(androidx.recyclerview.widget.RecyclerView):0:0 -> onAttachedToWindow
    3:3:void onAttachedToWindow():0 -> onAttachedToWindow
    1:1:void androidx.recyclerview.widget.RecyclerView$LayoutManager.dispatchDetachedFromWindow(androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$Recycler):0:0 -> onDetachedFromWindow
    1:1:void onDetachedFromWindow():0 -> onDetachedFromWindow
    2:2:void onDetachedFromWindow():0:0 -> onDetachedFromWindow
    3:3:void androidx.recyclerview.widget.ViewInfoStore.onDetach():0:0 -> onDetachedFromWindow
    3:3:void onDetachedFromWindow():0 -> onDetachedFromWindow
    4:4:void androidx.recyclerview.widget.ViewInfoStore$InfoRecord.drainCache():0:0 -> onDetachedFromWindow
    4:4:void androidx.recyclerview.widget.ViewInfoStore.onDetach():0 -> onDetachedFromWindow
    4:4:void onDetachedFromWindow():0 -> onDetachedFromWindow
    5:5:void onDetachedFromWindow():0:0 -> onDetachedFromWindow
    6:6:void androidx.recyclerview.widget.GapWorker.remove(androidx.recyclerview.widget.RecyclerView):0:0 -> onDetachedFromWindow
    6:6:void onDetachedFromWindow():0 -> onDetachedFromWindow
    7:7:void onDetachedFromWindow():0:0 -> onDetachedFromWindow
    1:1:boolean dispatchOnItemTouchIntercept(android.view.MotionEvent):0:0 -> onInterceptTouchEvent
    1:1:boolean onInterceptTouchEvent(android.view.MotionEvent):0 -> onInterceptTouchEvent
    2:2:boolean onInterceptTouchEvent(android.view.MotionEvent):0:0 -> onInterceptTouchEvent
    1:1:void onExitLayoutOrScroll():0:0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:void onMeasure(int,int):0:0 -> onMeasure
    1:1:void androidx.recyclerview.widget.RecyclerView$SavedState.copyFrom(androidx.recyclerview.widget.RecyclerView$SavedState):0:0 -> onSaveInstanceState
    1:1:android.os.Parcelable onSaveInstanceState():0 -> onSaveInstanceState
    2:2:android.os.Parcelable onSaveInstanceState():0:0 -> onSaveInstanceState
    1:1:boolean dispatchOnItemTouch(android.view.MotionEvent):0:0 -> onTouchEvent
    1:1:boolean onTouchEvent(android.view.MotionEvent):0 -> onTouchEvent
    2:2:boolean onTouchEvent(android.view.MotionEvent):0:0 -> onTouchEvent
    void dispatchChildDetached(android.view.View) -> p
    1:1:boolean androidx.recyclerview.widget.AdapterHelper.hasUpdates():0:0 -> q
    1:1:void dispatchLayout():0 -> q
    2:2:void dispatchLayout():0:0 -> q
    3:3:void dispatchLayoutStep3():0:0 -> q
    3:3:void dispatchLayout():0 -> q
    4:4:androidx.recyclerview.widget.RecyclerView$ViewHolder androidx.recyclerview.widget.ViewInfoStore.getFromOldChangeHolders(long):0:0 -> q
    4:4:void dispatchLayoutStep3():0 -> q
    4:4:void dispatchLayout():0 -> q
    5:5:void dispatchLayoutStep3():0:0 -> q
    5:5:void dispatchLayout():0 -> q
    6:6:void handleMissingPreInfoForChangeError(long,androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> q
    6:6:void dispatchLayoutStep3():0 -> q
    6:6:void dispatchLayout():0 -> q
    7:7:void animateChange(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,boolean,boolean):0:0 -> q
    7:7:void dispatchLayoutStep3():0 -> q
    7:7:void dispatchLayout():0 -> q
    8:8:void dispatchLayoutStep3():0:0 -> q
    8:8:void dispatchLayout():0 -> q
    9:9:void androidx.recyclerview.widget.ViewInfoStore.process(androidx.recyclerview.widget.ViewInfoStore$ProcessCallback):0:0 -> q
    9:9:void dispatchLayoutStep3():0 -> q
    9:9:void dispatchLayout():0 -> q
    10:10:void androidx.recyclerview.widget.RecyclerView$4.unused(androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> q
    10:10:void androidx.recyclerview.widget.ViewInfoStore.process(androidx.recyclerview.widget.ViewInfoStore$ProcessCallback):0 -> q
    10:10:void dispatchLayoutStep3():0 -> q
    10:10:void dispatchLayout():0 -> q
    11:11:void androidx.recyclerview.widget.ViewInfoStore.process(androidx.recyclerview.widget.ViewInfoStore$ProcessCallback):0:0 -> q
    11:11:void dispatchLayoutStep3():0 -> q
    11:11:void dispatchLayout():0 -> q
    12:12:void androidx.recyclerview.widget.RecyclerView$4.processAppeared(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo):0:0 -> q
    12:12:void androidx.recyclerview.widget.ViewInfoStore.process(androidx.recyclerview.widget.ViewInfoStore$ProcessCallback):0 -> q
    12:12:void dispatchLayoutStep3():0 -> q
    12:12:void dispatchLayout():0 -> q
    13:13:void animateAppearance(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo):0:0 -> q
    13:13:void androidx.recyclerview.widget.RecyclerView$4.processAppeared(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo):0 -> q
    13:13:void androidx.recyclerview.widget.ViewInfoStore.process(androidx.recyclerview.widget.ViewInfoStore$ProcessCallback):0 -> q
    13:13:void dispatchLayoutStep3():0 -> q
    13:13:void dispatchLayout():0 -> q
    14:14:void androidx.recyclerview.widget.ViewInfoStore.process(androidx.recyclerview.widget.ViewInfoStore$ProcessCallback):0:0 -> q
    14:14:void dispatchLayoutStep3():0 -> q
    14:14:void dispatchLayout():0 -> q
    15:15:void androidx.recyclerview.widget.RecyclerView$4.processPersistent(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo):0:0 -> q
    15:15:void androidx.recyclerview.widget.ViewInfoStore.process(androidx.recyclerview.widget.ViewInfoStore$ProcessCallback):0 -> q
    15:15:void dispatchLayoutStep3():0 -> q
    15:15:void dispatchLayout():0 -> q
    16:16:void androidx.recyclerview.widget.ViewInfoStore.process(androidx.recyclerview.widget.ViewInfoStore$ProcessCallback):0:0 -> q
    16:16:void dispatchLayoutStep3():0 -> q
    16:16:void dispatchLayout():0 -> q
    17:17:void androidx.recyclerview.widget.RecyclerView$4.processDisappeared(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo):0:0 -> q
    17:17:void androidx.recyclerview.widget.ViewInfoStore.process(androidx.recyclerview.widget.ViewInfoStore$ProcessCallback):0 -> q
    17:17:void dispatchLayoutStep3():0 -> q
    17:17:void dispatchLayout():0 -> q
    18:18:void androidx.recyclerview.widget.ViewInfoStore.process(androidx.recyclerview.widget.ViewInfoStore$ProcessCallback):0:0 -> q
    18:18:void dispatchLayoutStep3():0 -> q
    18:18:void dispatchLayout():0 -> q
    19:19:void androidx.recyclerview.widget.RecyclerView$4.processAppeared(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo):0:0 -> q
    19:19:void androidx.recyclerview.widget.ViewInfoStore.process(androidx.recyclerview.widget.ViewInfoStore$ProcessCallback):0 -> q
    19:19:void dispatchLayoutStep3():0 -> q
    19:19:void dispatchLayout():0 -> q
    20:20:void animateAppearance(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo):0:0 -> q
    20:20:void androidx.recyclerview.widget.RecyclerView$4.processAppeared(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo):0 -> q
    20:20:void androidx.recyclerview.widget.ViewInfoStore.process(androidx.recyclerview.widget.ViewInfoStore$ProcessCallback):0 -> q
    20:20:void dispatchLayoutStep3():0 -> q
    20:20:void dispatchLayout():0 -> q
    21:21:void androidx.recyclerview.widget.ViewInfoStore.process(androidx.recyclerview.widget.ViewInfoStore$ProcessCallback):0:0 -> q
    21:21:void dispatchLayoutStep3():0 -> q
    21:21:void dispatchLayout():0 -> q
    22:22:void dispatchLayoutStep3():0:0 -> q
    22:22:void dispatchLayout():0 -> q
    23:23:void onExitLayoutOrScroll():0:0 -> q
    23:23:void dispatchLayoutStep3():0 -> q
    23:23:void dispatchLayout():0 -> q
    24:24:void dispatchLayoutStep3():0:0 -> q
    24:24:void dispatchLayout():0 -> q
    25:25:void androidx.recyclerview.widget.ViewInfoStore.clear():0:0 -> q
    25:25:void dispatchLayoutStep3():0 -> q
    25:25:void dispatchLayout():0 -> q
    26:26:void dispatchLayoutStep3():0:0 -> q
    26:26:void dispatchLayout():0 -> q
    27:27:boolean didChildRangeChange(int,int):0:0 -> q
    27:27:void dispatchLayoutStep3():0 -> q
    27:27:void dispatchLayout():0 -> q
    28:28:void dispatchLayoutStep3():0:0 -> q
    28:28:void dispatchLayout():0 -> q
    29:29:void recoverFocusFromState():0:0 -> q
    29:29:void dispatchLayoutStep3():0 -> q
    29:29:void dispatchLayout():0 -> q
    30:30:android.view.View findNextViewToFocus():0:0 -> q
    30:30:void recoverFocusFromState():0 -> q
    30:30:void dispatchLayoutStep3():0 -> q
    30:30:void dispatchLayout():0 -> q
    31:31:void recoverFocusFromState():0:0 -> q
    31:31:void dispatchLayoutStep3():0 -> q
    31:31:void dispatchLayout():0 -> q
    32:32:void resetFocusInfo():0:0 -> q
    32:32:void dispatchLayoutStep3():0 -> q
    32:32:void dispatchLayout():0 -> q
    1:1:void androidx.recyclerview.widget.ViewInfoStore.clear():0:0 -> r
    1:1:void dispatchLayoutStep1():0 -> r
    2:2:void dispatchLayoutStep1():0:0 -> r
    3:3:void saveFocusInfo():0:0 -> r
    3:3:void dispatchLayoutStep1():0 -> r
    4:4:void resetFocusInfo():0:0 -> r
    4:4:void saveFocusInfo():0 -> r
    4:4:void dispatchLayoutStep1():0 -> r
    5:5:void saveFocusInfo():0:0 -> r
    5:5:void dispatchLayoutStep1():0 -> r
    6:6:int getDeepestFocusedViewWithId(android.view.View):0:0 -> r
    6:6:void saveFocusInfo():0 -> r
    6:6:void dispatchLayoutStep1():0 -> r
    7:7:void saveFocusInfo():0:0 -> r
    7:7:void dispatchLayoutStep1():0 -> r
    8:8:void dispatchLayoutStep1():0:0 -> r
    9:9:void androidx.recyclerview.widget.ViewInfoStore.addToOldChangeHolders(long,androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> r
    9:9:void dispatchLayoutStep1():0 -> r
    10:10:void dispatchLayoutStep1():0:0 -> r
    11:11:void saveOldPositions():0:0 -> r
    11:11:void dispatchLayoutStep1():0 -> r
    12:12:void androidx.recyclerview.widget.RecyclerView$ViewHolder.saveOldPosition():0:0 -> r
    12:12:void saveOldPositions():0 -> r
    12:12:void dispatchLayoutStep1():0 -> r
    13:13:void dispatchLayoutStep1():0:0 -> r
    14:14:boolean androidx.recyclerview.widget.ViewInfoStore.isInPreLayout(androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> r
    14:14:void dispatchLayoutStep1():0 -> r
    15:15:void dispatchLayoutStep1():0:0 -> r
    16:16:void androidx.recyclerview.widget.ViewInfoStore.addToAppearedInPreLayoutHolders(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo):0:0 -> r
    16:16:void dispatchLayoutStep1():0 -> r
    17:17:void dispatchLayoutStep1():0:0 -> r
    18:18:void onExitLayoutOrScroll():0:0 -> r
    18:18:void dispatchLayoutStep1():0 -> r
    19:19:void dispatchLayoutStep1():0:0 -> r
    1:1:void androidx.recyclerview.widget.RecyclerView$ViewHolder.clearTmpDetachFlag():0:0 -> removeDetachedView
    1:1:void removeDetachedView(android.view.View,boolean):0 -> removeDetachedView
    2:2:void removeDetachedView(android.view.View,boolean):0:0 -> removeDetachedView
    1:1:void onExitLayoutOrScroll():0:0 -> s
    1:1:void dispatchLayoutStep2():0 -> s
    2:2:void dispatchLayoutStep2():0:0 -> s
    1:1:boolean shouldDeferAccessibilityEvent(android.view.accessibility.AccessibilityEvent):0:0 -> sendAccessibilityEventUnchecked
    1:1:void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent):0 -> sendAccessibilityEventUnchecked
    2:2:void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent):0:0 -> sendAccessibilityEventUnchecked
    1:1:void androidx.recyclerview.widget.RecyclerView$LayoutManager.dispatchDetachedFromWindow(androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$Recycler):0:0 -> setLayoutManager
    1:1:void setLayoutManager(androidx.recyclerview.widget.RecyclerView$LayoutManager):0 -> setLayoutManager
    2:2:void setLayoutManager(androidx.recyclerview.widget.RecyclerView$LayoutManager):0:0 -> setLayoutManager
    3:3:void androidx.recyclerview.widget.ChildHelper.removeAllViewsUnfiltered():0:0 -> setLayoutManager
    3:3:void setLayoutManager(androidx.recyclerview.widget.RecyclerView$LayoutManager):0 -> setLayoutManager
    4:4:void androidx.recyclerview.widget.ChildHelper$Bucket.reset():0:0 -> setLayoutManager
    4:4:void androidx.recyclerview.widget.ChildHelper.removeAllViewsUnfiltered():0 -> setLayoutManager
    4:4:void setLayoutManager(androidx.recyclerview.widget.RecyclerView$LayoutManager):0 -> setLayoutManager
    5:5:void androidx.recyclerview.widget.ChildHelper.removeAllViewsUnfiltered():0:0 -> setLayoutManager
    5:5:void setLayoutManager(androidx.recyclerview.widget.RecyclerView$LayoutManager):0 -> setLayoutManager
    6:6:void androidx.recyclerview.widget.RecyclerView$5.onLeftHiddenState(android.view.View):0:0 -> setLayoutManager
    6:6:void androidx.recyclerview.widget.ChildHelper.removeAllViewsUnfiltered():0 -> setLayoutManager
    6:6:void setLayoutManager(androidx.recyclerview.widget.RecyclerView$LayoutManager):0 -> setLayoutManager
    7:7:void androidx.recyclerview.widget.ChildHelper.removeAllViewsUnfiltered():0:0 -> setLayoutManager
    7:7:void setLayoutManager(androidx.recyclerview.widget.RecyclerView$LayoutManager):0 -> setLayoutManager
    8:8:void androidx.recyclerview.widget.RecyclerView$5.removeAllViews():0:0 -> setLayoutManager
    8:8:void androidx.recyclerview.widget.ChildHelper.removeAllViewsUnfiltered():0 -> setLayoutManager
    8:8:void setLayoutManager(androidx.recyclerview.widget.RecyclerView$LayoutManager):0 -> setLayoutManager
    9:9:void setLayoutManager(androidx.recyclerview.widget.RecyclerView$LayoutManager):0:0 -> setLayoutManager
    10:10:void androidx.recyclerview.widget.RecyclerView$LayoutManager.dispatchAttachedToWindow(androidx.recyclerview.widget.RecyclerView):0:0 -> setLayoutManager
    10:10:void setLayoutManager(androidx.recyclerview.widget.RecyclerView$LayoutManager):0 -> setLayoutManager
    11:11:void setLayoutManager(androidx.recyclerview.widget.RecyclerView$LayoutManager):0:0 -> setLayoutManager
    1:1:void androidx.recyclerview.widget.RecyclerView$Recycler.setRecycledViewPool(androidx.recyclerview.widget.RecyclerView$RecycledViewPool):0:0 -> setRecycledViewPool
    1:1:void setRecycledViewPool(androidx.recyclerview.widget.RecyclerView$RecycledViewPool):0 -> setRecycledViewPool
    void dispatchOnScrolled(int,int) -> t
    void ensureBottomGlow() -> u
    void ensureLeftGlow() -> v
    void ensureRightGlow() -> w
    void ensureTopGlow() -> x
    java.lang.String exceptionLabel() -> y
    void fillRemainingScrollValues(androidx.recyclerview.widget.RecyclerView$State) -> z
androidx.recyclerview.widget.RecyclerView$1 -> androidx.recyclerview.widget.g1:
    androidx.recyclerview.widget.RecyclerView this$0 -> a
androidx.recyclerview.widget.RecyclerView$2 -> androidx.recyclerview.widget.h1:
    androidx.recyclerview.widget.RecyclerView this$0 -> a
androidx.recyclerview.widget.RecyclerView$3 -> androidx.recyclerview.widget.i1:
androidx.recyclerview.widget.RecyclerView$4 -> androidx.recyclerview.widget.j1:
    androidx.recyclerview.widget.RecyclerView this$0 -> a
androidx.recyclerview.widget.RecyclerView$5 -> androidx.recyclerview.widget.k1:
    androidx.recyclerview.widget.RecyclerView this$0 -> a
androidx.recyclerview.widget.RecyclerView$6 -> androidx.recyclerview.widget.l1:
    androidx.recyclerview.widget.RecyclerView this$0 -> a
    void dispatchUpdate(androidx.recyclerview.widget.AdapterHelper$UpdateOp) -> a
    1:1:void androidx.recyclerview.widget.RecyclerView.viewRangeUpdate(int,int,java.lang.Object):0:0 -> markViewHoldersUpdated
    1:1:void markViewHoldersUpdated(int,int,java.lang.Object):0 -> markViewHoldersUpdated
    2:2:void androidx.recyclerview.widget.RecyclerView$Recycler.viewRangeUpdate(int,int):0:0 -> markViewHoldersUpdated
    2:2:void androidx.recyclerview.widget.RecyclerView.viewRangeUpdate(int,int,java.lang.Object):0 -> markViewHoldersUpdated
    2:2:void markViewHoldersUpdated(int,int,java.lang.Object):0 -> markViewHoldersUpdated
    3:3:void markViewHoldersUpdated(int,int,java.lang.Object):0:0 -> markViewHoldersUpdated
    1:1:void androidx.recyclerview.widget.RecyclerView.offsetPositionRecordsForInsert(int,int):0:0 -> offsetPositionsForAdd
    1:1:void offsetPositionsForAdd(int,int):0 -> offsetPositionsForAdd
    2:2:void androidx.recyclerview.widget.RecyclerView$Recycler.offsetPositionRecordsForInsert(int,int):0:0 -> offsetPositionsForAdd
    2:2:void androidx.recyclerview.widget.RecyclerView.offsetPositionRecordsForInsert(int,int):0 -> offsetPositionsForAdd
    2:2:void offsetPositionsForAdd(int,int):0 -> offsetPositionsForAdd
    3:3:void androidx.recyclerview.widget.RecyclerView.offsetPositionRecordsForInsert(int,int):0:0 -> offsetPositionsForAdd
    3:3:void offsetPositionsForAdd(int,int):0 -> offsetPositionsForAdd
    4:4:void offsetPositionsForAdd(int,int):0:0 -> offsetPositionsForAdd
    1:1:void androidx.recyclerview.widget.RecyclerView.offsetPositionRecordsForMove(int,int):0:0 -> offsetPositionsForMove
    1:1:void offsetPositionsForMove(int,int):0 -> offsetPositionsForMove
    2:2:void androidx.recyclerview.widget.RecyclerView$Recycler.offsetPositionRecordsForMove(int,int):0:0 -> offsetPositionsForMove
    2:2:void androidx.recyclerview.widget.RecyclerView.offsetPositionRecordsForMove(int,int):0 -> offsetPositionsForMove
    2:2:void offsetPositionsForMove(int,int):0 -> offsetPositionsForMove
    3:3:void androidx.recyclerview.widget.RecyclerView.offsetPositionRecordsForMove(int,int):0:0 -> offsetPositionsForMove
    3:3:void offsetPositionsForMove(int,int):0 -> offsetPositionsForMove
    4:4:void offsetPositionsForMove(int,int):0:0 -> offsetPositionsForMove
androidx.recyclerview.widget.RecyclerView$Adapter -> androidx.recyclerview.widget.RecyclerView$Adapter:
    androidx.recyclerview.widget.RecyclerView$AdapterDataObservable mObservable -> a
    boolean mHasStableIds -> b
    1:1:void androidx.recyclerview.widget.RecyclerView$ViewHolder.clearPayload():0:0 -> bindViewHolder
    1:1:void bindViewHolder(androidx.recyclerview.widget.RecyclerView$ViewHolder,int):0 -> bindViewHolder
    2:2:void bindViewHolder(androidx.recyclerview.widget.RecyclerView$ViewHolder,int):0:0 -> bindViewHolder
    1:1:void androidx.recyclerview.widget.RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int,int):0:0 -> notifyItemChanged
    1:1:void notifyItemChanged(int):0 -> notifyItemChanged
    1:1:void androidx.recyclerview.widget.RecyclerView$AdapterDataObservable.notifyItemRangeChanged(int,int):0:0 -> notifyItemRangeChanged
    1:1:void notifyItemRangeChanged(int,int):0 -> notifyItemRangeChanged
androidx.recyclerview.widget.RecyclerView$AdapterDataObservable -> androidx.recyclerview.widget.m1:
androidx.recyclerview.widget.RecyclerView$ItemAnimator -> androidx.recyclerview.widget.RecyclerView$ItemAnimator:
    long mChangeDuration -> f
    long mMoveDuration -> e
    long mRemoveDuration -> d
    long mAddDuration -> c
    androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemAnimatorListener mListener -> a
    java.util.ArrayList mFinishedListeners -> b
    int buildAdapterChangeFlagsForAnimations(androidx.recyclerview.widget.RecyclerView$ViewHolder) -> a
    void setListener(androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemAnimatorListener) -> b
    1:1:void androidx.recyclerview.widget.RecyclerView$ItemAnimatorRestoreListener.onAnimationFinished(androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> dispatchAnimationFinished
    1:1:void dispatchAnimationFinished(androidx.recyclerview.widget.RecyclerView$ViewHolder):0 -> dispatchAnimationFinished
    2:2:boolean androidx.recyclerview.widget.RecyclerView$ViewHolder.shouldBeKeptAsChild():0:0 -> dispatchAnimationFinished
    2:2:void androidx.recyclerview.widget.RecyclerView$ItemAnimatorRestoreListener.onAnimationFinished(androidx.recyclerview.widget.RecyclerView$ViewHolder):0 -> dispatchAnimationFinished
    2:2:void dispatchAnimationFinished(androidx.recyclerview.widget.RecyclerView$ViewHolder):0 -> dispatchAnimationFinished
    3:3:void androidx.recyclerview.widget.RecyclerView$ItemAnimatorRestoreListener.onAnimationFinished(androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> dispatchAnimationFinished
    3:3:void dispatchAnimationFinished(androidx.recyclerview.widget.RecyclerView$ViewHolder):0 -> dispatchAnimationFinished
    4:4:boolean androidx.recyclerview.widget.RecyclerView.removeAnimatingView(android.view.View):0:0 -> dispatchAnimationFinished
    4:4:void androidx.recyclerview.widget.RecyclerView$ItemAnimatorRestoreListener.onAnimationFinished(androidx.recyclerview.widget.RecyclerView$ViewHolder):0 -> dispatchAnimationFinished
    4:4:void dispatchAnimationFinished(androidx.recyclerview.widget.RecyclerView$ViewHolder):0 -> dispatchAnimationFinished
    5:5:void androidx.recyclerview.widget.RecyclerView$ItemAnimatorRestoreListener.onAnimationFinished(androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> dispatchAnimationFinished
    5:5:void dispatchAnimationFinished(androidx.recyclerview.widget.RecyclerView$ViewHolder):0 -> dispatchAnimationFinished
androidx.recyclerview.widget.RecyclerView$ItemAnimatorRestoreListener -> androidx.recyclerview.widget.n1:
    androidx.recyclerview.widget.RecyclerView this$0 -> a
androidx.recyclerview.widget.RecyclerView$LayoutManager -> androidx.recyclerview.widget.RecyclerView$LayoutManager:
    androidx.recyclerview.widget.ViewBoundsCheck$Callback mHorizontalBoundCheckCallback -> c
    androidx.recyclerview.widget.ViewBoundsCheck$Callback mVerticalBoundCheckCallback -> d
    boolean mPrefetchMaxObservedInInitialPrefetch -> n
    int mWidthMode -> o
    int mPrefetchMaxCountObserved -> m
    boolean mIsAttachedToWindow -> i
    boolean mAutoMeasure -> j
    androidx.recyclerview.widget.RecyclerView$SmoothScroller mSmoothScroller -> g
    boolean mMeasurementCacheEnabled -> k
    boolean mItemPrefetchEnabled -> l
    androidx.recyclerview.widget.ViewBoundsCheck mHorizontalBoundCheck -> e
    androidx.recyclerview.widget.ViewBoundsCheck mVerticalBoundCheck -> f
    androidx.recyclerview.widget.ChildHelper mChildHelper -> a
    androidx.recyclerview.widget.RecyclerView mRecyclerView -> b
    boolean mRequestedSimpleAnimations -> h
    int mHeight -> r
    int mHeightMode -> p
    int mWidth -> q
    1:1:void androidx.recyclerview.widget.RecyclerView$ViewHolder.unScrap():0:0 -> a
    1:1:void addViewInt(android.view.View,int,boolean):0 -> a
    2:2:void addViewInt(android.view.View,int,boolean):0:0 -> a
    1:1:void androidx.recyclerview.widget.RecyclerView.assertInLayoutOrScroll(java.lang.String):0:0 -> assertInLayoutOrScroll
    1:1:void assertInLayoutOrScroll(java.lang.String):0 -> assertInLayoutOrScroll
    boolean isMeasurementUpToDate(int,int,int) -> b
    void onInitializeAccessibilityNodeInfoForItem(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat) -> c
    1:1:int androidx.recyclerview.widget.RecyclerView$Recycler.getScrapCount():0:0 -> d
    1:1:void removeAndRecycleScrapInt(androidx.recyclerview.widget.RecyclerView$Recycler):0 -> d
    2:2:android.view.View androidx.recyclerview.widget.RecyclerView$Recycler.getScrapViewAt(int):0:0 -> d
    2:2:void removeAndRecycleScrapInt(androidx.recyclerview.widget.RecyclerView$Recycler):0 -> d
    3:3:void removeAndRecycleScrapInt(androidx.recyclerview.widget.RecyclerView$Recycler):0:0 -> d
    4:4:void androidx.recyclerview.widget.RecyclerView$Recycler.quickRecycleScrapView(android.view.View):0:0 -> d
    4:4:void removeAndRecycleScrapInt(androidx.recyclerview.widget.RecyclerView$Recycler):0 -> d
    5:5:void androidx.recyclerview.widget.RecyclerView$Recycler.clearScrap():0:0 -> d
    5:5:void removeAndRecycleScrapInt(androidx.recyclerview.widget.RecyclerView$Recycler):0 -> d
    6:6:void removeAndRecycleScrapInt(androidx.recyclerview.widget.RecyclerView$Recycler):0:0 -> d
    1:1:void detachViewInternal(int,android.view.View):0:0 -> detachView
    1:1:void detachView(android.view.View):0 -> detachView
    1:1:void detachViewInternal(int,android.view.View):0:0 -> detachViewAt
    1:1:void detachViewAt(int):0 -> detachViewAt
    1:1:void androidx.recyclerview.widget.ViewInfoStore.onViewDetached(androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> e
    1:1:void scrapOrRecycleView(androidx.recyclerview.widget.RecyclerView$Recycler,int,android.view.View):0 -> e
    void setExactMeasureSpecsFrom(androidx.recyclerview.widget.RecyclerView) -> f
    1:1:boolean androidx.recyclerview.widget.ChildHelper.isHidden(android.view.View):0:0 -> findContainingItemView
    1:1:android.view.View findContainingItemView(android.view.View):0 -> findContainingItemView
    void setMeasureSpecs(int,int) -> g
    1:1:boolean androidx.recyclerview.widget.ChildHelper.isHidden(android.view.View):0:0 -> getFocusedChild
    1:1:android.view.View getFocusedChild():0 -> getFocusedChild
    void setMeasuredDimensionFromChildren(int,int) -> h
    void setRecyclerView(androidx.recyclerview.widget.RecyclerView) -> i
    boolean shouldMeasureChild(android.view.View,int,int,androidx.recyclerview.widget.RecyclerView$LayoutParams) -> j
    boolean shouldMeasureTwice() -> k
    boolean shouldReMeasureChild(android.view.View,int,int,androidx.recyclerview.widget.RecyclerView$LayoutParams) -> l
    1:1:int[] getChildRectangleOnScreenScrollAmount(androidx.recyclerview.widget.RecyclerView,android.view.View,android.graphics.Rect,boolean):0:0 -> requestChildRectangleOnScreen
    1:1:boolean requestChildRectangleOnScreen(androidx.recyclerview.widget.RecyclerView,android.view.View,android.graphics.Rect,boolean,boolean):0 -> requestChildRectangleOnScreen
    2:2:boolean requestChildRectangleOnScreen(androidx.recyclerview.widget.RecyclerView,android.view.View,android.graphics.Rect,boolean,boolean):0:0 -> requestChildRectangleOnScreen
    3:3:boolean isFocusedChildVisibleAfterScrolling(androidx.recyclerview.widget.RecyclerView,int,int):0:0 -> requestChildRectangleOnScreen
    3:3:boolean requestChildRectangleOnScreen(androidx.recyclerview.widget.RecyclerView,android.view.View,android.graphics.Rect,boolean,boolean):0 -> requestChildRectangleOnScreen
    4:4:boolean requestChildRectangleOnScreen(androidx.recyclerview.widget.RecyclerView,android.view.View,android.graphics.Rect,boolean,boolean):0:0 -> requestChildRectangleOnScreen
    1:1:void androidx.recyclerview.widget.RecyclerView$ViewHolder.stopIgnoring():0:0 -> stopIgnoringView
    1:1:void stopIgnoringView(android.view.View):0 -> stopIgnoringView
    2:2:void stopIgnoringView(android.view.View):0:0 -> stopIgnoringView
androidx.recyclerview.widget.RecyclerView$LayoutManager$1 -> androidx.recyclerview.widget.o1:
    androidx.recyclerview.widget.RecyclerView$LayoutManager this$0 -> a
androidx.recyclerview.widget.RecyclerView$LayoutManager$2 -> androidx.recyclerview.widget.p1:
    androidx.recyclerview.widget.RecyclerView$LayoutManager this$0 -> a
androidx.recyclerview.widget.RecyclerView$LayoutParams -> androidx.recyclerview.widget.RecyclerView$LayoutParams:
    androidx.recyclerview.widget.RecyclerView$ViewHolder mViewHolder -> a
    boolean mInsetsDirty -> c
    android.graphics.Rect mDecorInsets -> b
    boolean mPendingInvalidate -> d
androidx.recyclerview.widget.RecyclerView$RecycledViewPool -> androidx.recyclerview.widget.RecyclerView$RecycledViewPool:
    android.util.SparseArray mScrap -> a
    int mAttachCount -> b
    void attach() -> a
    void detach() -> b
    void factorInBindTime(int,long) -> c
    void factorInCreateTime(int,long) -> d
    androidx.recyclerview.widget.RecyclerView$RecycledViewPool$ScrapData getScrapDataForType(int) -> e
    1:1:void detach():0:0 -> f
    1:1:void onAdapterChanged(androidx.recyclerview.widget.RecyclerView$Adapter,androidx.recyclerview.widget.RecyclerView$Adapter,boolean):0 -> f
    2:2:void onAdapterChanged(androidx.recyclerview.widget.RecyclerView$Adapter,androidx.recyclerview.widget.RecyclerView$Adapter,boolean):0:0 -> f
    3:3:void attach():0:0 -> f
    3:3:void onAdapterChanged(androidx.recyclerview.widget.RecyclerView$Adapter,androidx.recyclerview.widget.RecyclerView$Adapter,boolean):0 -> f
    long runningAverage(long,long) -> g
    boolean willBindInTime(int,long,long) -> h
    boolean willCreateInTime(int,long,long) -> i
androidx.recyclerview.widget.RecyclerView$RecycledViewPool$ScrapData -> androidx.recyclerview.widget.q1:
    long mBindRunningAverageNs -> d
    long mCreateRunningAverageNs -> c
    int mMaxScrap -> b
    java.util.ArrayList mScrapHeap -> a
androidx.recyclerview.widget.RecyclerView$Recycler -> androidx.recyclerview.widget.RecyclerView$Recycler:
    androidx.recyclerview.widget.RecyclerView this$0 -> i
    java.util.List mUnmodifiableAttachedScrap -> d
    androidx.recyclerview.widget.RecyclerView$RecycledViewPool mRecyclerPool -> g
    int mViewCacheMax -> f
    int mRequestedCacheMax -> e
    java.util.ArrayList mCachedViews -> c
    androidx.recyclerview.widget.RecyclerView$ViewCacheExtension mViewCacheExtension -> h
    java.util.ArrayList mChangedScrap -> b
    java.util.ArrayList mAttachedScrap -> a
    1:1:void dispatchViewRecycled(androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> a
    1:1:void addViewHolderToRecycledViewPool(androidx.recyclerview.widget.RecyclerView$ViewHolder,boolean):0 -> a
    2:2:void addViewHolderToRecycledViewPool(androidx.recyclerview.widget.RecyclerView$ViewHolder,boolean):0:0 -> a
    androidx.recyclerview.widget.RecyclerView$RecycledViewPool getRecycledViewPool() -> b
    1:1:int androidx.recyclerview.widget.AdapterHelper.findPositionOffset(int):0:0 -> bindViewToPosition
    1:1:void bindViewToPosition(android.view.View,int):0 -> bindViewToPosition
    2:2:void bindViewToPosition(android.view.View,int):0:0 -> bindViewToPosition
    1:1:void androidx.recyclerview.widget.GapWorker$LayoutPrefetchRegistryImpl.clearPrefetchPositions():0:0 -> c
    1:1:void recycleAndClearCachedViews():0 -> c
    1:1:int androidx.recyclerview.widget.AdapterHelper.findPositionOffset(int):0:0 -> convertPreLayoutPositionToPostLayout
    1:1:int convertPreLayoutPositionToPostLayout(int):0 -> convertPreLayoutPositionToPostLayout
    2:2:int convertPreLayoutPositionToPostLayout(int):0:0 -> convertPreLayoutPositionToPostLayout
    void recycleCachedViewAt(int) -> d
    1:1:boolean androidx.recyclerview.widget.RecyclerView$ViewHolder.doesTransientStatePreventRecycling():0:0 -> e
    1:1:void recycleViewHolderInternal(androidx.recyclerview.widget.RecyclerView$ViewHolder):0 -> e
    2:2:void recycleViewHolderInternal(androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> e
    1:1:boolean androidx.recyclerview.widget.RecyclerView.canReuseUpdatedViewHolder(androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> f
    1:1:void scrapView(android.view.View):0 -> f
    2:2:void scrapView(android.view.View):0:0 -> f
    3:3:void androidx.recyclerview.widget.RecyclerView$ViewHolder.setScrapContainer(androidx.recyclerview.widget.RecyclerView$Recycler,boolean):0:0 -> f
    3:3:void scrapView(android.view.View):0 -> f
    4:4:void scrapView(android.view.View):0:0 -> f
    5:5:void androidx.recyclerview.widget.RecyclerView$ViewHolder.setScrapContainer(androidx.recyclerview.widget.RecyclerView$Recycler,boolean):0:0 -> f
    5:5:void scrapView(android.view.View):0 -> f
    6:6:void scrapView(android.view.View):0:0 -> f
    void setViewCacheExtension(androidx.recyclerview.widget.RecyclerView$ViewCacheExtension) -> g
    1:1:android.view.View getViewForPosition(int,boolean):0:0 -> getViewForPosition
    1:1:android.view.View getViewForPosition(int):0 -> getViewForPosition
    1:1:long androidx.recyclerview.widget.RecyclerView.getNanoTime():0:0 -> h
    1:1:boolean tryBindViewHolderByDeadline(androidx.recyclerview.widget.RecyclerView$ViewHolder,int,int,long):0 -> h
    2:2:boolean tryBindViewHolderByDeadline(androidx.recyclerview.widget.RecyclerView$ViewHolder,int,int,long):0:0 -> h
    3:3:long androidx.recyclerview.widget.RecyclerView.getNanoTime():0:0 -> h
    3:3:boolean tryBindViewHolderByDeadline(androidx.recyclerview.widget.RecyclerView$ViewHolder,int,int,long):0 -> h
    4:4:boolean tryBindViewHolderByDeadline(androidx.recyclerview.widget.RecyclerView$ViewHolder,int,int,long):0:0 -> h
    5:5:void attachAccessibilityDelegateOnBind(androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> h
    5:5:boolean tryBindViewHolderByDeadline(androidx.recyclerview.widget.RecyclerView$ViewHolder,int,int,long):0 -> h
    6:6:boolean tryBindViewHolderByDeadline(androidx.recyclerview.widget.RecyclerView$ViewHolder,int,int,long):0:0 -> h
    1:1:androidx.recyclerview.widget.RecyclerView$ViewHolder getChangedScrapViewForPosition(int):0:0 -> i
    1:1:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0 -> i
    2:2:int androidx.recyclerview.widget.AdapterHelper.findPositionOffset(int):0:0 -> i
    2:2:androidx.recyclerview.widget.RecyclerView$ViewHolder getChangedScrapViewForPosition(int):0 -> i
    2:2:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0 -> i
    3:3:androidx.recyclerview.widget.RecyclerView$ViewHolder getChangedScrapViewForPosition(int):0:0 -> i
    3:3:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0 -> i
    4:4:androidx.recyclerview.widget.RecyclerView$ViewHolder getScrapOrHiddenOrCachedHolderForPosition(int,boolean):0:0 -> i
    4:4:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0 -> i
    5:5:android.view.View androidx.recyclerview.widget.ChildHelper.findHiddenNonRemovedView(int):0:0 -> i
    5:5:androidx.recyclerview.widget.RecyclerView$ViewHolder getScrapOrHiddenOrCachedHolderForPosition(int,boolean):0 -> i
    5:5:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0 -> i
    6:6:androidx.recyclerview.widget.RecyclerView$ViewHolder androidx.recyclerview.widget.RecyclerView$5.getChildViewHolder(android.view.View):0:0 -> i
    6:6:android.view.View androidx.recyclerview.widget.ChildHelper.findHiddenNonRemovedView(int):0 -> i
    6:6:androidx.recyclerview.widget.RecyclerView$ViewHolder getScrapOrHiddenOrCachedHolderForPosition(int,boolean):0 -> i
    6:6:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0 -> i
    7:7:android.view.View androidx.recyclerview.widget.ChildHelper.findHiddenNonRemovedView(int):0:0 -> i
    7:7:androidx.recyclerview.widget.RecyclerView$ViewHolder getScrapOrHiddenOrCachedHolderForPosition(int,boolean):0 -> i
    7:7:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0 -> i
    8:8:androidx.recyclerview.widget.RecyclerView$ViewHolder getScrapOrHiddenOrCachedHolderForPosition(int,boolean):0:0 -> i
    8:8:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0 -> i
    9:9:boolean validateViewHolderForOffsetPosition(androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> i
    9:9:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0 -> i
    10:10:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0:0 -> i
    11:11:void androidx.recyclerview.widget.RecyclerView$ViewHolder.unScrap():0:0 -> i
    11:11:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0 -> i
    12:12:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0:0 -> i
    13:13:boolean validateViewHolderForOffsetPosition(androidx.recyclerview.widget.RecyclerView$ViewHolder):0:0 -> i
    13:13:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0 -> i
    14:14:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0:0 -> i
    15:15:int androidx.recyclerview.widget.AdapterHelper.findPositionOffset(int):0:0 -> i
    15:15:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0 -> i
    16:16:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0:0 -> i
    17:17:androidx.recyclerview.widget.RecyclerView$ViewHolder getScrapOrCachedViewForId(long,int,boolean):0:0 -> i
    17:17:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0 -> i
    18:18:void quickRecycleScrapView(android.view.View):0:0 -> i
    18:18:androidx.recyclerview.widget.RecyclerView$ViewHolder getScrapOrCachedViewForId(long,int,boolean):0 -> i
    18:18:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0 -> i
    19:19:androidx.recyclerview.widget.RecyclerView$ViewHolder getScrapOrCachedViewForId(long,int,boolean):0:0 -> i
    19:19:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0 -> i
    20:20:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0:0 -> i
    21:21:long androidx.recyclerview.widget.RecyclerView.getNanoTime():0:0 -> i
    21:21:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0 -> i
    22:22:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0:0 -> i
    23:23:long androidx.recyclerview.widget.RecyclerView.getNanoTime():0:0 -> i
    23:23:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0 -> i
    24:24:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0:0 -> i
    25:25:int androidx.recyclerview.widget.AdapterHelper.findPositionOffset(int):0:0 -> i
    25:25:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0 -> i
    26:26:androidx.recyclerview.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long):0:0 -> i
    void unscrapView(androidx.recyclerview.widget.RecyclerView$ViewHolder) -> j
    void updateViewCacheSize() -> k
    1:1:void androidx.recyclerview.widget.RecyclerView$ViewHolder.unScrap():0:0 -> recycleView
    1:1:void recycleView(android.view.View):0 -> recycleView
    2:2:void recycleView(android.view.View):0:0 -> recycleView
androidx.recyclerview.widget.RecyclerView$RecyclerViewDataObserver -> androidx.recyclerview.widget.r1:
    androidx.recyclerview.widget.RecyclerView this$0 -> a
    void triggerUpdateProcessor() -> a
androidx.recyclerview.widget.RecyclerView$SavedState -> androidx.recyclerview.widget.RecyclerView$SavedState:
    android.os.Parcelable mLayoutState -> b
androidx.recyclerview.widget.RecyclerView$SavedState$1 -> androidx.recyclerview.widget.s1:
    1:1:androidx.recyclerview.widget.RecyclerView$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    2:2:androidx.recyclerview.widget.RecyclerView$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    2:2:java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader):0 -> createFromParcel
    1:1:androidx.recyclerview.widget.RecyclerView$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.recyclerview.widget.RecyclerView$SmoothScroller -> androidx.recyclerview.widget.RecyclerView$SmoothScroller:
    androidx.recyclerview.widget.RecyclerView mRecyclerView -> b
    boolean mRunning -> e
    androidx.recyclerview.widget.RecyclerView$LayoutManager mLayoutManager -> c
    boolean mStarted -> h
    int mTargetPosition -> a
    boolean mPendingInitialRun -> d
    android.view.View mTargetView -> f
    androidx.recyclerview.widget.RecyclerView$SmoothScroller$Action mRecyclingAction -> g
    void onAnimation(int,int) -> a
    void start(androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$LayoutManager) -> b
    1:1:void androidx.recyclerview.widget.RecyclerView$LayoutManager.onSmoothScrollerStopped(androidx.recyclerview.widget.RecyclerView$SmoothScroller):0:0 -> stop
    1:1:void stop():0 -> stop
    2:2:void stop():0:0 -> stop
androidx.recyclerview.widget.RecyclerView$SmoothScroller$Action -> androidx.recyclerview.widget.RecyclerView$SmoothScroller$Action:
    android.view.animation.Interpolator mInterpolator -> e
    boolean mChanged -> f
    int mConsecutiveUpdates -> g
    int mJumpToPosition -> d
    int mDy -> b
    int mDuration -> c
    int mDx -> a
    boolean hasJumpTarget() -> a
    1:1:void validate():0:0 -> b
    1:1:void runIfNecessary(androidx.recyclerview.widget.RecyclerView):0 -> b
    2:2:void runIfNecessary(androidx.recyclerview.widget.RecyclerView):0:0 -> b
    3:3:void androidx.recyclerview.widget.RecyclerView$ViewFlinger.smoothScrollBy(int,int,int):0:0 -> b
    3:3:void runIfNecessary(androidx.recyclerview.widget.RecyclerView):0 -> b
    4:4:void runIfNecessary(androidx.recyclerview.widget.RecyclerView):0:0 -> b
    5:5:void validate():0:0 -> b
    5:5:void runIfNecessary(androidx.recyclerview.widget.RecyclerView):0 -> b
    6:6:void runIfNecessary(androidx.recyclerview.widget.RecyclerView):0:0 -> b
androidx.recyclerview.widget.RecyclerView$State -> androidx.recyclerview.widget.RecyclerView$State:
    int mFocusedSubChildId -> o
    int mFocusedItemPosition -> m
    boolean mTrackOldChangeHolders -> i
    boolean mIsMeasuring -> j
    boolean mRunSimpleAnimations -> k
    boolean mRunPredictiveAnimations -> l
    int mItemCount -> f
    int mDeletedInvisibleItemCountSincePreviousLayout -> d
    int mLayoutStep -> e
    int mPreviousLayoutItemCount -> c
    int mTargetPosition -> a
    android.util.SparseArray mData -> b
    boolean mStructureChanged -> g
    boolean mInPreLayout -> h
    long mFocusedItemId -> n
    int mRemainingScrollHorizontal -> p
    int mRemainingScrollVertical -> q
    void assertLayoutStep(int) -> a
androidx.recyclerview.widget.RecyclerView$ViewFlinger -> androidx.recyclerview.widget.t1:
    androidx.recyclerview.widget.RecyclerView this$0 -> g
    boolean mEatRunOnAnimationRequest -> e
    android.view.animation.Interpolator mInterpolator -> d
    boolean mReSchedulePostAnimationCallback -> f
    int mLastFlingY -> b
    int mLastFlingX -> a
    android.widget.OverScroller mScroller -> c
    1:1:float distanceInfluenceForSnapDuration(float):0:0 -> a
    1:1:int computeScrollDuration(int,int,int,int):0 -> a
    2:2:int computeScrollDuration(int,int,int,int):0:0 -> a
    void postOnAnimation() -> b
    1:1:void stop():0:0 -> run
    1:1:void run():0 -> run
    2:2:void disableRunOnAnimationRequests():0:0 -> run
    2:2:void run():0 -> run
    3:3:void run():0:0 -> run
    4:4:void androidx.recyclerview.widget.GapWorker$LayoutPrefetchRegistryImpl.clearPrefetchPositions():0:0 -> run
    4:4:void run():0 -> run
    5:5:void run():0:0 -> run
    6:6:void enableRunOnAnimationRequests():0:0 -> run
    6:6:void run():0 -> run
    1:1:void smoothScrollBy(int,int,int,int):0:0 -> smoothScrollBy
    1:1:void smoothScrollBy(int,int):0 -> smoothScrollBy
    2:2:void smoothScrollBy(int,int,int):0:0 -> smoothScrollBy
    2:2:void smoothScrollBy(int,int,int,int):0 -> smoothScrollBy
    2:2:void smoothScrollBy(int,int):0 -> smoothScrollBy
androidx.recyclerview.widget.RecyclerView$ViewHolder -> androidx.recyclerview.widget.RecyclerView$ViewHolder:
    java.util.List FULLUPDATE_PAYLOADS -> r
    boolean mInChangeScrap -> n
    int mWasImportantForAccessibilityBeforeHidden -> o
    int mIsRecyclableCount -> l
    int mFlags -> i
    int mPreLayoutPosition -> f
    long mItemId -> d
    androidx.recyclerview.widget.RecyclerView mOwnerRecyclerView -> q
    int mItemViewType -> e
    int mPosition -> b
    androidx.recyclerview.widget.RecyclerView$Recycler mScrapContainer -> m
    int mOldPosition -> c
    androidx.recyclerview.widget.RecyclerView$ViewHolder mShadowedHolder -> g
    java.util.List mPayloads -> j
    androidx.recyclerview.widget.RecyclerView$ViewHolder mShadowingHolder -> h
    java.lang.ref.WeakReference mNestedRecyclerView -> a
    int mPendingAccessibilityState -> p
    java.util.List mUnmodifiedPayloads -> k
    1:1:void createPayloadsIfNeeded():0:0 -> a
    1:1:void addChangePayload(java.lang.Object):0 -> a
    2:2:void addChangePayload(java.lang.Object):0:0 -> a
    void addFlags(int) -> b
    void clearOldPosition() -> c
    void clearReturnedFromScrapFlag() -> d
    java.util.List getUnmodifiedPayloads() -> e
    boolean hasAnyOfTheFlags(int) -> f
    boolean isBound() -> g
    boolean isInvalid() -> h
    boolean isRemoved() -> i
    boolean isScrap() -> j
    boolean isTmpDetached() -> k
    boolean isUpdated() -> l
    boolean needsUpdate() -> m
    void offsetPosition(int,boolean) -> n
    void onEnteredHiddenState(androidx.recyclerview.widget.RecyclerView) -> o
    void onLeftHiddenState(androidx.recyclerview.widget.RecyclerView) -> p
    1:1:void clearPayload():0:0 -> q
    1:1:void resetInternal():0 -> q
    2:2:void resetInternal():0:0 -> q
    void setFlags(int,int) -> r
    boolean shouldIgnore() -> s
    boolean wasReturnedFromScrap() -> t
    1:1:boolean isAdapterPositionUnknown():0:0 -> toString
    1:1:java.lang.String toString():0 -> toString
    2:2:java.lang.String toString():0:0 -> toString
androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate -> androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate:
    androidx.recyclerview.widget.RecyclerView mRecyclerView -> c
    androidx.core.view.AccessibilityDelegateCompat mItemDelegate -> d
    boolean shouldIgnore() -> b
    1:1:void androidx.recyclerview.widget.RecyclerView$LayoutManager.onInitializeAccessibilityNodeInfo(androidx.core.view.accessibility.AccessibilityNodeInfoCompat):0:0 -> onInitializeAccessibilityNodeInfo
    1:1:void onInitializeAccessibilityNodeInfo(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat):0 -> onInitializeAccessibilityNodeInfo
    1:1:boolean androidx.recyclerview.widget.RecyclerView$LayoutManager.performAccessibilityAction(int,android.os.Bundle):0:0 -> performAccessibilityAction
    1:1:boolean performAccessibilityAction(android.view.View,int,android.os.Bundle):0 -> performAccessibilityAction
androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate$ItemDelegate -> androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate$ItemDelegate:
    androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate mRecyclerViewDelegate -> c
    1:1:boolean androidx.recyclerview.widget.RecyclerView$LayoutManager.performAccessibilityActionForItem(android.view.View,int,android.os.Bundle):0:0 -> performAccessibilityAction
    1:1:boolean performAccessibilityAction(android.view.View,int,android.os.Bundle):0 -> performAccessibilityAction
androidx.recyclerview.widget.ScrollbarHelper -> androidx.recyclerview.widget.u1:
    int computeScrollExtent(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.OrientationHelper,android.view.View,android.view.View,androidx.recyclerview.widget.RecyclerView$LayoutManager,boolean) -> a
    int computeScrollOffset(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.OrientationHelper,android.view.View,android.view.View,androidx.recyclerview.widget.RecyclerView$LayoutManager,boolean,boolean) -> b
    int computeScrollRange(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.OrientationHelper,android.view.View,android.view.View,androidx.recyclerview.widget.RecyclerView$LayoutManager,boolean) -> c
androidx.recyclerview.widget.SimpleItemAnimator -> androidx.recyclerview.widget.SimpleItemAnimator:
    boolean mSupportsChangeAnimations -> g
androidx.recyclerview.widget.SnapHelper -> androidx.recyclerview.widget.SnapHelper:
    android.widget.Scroller mGravityScroller -> b
    androidx.recyclerview.widget.RecyclerView mRecyclerView -> a
    androidx.recyclerview.widget.RecyclerView$OnScrollListener mScrollListener -> c
    void snapToTargetExistingView() -> a
    1:1:void destroyCallbacks():0:0 -> attachToRecyclerView
    1:1:void attachToRecyclerView(androidx.recyclerview.widget.RecyclerView):0 -> attachToRecyclerView
    2:2:void attachToRecyclerView(androidx.recyclerview.widget.RecyclerView):0:0 -> attachToRecyclerView
    3:3:void setupCallbacks():0:0 -> attachToRecyclerView
    3:3:void attachToRecyclerView(androidx.recyclerview.widget.RecyclerView):0 -> attachToRecyclerView
    4:4:void attachToRecyclerView(androidx.recyclerview.widget.RecyclerView):0:0 -> attachToRecyclerView
    5:5:void setupCallbacks():0:0 -> attachToRecyclerView
    5:5:void attachToRecyclerView(androidx.recyclerview.widget.RecyclerView):0 -> attachToRecyclerView
    1:1:boolean snapFromFling(androidx.recyclerview.widget.RecyclerView$LayoutManager,int,int):0:0 -> onFling
    1:1:boolean onFling(int,int):0 -> onFling
androidx.recyclerview.widget.SnapHelper$1 -> androidx.recyclerview.widget.v1:
    boolean mScrolled -> a
    androidx.recyclerview.widget.SnapHelper this$0 -> b
androidx.recyclerview.widget.SnapHelper$2 -> androidx.recyclerview.widget.w1:
    androidx.recyclerview.widget.SnapHelper this$0 -> j
androidx.recyclerview.widget.SortedList -> androidx.recyclerview.widget.SortedList:
    java.lang.Object[] mOldData -> b
    java.lang.Object[] mData -> a
    java.lang.Class mTClass -> i
    androidx.recyclerview.widget.SortedList$BatchedCallback mBatchedCallback -> g
    int mSize -> h
    int mOldDataSize -> d
    int mNewDataStart -> e
    int mOldDataStart -> c
    androidx.recyclerview.widget.SortedList$Callback mCallback -> f
    1:1:void addToData(int,java.lang.Object):0:0 -> a
    1:1:int add(java.lang.Object,boolean):0 -> a
    2:2:int add(java.lang.Object,boolean):0:0 -> a
    3:3:void addToData(int,java.lang.Object):0:0 -> a
    3:3:int add(java.lang.Object,boolean):0 -> a
    1:1:java.lang.Object[] copyArray(java.lang.Object[]):0:0 -> addAll
    1:1:void addAll(java.lang.Object[],boolean):0 -> addAll
    2:2:void addAll(java.lang.Object[],boolean):0:0 -> addAll
    1:1:void merge(java.lang.Object[],int):0:0 -> b
    1:1:void addAllInternal(java.lang.Object[]):0 -> b
    1:1:int linearEqualitySearch(java.lang.Object,int,int,int):0:0 -> c
    1:1:int findIndexOf(java.lang.Object,java.lang.Object[],int,int,int):0 -> c
    void removeItemAtIndex(int,boolean) -> d
    void replaceAllInsert(java.lang.Object) -> e
    void replaceAllInternal(java.lang.Object[]) -> f
    void replaceAllRemove() -> g
    1:1:int findSameItem(java.lang.Object,java.lang.Object[],int,int):0:0 -> h
    1:1:int sortAndDedup(java.lang.Object[]):0 -> h
    2:2:int sortAndDedup(java.lang.Object[]):0:0 -> h
    void throwIfInMutationOperation() -> i
    1:1:boolean remove(java.lang.Object,boolean):0:0 -> remove
    1:1:boolean remove(java.lang.Object):0 -> remove
    1:1:java.lang.Object[] copyArray(java.lang.Object[]):0:0 -> replaceAll
    1:1:void replaceAll(java.lang.Object[],boolean):0 -> replaceAll
    2:2:void replaceAll(java.lang.Object[],boolean):0:0 -> replaceAll
androidx.recyclerview.widget.SortedList$BatchedCallback -> androidx.recyclerview.widget.SortedList$BatchedCallback:
    androidx.recyclerview.widget.SortedList$Callback mWrappedCallback -> a
    androidx.recyclerview.widget.BatchingListUpdateCallback mBatchingListUpdateCallback -> b
androidx.recyclerview.widget.SortedListAdapterCallback -> androidx.recyclerview.widget.SortedListAdapterCallback:
    androidx.recyclerview.widget.RecyclerView$Adapter mAdapter -> a
androidx.recyclerview.widget.StaggeredGridLayoutManager -> androidx.recyclerview.widget.StaggeredGridLayoutManager:
    boolean mLaidOutInvalidFullSpan -> M
    boolean mSmoothScrollbarEnabled -> N
    androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState mPendingSavedState -> I
    int mFullSizeSpec -> J
    androidx.recyclerview.widget.OrientationHelper mPrimaryOrientation -> u
    int mGapStrategy -> F
    androidx.recyclerview.widget.LayoutState mLayoutState -> y
    int mPendingScrollPositionOffset -> D
    androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup mLazySpanLookup -> E
    int mPendingScrollPosition -> C
    androidx.recyclerview.widget.OrientationHelper mSecondaryOrientation -> v
    android.graphics.Rect mTmpRect -> K
    boolean mReverseLayout -> z
    int mSizePerSpan -> x
    int mOrientation -> w
    int[] mPrefetchDistances -> O
    boolean mLastLayoutFromEnd -> G
    boolean mLastLayoutRTL -> H
    androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo mAnchorInfo -> L
    androidx.recyclerview.widget.StaggeredGridLayoutManager$Span[] mSpans -> t
    boolean mShouldReverseLayout -> A
    int mSpanCount -> s
    java.util.BitSet mRemainingSpans -> B
    java.lang.Runnable mCheckForGapsRunnable -> P
    1:1:void createOrientationHelpers():0:0 -> <init>
    1:1:void <init>(int,int):0 -> <init>
    2:2:void createOrientationHelpers():0:0 -> <init>
    2:2:void <init>(android.content.Context,android.util.AttributeSet,int,int):0 -> <init>
    void handleUpdate(int,int,int) -> A
    1:1:boolean checkSpanForGap(androidx.recyclerview.widget.StaggeredGridLayoutManager$Span):0:0 -> B
    1:1:android.view.View hasGapsToFix():0 -> B
    2:2:int androidx.recyclerview.widget.StaggeredGridLayoutManager$Span.getEndLine():0:0 -> B
    2:2:boolean checkSpanForGap(androidx.recyclerview.widget.StaggeredGridLayoutManager$Span):0 -> B
    2:2:android.view.View hasGapsToFix():0 -> B
    3:3:boolean checkSpanForGap(androidx.recyclerview.widget.StaggeredGridLayoutManager$Span):0:0 -> B
    3:3:android.view.View hasGapsToFix():0 -> B
    4:4:int androidx.recyclerview.widget.StaggeredGridLayoutManager$Span.getStartLine():0:0 -> B
    4:4:boolean checkSpanForGap(androidx.recyclerview.widget.StaggeredGridLayoutManager$Span):0 -> B
    4:4:android.view.View hasGapsToFix():0 -> B
    5:5:boolean checkSpanForGap(androidx.recyclerview.widget.StaggeredGridLayoutManager$Span):0:0 -> B
    5:5:android.view.View hasGapsToFix():0 -> B
    6:6:android.view.View hasGapsToFix():0:0 -> B
    void measureChildWithDecorationsAndMargin(android.view.View,int,int,boolean) -> C
    1:1:void applyPendingSavedState(androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo):0:0 -> D
    1:1:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0 -> D
    2:2:void androidx.recyclerview.widget.StaggeredGridLayoutManager$Span.setLine(int):0:0 -> D
    2:2:void applyPendingSavedState(androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo):0 -> D
    2:2:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0 -> D
    3:3:void androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState.invalidateSpanInfo():0:0 -> D
    3:3:void applyPendingSavedState(androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo):0 -> D
    3:3:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0 -> D
    4:4:void applyPendingSavedState(androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo):0:0 -> D
    4:4:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0 -> D
    5:5:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0:0 -> D
    6:6:boolean updateAnchorFromPendingData(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo):0:0 -> D
    6:6:void updateAnchorInfoForLayout(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo):0 -> D
    6:6:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0 -> D
    7:7:void androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo.assignCoordinateFromPadding(int):0:0 -> D
    7:7:boolean updateAnchorFromPendingData(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo):0 -> D
    7:7:void updateAnchorInfoForLayout(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo):0 -> D
    7:7:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0 -> D
    8:8:boolean updateAnchorFromPendingData(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo):0:0 -> D
    8:8:void updateAnchorInfoForLayout(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo):0 -> D
    8:8:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0 -> D
    9:9:boolean updateAnchorFromChildren(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo):0:0 -> D
    9:9:void updateAnchorInfoForLayout(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo):0 -> D
    9:9:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0 -> D
    10:10:int findLastReferenceChildPosition(int):0:0 -> D
    10:10:boolean updateAnchorFromChildren(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo):0 -> D
    10:10:void updateAnchorInfoForLayout(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo):0 -> D
    10:10:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0 -> D
    11:11:int findFirstReferenceChildPosition(int):0:0 -> D
    11:11:boolean updateAnchorFromChildren(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo):0 -> D
    11:11:void updateAnchorInfoForLayout(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo):0 -> D
    11:11:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0 -> D
    12:12:boolean updateAnchorFromChildren(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo):0:0 -> D
    12:12:void updateAnchorInfoForLayout(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo):0 -> D
    12:12:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0 -> D
    13:13:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0:0 -> D
    14:14:void androidx.recyclerview.widget.StaggeredGridLayoutManager$Span.setLine(int):0:0 -> D
    14:14:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0 -> D
    15:15:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0:0 -> D
    16:16:void androidx.recyclerview.widget.StaggeredGridLayoutManager$Span.setLine(int):0:0 -> D
    16:16:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0 -> D
    17:17:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0:0 -> D
    18:18:void androidx.recyclerview.widget.StaggeredGridLayoutManager$Span.cacheReferenceLineAndClear(boolean,int):0:0 -> D
    18:18:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0 -> D
    19:19:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0:0 -> D
    20:20:void androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo.saveSpanReferenceLines(androidx.recyclerview.widget.StaggeredGridLayoutManager$Span[]):0:0 -> D
    20:20:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0 -> D
    21:21:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0:0 -> D
    22:22:void updateMeasureSpecs(int):0:0 -> D
    22:22:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0 -> D
    23:23:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0:0 -> D
    24:24:void repositionToWrapContentIfNecessary():0:0 -> D
    24:24:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0 -> D
    25:25:void updateMeasureSpecs(int):0:0 -> D
    25:25:void repositionToWrapContentIfNecessary():0 -> D
    25:25:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0 -> D
    26:26:void repositionToWrapContentIfNecessary():0:0 -> D
    26:26:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0 -> D
    27:27:void onLayoutChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean):0:0 -> D
    boolean preferLastSpan(int) -> E
    void prepareLayoutStateForDelta(int,androidx.recyclerview.widget.RecyclerView$State) -> F
    1:1:int getMaxStart(int):0:0 -> G
    1:1:void recycle(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState):0 -> G
    2:2:void recycle(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState):0:0 -> G
    3:3:int getMinEnd(int):0:0 -> G
    3:3:void recycle(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState):0 -> G
    4:4:void recycle(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState):0:0 -> G
    void recycleFromEnd(androidx.recyclerview.widget.RecyclerView$Recycler,int) -> H
    void recycleFromStart(androidx.recyclerview.widget.RecyclerView$Recycler,int) -> I
    void resolveShouldLayoutReverse() -> J
    int scrollBy(int,androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State) -> K
    void setLayoutStateDirection(int) -> L
    void updateAllRemainingSpans(int,int) -> M
    void updateLayoutState(int,androidx.recyclerview.widget.RecyclerView$State) -> N
    1:1:int androidx.recyclerview.widget.StaggeredGridLayoutManager$Span.getDeletedSize():0:0 -> O
    1:1:void updateRemainingSpans(androidx.recyclerview.widget.StaggeredGridLayoutManager$Span,int,int):0 -> O
    2:2:int androidx.recyclerview.widget.StaggeredGridLayoutManager$Span.getStartLine():0:0 -> O
    2:2:void updateRemainingSpans(androidx.recyclerview.widget.StaggeredGridLayoutManager$Span,int,int):0 -> O
    3:3:int androidx.recyclerview.widget.StaggeredGridLayoutManager$Span.getEndLine():0:0 -> O
    3:3:void updateRemainingSpans(androidx.recyclerview.widget.StaggeredGridLayoutManager$Span,int,int):0 -> O
    4:4:void updateRemainingSpans(androidx.recyclerview.widget.StaggeredGridLayoutManager$Span,int,int):0:0 -> O
    int updateSpecWithExtra(int,int,int) -> P
    1:1:boolean androidx.recyclerview.widget.LayoutState.hasMore(androidx.recyclerview.widget.RecyclerView$State):0:0 -> collectAdjacentPrefetchPositions
    1:1:void collectAdjacentPrefetchPositions(int,int,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.RecyclerView$LayoutManager$LayoutPrefetchRegistry):0 -> collectAdjacentPrefetchPositions
    2:2:void collectAdjacentPrefetchPositions(int,int,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.RecyclerView$LayoutManager$LayoutPrefetchRegistry):0:0 -> collectAdjacentPrefetchPositions
    1:1:int androidx.recyclerview.widget.StaggeredGridLayoutManager$Span.findFirstCompletelyVisibleItemPosition():0:0 -> findFirstCompletelyVisibleItemPositions
    1:1:int[] findFirstCompletelyVisibleItemPositions(int[]):0 -> findFirstCompletelyVisibleItemPositions
    2:2:int[] findFirstCompletelyVisibleItemPositions(int[]):0:0 -> findFirstCompletelyVisibleItemPositions
    1:1:int androidx.recyclerview.widget.StaggeredGridLayoutManager$Span.findFirstVisibleItemPosition():0:0 -> findFirstVisibleItemPositions
    1:1:int[] findFirstVisibleItemPositions(int[]):0 -> findFirstVisibleItemPositions
    2:2:int[] findFirstVisibleItemPositions(int[]):0:0 -> findFirstVisibleItemPositions
    1:1:int androidx.recyclerview.widget.StaggeredGridLayoutManager$Span.findLastCompletelyVisibleItemPosition():0:0 -> findLastCompletelyVisibleItemPositions
    1:1:int[] findLastCompletelyVisibleItemPositions(int[]):0 -> findLastCompletelyVisibleItemPositions
    2:2:int[] findLastCompletelyVisibleItemPositions(int[]):0:0 -> findLastCompletelyVisibleItemPositions
    1:1:int androidx.recyclerview.widget.StaggeredGridLayoutManager$Span.findLastVisibleItemPosition():0:0 -> findLastVisibleItemPositions
    1:1:int[] findLastVisibleItemPositions(int[]):0 -> findLastVisibleItemPositions
    2:2:int[] findLastVisibleItemPositions(int[]):0:0 -> findLastVisibleItemPositions
    int calculateScrollDirectionForPosition(int) -> m
    boolean checkForGaps() -> n
    int computeScrollExtent(androidx.recyclerview.widget.RecyclerView$State) -> o
    1:1:void androidx.recyclerview.widget.StaggeredGridLayoutManager$Span.onOffset(int):0:0 -> offsetChildrenHorizontal
    1:1:void offsetChildrenHorizontal(int):0 -> offsetChildrenHorizontal
    1:1:void androidx.recyclerview.widget.StaggeredGridLayoutManager$Span.onOffset(int):0:0 -> offsetChildrenVertical
    1:1:void offsetChildrenVertical(int):0 -> offsetChildrenVertical
    1:1:int convertFocusDirectionToLayoutDirection(int):0:0 -> onFocusSearchFailed
    1:1:android.view.View onFocusSearchFailed(android.view.View,int,androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0 -> onFocusSearchFailed
    2:2:android.view.View onFocusSearchFailed(android.view.View,int,androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State):0:0 -> onFocusSearchFailed
    1:1:int findFirstVisibleItemPositionInt():0:0 -> onSaveInstanceState
    1:1:android.os.Parcelable onSaveInstanceState():0 -> onSaveInstanceState
    2:2:android.os.Parcelable onSaveInstanceState():0:0 -> onSaveInstanceState
    int computeScrollOffset(androidx.recyclerview.widget.RecyclerView$State) -> p
    int computeScrollRange(androidx.recyclerview.widget.RecyclerView$State) -> q
    1:1:boolean androidx.recyclerview.widget.LayoutState.hasMore(androidx.recyclerview.widget.RecyclerView$State):0:0 -> r
    1:1:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0 -> r
    2:2:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0:0 -> r
    3:3:android.view.View androidx.recyclerview.widget.LayoutState.next(androidx.recyclerview.widget.RecyclerView$Recycler):0:0 -> r
    3:3:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0 -> r
    4:4:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0:0 -> r
    5:5:int androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup.getSpan(int):0:0 -> r
    5:5:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0 -> r
    6:6:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0:0 -> r
    7:7:androidx.recyclerview.widget.StaggeredGridLayoutManager$Span getNextSpan(androidx.recyclerview.widget.LayoutState):0:0 -> r
    7:7:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0 -> r
    8:8:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0:0 -> r
    9:9:void androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup.setSpan(int,androidx.recyclerview.widget.StaggeredGridLayoutManager$Span):0:0 -> r
    9:9:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0 -> r
    10:10:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0:0 -> r
    11:11:void measureChildWithDecorationsAndMargin(android.view.View,androidx.recyclerview.widget.StaggeredGridLayoutManager$LayoutParams,boolean):0:0 -> r
    11:11:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0 -> r
    12:12:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0:0 -> r
    13:13:androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem createFullSpanItemFromEnd(int):0:0 -> r
    13:13:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0 -> r
    14:14:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0:0 -> r
    15:15:androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem createFullSpanItemFromStart(int):0:0 -> r
    15:15:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0 -> r
    16:16:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0:0 -> r
    17:17:boolean areAllEndsEqual():0:0 -> r
    17:17:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0 -> r
    18:18:boolean areAllStartsEqual():0:0 -> r
    18:18:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0 -> r
    19:19:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0:0 -> r
    20:20:void attachViewToSpans(android.view.View,androidx.recyclerview.widget.StaggeredGridLayoutManager$LayoutParams,androidx.recyclerview.widget.LayoutState):0:0 -> r
    20:20:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0 -> r
    21:21:void appendViewToAllSpans(android.view.View):0:0 -> r
    21:21:void attachViewToSpans(android.view.View,androidx.recyclerview.widget.StaggeredGridLayoutManager$LayoutParams,androidx.recyclerview.widget.LayoutState):0 -> r
    21:21:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0 -> r
    22:22:void attachViewToSpans(android.view.View,androidx.recyclerview.widget.StaggeredGridLayoutManager$LayoutParams,androidx.recyclerview.widget.LayoutState):0:0 -> r
    22:22:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0 -> r
    23:23:void prependViewToAllSpans(android.view.View):0:0 -> r
    23:23:void attachViewToSpans(android.view.View,androidx.recyclerview.widget.StaggeredGridLayoutManager$LayoutParams,androidx.recyclerview.widget.LayoutState):0 -> r
    23:23:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0 -> r
    24:24:void attachViewToSpans(android.view.View,androidx.recyclerview.widget.StaggeredGridLayoutManager$LayoutParams,androidx.recyclerview.widget.LayoutState):0:0 -> r
    24:24:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0 -> r
    25:25:int fill(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.LayoutState,androidx.recyclerview.widget.RecyclerView$State):0:0 -> r
    android.view.View findFirstVisibleItemClosestToEnd(boolean) -> s
    1:1:void androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState.invalidateAnchorPositionInfo():0:0 -> scrollToPosition
    1:1:void scrollToPosition(int):0 -> scrollToPosition
    2:2:void scrollToPosition(int):0:0 -> scrollToPosition
    1:1:void androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState.invalidateAnchorPositionInfo():0:0 -> scrollToPositionWithOffset
    1:1:void scrollToPositionWithOffset(int,int):0 -> scrollToPositionWithOffset
    2:2:void scrollToPositionWithOffset(int,int):0:0 -> scrollToPositionWithOffset
    android.view.View findFirstVisibleItemClosestToStart(boolean) -> t
    void fixEndGap(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean) -> u
    void fixStartGap(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,boolean) -> v
    int getFirstChildPosition() -> w
    int getLastChildPosition() -> x
    int getMaxEnd(int) -> y
    int getMinStart(int) -> z
androidx.recyclerview.widget.StaggeredGridLayoutManager$1 -> androidx.recyclerview.widget.x1:
    androidx.recyclerview.widget.StaggeredGridLayoutManager this$0 -> a
androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo -> androidx.recyclerview.widget.y1:
    int[] mSpanReferenceLines -> f
    androidx.recyclerview.widget.StaggeredGridLayoutManager this$0 -> g
    boolean mValid -> e
    int mOffset -> b
    boolean mLayoutFromEnd -> c
    int mPosition -> a
    boolean mInvalidateOffsets -> d
    void assignCoordinateFromPadding() -> a
    void reset() -> b
androidx.recyclerview.widget.StaggeredGridLayoutManager$LayoutParams -> androidx.recyclerview.widget.StaggeredGridLayoutManager$LayoutParams:
    androidx.recyclerview.widget.StaggeredGridLayoutManager$Span mSpan -> e
    boolean mFullSpan -> f
androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup -> androidx.recyclerview.widget.a2:
    java.util.List mFullSpanItems -> b
    int[] mData -> a
    void clear() -> a
    1:1:int sizeForPosition(int):0:0 -> b
    1:1:void ensureSize(int):0 -> b
    2:2:void ensureSize(int):0:0 -> b
    int forceInvalidateAfter(int) -> c
    1:1:int invalidateFullSpansAfter(int):0:0 -> d
    1:1:int invalidateAfter(int):0 -> d
    2:2:int invalidateAfter(int):0:0 -> d
    1:1:void offsetFullSpansForAddition(int,int):0:0 -> e
    1:1:void offsetForAddition(int,int):0 -> e
    1:1:void offsetFullSpansForRemoval(int,int):0:0 -> f
    1:1:void offsetForRemoval(int,int):0 -> f
androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem -> androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem:
    int[] mGapPerSpan -> c
    int mGapDir -> b
    int mPosition -> a
    boolean mHasUnwantedGapAfter -> d
androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem$1 -> androidx.recyclerview.widget.z1:
    1:1:androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState -> androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState:
    int[] mSpanLookup -> f
    boolean mAnchorLayoutFromEnd -> i
    boolean mLastLayoutRTL -> j
    int[] mSpanOffsets -> d
    int mSpanLookupSize -> e
    java.util.List mFullSpanItems -> g
    boolean mReverseLayout -> h
    int mVisibleAnchorPosition -> b
    int mSpanOffsetsSize -> c
    int mAnchorPosition -> a
androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState$1 -> androidx.recyclerview.widget.b2:
    1:1:androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.recyclerview.widget.StaggeredGridLayoutManager$Span -> androidx.recyclerview.widget.c2:
    androidx.recyclerview.widget.StaggeredGridLayoutManager this$0 -> f
    int mDeletedSize -> d
    int mIndex -> e
    int mCachedStart -> b
    int mCachedEnd -> c
    java.util.ArrayList mViews -> a
    void appendToSpan(android.view.View) -> a
    1:1:int androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem.getGapForSpan(int):0:0 -> b
    1:1:void calculateCachedEnd():0 -> b
    2:2:void calculateCachedEnd():0:0 -> b
    1:1:int androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem.getGapForSpan(int):0:0 -> c
    1:1:void calculateCachedStart():0 -> c
    2:2:void calculateCachedStart():0:0 -> c
    1:1:void invalidateCache():0:0 -> d
    1:1:void clear():0 -> d
    2:2:void clear():0:0 -> d
    int findOnePartiallyOrCompletelyVisibleChild(int,int,boolean,boolean,boolean) -> e
    int findOnePartiallyVisibleChild(int,int,boolean) -> f
    int findOneVisibleChild(int,int,boolean) -> g
    int getEndLine(int) -> h
    androidx.recyclerview.widget.StaggeredGridLayoutManager$LayoutParams getLayoutParams(android.view.View) -> i
    int getStartLine(int) -> j
    void popEnd() -> k
    void popStart() -> l
    void prependToSpan(android.view.View) -> m
androidx.recyclerview.widget.TileList -> androidx.recyclerview.widget.d2:
    androidx.recyclerview.widget.TileList$Tile mLastAccessedTile -> c
    android.util.SparseArray mTiles -> b
    int mTileSize -> a
    1:1:boolean androidx.recyclerview.widget.TileList$Tile.containsPosition(int):0:0 -> getItemAt
    1:1:java.lang.Object getItemAt(int):0 -> getItemAt
    2:2:java.lang.Object getItemAt(int):0:0 -> getItemAt
    3:3:java.lang.Object androidx.recyclerview.widget.TileList$Tile.getByPosition(int):0:0 -> getItemAt
    3:3:java.lang.Object getItemAt(int):0 -> getItemAt
androidx.recyclerview.widget.TileList$Tile -> androidx.recyclerview.widget.TileList$Tile:
    androidx.recyclerview.widget.TileList$Tile mNext -> a
androidx.recyclerview.widget.ViewBoundsCheck -> androidx.recyclerview.widget.g2:
    androidx.recyclerview.widget.ViewBoundsCheck$Callback mCallback -> a
    androidx.recyclerview.widget.ViewBoundsCheck$BoundFlags mBoundFlags -> b
    1:1:void androidx.recyclerview.widget.ViewBoundsCheck$BoundFlags.setBounds(int,int,int,int):0:0 -> a
    1:1:android.view.View findOneViewWithinBoundFlags(int,int,int,int):0 -> a
    2:2:void androidx.recyclerview.widget.ViewBoundsCheck$BoundFlags.resetFlags():0:0 -> a
    2:2:android.view.View findOneViewWithinBoundFlags(int,int,int,int):0 -> a
    3:3:void androidx.recyclerview.widget.ViewBoundsCheck$BoundFlags.addFlags(int):0:0 -> a
    3:3:android.view.View findOneViewWithinBoundFlags(int,int,int,int):0 -> a
    4:4:android.view.View findOneViewWithinBoundFlags(int,int,int,int):0:0 -> a
    5:5:void androidx.recyclerview.widget.ViewBoundsCheck$BoundFlags.resetFlags():0:0 -> a
    5:5:android.view.View findOneViewWithinBoundFlags(int,int,int,int):0 -> a
    6:6:void androidx.recyclerview.widget.ViewBoundsCheck$BoundFlags.addFlags(int):0:0 -> a
    6:6:android.view.View findOneViewWithinBoundFlags(int,int,int,int):0 -> a
    7:7:android.view.View findOneViewWithinBoundFlags(int,int,int,int):0:0 -> a
    1:1:void androidx.recyclerview.widget.ViewBoundsCheck$BoundFlags.setBounds(int,int,int,int):0:0 -> b
    1:1:boolean isViewWithinBoundFlags(android.view.View,int):0 -> b
    2:2:boolean isViewWithinBoundFlags(android.view.View,int):0:0 -> b
    3:3:void androidx.recyclerview.widget.ViewBoundsCheck$BoundFlags.resetFlags():0:0 -> b
    3:3:boolean isViewWithinBoundFlags(android.view.View,int):0 -> b
    4:4:void androidx.recyclerview.widget.ViewBoundsCheck$BoundFlags.addFlags(int):0:0 -> b
    4:4:boolean isViewWithinBoundFlags(android.view.View,int):0 -> b
    5:5:boolean isViewWithinBoundFlags(android.view.View,int):0:0 -> b
androidx.recyclerview.widget.ViewBoundsCheck$BoundFlags -> androidx.recyclerview.widget.e2:
    int mChildStart -> d
    int mChildEnd -> e
    int mRvStart -> b
    int mRvEnd -> c
    int mBoundFlags -> a
    boolean boundsMatch() -> a
    int compare(int,int) -> b
androidx.recyclerview.widget.ViewBoundsCheck$Callback -> androidx.recyclerview.widget.f2:
androidx.recyclerview.widget.ViewInfoStore -> androidx.recyclerview.widget.i2:
    androidx.collection.LongSparseArray mOldChangedHolders -> b
    androidx.collection.ArrayMap mLayoutHolderMap -> a
    void addToDisappearedInLayout(androidx.recyclerview.widget.RecyclerView$ViewHolder) -> a
    void addToPostLayout(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo) -> b
    void addToPreLayout(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo) -> c
    boolean isDisappearing(androidx.recyclerview.widget.RecyclerView$ViewHolder) -> d
    androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo popFromLayoutStep(androidx.recyclerview.widget.RecyclerView$ViewHolder,int) -> e
    androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo popFromPostLayout(androidx.recyclerview.widget.RecyclerView$ViewHolder) -> f
    androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo popFromPreLayout(androidx.recyclerview.widget.RecyclerView$ViewHolder) -> g
    void removeFromDisappearedInLayout(androidx.recyclerview.widget.RecyclerView$ViewHolder) -> h
    void removeViewHolder(androidx.recyclerview.widget.RecyclerView$ViewHolder) -> i
androidx.recyclerview.widget.ViewInfoStore$InfoRecord -> androidx.recyclerview.widget.h2:
    androidx.core.util.Pools$Pool sPool -> d
    androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo preInfo -> b
    androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo postInfo -> c
    int flags -> a
    androidx.recyclerview.widget.ViewInfoStore$InfoRecord obtain() -> a
    void recycle(androidx.recyclerview.widget.ViewInfoStore$InfoRecord) -> b
androidx.renderscript.Allocation -> androidx.renderscript.Allocation:
    int mCurrentCount -> n
    int mCurrentDimY -> l
    int mCurrentDimZ -> m
    boolean mIncAllocDestroyed -> p
    boolean mAutoPadding -> i
    int mCurrentDimX -> k
    long mByteBufferStride -> h
    java.nio.ByteBuffer mByteBuffer -> g
    int mSize -> f
    int mUsage -> e
    android.graphics.BitmapFactory$Options mBitmapOptions -> q
    androidx.renderscript.Type mType -> d
    androidx.renderscript.Type$CubemapFace mSelectedFace -> j
    long mIncCompatAllocation -> o
    1:1:void updateCacheInfo(androidx.renderscript.Type):0:0 -> <init>
    1:1:void <init>(long,androidx.renderscript.RenderScript,androidx.renderscript.Type,int):0 -> <init>
    2:2:void <init>(long,androidx.renderscript.RenderScript,androidx.renderscript.Type,int):0:0 -> <init>
    1:1:void androidx.renderscript.RenderScript.nAllocationData2D(long,int,int,int,int,android.graphics.Bitmap):0:0 -> copy2DRangeFrom
    1:1:void copy2DRangeFrom(int,int,android.graphics.Bitmap):0 -> copy2DRangeFrom
    1:1:void androidx.renderscript.RenderScript.nAllocationData3D(long,int,int,int,int,int,int,int,long,int,int,int,int):0:0 -> copy3DRangeFrom
    1:1:void copy3DRangeFrom(int,int,int,int,int,int,androidx.renderscript.Allocation,int,int,int):0 -> copy3DRangeFrom
    1:1:void androidx.renderscript.RenderScript.nAllocationCopyFromBitmap(long,android.graphics.Bitmap):0:0 -> copyFrom
    1:1:void copyFrom(android.graphics.Bitmap):0 -> copyFrom
    2:2:void validateIsObject():0:0 -> copyFrom
    2:2:void copyFrom(androidx.renderscript.BaseObj[]):0 -> copyFrom
    3:3:void copyFrom(androidx.renderscript.BaseObj[]):0:0 -> copyFrom
    1:1:void androidx.renderscript.RenderScript.nAllocationCopyToBitmap(long,android.graphics.Bitmap):0:0 -> copyTo
    1:1:void copyTo(android.graphics.Bitmap):0 -> copyTo
    1:1:long androidx.renderscript.RenderScript.nAllocationCubeCreateFromBitmap(long,int,android.graphics.Bitmap,int):0:0 -> createCubemapFromBitmap
    1:1:androidx.renderscript.Allocation createCubemapFromBitmap(androidx.renderscript.RenderScript,android.graphics.Bitmap,androidx.renderscript.Allocation$MipmapControl,int):0 -> createCubemapFromBitmap
    2:2:androidx.renderscript.Allocation createCubemapFromBitmap(androidx.renderscript.RenderScript,android.graphics.Bitmap,androidx.renderscript.Allocation$MipmapControl,int):0:0 -> createCubemapFromBitmap
    3:3:long androidx.renderscript.RenderScript.nAllocationCubeCreateFromBitmap(long,int,android.graphics.Bitmap,int):0:0 -> createCubemapFromBitmap
    3:3:androidx.renderscript.Allocation createCubemapFromBitmap(androidx.renderscript.RenderScript,android.graphics.Bitmap,androidx.renderscript.Allocation$MipmapControl,int):0 -> createCubemapFromBitmap
    4:4:androidx.renderscript.Allocation createCubemapFromBitmap(androidx.renderscript.RenderScript,android.graphics.Bitmap,androidx.renderscript.Allocation$MipmapControl,int):0:0 -> createCubemapFromBitmap
    1:1:androidx.renderscript.Type typeFromBitmap(androidx.renderscript.RenderScript,android.graphics.Bitmap,androidx.renderscript.Allocation$MipmapControl):0:0 -> createFromBitmap
    1:1:androidx.renderscript.Allocation createFromBitmap(androidx.renderscript.RenderScript,android.graphics.Bitmap,androidx.renderscript.Allocation$MipmapControl,int):0 -> createFromBitmap
    2:2:androidx.renderscript.Allocation createFromBitmap(androidx.renderscript.RenderScript,android.graphics.Bitmap,androidx.renderscript.Allocation$MipmapControl,int):0:0 -> createFromBitmap
    3:3:long androidx.renderscript.RenderScript.nAllocationCreateBitmapBackedAllocation(long,int,android.graphics.Bitmap,int):0:0 -> createFromBitmap
    3:3:androidx.renderscript.Allocation createFromBitmap(androidx.renderscript.RenderScript,android.graphics.Bitmap,androidx.renderscript.Allocation$MipmapControl,int):0 -> createFromBitmap
    4:4:androidx.renderscript.Allocation createFromBitmap(androidx.renderscript.RenderScript,android.graphics.Bitmap,androidx.renderscript.Allocation$MipmapControl,int):0:0 -> createFromBitmap
    5:5:long androidx.renderscript.RenderScript.nAllocationCreateBitmapBackedAllocation(long,int,android.graphics.Bitmap,int):0:0 -> createFromBitmap
    5:5:androidx.renderscript.Allocation createFromBitmap(androidx.renderscript.RenderScript,android.graphics.Bitmap,androidx.renderscript.Allocation$MipmapControl,int):0 -> createFromBitmap
    6:6:androidx.renderscript.Allocation createFromBitmap(androidx.renderscript.RenderScript,android.graphics.Bitmap,androidx.renderscript.Allocation$MipmapControl,int):0:0 -> createFromBitmap
    7:7:long androidx.renderscript.RenderScript.nAllocationCreateFromBitmap(long,int,android.graphics.Bitmap,int):0:0 -> createFromBitmap
    7:7:androidx.renderscript.Allocation createFromBitmap(androidx.renderscript.RenderScript,android.graphics.Bitmap,androidx.renderscript.Allocation$MipmapControl,int):0 -> createFromBitmap
    8:8:androidx.renderscript.Allocation createFromBitmap(androidx.renderscript.RenderScript,android.graphics.Bitmap,androidx.renderscript.Allocation$MipmapControl,int):0:0 -> createFromBitmap
    9:9:long androidx.renderscript.RenderScript.nAllocationCreateFromBitmap(long,int,android.graphics.Bitmap,int):0:0 -> createFromBitmap
    9:9:androidx.renderscript.Allocation createFromBitmap(androidx.renderscript.RenderScript,android.graphics.Bitmap,androidx.renderscript.Allocation$MipmapControl,int):0 -> createFromBitmap
    1:1:boolean androidx.renderscript.RenderScript.isAlive():0:0 -> destroy
    1:1:void destroy():0 -> destroy
    2:2:void destroy():0:0 -> destroy
    3:3:void androidx.renderscript.RenderScript.nIncObjDestroy(long):0:0 -> destroy
    3:3:void destroy():0 -> destroy
    4:4:void destroy():0:0 -> destroy
    1:1:void androidx.renderscript.RenderScript.nAllocationData1D(long,int,int,int,java.lang.Object,int,androidx.renderscript.Element$DataType,int,boolean):0:0 -> e
    1:1:void copy1DRangeFromUnchecked(int,int,java.lang.Object,androidx.renderscript.Element$DataType,int):0 -> e
    1:1:void androidx.renderscript.RenderScript.nAllocationRead1D(long,int,int,int,java.lang.Object,int,androidx.renderscript.Element$DataType,int,boolean):0:0 -> f
    1:1:void copy1DRangeToUnchecked(int,int,java.lang.Object,androidx.renderscript.Element$DataType,int):0 -> f
    1:1:void androidx.renderscript.RenderScript.nAllocationData2D(long,int,int,int,int,int,int,java.lang.Object,int,androidx.renderscript.Element$DataType,int,boolean):0:0 -> g
    1:1:void copy2DRangeFromUnchecked(int,int,int,int,java.lang.Object,androidx.renderscript.Element$DataType,int):0 -> g
    2:2:void copy2DRangeFromUnchecked(int,int,int,int,java.lang.Object,androidx.renderscript.Element$DataType,int):0:0 -> g
    1:1:void androidx.renderscript.RenderScript.nAllocationGenerateMipmaps(long):0:0 -> generateMipmaps
    1:1:void generateMipmaps():0 -> generateMipmaps
    1:1:java.nio.ByteBuffer androidx.renderscript.RenderScript.nAllocationGetByteBuffer(long,int,int,int):0:0 -> getByteBuffer
    1:1:java.nio.ByteBuffer getByteBuffer():0 -> getByteBuffer
    2:2:java.nio.ByteBuffer getByteBuffer():0:0 -> getByteBuffer
    3:3:java.nio.ByteBuffer androidx.renderscript.RenderScript.nAllocationGetByteBuffer(long,int,int,int):0:0 -> getByteBuffer
    3:3:java.nio.ByteBuffer getByteBuffer():0 -> getByteBuffer
    1:1:long androidx.renderscript.RenderScript.nAllocationGetStride(long):0:0 -> getStride
    1:1:long getStride():0 -> getStride
    2:2:long getStride():0:0 -> getStride
    3:3:long androidx.renderscript.RenderScript.nAllocationGetStride(long):0:0 -> getStride
    3:3:long getStride():0 -> getStride
    4:4:long getStride():0:0 -> getStride
    1:1:void androidx.renderscript.RenderScript.nAllocationRead2D(long,int,int,int,int,int,int,java.lang.Object,int,androidx.renderscript.Element$DataType,int,boolean):0:0 -> h
    1:1:void copy2DRangeToUnchecked(int,int,int,int,java.lang.Object,androidx.renderscript.Element$DataType,int):0 -> h
    2:2:void copy2DRangeToUnchecked(int,int,int,int,java.lang.Object,androidx.renderscript.Element$DataType,int):0:0 -> h
    1:1:void androidx.renderscript.RenderScript.nAllocationData3D(long,int,int,int,int,int,int,int,java.lang.Object,int,androidx.renderscript.Element$DataType,int,boolean):0:0 -> i
    1:1:void copy3DRangeFromUnchecked(int,int,int,int,int,int,java.lang.Object,androidx.renderscript.Element$DataType,int):0 -> i
    2:2:void copy3DRangeFromUnchecked(int,int,int,int,int,int,java.lang.Object,androidx.renderscript.Element$DataType,int):0:0 -> i
    1:1:void androidx.renderscript.RenderScript.nAllocationIoReceive(long):0:0 -> ioReceive
    1:1:void ioReceive():0 -> ioReceive
    2:2:void ioReceive():0:0 -> ioReceive
    1:1:void androidx.renderscript.RenderScript.nAllocationIoSend(long):0:0 -> ioSend
    1:1:void ioSend():0 -> ioSend
    2:2:void ioSend():0:0 -> ioSend
    void copyFromUnchecked(java.lang.Object,androidx.renderscript.Element$DataType,int) -> j
    1:1:void androidx.renderscript.RenderScript.nAllocationRead(long,java.lang.Object,androidx.renderscript.Element$DataType,int,boolean):0:0 -> k
    1:1:void copyTo(java.lang.Object,androidx.renderscript.Element$DataType,int):0 -> k
    2:2:void copyTo(java.lang.Object,androidx.renderscript.Element$DataType,int):0:0 -> k
    void data1DChecks(int,int,int,int,boolean) -> l
    androidx.renderscript.Element elementFromBitmap(androidx.renderscript.RenderScript,android.graphics.Bitmap) -> m
    long getIDSafe() -> n
    void validate2DRange(int,int,int,int) -> o
    void validate3DRange(int,int,int,int,int,int) -> p
    void validateBitmapFormat(android.graphics.Bitmap) -> q
    void validateBitmapSize(android.graphics.Bitmap) -> r
    void validateIsFloat32() -> s
    1:1:void androidx.renderscript.RenderScript.nAllocationElementData1D(long,int,int,int,byte[],int):0:0 -> setFromFieldPacker
    1:1:void setFromFieldPacker(int,int,androidx.renderscript.FieldPacker):0 -> setFromFieldPacker
    2:2:void setFromFieldPacker(int,int,androidx.renderscript.FieldPacker):0:0 -> setFromFieldPacker
    1:1:void androidx.renderscript.RenderScript.nAllocationSetSurface(long,android.view.Surface):0:0 -> setSurface
    1:1:void setSurface(android.view.Surface):0 -> setSurface
    2:2:void setSurface(android.view.Surface):0:0 -> setSurface
    1:1:void androidx.renderscript.RenderScript.nAllocationSyncAll(long,int):0:0 -> syncAll
    1:1:void syncAll(int):0 -> syncAll
    void validateIsInt16() -> t
    void validateIsInt32() -> u
    void validateIsInt8() -> v
    1:1:void validateIsInt64():0:0 -> w
    1:1:androidx.renderscript.Element$DataType validateObjectIsPrimitiveArray(java.lang.Object,boolean):0 -> w
    2:2:androidx.renderscript.Element$DataType validateObjectIsPrimitiveArray(java.lang.Object,boolean):0:0 -> w
    3:3:void validateIsFloat64():0:0 -> w
    3:3:androidx.renderscript.Element$DataType validateObjectIsPrimitiveArray(java.lang.Object,boolean):0 -> w
    4:4:androidx.renderscript.Element$DataType validateObjectIsPrimitiveArray(java.lang.Object,boolean):0:0 -> w
androidx.renderscript.Allocation$1 -> androidx.renderscript.a:
    int[] $SwitchMap$android$graphics$Bitmap$Config -> a
androidx.renderscript.Allocation$MipmapControl -> androidx.renderscript.Allocation$MipmapControl:
    androidx.renderscript.Allocation$MipmapControl[] $VALUES -> b
    int mID -> a
androidx.renderscript.BaseObj -> androidx.renderscript.BaseObj:
    androidx.renderscript.RenderScript mRS -> c
    long mID -> a
    boolean mDestroyed -> b
    void checkValid() -> a
    long getID(androidx.renderscript.RenderScript) -> b
    1:1:boolean androidx.renderscript.RenderScript.isAlive():0:0 -> c
    1:1:void helpDestroy():0 -> c
    2:2:void helpDestroy():0:0 -> c
    3:3:void androidx.renderscript.RenderScript.nObjDestroy(long):0:0 -> c
    3:3:void helpDestroy():0 -> c
    4:4:void helpDestroy():0:0 -> c
    void setID(long) -> d
androidx.renderscript.Element -> androidx.renderscript.Element:
    androidx.renderscript.Element$DataType mType -> j
    int[] mArraySizes -> g
    int[] mOffsetInBytes -> h
    int[] mVisibleElementMap -> i
    int mVectorSize -> m
    androidx.renderscript.Element[] mElements -> e
    androidx.renderscript.Element$DataKind mKind -> k
    boolean mNormalized -> l
    int mSize -> d
    java.lang.String[] mElementNames -> f
    1:1:void updateVisibleSubElements():0:0 -> <init>
    1:1:void <init>(long,androidx.renderscript.RenderScript,androidx.renderscript.Element[],java.lang.String[],int[]):0 -> <init>
    androidx.renderscript.Element createUser(androidx.renderscript.RenderScript,androidx.renderscript.Element$DataType) -> e
    1:1:long androidx.renderscript.RenderScript.nIncElementCreate(long,int,boolean,int):0:0 -> getDummyElement
    1:1:long getDummyElement(androidx.renderscript.RenderScript):0 -> getDummyElement
androidx.renderscript.Element$Builder -> androidx.renderscript.Element$Builder:
    androidx.renderscript.Element[] mElements -> b
    int[] mArraySizes -> d
    int mSkipPadding -> f
    int mCount -> e
    androidx.renderscript.RenderScript mRS -> a
    java.lang.String[] mElementNames -> c
    1:1:long androidx.renderscript.RenderScript.nElementCreate2(long[],java.lang.String[],int[]):0:0 -> create
    1:1:androidx.renderscript.Element create():0 -> create
    2:2:androidx.renderscript.Element create():0:0 -> create
    3:3:long androidx.renderscript.RenderScript.nElementCreate2(long[],java.lang.String[],int[]):0:0 -> create
    3:3:androidx.renderscript.Element create():0 -> create
androidx.renderscript.Element$DataKind -> androidx.renderscript.Element$DataKind:
    androidx.renderscript.Element$DataKind[] $VALUES -> b
    int mID -> a
androidx.renderscript.Element$DataType -> androidx.renderscript.Element$DataType:
    int mSize -> b
    androidx.renderscript.Element$DataType[] $VALUES -> c
    int mID -> a
androidx.renderscript.FieldPacker -> androidx.renderscript.FieldPacker:
    byte[] mData -> a
    int mPos -> b
    int mLen -> c
    java.util.BitSet mAlignment -> d
    void addToPack(androidx.renderscript.FieldPacker,java.lang.Object) -> a
    1:1:void addSafely(java.lang.Object):0:0 -> b
    1:1:androidx.renderscript.FieldPacker createFromArray(java.lang.Object[]):0 -> b
    2:2:androidx.renderscript.FieldPacker createFromArray(java.lang.Object[]):0:0 -> b
    boolean resize(int) -> c
androidx.renderscript.Matrix2f -> androidx.renderscript.Matrix2f:
    float[] mMat -> a
androidx.renderscript.Matrix3f -> androidx.renderscript.Matrix3f:
    float[] mMat -> a
androidx.renderscript.Matrix4f -> androidx.renderscript.Matrix4f:
    float[] mMat -> a
    float computeCofactor(int,int) -> a
androidx.renderscript.RenderScript -> androidx.renderscript.RenderScript:
    androidx.renderscript.Element mElement_RGBA_8888 -> J
    androidx.renderscript.Element mElement_INT_3 -> g0
    long mContext -> i
    java.lang.reflect.Method registerNativeFree -> H0
    androidx.renderscript.RenderScript$MessageThread mMessageThread -> n
    androidx.renderscript.Element mElement_UINT_4 -> e0
    androidx.renderscript.Element mElement_RGB_565 -> F
    androidx.renderscript.Element mElement_ULONG_4 -> k0
    androidx.renderscript.RenderScript$ContextType mContextType -> h
    java.lang.Object lock -> I0
    androidx.renderscript.Element mElement_ULONG_2 -> i0
    java.lang.String mBlackList -> C0
    androidx.renderscript.Element mElement_UCHAR_3 -> R
    int mContextFlags -> d
    int sNative -> J0
    androidx.renderscript.Element mElement_U32 -> s
    androidx.renderscript.Element mElement_DOUBLE_2 -> N
    androidx.renderscript.Element mElement_UINT_2 -> c0
    androidx.renderscript.RenderScript$RSMessageHandler mMessageCallback -> z0
    androidx.renderscript.Element mElement_SHORT_3 -> a0
    int sPointerSize -> N0
    androidx.renderscript.Element mElement_U8 -> o
    androidx.renderscript.Element mElement_F64 -> x
    androidx.renderscript.Element mElement_USHORT_2 -> W
    boolean useIOlib -> L0
    androidx.renderscript.Element mElement_ALLOCATION -> B
    androidx.renderscript.Element mElement_MATRIX_4X4 -> o0
    androidx.renderscript.Element mElement_LONG_3 -> m0
    androidx.renderscript.Element mElement_MATRIX_2X2 -> q0
    androidx.renderscript.RenderScript$RSErrorHandler mErrorCallback -> A0
    boolean sUseGCHooks -> E0
    androidx.renderscript.Element mElement_RGBA_4444 -> I
    boolean mDestroyed -> j
    androidx.renderscript.Element mElement_A_8 -> E
    androidx.renderscript.Element mElement_I16 -> r
    androidx.renderscript.Element mElement_UCHAR_2 -> Q
    androidx.renderscript.Sampler mSampler_WRAP_NEAREST -> u0
    int mContextSdkVersion -> e
    androidx.renderscript.Sampler mSampler_CLAMP_LINEAR -> s0
    androidx.renderscript.Element mElement_FLOAT_4 -> M
    android.content.Context mApplicationContext -> f
    androidx.renderscript.Element mElement_SHORT_2 -> Z
    androidx.renderscript.Element mElement_CHAR_4 -> V
    androidx.renderscript.Element mElement_F32 -> w
    androidx.renderscript.Sampler mSampler_WRAP_LINEAR_MIP_LINEAR -> w0
    androidx.renderscript.Element mElement_TYPE -> A
    androidx.renderscript.Sampler mSampler_MIRRORED_REPEAT_LINEAR -> y0
    boolean mIsProcessContext -> a
    java.lang.reflect.Method registerNativeAllocation -> G0
    androidx.renderscript.Element mElement_INT_2 -> f0
    androidx.renderscript.Element mElement_FLOAT_3 -> L
    java.lang.Object sRuntime -> F0
    long mIncCon -> k
    androidx.renderscript.Element mElement_UINT_3 -> d0
    androidx.renderscript.Element mElement_ULONG_3 -> j0
    androidx.renderscript.Element mElement_RGBA_5551 -> H
    androidx.renderscript.Element mElement_INT_4 -> h0
    int sSdkVersion -> K0
    androidx.renderscript.Element mElement_U16 -> q
    androidx.renderscript.Element mElement_CHAR_2 -> T
    androidx.renderscript.Element mElement_SHORT_4 -> b0
    androidx.renderscript.Element mElement_DOUBLE_4 -> P
    androidx.renderscript.Element mElement_ELEMENT -> z
    androidx.renderscript.Element mElement_USHORT_4 -> Y
    androidx.renderscript.Element mElement_I64 -> v
    androidx.renderscript.Element mElement_CHAR_3 -> U
    boolean useNative -> M0
    androidx.renderscript.Element mElement_LONG_4 -> n0
    androidx.renderscript.Element mElement_SCRIPT -> D
    androidx.renderscript.Element mElement_LONG_2 -> l0
    boolean mEnableMultiInput -> b
    androidx.renderscript.Element mElement_MATRIX_3X3 -> p0
    boolean sInitialized -> D0
    java.lang.String mNativeLibDir -> g
    androidx.renderscript.Element mElement_FLOAT_2 -> K
    boolean mIncLoaded -> l
    androidx.renderscript.Element mElement_RGB_888 -> G
    androidx.renderscript.Element mElement_I32 -> t
    androidx.renderscript.Element mElement_UCHAR_4 -> S
    androidx.renderscript.Sampler mSampler_CLAMP_LINEAR_MIP_LINEAR -> t0
    int mDispatchAPILevel -> c
    androidx.renderscript.Sampler mSampler_CLAMP_NEAREST -> r0
    androidx.renderscript.Element mElement_I8 -> p
    androidx.renderscript.Element mElement_DOUBLE_3 -> O
    java.util.ArrayList mProcessContextList -> B0
    androidx.renderscript.Element mElement_BOOLEAN -> y
    androidx.renderscript.Element mElement_U64 -> u
    androidx.renderscript.Element mElement_USHORT_3 -> X
    androidx.renderscript.Sampler mSampler_WRAP_LINEAR -> v0
    java.util.concurrent.locks.ReentrantReadWriteLock mRWLock -> m
    androidx.renderscript.Sampler mSampler_MIRRORED_REPEAT_NEAREST -> x0
    androidx.renderscript.Element mElement_SAMPLER -> C
    int getDispatchAPILevel() -> a
    1:1:void nContextFinish():0:0 -> b
    1:1:void helpDestroy():0 -> b
    2:2:void helpDestroy():0:0 -> b
    3:3:void nIncContextFinish():0:0 -> b
    3:3:void helpDestroy():0 -> b
    4:4:void nIncContextDestroy():0:0 -> b
    4:4:void helpDestroy():0 -> b
    5:5:void helpDestroy():0:0 -> b
    6:6:void nIncContextDestroy():0:0 -> b
    6:6:void helpDestroy():0 -> b
    7:7:void nIncContextFinish():0:0 -> b
    7:7:void helpDestroy():0 -> b
    8:8:void helpDestroy():0:0 -> b
    9:9:void nContextDestroy():0:0 -> b
    9:9:void helpDestroy():0 -> b
    10:10:void nContextFinish():0:0 -> b
    10:10:void helpDestroy():0 -> b
    11:11:void helpDestroy():0:0 -> b
    1:1:boolean setupNative(int,android.content.Context):0:0 -> c
    1:1:androidx.renderscript.RenderScript internalCreate(android.content.Context,int,androidx.renderscript.RenderScript$ContextType,int):0 -> c
    2:2:androidx.renderscript.RenderScript internalCreate(android.content.Context,int,androidx.renderscript.RenderScript$ContextType,int):0:0 -> c
    3:3:long nContextCreate(long,int,int,int,java.lang.String):0:0 -> c
    3:3:androidx.renderscript.RenderScript internalCreate(android.content.Context,int,androidx.renderscript.RenderScript$ContextType,int):0 -> c
    4:4:androidx.renderscript.RenderScript internalCreate(android.content.Context,int,androidx.renderscript.RenderScript$ContextType,int):0:0 -> c
    5:5:long nContextCreate(long,int,int,int,java.lang.String):0:0 -> c
    5:5:androidx.renderscript.RenderScript internalCreate(android.content.Context,int,androidx.renderscript.RenderScript$ContextType,int):0 -> c
    6:6:androidx.renderscript.RenderScript internalCreate(android.content.Context,int,androidx.renderscript.RenderScript$ContextType,int):0:0 -> c
    1:1:void nContextDump(int):0:0 -> contextDump
    1:1:void contextDump():0 -> contextDump
    boolean isUseNative() -> d
    long nAllocationCreateTyped(long,int,int,long) -> e
    void nAllocationData2D(long,int,int,int,int,int,int,long,int,int,int,int) -> f
    1:1:void nContextFinish():0:0 -> finish
    1:1:void finish():0 -> finish
    long nElementCreate(long,int,boolean,int) -> g
    void nScriptBindAllocation(long,long,int,boolean) -> h
    long nScriptCCreate(java.lang.String,java.lang.String,byte[],int) -> i
    void nScriptForEach(long,int,long,long,byte[],boolean) -> j
    void nScriptForEach(long,int,long[],long,byte[],int[]) -> k
    void nScriptForEachClipped(long,int,long,long,byte[],int,int,int,int,int,int,boolean) -> l
    void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int,boolean) -> m
    void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int,boolean) -> n
    void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int,boolean) -> o
    void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int,boolean) -> p
    1:1:long nIncContextCreate(long,int,int,int):0:0 -> q
    1:1:long nScriptIntrinsicCreate(int,long,boolean):0 -> q
    2:2:long nScriptIntrinsicCreate(int,long,boolean):0:0 -> q
    3:3:long nIncContextCreate(long,int,int,int):0:0 -> q
    3:3:long nScriptIntrinsicCreate(int,long,boolean):0 -> q
    4:4:long nScriptIntrinsicCreate(int,long,boolean):0:0 -> q
    void nScriptInvoke(long,int,boolean) -> r
    void nScriptSetVarI(long,int,int,boolean) -> s
    1:1:void nContextSendMessage(int,int[]):0:0 -> sendMessage
    1:1:void sendMessage(int,int[]):0 -> sendMessage
    1:1:void nContextSetPriority(int):0:0 -> setPriority
    1:1:void setPriority(androidx.renderscript.RenderScript$Priority):0 -> setPriority
    void nScriptSetVarObj(long,int,long,boolean) -> t
    void nScriptSetVarVE(long,int,byte[],long,int[],boolean) -> u
    long nTypeCreate(long,int,int,int,boolean,boolean,int) -> v
    boolean usingIO() -> w
    void validate() -> x
    void validateObject(androidx.renderscript.BaseObj) -> y
androidx.renderscript.RenderScript$ContextType -> androidx.renderscript.RenderScript$ContextType:
    androidx.renderscript.RenderScript$ContextType[] $VALUES -> b
    int mID -> a
androidx.renderscript.RenderScript$MessageThread -> androidx.renderscript.b:
    int[] mAuxData -> c
    androidx.renderscript.RenderScript mRS -> a
    boolean mRun -> b
androidx.renderscript.RenderScript$Priority -> androidx.renderscript.RenderScript$Priority:
    androidx.renderscript.RenderScript$Priority[] $VALUES -> b
    int mID -> a
androidx.renderscript.Sampler -> androidx.renderscript.Sampler:
    float mAniso -> h
    androidx.renderscript.Sampler$Value mMag -> e
    androidx.renderscript.Sampler$Value mMin -> d
    androidx.renderscript.Sampler$Value mWrapT -> g
    androidx.renderscript.Sampler$Value mWrapS -> f
androidx.renderscript.Sampler$Builder -> androidx.renderscript.Sampler$Builder:
    androidx.renderscript.Sampler$Value mMag -> c
    androidx.renderscript.Sampler$Value mMin -> b
    float mAniso -> g
    androidx.renderscript.Sampler$Value mWrapT -> e
    androidx.renderscript.Sampler$Value mWrapS -> d
    androidx.renderscript.Sampler$Value mWrapR -> f
    androidx.renderscript.RenderScript mRS -> a
    1:1:long androidx.renderscript.RenderScript.nSamplerCreate(int,int,int,int,int,float):0:0 -> create
    1:1:androidx.renderscript.Sampler create():0 -> create
    2:2:androidx.renderscript.Sampler create():0:0 -> create
    3:3:long androidx.renderscript.RenderScript.nSamplerCreate(int,int,int,int,int,float):0:0 -> create
    3:3:androidx.renderscript.Sampler create():0 -> create
androidx.renderscript.Sampler$Value -> androidx.renderscript.Sampler$Value:
    androidx.renderscript.Sampler$Value[] $VALUES -> b
    int mID -> a
androidx.renderscript.Script -> androidx.renderscript.Script:
    android.util.SparseArray mFIDs -> g
    android.util.SparseArray mKIDs -> e
    android.util.SparseArray mIIDs -> f
    boolean mUseIncSupp -> d
    1:1:long androidx.renderscript.RenderScript.nScriptFieldIDCreate(long,int,boolean):0:0 -> createFieldID
    1:1:androidx.renderscript.Script$FieldID createFieldID(int,androidx.renderscript.Element):0 -> createFieldID
    2:2:androidx.renderscript.Script$FieldID createFieldID(int,androidx.renderscript.Element):0:0 -> createFieldID
    3:3:long androidx.renderscript.RenderScript.nScriptFieldIDCreate(long,int,boolean):0:0 -> createFieldID
    3:3:androidx.renderscript.Script$FieldID createFieldID(int,androidx.renderscript.Element):0 -> createFieldID
    1:1:long androidx.renderscript.RenderScript.nScriptInvokeIDCreate(long,int):0:0 -> createInvokeID
    1:1:androidx.renderscript.Script$InvokeID createInvokeID(int):0 -> createInvokeID
    2:2:androidx.renderscript.Script$InvokeID createInvokeID(int):0:0 -> createInvokeID
    3:3:long androidx.renderscript.RenderScript.nScriptInvokeIDCreate(long,int):0:0 -> createInvokeID
    3:3:androidx.renderscript.Script$InvokeID createInvokeID(int):0 -> createInvokeID
    1:1:long androidx.renderscript.RenderScript.nScriptKernelIDCreate(long,int,int,boolean):0:0 -> createKernelID
    1:1:androidx.renderscript.Script$KernelID createKernelID(int,int,androidx.renderscript.Element,androidx.renderscript.Element):0 -> createKernelID
    2:2:androidx.renderscript.Script$KernelID createKernelID(int,int,androidx.renderscript.Element,androidx.renderscript.Element):0:0 -> createKernelID
    3:3:long androidx.renderscript.RenderScript.nScriptKernelIDCreate(long,int,int,boolean):0:0 -> createKernelID
    3:3:androidx.renderscript.Script$KernelID createKernelID(int,int,androidx.renderscript.Element,androidx.renderscript.Element):0 -> createKernelID
    1:1:long androidx.renderscript.RenderScript.nIncAllocationCreateTyped(long,long,int):0:0 -> e
    1:1:long getDummyAlloc(androidx.renderscript.Allocation):0 -> e
    2:2:long getDummyAlloc(androidx.renderscript.Allocation):0:0 -> e
    3:3:long androidx.renderscript.RenderScript.nIncAllocationCreateTyped(long,long,int):0:0 -> e
    3:3:long getDummyAlloc(androidx.renderscript.Allocation):0 -> e
    1:1:void androidx.renderscript.RenderScript.nScriptInvokeV(long,int,byte[],boolean):0:0 -> invoke
    1:1:void invoke(int,androidx.renderscript.FieldPacker):0 -> invoke
    2:2:void invoke(int,androidx.renderscript.FieldPacker):0:0 -> invoke
    1:1:void androidx.renderscript.RenderScript.nScriptReduce(long,int,long[],long,int[]):0:0 -> reduce
    1:1:void reduce(int,androidx.renderscript.Allocation[],androidx.renderscript.Allocation,androidx.renderscript.Script$LaunchOptions):0 -> reduce
    2:2:void reduce(int,androidx.renderscript.Allocation[],androidx.renderscript.Allocation,androidx.renderscript.Script$LaunchOptions):0:0 -> reduce
    1:1:void androidx.renderscript.RenderScript.nScriptSetTimeZone(long,byte[],boolean):0:0 -> setTimeZone
    1:1:void setTimeZone(java.lang.String):0 -> setTimeZone
    2:2:void setTimeZone(java.lang.String):0:0 -> setTimeZone
    1:1:void androidx.renderscript.RenderScript.nScriptSetVarD(long,int,double,boolean):0:0 -> setVar
    1:1:void setVar(int,double):0 -> setVar
    2:2:void androidx.renderscript.RenderScript.nScriptSetVarF(long,int,float,boolean):0:0 -> setVar
    2:2:void setVar(int,float):0 -> setVar
    3:3:void androidx.renderscript.RenderScript.nScriptSetVarJ(long,int,long,boolean):0:0 -> setVar
    3:3:void setVar(int,long):0 -> setVar
    4:4:void androidx.renderscript.RenderScript.nScriptSetVarV(long,int,byte[],boolean):0:0 -> setVar
    4:4:void setVar(int,androidx.renderscript.FieldPacker):0 -> setVar
androidx.renderscript.Script$FieldID -> androidx.renderscript.Script$FieldID:
    androidx.renderscript.Script mScript -> d
androidx.renderscript.Script$InvokeID -> androidx.renderscript.Script$InvokeID:
    androidx.renderscript.Script mScript -> d
androidx.renderscript.Script$KernelID -> androidx.renderscript.Script$KernelID:
    androidx.renderscript.Script mScript -> d
    int mSlot -> e
androidx.renderscript.Script$LaunchOptions -> androidx.renderscript.Script$LaunchOptions:
    int zend -> f
    int yend -> d
    int zstart -> e
    int ystart -> b
    int xend -> c
    int xstart -> a
    int access$000(androidx.renderscript.Script$LaunchOptions) -> a
    int access$100(androidx.renderscript.Script$LaunchOptions) -> b
    int access$200(androidx.renderscript.Script$LaunchOptions) -> c
    int access$300(androidx.renderscript.Script$LaunchOptions) -> d
    int access$400(androidx.renderscript.Script$LaunchOptions) -> e
    int access$500(androidx.renderscript.Script$LaunchOptions) -> f
androidx.renderscript.ScriptC -> androidx.renderscript.ScriptC:
    1:1:long internalCreate(androidx.renderscript.RenderScript,android.content.res.Resources,int):0:0 -> <init>
    1:1:void <init>(androidx.renderscript.RenderScript,android.content.res.Resources,int):0 -> <init>
    2:2:void <init>(androidx.renderscript.RenderScript,android.content.res.Resources,int):0:0 -> <init>
    3:3:long internalCreate(androidx.renderscript.RenderScript,android.content.res.Resources,int):0:0 -> <init>
    3:3:void <init>(androidx.renderscript.RenderScript,android.content.res.Resources,int):0 -> <init>
    long internalStringCreate(androidx.renderscript.RenderScript,java.lang.String,byte[]) -> f
androidx.renderscript.ScriptGroup -> androidx.renderscript.ScriptGroup:
    androidx.renderscript.ScriptGroup$IO[] mOutputs -> d
    androidx.renderscript.ScriptGroup$IO[] mInputs -> e
    java.util.ArrayList mNodes -> g
    boolean mUseIncSupp -> f
    java.util.List mInputs2 -> h
    androidx.renderscript.ScriptGroup$Future[] mOutputs2 -> i
    1:1:long androidx.renderscript.RenderScript.nScriptGroup2Create(java.lang.String,java.lang.String,long[]):0:0 -> <init>
    1:1:void <init>(androidx.renderscript.RenderScript,java.lang.String,java.util.List,java.util.List,androidx.renderscript.ScriptGroup$Future[]):0 -> <init>
    2:2:void <init>(androidx.renderscript.RenderScript,java.lang.String,java.util.List,java.util.List,androidx.renderscript.ScriptGroup$Future[]):0:0 -> <init>
    3:3:long androidx.renderscript.RenderScript.nScriptGroup2Create(java.lang.String,java.lang.String,long[]):0:0 -> <init>
    3:3:void <init>(androidx.renderscript.RenderScript,java.lang.String,java.util.List,java.util.List,androidx.renderscript.ScriptGroup$Future[]):0 -> <init>
    java.util.ArrayList access$002(androidx.renderscript.ScriptGroup,java.util.ArrayList) -> e
    1:1:void androidx.renderscript.RenderScript.nScriptGroupExecute(long):0:0 -> execute
    1:1:void execute():0 -> execute
    2:2:void execute():0:0 -> execute
    3:3:void androidx.renderscript.ScriptGroup$Input.set(java.lang.Object):0:0 -> execute
    3:3:java.lang.Object[] execute(java.lang.Object[]):0 -> execute
    4:4:java.lang.Object[] execute(java.lang.Object[]):0:0 -> execute
    5:5:void androidx.renderscript.RenderScript.nScriptGroup2Execute(long):0:0 -> execute
    5:5:java.lang.Object[] execute(java.lang.Object[]):0 -> execute
    6:6:java.lang.Object[] execute(java.lang.Object[]):0:0 -> execute
    7:7:java.lang.Object androidx.renderscript.ScriptGroup$Future.getValue():0:0 -> execute
    7:7:java.lang.Object[] execute(java.lang.Object[]):0 -> execute
    8:8:java.lang.Object[] execute(java.lang.Object[]):0:0 -> execute
    9:9:java.lang.Object androidx.renderscript.ScriptGroup$Input.get():0:0 -> execute
    9:9:java.lang.Object[] execute(java.lang.Object[]):0 -> execute
    10:10:java.lang.Object[] execute(java.lang.Object[]):0:0 -> execute
    11:11:void androidx.renderscript.RenderScript.nScriptGroup2Execute(long):0:0 -> execute
    11:11:java.lang.Object[] execute(java.lang.Object[]):0 -> execute
    boolean access$102(androidx.renderscript.ScriptGroup,boolean) -> f
    1:1:long androidx.renderscript.RenderScript.safeID(androidx.renderscript.BaseObj):0:0 -> setInput
    1:1:void setInput(androidx.renderscript.Script$KernelID,androidx.renderscript.Allocation):0 -> setInput
    2:2:void androidx.renderscript.RenderScript.nScriptGroupSetInput(long,long,long):0:0 -> setInput
    2:2:void setInput(androidx.renderscript.Script$KernelID,androidx.renderscript.Allocation):0 -> setInput
    3:3:void setInput(androidx.renderscript.Script$KernelID,androidx.renderscript.Allocation):0:0 -> setInput
    1:1:long androidx.renderscript.RenderScript.safeID(androidx.renderscript.BaseObj):0:0 -> setOutput
    1:1:void setOutput(androidx.renderscript.Script$KernelID,androidx.renderscript.Allocation):0 -> setOutput
    2:2:void androidx.renderscript.RenderScript.nScriptGroupSetOutput(long,long,long):0:0 -> setOutput
    2:2:void setOutput(androidx.renderscript.Script$KernelID,androidx.renderscript.Allocation):0 -> setOutput
    3:3:void setOutput(androidx.renderscript.Script$KernelID,androidx.renderscript.Allocation):0:0 -> setOutput
androidx.renderscript.ScriptGroup$Binding -> androidx.renderscript.ScriptGroup$Binding:
    androidx.renderscript.Script$FieldID mField -> a
    java.lang.Object mValue -> b
androidx.renderscript.ScriptGroup$Builder -> androidx.renderscript.ScriptGroup$Builder:
    boolean mUseIncSupp -> e
    int mKernelCount -> d
    java.util.ArrayList mLines -> c
    androidx.renderscript.RenderScript mRS -> a
    java.util.ArrayList mNodes -> b
    boolean calcOrderRecurse(androidx.renderscript.ScriptGroup$Node,int) -> a
    androidx.renderscript.ScriptGroup$Node findNode(androidx.renderscript.Script$KernelID) -> b
    androidx.renderscript.ScriptGroup$Node findNode(androidx.renderscript.Script) -> c
    1:1:void validateDAG():0:0 -> create
    1:1:androidx.renderscript.ScriptGroup create():0 -> create
    2:2:androidx.renderscript.ScriptGroup create():0:0 -> create
    3:3:long androidx.renderscript.RenderScript.nScriptGroupCreate(long[],long[],long[],long[],long[]):0:0 -> create
    3:3:androidx.renderscript.ScriptGroup create():0 -> create
    4:4:androidx.renderscript.ScriptGroup create():0:0 -> create
    5:5:long androidx.renderscript.RenderScript.nScriptGroupCreate(long[],long[],long[],long[],long[]):0:0 -> create
    5:5:androidx.renderscript.ScriptGroup create():0 -> create
    6:6:boolean calcOrder():0:0 -> create
    6:6:androidx.renderscript.ScriptGroup create():0 -> create
    7:7:androidx.renderscript.ScriptGroup create():0:0 -> create
    void validateCycle(androidx.renderscript.ScriptGroup$Node,androidx.renderscript.ScriptGroup$Node) -> d
    1:1:void mergeDAGs(int,int):0:0 -> e
    1:1:void validateDAGRecurse(androidx.renderscript.ScriptGroup$Node,int):0 -> e
    2:2:void validateDAGRecurse(androidx.renderscript.ScriptGroup$Node,int):0:0 -> e
androidx.renderscript.ScriptGroup$Builder$1 -> androidx.renderscript.c:
    1:1:int compare(androidx.renderscript.ScriptGroup$Node,androidx.renderscript.ScriptGroup$Node):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
androidx.renderscript.ScriptGroup$Builder2 -> androidx.renderscript.ScriptGroup$Builder2:
    java.util.List mClosures -> b
    java.util.List mInputs -> c
    androidx.renderscript.RenderScript mRS -> a
    boolean seperateArgsAndBindings(java.lang.Object[],java.util.ArrayList,java.util.Map) -> a
    1:1:androidx.renderscript.ScriptGroup$Closure addInvokeInternal(androidx.renderscript.Script$InvokeID,java.lang.Object[],java.util.Map):0:0 -> addInvoke
    1:1:androidx.renderscript.ScriptGroup$Closure addInvoke(androidx.renderscript.Script$InvokeID,java.lang.Object[]):0 -> addInvoke
    1:1:androidx.renderscript.ScriptGroup$Closure addKernelInternal(androidx.renderscript.Script$KernelID,androidx.renderscript.Type,java.lang.Object[],java.util.Map):0:0 -> addKernel
    1:1:androidx.renderscript.ScriptGroup$Closure addKernel(androidx.renderscript.Script$KernelID,androidx.renderscript.Type,java.lang.Object[]):0 -> addKernel
androidx.renderscript.ScriptGroup$Closure -> androidx.renderscript.ScriptGroup$Closure:
    java.lang.Object[] mArgs -> d
    androidx.renderscript.Allocation mReturnValue -> e
    androidx.renderscript.FieldPacker mFP -> i
    java.util.Map mBindings -> f
    androidx.renderscript.ScriptGroup$Future mReturnFuture -> g
    java.util.Map mGlobalFuture -> h
    1:1:long androidx.renderscript.RenderScript.nInvokeClosureCreate(long,byte[],long[],long[],int[]):0:0 -> <init>
    1:1:void <init>(androidx.renderscript.RenderScript,androidx.renderscript.Script$InvokeID,java.lang.Object[],java.util.Map):0 -> <init>
    2:2:void <init>(androidx.renderscript.RenderScript,androidx.renderscript.Script$InvokeID,java.lang.Object[],java.util.Map):0:0 -> <init>
    3:3:long androidx.renderscript.RenderScript.nInvokeClosureCreate(long,byte[],long[],long[],int[]):0:0 -> <init>
    3:3:void <init>(androidx.renderscript.RenderScript,androidx.renderscript.Script$InvokeID,java.lang.Object[],java.util.Map):0 -> <init>
    4:4:long androidx.renderscript.RenderScript.nClosureCreate(long,long,long[],long[],int[],long[],long[]):0:0 -> <init>
    4:4:void <init>(androidx.renderscript.RenderScript,androidx.renderscript.Script$KernelID,androidx.renderscript.Type,java.lang.Object[],java.util.Map):0 -> <init>
    5:5:void <init>(androidx.renderscript.RenderScript,androidx.renderscript.Script$KernelID,androidx.renderscript.Type,java.lang.Object[],java.util.Map):0:0 -> <init>
    6:6:long androidx.renderscript.RenderScript.nClosureCreate(long,long,long[],long[],int[],long[],long[]):0:0 -> <init>
    6:6:void <init>(androidx.renderscript.RenderScript,androidx.renderscript.Script$KernelID,androidx.renderscript.Type,java.lang.Object[],java.util.Map):0 -> <init>
    1:1:java.lang.Object androidx.renderscript.ScriptGroup$Future.getValue():0:0 -> e
    1:1:void retrieveValueAndDependenceInfo(androidx.renderscript.RenderScript,int,androidx.renderscript.Script$FieldID,java.lang.Object,long[],int[],long[],long[]):0 -> e
    2:2:androidx.renderscript.ScriptGroup$Closure androidx.renderscript.ScriptGroup$Future.getClosure():0:0 -> e
    2:2:void retrieveValueAndDependenceInfo(androidx.renderscript.RenderScript,int,androidx.renderscript.Script$FieldID,java.lang.Object,long[],int[],long[],long[]):0 -> e
    3:3:void retrieveValueAndDependenceInfo(androidx.renderscript.RenderScript,int,androidx.renderscript.Script$FieldID,java.lang.Object,long[],int[],long[],long[]):0:0 -> e
    4:4:androidx.renderscript.Script$FieldID androidx.renderscript.ScriptGroup$Future.getFieldID():0:0 -> e
    4:4:void retrieveValueAndDependenceInfo(androidx.renderscript.RenderScript,int,androidx.renderscript.Script$FieldID,java.lang.Object,long[],int[],long[],long[]):0 -> e
    5:5:void retrieveValueAndDependenceInfo(androidx.renderscript.RenderScript,int,androidx.renderscript.Script$FieldID,java.lang.Object,long[],int[],long[],long[]):0:0 -> e
    6:6:void androidx.renderscript.ScriptGroup$Input.addReference(androidx.renderscript.ScriptGroup$Closure,int):0:0 -> e
    6:6:void retrieveValueAndDependenceInfo(androidx.renderscript.RenderScript,int,androidx.renderscript.Script$FieldID,java.lang.Object,long[],int[],long[],long[]):0 -> e
    7:7:void androidx.renderscript.ScriptGroup$Input.addReference(androidx.renderscript.ScriptGroup$Closure,androidx.renderscript.Script$FieldID):0:0 -> e
    7:7:void retrieveValueAndDependenceInfo(androidx.renderscript.RenderScript,int,androidx.renderscript.Script$FieldID,java.lang.Object,long[],int[],long[],long[]):0 -> e
    8:8:void retrieveValueAndDependenceInfo(androidx.renderscript.RenderScript,int,androidx.renderscript.Script$FieldID,java.lang.Object,long[],int[],long[],long[]):0:0 -> e
    1:1:java.lang.Object androidx.renderscript.ScriptGroup$Future.getValue():0:0 -> f
    1:1:void setArg(int,java.lang.Object):0 -> f
    2:2:void setArg(int,java.lang.Object):0:0 -> f
    3:3:void androidx.renderscript.RenderScript.nClosureSetArg(long,int,long,int):0:0 -> f
    3:3:void setArg(int,java.lang.Object):0 -> f
    1:1:java.lang.Object androidx.renderscript.ScriptGroup$Future.getValue():0:0 -> g
    1:1:void setGlobal(androidx.renderscript.Script$FieldID,java.lang.Object):0 -> g
    2:2:void setGlobal(androidx.renderscript.Script$FieldID,java.lang.Object):0:0 -> g
    3:3:void androidx.renderscript.RenderScript.nClosureSetGlobal(long,long,long,int):0:0 -> g
    3:3:void setGlobal(androidx.renderscript.Script$FieldID,java.lang.Object):0 -> g
    1:1:java.lang.Object androidx.renderscript.ScriptGroup$Future.getValue():0:0 -> getGlobal
    1:1:androidx.renderscript.ScriptGroup$Future getGlobal(androidx.renderscript.Script$FieldID):0 -> getGlobal
    2:2:androidx.renderscript.ScriptGroup$Future getGlobal(androidx.renderscript.Script$FieldID):0:0 -> getGlobal
androidx.renderscript.ScriptGroup$Closure$ValueAndSize -> androidx.renderscript.d:
    long value -> a
    int size -> b
androidx.renderscript.ScriptGroup$ConnectLine -> androidx.renderscript.e:
    androidx.renderscript.Allocation mAllocation -> e
    androidx.renderscript.Type mAllocationType -> d
    androidx.renderscript.Script$FieldID mToF -> a
    androidx.renderscript.Script$KernelID mToK -> b
    androidx.renderscript.Script$KernelID mFrom -> c
androidx.renderscript.ScriptGroup$Future -> androidx.renderscript.ScriptGroup$Future:
    androidx.renderscript.Script$FieldID mFieldID -> b
    androidx.renderscript.ScriptGroup$Closure mClosure -> a
    java.lang.Object mValue -> c
androidx.renderscript.ScriptGroup$IO -> androidx.renderscript.f:
    androidx.renderscript.Script$KernelID mKID -> a
    androidx.renderscript.Allocation mAllocation -> b
androidx.renderscript.ScriptGroup$Input -> androidx.renderscript.ScriptGroup$Input:
    java.util.List mArgIndex -> b
    java.util.List mFieldID -> a
    java.lang.Object mValue -> c
androidx.renderscript.ScriptGroup$Node -> androidx.renderscript.g:
    androidx.renderscript.Script mScript -> a
    boolean mSeen -> f
    int mOrder -> g
    java.util.ArrayList mOutputs -> d
    int dagNumber -> e
    java.util.ArrayList mInputs -> c
    java.util.ArrayList mKernels -> b
androidx.renderscript.ScriptIntrinsic3DLUT -> androidx.renderscript.ScriptIntrinsic3DLUT:
    androidx.renderscript.Element mElement -> i
    androidx.renderscript.Allocation mLUT -> h
androidx.renderscript.ScriptIntrinsicBLAS -> androidx.renderscript.ScriptIntrinsicBLAS:
    void validateUplo(int) -> A
    1:1:void androidx.renderscript.RenderScript.nScriptIntrinsicBLAS_BNNM(long,int,int,int,long,int,long,int,long,int,int,boolean):0:0 -> BNNM
    1:1:void BNNM(androidx.renderscript.Allocation,int,androidx.renderscript.Allocation,int,androidx.renderscript.Allocation,int,int):0 -> BNNM
    2:2:void BNNM(androidx.renderscript.Allocation,int,androidx.renderscript.Allocation,int,androidx.renderscript.Allocation,int,int):0:0 -> BNNM
    void validateDiag(int) -> f
    void validateGEMV(androidx.renderscript.Element,int,androidx.renderscript.Allocation,androidx.renderscript.Allocation,int,androidx.renderscript.Allocation,int) -> g
    void validateGER(androidx.renderscript.Element,androidx.renderscript.Allocation,int,androidx.renderscript.Allocation,int,androidx.renderscript.Allocation) -> h
    void validateGERU(androidx.renderscript.Element,androidx.renderscript.Allocation,int,androidx.renderscript.Allocation,int,androidx.renderscript.Allocation) -> i
    void validateHEMM(androidx.renderscript.Element,int,androidx.renderscript.Allocation,androidx.renderscript.Allocation,androidx.renderscript.Allocation) -> j
    1:1:void validateConjTranspose(int):0:0 -> k
    1:1:void validateHER2K(androidx.renderscript.Element,int,androidx.renderscript.Allocation,androidx.renderscript.Allocation,androidx.renderscript.Allocation):0 -> k
    2:2:void validateHER2K(androidx.renderscript.Element,int,androidx.renderscript.Allocation,androidx.renderscript.Allocation,androidx.renderscript.Allocation):0:0 -> k
    1:1:void validateConjTranspose(int):0:0 -> l
    1:1:void validateHERK(androidx.renderscript.Element,int,androidx.renderscript.Allocation,androidx.renderscript.Allocation):0 -> l
    2:2:void validateHERK(androidx.renderscript.Element,int,androidx.renderscript.Allocation,androidx.renderscript.Allocation):0:0 -> l
    void validateL3(androidx.renderscript.Element,int,int,int,androidx.renderscript.Allocation,androidx.renderscript.Allocation,androidx.renderscript.Allocation) -> m
    int validateSPMV(androidx.renderscript.Element,int,androidx.renderscript.Allocation,androidx.renderscript.Allocation,int,androidx.renderscript.Allocation,int) -> n
    int validateSPR(androidx.renderscript.Element,int,androidx.renderscript.Allocation,int,androidx.renderscript.Allocation) -> o
    int validateSPR2(androidx.renderscript.Element,int,androidx.renderscript.Allocation,int,androidx.renderscript.Allocation,int,androidx.renderscript.Allocation) -> p
    int validateSYMV(androidx.renderscript.Element,int,androidx.renderscript.Allocation,androidx.renderscript.Allocation,androidx.renderscript.Allocation,int,int) -> q
    int validateSYR(androidx.renderscript.Element,int,androidx.renderscript.Allocation,int,androidx.renderscript.Allocation) -> r
    int validateSYR2(androidx.renderscript.Element,int,androidx.renderscript.Allocation,int,androidx.renderscript.Allocation,int,androidx.renderscript.Allocation) -> s
    void validateSYR2K(androidx.renderscript.Element,int,androidx.renderscript.Allocation,androidx.renderscript.Allocation,androidx.renderscript.Allocation) -> t
    void validateSide(int) -> u
    int validateTPMV(androidx.renderscript.Element,int,int,int,androidx.renderscript.Allocation,androidx.renderscript.Allocation,int) -> v
    void validateTRMM(androidx.renderscript.Element,int,int,androidx.renderscript.Allocation,androidx.renderscript.Allocation) -> w
    void validateTRMV(androidx.renderscript.Element,int,int,int,androidx.renderscript.Allocation,androidx.renderscript.Allocation,int) -> x
    void validateTRSM(androidx.renderscript.Element,int,int,androidx.renderscript.Allocation,androidx.renderscript.Allocation) -> y
    void validateTranspose(int) -> z
androidx.renderscript.ScriptIntrinsicBlend -> androidx.renderscript.ScriptIntrinsicBlend:
    void blend(int,androidx.renderscript.Allocation,androidx.renderscript.Allocation) -> f
androidx.renderscript.ScriptIntrinsicBlur -> androidx.renderscript.ScriptIntrinsicBlur:
    androidx.renderscript.Allocation mInput -> h
androidx.renderscript.ScriptIntrinsicColorMatrix -> androidx.renderscript.ScriptIntrinsicColorMatrix:
    androidx.renderscript.Matrix4f mMatrix -> h
    androidx.renderscript.Float4 mAdd -> i
    void setMatrix() -> f
androidx.renderscript.ScriptIntrinsicConvolve3x3 -> androidx.renderscript.ScriptIntrinsicConvolve3x3:
    float[] mValues -> h
    androidx.renderscript.Allocation mInput -> i
androidx.renderscript.ScriptIntrinsicConvolve5x5 -> androidx.renderscript.ScriptIntrinsicConvolve5x5:
    float[] mValues -> h
    androidx.renderscript.Allocation mInput -> i
androidx.renderscript.ScriptIntrinsicHistogram -> androidx.renderscript.ScriptIntrinsicHistogram:
    androidx.renderscript.Allocation mOut -> h
androidx.renderscript.ScriptIntrinsicLUT -> androidx.renderscript.ScriptIntrinsicLUT:
    androidx.renderscript.Allocation mTables -> h
    boolean mDirty -> j
    byte[] mCache -> i
    void validate(int,int) -> f
androidx.renderscript.ScriptIntrinsicResize -> androidx.renderscript.ScriptIntrinsicResize:
    androidx.renderscript.Allocation mInput -> h
androidx.renderscript.ScriptIntrinsicYuvToRGB -> androidx.renderscript.ScriptIntrinsicYuvToRGB:
    androidx.renderscript.Allocation mInput -> h
androidx.renderscript.Type -> androidx.renderscript.Type:
    androidx.renderscript.Element mElement -> k
    int mElementCount -> j
    int mDimYuv -> i
    int mDimZ -> f
    int mDimX -> d
    boolean mDimMipmaps -> g
    int mDimY -> e
    boolean mDimFaces -> h
    void calcElementCount() -> e
    1:1:long androidx.renderscript.RenderScript.nIncTypeCreate(long,int,int,int,boolean,boolean,int):0:0 -> getDummyType
    1:1:long getDummyType(androidx.renderscript.RenderScript,long):0 -> getDummyType
androidx.renderscript.Type$Builder -> androidx.renderscript.Type$Builder:
    androidx.renderscript.Element mElement -> h
    boolean mDimMipmaps -> e
    boolean mDimFaces -> f
    int mYuv -> g
    int mDimZ -> d
    int mDimX -> b
    androidx.renderscript.RenderScript mRS -> a
    int mDimY -> c
androidx.renderscript.Type$CubemapFace -> androidx.renderscript.Type$CubemapFace:
    androidx.renderscript.Type$CubemapFace[] $VALUES -> b
    int mID -> a
androidx.slidingpanelayout.widget.SlidingPaneLayout -> androidx.slidingpanelayout.widget.SlidingPaneLayout:
    android.graphics.drawable.Drawable mShadowDrawableLeft -> c
    android.graphics.drawable.Drawable mShadowDrawableRight -> d
    int mParallaxBy -> l
    float mParallaxOffset -> i
    float mSlideOffset -> h
    int mSlideRange -> j
    boolean mIsUnableToDrag -> k
    int mOverhangSize -> e
    int mCoveredFadeColor -> b
    boolean mPreservedOpenState -> q
    boolean mFirstLayout -> r
    int mSliderFadeColor -> a
    androidx.customview.widget.ViewDragHelper mDragHelper -> p
    boolean mCanSlide -> f
    java.util.ArrayList mPostedRunnables -> t
    androidx.slidingpanelayout.widget.SlidingPaneLayout$PanelSlideListener mPanelSlideListener -> o
    android.graphics.Rect mTmpRect -> s
    android.view.View mSlideableView -> g
    float mInitialMotionY -> n
    float mInitialMotionX -> m
    boolean closePane(android.view.View,int) -> a
    1:1:void invalidateChildRegion(android.view.View):0:0 -> b
    1:1:void dimChildView(android.view.View,float,int):0 -> b
    2:2:void dimChildView(android.view.View,float,int):0:0 -> b
    void dispatchOnPanelClosed(android.view.View) -> c
    void dispatchOnPanelOpened(android.view.View) -> d
    boolean isDimmed(android.view.View) -> e
    boolean isLayoutRtlSupport() -> f
    1:1:void dispatchOnPanelSlide(android.view.View):0:0 -> g
    1:1:void onPanelDragged(int):0 -> g
    void parallaxOtherViews(float) -> h
    void setAllChildrenVisible() -> i
    boolean smoothSlideTo(float,int) -> j
    1:1:boolean viewIsOpaque(android.view.View):0:0 -> k
    1:1:void updateObscuredViewsVisibility(android.view.View):0 -> k
    2:2:void updateObscuredViewsVisibility(android.view.View):0:0 -> k
    1:1:boolean openPane(android.view.View,int):0:0 -> openPane
    1:1:boolean openPane():0 -> openPane
androidx.slidingpanelayout.widget.SlidingPaneLayout$AccessibilityDelegate -> androidx.slidingpanelayout.widget.a:
    androidx.slidingpanelayout.widget.SlidingPaneLayout this$0 -> d
    android.graphics.Rect mTmpRect -> c
    1:1:void copyNodeInfoNoChildren(androidx.core.view.accessibility.AccessibilityNodeInfoCompat,androidx.core.view.accessibility.AccessibilityNodeInfoCompat):0:0 -> onInitializeAccessibilityNodeInfo
    1:1:void onInitializeAccessibilityNodeInfo(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat):0 -> onInitializeAccessibilityNodeInfo
    2:2:void onInitializeAccessibilityNodeInfo(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat):0:0 -> onInitializeAccessibilityNodeInfo
    3:3:boolean filter(android.view.View):0:0 -> onInitializeAccessibilityNodeInfo
    3:3:void onInitializeAccessibilityNodeInfo(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat):0 -> onInitializeAccessibilityNodeInfo
    4:4:void onInitializeAccessibilityNodeInfo(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat):0:0 -> onInitializeAccessibilityNodeInfo
    1:1:boolean filter(android.view.View):0:0 -> onRequestSendAccessibilityEvent
    1:1:boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent):0 -> onRequestSendAccessibilityEvent
    2:2:boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent):0:0 -> onRequestSendAccessibilityEvent
androidx.slidingpanelayout.widget.SlidingPaneLayout$DisableLayerRunnable -> androidx.slidingpanelayout.widget.b:
    androidx.slidingpanelayout.widget.SlidingPaneLayout this$0 -> b
    android.view.View mChildView -> a
    1:1:void androidx.slidingpanelayout.widget.SlidingPaneLayout.invalidateChildRegion(android.view.View):0:0 -> run
    1:1:void run():0 -> run
    2:2:void run():0:0 -> run
androidx.slidingpanelayout.widget.SlidingPaneLayout$DragHelperCallback -> androidx.slidingpanelayout.widget.c:
    androidx.slidingpanelayout.widget.SlidingPaneLayout this$0 -> a
androidx.slidingpanelayout.widget.SlidingPaneLayout$LayoutParams -> androidx.slidingpanelayout.widget.SlidingPaneLayout$LayoutParams:
    int[] ATTRS -> d
    android.graphics.Paint dimPaint -> c
    boolean slideable -> a
    boolean dimWhenOffset -> b
androidx.slidingpanelayout.widget.SlidingPaneLayout$SavedState -> androidx.slidingpanelayout.widget.SlidingPaneLayout$SavedState:
    boolean isOpen -> b
androidx.slidingpanelayout.widget.SlidingPaneLayout$SavedState$1 -> androidx.slidingpanelayout.widget.d:
    1:1:androidx.slidingpanelayout.widget.SlidingPaneLayout$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    2:2:androidx.slidingpanelayout.widget.SlidingPaneLayout$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    2:2:java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader):0 -> createFromParcel
    1:1:androidx.slidingpanelayout.widget.SlidingPaneLayout$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.swiperefreshlayout.widget.CircleImageView -> androidx.swiperefreshlayout.widget.a:
    android.view.animation.Animation$AnimationListener mListener -> a
    int mShadowRadius -> b
androidx.swiperefreshlayout.widget.CircularProgressDrawable -> androidx.swiperefreshlayout.widget.CircularProgressDrawable:
    androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring mRing -> a
    int[] COLORS -> i
    android.animation.Animator mAnimator -> d
    float mRotationCount -> e
    boolean mFinishing -> f
    android.view.animation.Interpolator LINEAR_INTERPOLATOR -> g
    float mRotation -> b
    android.view.animation.Interpolator MATERIAL_INTERPOLATOR -> h
    android.content.res.Resources mResources -> c
    1:1:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setColors(int[]):0:0 -> <init>
    1:1:void <init>(android.content.Context):0 -> <init>
    2:2:void <init>(android.content.Context):0:0 -> <init>
    3:3:void setupAnimators():0:0 -> <init>
    3:3:void <init>(android.content.Context):0 -> <init>
    1:1:void applyFinishTranslation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring):0:0 -> a
    1:1:void applyTransformation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring,boolean):0 -> a
    2:2:float androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getStartingRotation():0:0 -> a
    2:2:void applyFinishTranslation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring):0 -> a
    2:2:void applyTransformation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring,boolean):0 -> a
    3:3:void applyFinishTranslation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring):0:0 -> a
    3:3:void applyTransformation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring,boolean):0 -> a
    4:4:float androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getStartingStartTrim():0:0 -> a
    4:4:void applyFinishTranslation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring):0 -> a
    4:4:void applyTransformation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring,boolean):0 -> a
    5:5:float androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getStartingEndTrim():0:0 -> a
    5:5:void applyFinishTranslation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring):0 -> a
    5:5:void applyTransformation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring,boolean):0 -> a
    6:6:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setStartTrim(float):0:0 -> a
    6:6:void applyFinishTranslation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring):0 -> a
    6:6:void applyTransformation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring,boolean):0 -> a
    7:7:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setEndTrim(float):0:0 -> a
    7:7:void applyFinishTranslation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring):0 -> a
    7:7:void applyTransformation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring,boolean):0 -> a
    8:8:float androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getStartingRotation():0:0 -> a
    8:8:void applyFinishTranslation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring):0 -> a
    8:8:void applyTransformation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring,boolean):0 -> a
    9:9:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setRotation(float):0:0 -> a
    9:9:void applyFinishTranslation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring):0 -> a
    9:9:void applyTransformation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring,boolean):0 -> a
    10:10:float androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getStartingRotation():0:0 -> a
    10:10:void applyTransformation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring,boolean):0 -> a
    11:11:float androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getStartingStartTrim():0:0 -> a
    11:11:void applyTransformation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring,boolean):0 -> a
    12:12:void applyTransformation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring,boolean):0:0 -> a
    13:13:float androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getStartingStartTrim():0:0 -> a
    13:13:void applyTransformation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring,boolean):0 -> a
    14:14:void applyTransformation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring,boolean):0:0 -> a
    15:15:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setStartTrim(float):0:0 -> a
    15:15:void applyTransformation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring,boolean):0 -> a
    16:16:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setEndTrim(float):0:0 -> a
    16:16:void applyTransformation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring,boolean):0 -> a
    17:17:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setRotation(float):0:0 -> a
    17:17:void applyTransformation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring,boolean):0 -> a
    18:18:void setRotation(float):0:0 -> a
    18:18:void applyTransformation(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring,boolean):0 -> a
    1:1:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setStrokeWidth(float):0:0 -> b
    1:1:void setSizeParameters(float,float,float,float):0 -> b
    2:2:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setCenterRadius(float):0:0 -> b
    2:2:void setSizeParameters(float,float,float,float):0 -> b
    3:3:void setSizeParameters(float,float,float,float):0:0 -> b
    4:4:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setArrowDimensions(float,float):0:0 -> b
    4:4:void setSizeParameters(float,float,float,float):0 -> b
    1:1:int androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getStartingColor():0:0 -> c
    1:1:void updateRingColor(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring):0 -> c
    2:2:int androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getNextColorIndex():0:0 -> c
    2:2:int androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getNextColor():0 -> c
    2:2:void updateRingColor(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring):0 -> c
    3:3:int androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getNextColor():0:0 -> c
    3:3:void updateRingColor(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring):0 -> c
    4:4:int androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getStartingColor():0:0 -> c
    4:4:void updateRingColor(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring):0 -> c
    5:5:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setColor(int):0:0 -> c
    5:5:void updateRingColor(float,androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring):0 -> c
    1:1:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.draw(android.graphics.Canvas,android.graphics.Rect):0:0 -> draw
    1:1:void draw(android.graphics.Canvas):0 -> draw
    2:2:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.drawTriangle(android.graphics.Canvas,float,float,android.graphics.RectF):0:0 -> draw
    2:2:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.draw(android.graphics.Canvas,android.graphics.Rect):0 -> draw
    2:2:void draw(android.graphics.Canvas):0 -> draw
    3:3:void draw(android.graphics.Canvas):0:0 -> draw
    1:1:int androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getAlpha():0:0 -> getAlpha
    1:1:int getAlpha():0 -> getAlpha
    1:1:boolean androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getShowArrow():0:0 -> getArrowEnabled
    1:1:boolean getArrowEnabled():0 -> getArrowEnabled
    1:1:float androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getArrowHeight():0:0 -> getArrowHeight
    1:1:float getArrowHeight():0 -> getArrowHeight
    1:1:float androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getArrowScale():0:0 -> getArrowScale
    1:1:float getArrowScale():0 -> getArrowScale
    1:1:float androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getArrowWidth():0:0 -> getArrowWidth
    1:1:float getArrowWidth():0 -> getArrowWidth
    1:1:int androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getBackgroundColor():0:0 -> getBackgroundColor
    1:1:int getBackgroundColor():0 -> getBackgroundColor
    1:1:float androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getCenterRadius():0:0 -> getCenterRadius
    1:1:float getCenterRadius():0 -> getCenterRadius
    1:1:int[] androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getColors():0:0 -> getColorSchemeColors
    1:1:int[] getColorSchemeColors():0 -> getColorSchemeColors
    1:1:float androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getEndTrim():0:0 -> getEndTrim
    1:1:float getEndTrim():0 -> getEndTrim
    1:1:float androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getRotation():0:0 -> getProgressRotation
    1:1:float getProgressRotation():0 -> getProgressRotation
    1:1:float androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getStartTrim():0:0 -> getStartTrim
    1:1:float getStartTrim():0 -> getStartTrim
    1:1:android.graphics.Paint$Cap androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getStrokeCap():0:0 -> getStrokeCap
    1:1:android.graphics.Paint$Cap getStrokeCap():0 -> getStrokeCap
    1:1:float androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getStrokeWidth():0:0 -> getStrokeWidth
    1:1:float getStrokeWidth():0 -> getStrokeWidth
    1:1:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setAlpha(int):0:0 -> setAlpha
    1:1:void setAlpha(int):0 -> setAlpha
    2:2:void setAlpha(int):0:0 -> setAlpha
    1:1:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setArrowDimensions(float,float):0:0 -> setArrowDimensions
    1:1:void setArrowDimensions(float,float):0 -> setArrowDimensions
    2:2:void setArrowDimensions(float,float):0:0 -> setArrowDimensions
    1:1:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setShowArrow(boolean):0:0 -> setArrowEnabled
    1:1:void setArrowEnabled(boolean):0 -> setArrowEnabled
    2:2:void setArrowEnabled(boolean):0:0 -> setArrowEnabled
    1:1:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setArrowScale(float):0:0 -> setArrowScale
    1:1:void setArrowScale(float):0 -> setArrowScale
    2:2:void setArrowScale(float):0:0 -> setArrowScale
    1:1:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setBackgroundColor(int):0:0 -> setBackgroundColor
    1:1:void setBackgroundColor(int):0 -> setBackgroundColor
    2:2:void setBackgroundColor(int):0:0 -> setBackgroundColor
    1:1:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setCenterRadius(float):0:0 -> setCenterRadius
    1:1:void setCenterRadius(float):0 -> setCenterRadius
    2:2:void setCenterRadius(float):0:0 -> setCenterRadius
    1:1:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setColorFilter(android.graphics.ColorFilter):0:0 -> setColorFilter
    1:1:void setColorFilter(android.graphics.ColorFilter):0 -> setColorFilter
    2:2:void setColorFilter(android.graphics.ColorFilter):0:0 -> setColorFilter
    1:1:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setColors(int[]):0:0 -> setColorSchemeColors
    1:1:void setColorSchemeColors(int[]):0 -> setColorSchemeColors
    2:2:void setColorSchemeColors(int[]):0:0 -> setColorSchemeColors
    1:1:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setRotation(float):0:0 -> setProgressRotation
    1:1:void setProgressRotation(float):0 -> setProgressRotation
    2:2:void setProgressRotation(float):0:0 -> setProgressRotation
    1:1:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setStartTrim(float):0:0 -> setStartEndTrim
    1:1:void setStartEndTrim(float,float):0 -> setStartEndTrim
    2:2:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setEndTrim(float):0:0 -> setStartEndTrim
    2:2:void setStartEndTrim(float,float):0 -> setStartEndTrim
    3:3:void setStartEndTrim(float,float):0:0 -> setStartEndTrim
    1:1:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setStrokeCap(android.graphics.Paint$Cap):0:0 -> setStrokeCap
    1:1:void setStrokeCap(android.graphics.Paint$Cap):0 -> setStrokeCap
    2:2:void setStrokeCap(android.graphics.Paint$Cap):0:0 -> setStrokeCap
    1:1:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setStrokeWidth(float):0:0 -> setStrokeWidth
    1:1:void setStrokeWidth(float):0 -> setStrokeWidth
    2:2:void setStrokeWidth(float):0:0 -> setStrokeWidth
    1:1:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.storeOriginals():0:0 -> start
    1:1:void start():0 -> start
    2:2:void start():0:0 -> start
    3:3:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.resetOriginals():0:0 -> start
    3:3:void start():0 -> start
    4:4:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setStartTrim(float):0:0 -> start
    4:4:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.resetOriginals():0 -> start
    4:4:void start():0 -> start
    5:5:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setEndTrim(float):0:0 -> start
    5:5:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.resetOriginals():0 -> start
    5:5:void start():0 -> start
    6:6:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setRotation(float):0:0 -> start
    6:6:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.resetOriginals():0 -> start
    6:6:void start():0 -> start
    7:7:void start():0:0 -> start
    1:1:void setRotation(float):0:0 -> stop
    1:1:void stop():0 -> stop
    2:2:void stop():0:0 -> stop
    3:3:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.resetOriginals():0:0 -> stop
    3:3:void stop():0 -> stop
    4:4:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setStartTrim(float):0:0 -> stop
    4:4:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.resetOriginals():0 -> stop
    4:4:void stop():0 -> stop
    5:5:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setEndTrim(float):0:0 -> stop
    5:5:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.resetOriginals():0 -> stop
    5:5:void stop():0 -> stop
    6:6:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.setRotation(float):0:0 -> stop
    6:6:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.resetOriginals():0 -> stop
    6:6:void stop():0 -> stop
    7:7:void stop():0:0 -> stop
androidx.swiperefreshlayout.widget.CircularProgressDrawable$1 -> androidx.swiperefreshlayout.widget.b:
    androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring val$ring -> a
    androidx.swiperefreshlayout.widget.CircularProgressDrawable this$0 -> b
androidx.swiperefreshlayout.widget.CircularProgressDrawable$2 -> androidx.swiperefreshlayout.widget.c:
    androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring val$ring -> a
    androidx.swiperefreshlayout.widget.CircularProgressDrawable this$0 -> b
    1:1:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.storeOriginals():0:0 -> onAnimationRepeat
    1:1:void onAnimationRepeat(android.animation.Animator):0 -> onAnimationRepeat
    2:2:int androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.getNextColorIndex():0:0 -> onAnimationRepeat
    2:2:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.goToNextColor():0 -> onAnimationRepeat
    2:2:void onAnimationRepeat(android.animation.Animator):0 -> onAnimationRepeat
    3:3:void androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring.goToNextColor():0:0 -> onAnimationRepeat
    3:3:void onAnimationRepeat(android.animation.Animator):0 -> onAnimationRepeat
    4:4:void onAnimationRepeat(android.animation.Animator):0:0 -> onAnimationRepeat
androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring -> androidx.swiperefreshlayout.widget.d:
    float mStartingEndTrim -> l
    float mStartingStartTrim -> k
    boolean mShowArrow -> n
    android.graphics.RectF mTempBounds -> a
    float mStrokeWidth -> h
    int mColorIndex -> j
    float mRotation -> g
    float mEndTrim -> f
    float mStartTrim -> e
    android.graphics.Path mArrow -> o
    int[] mColors -> i
    android.graphics.Paint mCirclePaint -> d
    android.graphics.Paint mArrowPaint -> c
    android.graphics.Paint mPaint -> b
    int mAlpha -> t
    float mRingCenterRadius -> q
    int mCurrentColor -> u
    float mArrowScale -> p
    int mArrowWidth -> r
    int mArrowHeight -> s
    float mStartingRotation -> m
    void setColorIndex(int) -> a
    void setShowArrow(boolean) -> b
androidx.swiperefreshlayout.widget.SwipeRefreshLayout -> androidx.swiperefreshlayout.widget.SwipeRefreshLayout:
    int mMediumAnimationDuration -> l
    androidx.swiperefreshlayout.widget.SwipeRefreshLayout$OnRefreshListener mListener -> b
    android.view.animation.Animation mAlphaStartAnimation -> B
    boolean mNestedScrollInProgress -> k
    float mTotalDragDistance -> e
    androidx.core.view.NestedScrollingParentHelper mNestedScrollingParentHelper -> g
    android.view.animation.Animation mScaleDownToStartAnimation -> D
    int mTouchSlop -> d
    android.view.animation.Animation mAnimateToCorrectPosition -> J
    android.view.View mTarget -> a
    boolean mNotify -> E
    int mSpinnerOffsetEnd -> w
    androidx.swiperefreshlayout.widget.CircularProgressDrawable mProgress -> y
    boolean mUsingCustomStart -> G
    int mCircleViewIndex -> u
    androidx.swiperefreshlayout.widget.SwipeRefreshLayout$OnChildScrollUpCallback mChildScrollUpCallback -> H
    int[] mParentOffsetInWindow -> j
    float mInitialDownY -> o
    android.view.animation.Animation mScaleAnimation -> z
    int[] LAYOUT_ATTRS -> M
    int mActivePointerId -> q
    int mCurrentTargetOffsetTop -> m
    boolean mIsBeingDragged -> p
    android.view.animation.Animation mScaleDownAnimation -> A
    float mTotalUnconsumed -> f
    android.view.animation.Animation mAlphaMaxAnimation -> C
    java.lang.String LOG_TAG -> L
    int mCircleDiameter -> F
    androidx.core.view.NestedScrollingChildHelper mNestedScrollingChildHelper -> h
    boolean mScale -> r
    android.view.animation.DecelerateInterpolator mDecelerateInterpolator -> s
    android.view.animation.Animation mAnimateToStartPosition -> K
    androidx.swiperefreshlayout.widget.CircleImageView mCircleView -> t
    android.view.animation.Animation$AnimationListener mRefreshListener -> I
    int[] mParentScrollConsumed -> i
    float mStartingScale -> v
    int mCustomSlingshotDistance -> x
    boolean mRefreshing -> c
    float mInitialMotionY -> n
    1:1:void createProgressView():0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet):0 -> <init>
    2:2:void <init>(android.content.Context,android.util.AttributeSet):0:0 -> <init>
    void ensureTarget() -> a
    1:1:void startScaleDownReturnToStartAnimation(int,android.view.animation.Animation$AnimationListener):0:0 -> b
    1:1:void animateOffsetToStartPosition(int,android.view.animation.Animation$AnimationListener):0 -> b
    1:1:void finishSpinner(float):0 -> b
    2:2:void animateOffsetToStartPosition(int,android.view.animation.Animation$AnimationListener):0:0 -> b
    2:2:void finishSpinner(float):0 -> b
    3:3:void finishSpinner(float):0:0 -> b
    boolean isAnimationRunning(android.view.animation.Animation) -> c
    1:1:void startProgressAlphaStartAnimation():0:0 -> d
    1:1:void moveSpinner(float):0 -> d
    2:2:void moveSpinner(float):0:0 -> d
    3:3:void startProgressAlphaMaxAnimation():0:0 -> d
    3:3:void moveSpinner(float):0 -> d
    4:4:void moveSpinner(float):0:0 -> d
    void moveToStart(float) -> e
    void onSecondaryPointerUp(android.view.MotionEvent) -> f
    1:1:void setColorViewAlpha(int):0:0 -> g
    1:1:void reset():0 -> g
    2:2:void reset():0:0 -> g
    void setAnimationProgress(float) -> h
    1:1:void animateOffsetToCorrectPosition(int,android.view.animation.Animation$AnimationListener):0:0 -> i
    1:1:void setRefreshing(boolean,boolean):0 -> i
    2:2:void setRefreshing(boolean,boolean):0:0 -> i
    void setTargetOffsetTopAndBottom(int) -> j
    android.view.animation.Animation startAlphaAnimation(int,int) -> k
    void startDragging(float) -> l
    void startScaleDownAnimation(android.view.animation.Animation$AnimationListener) -> m
    1:1:void startScaleUpAnimation(android.view.animation.Animation$AnimationListener):0:0 -> setRefreshing
    1:1:void setRefreshing(boolean):0 -> setRefreshing
    2:2:void setRefreshing(boolean):0:0 -> setRefreshing
androidx.swiperefreshlayout.widget.SwipeRefreshLayout$1 -> androidx.swiperefreshlayout.widget.e:
    androidx.swiperefreshlayout.widget.SwipeRefreshLayout this$0 -> a
androidx.swiperefreshlayout.widget.SwipeRefreshLayout$2 -> androidx.swiperefreshlayout.widget.f:
    androidx.swiperefreshlayout.widget.SwipeRefreshLayout this$0 -> a
    1:1:void androidx.swiperefreshlayout.widget.SwipeRefreshLayout.setAnimationProgress(float):0:0 -> applyTransformation
    1:1:void applyTransformation(float,android.view.animation.Transformation):0 -> applyTransformation
androidx.swiperefreshlayout.widget.SwipeRefreshLayout$3 -> androidx.swiperefreshlayout.widget.g:
    androidx.swiperefreshlayout.widget.SwipeRefreshLayout this$0 -> a
androidx.swiperefreshlayout.widget.SwipeRefreshLayout$4 -> androidx.swiperefreshlayout.widget.h:
    androidx.swiperefreshlayout.widget.SwipeRefreshLayout this$0 -> c
    int val$endingAlpha -> b
    int val$startingAlpha -> a
androidx.swiperefreshlayout.widget.SwipeRefreshLayout$5 -> androidx.swiperefreshlayout.widget.i:
    androidx.swiperefreshlayout.widget.SwipeRefreshLayout this$0 -> a
androidx.swiperefreshlayout.widget.SwipeRefreshLayout$6 -> androidx.swiperefreshlayout.widget.j:
    androidx.swiperefreshlayout.widget.SwipeRefreshLayout this$0 -> a
androidx.swiperefreshlayout.widget.SwipeRefreshLayout$7 -> androidx.swiperefreshlayout.widget.k:
    androidx.swiperefreshlayout.widget.SwipeRefreshLayout this$0 -> a
androidx.swiperefreshlayout.widget.SwipeRefreshLayout$8 -> androidx.swiperefreshlayout.widget.l:
    androidx.swiperefreshlayout.widget.SwipeRefreshLayout this$0 -> a
androidx.transition.AnimatorUtils -> androidx.transition.a:
    java.lang.reflect.Method androidx.transition.ViewGroupUtilsApi18.sSuppressLayoutMethod -> c
    boolean androidx.transition.ImageViewUtils.sAnimateTransformMethodFetched -> b
    java.lang.reflect.Method androidx.transition.ImageViewUtils.sAnimateTransformMethod -> a
    boolean androidx.transition.ViewGroupUtilsApi18.sSuppressLayoutMethodFetched -> d
    java.util.ArrayList androidx.transition.Transition$ArrayListManager.add(java.util.ArrayList,java.lang.Object) -> a
    1:1:void androidx.transition.ImageViewUtils.fetchAnimateTransformMethod():0:0 -> b
    1:1:void androidx.transition.ImageViewUtils.animateTransform(android.widget.ImageView,android.graphics.Matrix):0 -> b
    2:2:void androidx.transition.ImageViewUtils.animateTransform(android.widget.ImageView,android.graphics.Matrix):0:0 -> b
    1:1:void addPauseListener(android.animation.Animator,android.animation.AnimatorListenerAdapter):0:0 -> c
    1:1:android.animation.Animator androidx.transition.TranslationAnimationCreator.createAnimation(android.view.View,androidx.transition.TransitionValues,int,int,float,float,float,float,android.animation.TimeInterpolator):0 -> c
    2:2:android.animation.Animator androidx.transition.TranslationAnimationCreator.createAnimation(android.view.View,androidx.transition.TransitionValues,int,int,float,float,float,float,android.animation.TimeInterpolator):0:0 -> c
    android.animation.ObjectAnimator androidx.transition.ObjectAnimatorUtils.ofPointF(java.lang.Object,android.util.Property,android.graphics.Path) -> d
    java.util.ArrayList androidx.transition.Transition$ArrayListManager.remove(java.util.ArrayList,java.lang.Object) -> e
    1:1:void androidx.transition.ViewGroupUtilsApi18.fetchSuppressLayoutMethod():0:0 -> f
    1:1:void androidx.transition.ViewGroupUtilsApi18.suppressLayout(android.view.ViewGroup,boolean):0 -> f
    1:1:void androidx.transition.ViewGroupUtils.suppressLayout(android.view.ViewGroup,boolean):0 -> f
    2:2:void androidx.transition.ViewGroupUtilsApi18.suppressLayout(android.view.ViewGroup,boolean):0:0 -> f
    2:2:void androidx.transition.ViewGroupUtils.suppressLayout(android.view.ViewGroup,boolean):0 -> f
androidx.transition.ArcMotion -> androidx.transition.ArcMotion:
    float DEFAULT_MAX_TANGENT -> g
    float mMaximumTangent -> f
    float mMinimumVerticalTangent -> e
    float mMinimumHorizontalTangent -> d
    float mMaximumAngle -> c
    float mMinimumVerticalAngle -> b
    float mMinimumHorizontalAngle -> a
    float toTangent(float) -> a
androidx.transition.AutoTransition -> androidx.transition.AutoTransition:
    void init() -> o
androidx.transition.ChangeBounds -> androidx.transition.ChangeBounds:
    int[] mTempLocation -> I
    boolean mResizeClip -> J
    java.lang.String[] sTransitionProperties -> K
    android.util.Property TOP_LEFT_PROPERTY -> M
    android.util.Property BOTTOM_RIGHT_PROPERTY -> N
    android.util.Property DRAWABLE_ORIGIN_PROPERTY -> L
    android.util.Property POSITION_PROPERTY -> Q
    android.util.Property BOTTOM_RIGHT_ONLY_PROPERTY -> O
    android.util.Property TOP_LEFT_ONLY_PROPERTY -> P
    androidx.transition.RectEvaluator sRectEvaluator -> R
    void captureValues(androidx.transition.TransitionValues) -> o
androidx.transition.ChangeBounds$1 -> androidx.transition.b:
    android.graphics.Rect mBounds -> a
    1:1:android.graphics.PointF get(android.graphics.drawable.Drawable):0:0 -> get
    1:1:java.lang.Object get(java.lang.Object):0 -> get
    1:1:void set(android.graphics.drawable.Drawable,android.graphics.PointF):0:0 -> set
    1:1:void set(java.lang.Object,java.lang.Object):0 -> set
androidx.transition.ChangeBounds$2 -> androidx.transition.c:
    1:1:void set(androidx.transition.ChangeBounds$ViewBounds,android.graphics.PointF):0:0 -> set
    1:1:void set(java.lang.Object,java.lang.Object):0 -> set
androidx.transition.ChangeBounds$3 -> androidx.transition.d:
    1:1:void set(androidx.transition.ChangeBounds$ViewBounds,android.graphics.PointF):0:0 -> set
    1:1:void set(java.lang.Object,java.lang.Object):0 -> set
androidx.transition.ChangeBounds$4 -> androidx.transition.e:
    1:1:void set(android.view.View,android.graphics.PointF):0:0 -> set
    1:1:void set(java.lang.Object,java.lang.Object):0 -> set
androidx.transition.ChangeBounds$5 -> androidx.transition.f:
    1:1:void set(android.view.View,android.graphics.PointF):0:0 -> set
    1:1:void set(java.lang.Object,java.lang.Object):0 -> set
androidx.transition.ChangeBounds$6 -> androidx.transition.g:
    1:1:void set(android.view.View,android.graphics.PointF):0:0 -> set
    1:1:void set(java.lang.Object,java.lang.Object):0 -> set
androidx.transition.ChangeBounds$7 -> androidx.transition.h:
    androidx.transition.ChangeBounds$ViewBounds val$viewBounds -> a
androidx.transition.ChangeBounds$8 -> androidx.transition.i:
    int val$endRight -> f
    int val$endBottom -> g
    int val$endLeft -> d
    android.view.View val$view -> b
    int val$endTop -> e
    boolean mIsCanceled -> a
    android.graphics.Rect val$finalClip -> c
androidx.transition.ChangeBounds$9 -> androidx.transition.j:
    android.view.ViewGroup val$parent -> b
    boolean mCanceled -> a
androidx.transition.ChangeBounds$ViewBounds -> androidx.transition.k:
    int mTopLeftCalls -> f
    int mBottomRightCalls -> g
    int mBottom -> d
    int mTop -> b
    android.view.View mView -> e
    int mRight -> c
    int mLeft -> a
    1:1:void setLeftTopRightBottom():0:0 -> a
    1:1:void setBottomRight(android.graphics.PointF):0 -> a
    1:1:void setLeftTopRightBottom():0:0 -> b
    1:1:void setTopLeft(android.graphics.PointF):0 -> b
androidx.transition.ChangeClipBounds -> androidx.transition.ChangeClipBounds:
    java.lang.String[] sTransitionProperties -> I
    void captureValues(androidx.transition.TransitionValues) -> o
androidx.transition.ChangeClipBounds$1 -> androidx.transition.l:
    android.view.View val$endView -> a
androidx.transition.ChangeImageTransform -> androidx.transition.ChangeImageTransform:
    java.lang.String[] sTransitionProperties -> I
    android.util.Property ANIMATED_TRANSFORM_PROPERTY -> K
    android.animation.TypeEvaluator NULL_MATRIX_EVALUATOR -> J
    1:1:android.animation.ObjectAnimator createMatrixAnimator(android.widget.ImageView,android.graphics.Matrix,android.graphics.Matrix):0:0 -> createAnimator
    1:1:android.animation.Animator createAnimator(android.view.ViewGroup,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0 -> createAnimator
    2:2:android.animation.ObjectAnimator createNullAnimator(android.widget.ImageView):0:0 -> createAnimator
    2:2:android.animation.Animator createAnimator(android.view.ViewGroup,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0 -> createAnimator
    1:1:android.graphics.Matrix copyImageMatrix(android.widget.ImageView):0:0 -> o
    1:1:void captureValues(androidx.transition.TransitionValues):0 -> o
    2:2:android.graphics.Matrix centerCropMatrix(android.widget.ImageView):0:0 -> o
    2:2:android.graphics.Matrix copyImageMatrix(android.widget.ImageView):0 -> o
    2:2:void captureValues(androidx.transition.TransitionValues):0 -> o
    3:3:android.graphics.Matrix fitXYMatrix(android.widget.ImageView):0:0 -> o
    3:3:android.graphics.Matrix copyImageMatrix(android.widget.ImageView):0 -> o
    3:3:void captureValues(androidx.transition.TransitionValues):0 -> o
    4:4:void captureValues(androidx.transition.TransitionValues):0:0 -> o
androidx.transition.ChangeImageTransform$1 -> androidx.transition.m:
androidx.transition.ChangeImageTransform$2 -> androidx.transition.n:
    1:1:void set(android.widget.ImageView,android.graphics.Matrix):0:0 -> set
    1:1:void set(java.lang.Object,java.lang.Object):0 -> set
androidx.transition.ChangeImageTransform$3 -> androidx.transition.o:
    int[] $SwitchMap$android$widget$ImageView$ScaleType -> a
androidx.transition.ChangeScroll -> androidx.transition.ChangeScroll:
    java.lang.String[] PROPERTIES -> I
    void captureValues(androidx.transition.TransitionValues) -> o
androidx.transition.ChangeTransform -> androidx.transition.ChangeTransform:
    java.lang.String[] sTransitionProperties -> L
    boolean SUPPORTS_VIEW_REMOVAL_SUPPRESSION -> O
    android.graphics.Matrix mTempMatrix -> K
    boolean mUseOverlay -> I
    boolean mReparent -> J
    android.util.Property NON_TRANSLATIONS_PROPERTY -> M
    android.util.Property TRANSLATIONS_PROPERTY -> N
    int $r8$clinit -> P
    1:1:boolean parentsMatch(android.view.ViewGroup,android.view.ViewGroup):0:0 -> createAnimator
    1:1:android.animation.Animator createAnimator(android.view.ViewGroup,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0 -> createAnimator
    2:2:android.animation.Animator createAnimator(android.view.ViewGroup,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0:0 -> createAnimator
    3:3:void setMatricesForParent(androidx.transition.TransitionValues,androidx.transition.TransitionValues):0:0 -> createAnimator
    3:3:android.animation.Animator createAnimator(android.view.ViewGroup,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0 -> createAnimator
    4:4:android.animation.ObjectAnimator createTransformAnimator(androidx.transition.TransitionValues,androidx.transition.TransitionValues,boolean):0:0 -> createAnimator
    4:4:android.animation.Animator createAnimator(android.view.ViewGroup,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0 -> createAnimator
    5:5:android.animation.PropertyValuesHolder androidx.transition.PropertyValuesHolderUtils.ofPointF(android.util.Property,android.graphics.Path):0:0 -> createAnimator
    5:5:android.animation.ObjectAnimator createTransformAnimator(androidx.transition.TransitionValues,androidx.transition.TransitionValues,boolean):0 -> createAnimator
    5:5:android.animation.Animator createAnimator(android.view.ViewGroup,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0 -> createAnimator
    6:6:android.animation.ObjectAnimator createTransformAnimator(androidx.transition.TransitionValues,androidx.transition.TransitionValues,boolean):0:0 -> createAnimator
    6:6:android.animation.Animator createAnimator(android.view.ViewGroup,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0 -> createAnimator
    7:7:void androidx.transition.AnimatorUtils.addPauseListener(android.animation.Animator,android.animation.AnimatorListenerAdapter):0:0 -> createAnimator
    7:7:android.animation.ObjectAnimator createTransformAnimator(androidx.transition.TransitionValues,androidx.transition.TransitionValues,boolean):0 -> createAnimator
    7:7:android.animation.Animator createAnimator(android.view.ViewGroup,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0 -> createAnimator
    8:8:android.animation.Animator createAnimator(android.view.ViewGroup,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0:0 -> createAnimator
    9:9:void createGhostView(android.view.ViewGroup,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0:0 -> createAnimator
    9:9:android.animation.Animator createAnimator(android.view.ViewGroup,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0 -> createAnimator
    10:10:androidx.transition.GhostViewImpl androidx.transition.GhostViewUtils.addGhost(android.view.View,android.view.ViewGroup,android.graphics.Matrix):0:0 -> createAnimator
    10:10:void createGhostView(android.view.ViewGroup,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0 -> createAnimator
    10:10:android.animation.Animator createAnimator(android.view.ViewGroup,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0 -> createAnimator
    11:11:void createGhostView(android.view.ViewGroup,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0:0 -> createAnimator
    11:11:android.animation.Animator createAnimator(android.view.ViewGroup,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0 -> createAnimator
    12:12:android.animation.Animator createAnimator(android.view.ViewGroup,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0:0 -> createAnimator
    void captureValues(androidx.transition.TransitionValues) -> o
    1:1:void setTransforms(android.view.View,float,float,float,float,float,float,float,float):0:0 -> p
    1:1:void setIdentityTransforms(android.view.View):0 -> p
androidx.transition.ChangeTransform$1 -> androidx.transition.p:
    1:1:void set(androidx.transition.ChangeTransform$PathAnimatorMatrix,float[]):0:0 -> set
    1:1:void set(java.lang.Object,java.lang.Object):0 -> set
androidx.transition.ChangeTransform$2 -> androidx.transition.q:
    1:1:void set(androidx.transition.ChangeTransform$PathAnimatorMatrix,android.graphics.PointF):0:0 -> set
    1:1:void set(java.lang.Object,java.lang.Object):0 -> set
androidx.transition.ChangeTransform$3 -> androidx.transition.s:
    androidx.transition.ChangeTransform$Transforms val$transforms -> f
    android.graphics.Matrix val$finalEndMatrix -> d
    androidx.transition.ChangeTransform this$0 -> h
    android.graphics.Matrix mTempMatrix -> b
    boolean mIsCanceled -> a
    android.view.View val$view -> e
    androidx.transition.ChangeTransform$PathAnimatorMatrix val$pathAnimatorMatrix -> g
    boolean val$handleParentChange -> c
    1:1:void setCurrentMatrix(android.graphics.Matrix):0:0 -> onAnimationEnd
    1:1:void onAnimationEnd(android.animation.Animator):0 -> onAnimationEnd
    2:2:void onAnimationEnd(android.animation.Animator):0:0 -> onAnimationEnd
    1:1:void setCurrentMatrix(android.graphics.Matrix):0:0 -> onAnimationPause
    1:1:void onAnimationPause(android.animation.Animator):0 -> onAnimationPause
androidx.transition.ChangeTransform$GhostListener -> androidx.transition.t:
    androidx.transition.GhostViewImpl mGhostView -> b
    android.view.View mView -> a
    1:1:void androidx.transition.GhostViewUtils.removeGhost(android.view.View):0:0 -> onTransitionEnd
    1:1:void onTransitionEnd(androidx.transition.Transition):0 -> onTransitionEnd
    2:2:void onTransitionEnd(androidx.transition.Transition):0:0 -> onTransitionEnd
androidx.transition.ChangeTransform$PathAnimatorMatrix -> androidx.transition.u:
    float mTranslationY -> e
    float mTranslationX -> d
    float[] mValues -> c
    android.view.View mView -> b
    android.graphics.Matrix mMatrix -> a
    android.graphics.Matrix getMatrix() -> a
    void setAnimationMatrix() -> b
    void setTranslation(android.graphics.PointF) -> c
    void setValues(float[]) -> d
androidx.transition.ChangeTransform$Transforms -> androidx.transition.v:
    float mRotationZ -> h
    float mRotationY -> g
    float mRotationX -> f
    float mScaleY -> e
    float mScaleX -> d
    float mTranslationZ -> c
    float mTranslationY -> b
    float mTranslationX -> a
    1:1:void androidx.transition.ChangeTransform.setTransforms(android.view.View,float,float,float,float,float,float,float,float):0:0 -> restore
    1:1:void restore(android.view.View):0 -> restore
androidx.transition.CircularPropagation -> androidx.transition.CircularPropagation:
    float mPropagationSpeed -> b
    1:1:float distance(float,float,float,float):0:0 -> getStartDelay
    1:1:long getStartDelay(android.view.ViewGroup,androidx.transition.Transition,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0 -> getStartDelay
    2:2:long getStartDelay(android.view.ViewGroup,androidx.transition.Transition,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0:0 -> getStartDelay
    3:3:float distance(float,float,float,float):0:0 -> getStartDelay
    3:3:long getStartDelay(android.view.ViewGroup,androidx.transition.Transition,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0 -> getStartDelay
    4:4:long getStartDelay(android.view.ViewGroup,androidx.transition.Transition,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0:0 -> getStartDelay
androidx.transition.Explode -> androidx.transition.Explode:
    int[] mTempLoc -> K
    android.animation.TimeInterpolator sDecelerate -> L
    android.animation.TimeInterpolator sAccelerate -> M
    void captureValues(androidx.transition.TransitionValues) -> o
    1:1:float calculateDistance(float,float):0:0 -> q
    1:1:void calculateOut(android.view.View,android.graphics.Rect,int[]):0 -> q
    2:2:float calculateMaxDistance(android.view.View,int,int):0:0 -> q
    2:2:void calculateOut(android.view.View,android.graphics.Rect,int[]):0 -> q
    3:3:float calculateDistance(float,float):0:0 -> q
    3:3:float calculateMaxDistance(android.view.View,int,int):0 -> q
    3:3:void calculateOut(android.view.View,android.graphics.Rect,int[]):0 -> q
    4:4:void calculateOut(android.view.View,android.graphics.Rect,int[]):0:0 -> q
androidx.transition.Fade -> androidx.transition.Fade:
    1:1:float getStartAlpha(androidx.transition.TransitionValues,float):0:0 -> onAppear
    1:1:android.animation.Animator onAppear(android.view.ViewGroup,android.view.View,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0 -> onAppear
    2:2:android.animation.Animator onAppear(android.view.ViewGroup,android.view.View,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0:0 -> onAppear
    1:1:void androidx.transition.ViewUtils.saveNonTransitionAlpha(android.view.View):0:0 -> onDisappear
    1:1:android.animation.Animator onDisappear(android.view.ViewGroup,android.view.View,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0 -> onDisappear
    2:2:float getStartAlpha(androidx.transition.TransitionValues,float):0:0 -> onDisappear
    2:2:android.animation.Animator onDisappear(android.view.ViewGroup,android.view.View,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0 -> onDisappear
    3:3:android.animation.Animator onDisappear(android.view.ViewGroup,android.view.View,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0:0 -> onDisappear
    android.animation.Animator createAnimation(android.view.View,float,float) -> q
androidx.transition.Fade$1 -> androidx.transition.w:
    android.view.View val$view -> a
androidx.transition.Fade$FadeAnimatorListener -> androidx.transition.x:
    android.view.View mView -> a
    boolean mLayerTypeChanged -> b
androidx.transition.FloatArrayEvaluator -> androidx.transition.y:
    float[] mArray -> a
    1:1:float[] evaluate(float,float[],float[]):0:0 -> evaluate
    1:1:java.lang.Object evaluate(float,java.lang.Object,java.lang.Object):0 -> evaluate
androidx.transition.FragmentTransitionSupport -> androidx.transition.FragmentTransitionSupport:
    boolean hasSimpleTarget(androidx.transition.Transition) -> d
androidx.transition.FragmentTransitionSupport$1 -> androidx.transition.z:
    android.graphics.Rect val$epicenter -> a
androidx.transition.FragmentTransitionSupport$2 -> androidx.transition.a0:
    android.view.View val$fragmentView -> a
    java.util.ArrayList val$exitingViews -> b
androidx.transition.FragmentTransitionSupport$3 -> androidx.transition.b0:
    androidx.transition.FragmentTransitionSupport this$0 -> g
    java.lang.Object val$sharedElementTransition -> e
    java.lang.Object val$exitTransition -> c
    java.util.ArrayList val$sharedElementsIn -> f
    java.lang.Object val$enterTransition -> a
    java.util.ArrayList val$exitingViews -> d
    java.util.ArrayList val$enteringViews -> b
androidx.transition.FragmentTransitionSupport$4 -> androidx.transition.c0:
    android.graphics.Rect val$epicenter -> a
androidx.transition.GhostViewApi21 -> androidx.transition.d0:
    boolean sAddGhostMethodFetched -> e
    android.view.View mGhostView -> a
    java.lang.reflect.Method sAddGhostMethod -> d
    boolean sRemoveGhostMethodFetched -> g
    java.lang.reflect.Method sRemoveGhostMethod -> f
    java.lang.Class sGhostViewClass -> b
    boolean sGhostViewClassFetched -> c
    1:1:void fetchAddGhostMethod():0:0 -> a
    1:1:androidx.transition.GhostViewImpl addGhost(android.view.View,android.view.ViewGroup,android.graphics.Matrix):0 -> a
    2:2:androidx.transition.GhostViewImpl addGhost(android.view.View,android.view.ViewGroup,android.graphics.Matrix):0:0 -> a
    void fetchGhostViewClass() -> b
    1:1:void fetchRemoveGhostMethod():0:0 -> c
    1:1:void removeGhost(android.view.View):0 -> c
    2:2:void removeGhost(android.view.View):0:0 -> c
androidx.transition.GhostViewImpl -> androidx.transition.e0:
androidx.transition.MatrixUtils -> androidx.transition.g0:
    android.graphics.Matrix IDENTITY_MATRIX -> a
androidx.transition.MatrixUtils$1 -> androidx.transition.f0:
    void oops() -> a
androidx.transition.PatternPathMotion -> androidx.transition.PatternPathMotion:
    android.graphics.Path mOriginalPatternPath -> a
    android.graphics.Matrix mTempMatrix -> c
    android.graphics.Path mPatternPath -> b
    1:1:float distance(float,float):0:0 -> getPath
    1:1:android.graphics.Path getPath(float,float,float,float):0 -> getPath
    2:2:android.graphics.Path getPath(float,float,float,float):0:0 -> getPath
    1:1:float distance(float,float):0:0 -> setPatternPath
    1:1:void setPatternPath(android.graphics.Path):0 -> setPatternPath
    2:2:void setPatternPath(android.graphics.Path):0:0 -> setPatternPath
androidx.transition.RectEvaluator -> androidx.transition.h0:
    android.graphics.Rect mRect -> a
    1:1:android.graphics.Rect evaluate(float,android.graphics.Rect,android.graphics.Rect):0:0 -> evaluate
    1:1:java.lang.Object evaluate(float,java.lang.Object,java.lang.Object):0 -> evaluate
androidx.transition.Scene -> androidx.transition.Scene:
    android.content.Context mContext -> a
    java.lang.Runnable mEnterAction -> e
    android.view.ViewGroup mSceneRoot -> c
    java.lang.Runnable mExitAction -> f
    int mLayoutId -> b
    android.view.View mLayout -> d
    androidx.transition.Scene getCurrentScene(android.view.View) -> a
    boolean isCreatedFromLayoutResource() -> b
    1:1:void setCurrentScene(android.view.View,androidx.transition.Scene):0:0 -> enter
    1:1:void enter():0 -> enter
androidx.transition.SidePropagation -> androidx.transition.SidePropagation:
    float mPropagationSpeed -> b
    int mSide -> c
    1:1:int distance(android.view.View,int,int,int,int,int,int,int,int):0:0 -> getStartDelay
    1:1:long getStartDelay(android.view.ViewGroup,androidx.transition.Transition,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0 -> getStartDelay
    2:2:int getMaxDistance(android.view.ViewGroup):0:0 -> getStartDelay
    2:2:long getStartDelay(android.view.ViewGroup,androidx.transition.Transition,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0 -> getStartDelay
    3:3:long getStartDelay(android.view.ViewGroup,androidx.transition.Transition,androidx.transition.TransitionValues,androidx.transition.TransitionValues):0:0 -> getStartDelay
androidx.transition.Slide -> androidx.transition.Slide:
    android.animation.TimeInterpolator sAccelerate -> N
    androidx.transition.Slide$CalculateSlide sCalculateEnd -> S
    int mSlideEdge -> L
    androidx.transition.Slide$CalculateSlide sCalculateBottom -> T
    androidx.transition.Slide$CalculateSlide mSlideCalculator -> K
    androidx.transition.Slide$CalculateSlide sCalculateTop -> Q
    androidx.transition.Slide$CalculateSlide sCalculateRight -> R
    androidx.transition.Slide$CalculateSlide sCalculateLeft -> O
    android.animation.TimeInterpolator sDecelerate -> M
    androidx.transition.Slide$CalculateSlide sCalculateStart -> P
    1:1:void captureValues(androidx.transition.TransitionValues):0:0 -> captureEndValues
    1:1:void captureEndValues(androidx.transition.TransitionValues):0 -> captureEndValues
    1:1:void captureValues(androidx.transition.TransitionValues):0:0 -> captureStartValues
    1:1:void captureStartValues(androidx.transition.TransitionValues):0 -> captureStartValues
androidx.transition.Slide$1 -> androidx.transition.i0:
androidx.transition.Slide$2 -> androidx.transition.j0:
androidx.transition.Slide$3 -> androidx.transition.k0:
androidx.transition.Slide$4 -> androidx.transition.l0:
androidx.transition.Slide$5 -> androidx.transition.m0:
androidx.transition.Slide$6 -> androidx.transition.n0:
androidx.transition.Slide$CalculateSlide -> androidx.transition.o0:
androidx.transition.Slide$CalculateSlideHorizontal -> androidx.transition.p0:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(androidx.transition.Slide$1):0 -> <init>
androidx.transition.Slide$CalculateSlideVertical -> androidx.transition.q0:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(androidx.transition.Slide$1):0 -> <init>
androidx.transition.Styleable -> androidx.transition.r0:
    int[] FADE -> f
    int[] CHANGE_TRANSFORM -> g
    int[] SLIDE -> h
    int[] TRANSITION_SET -> i
    int[] TRANSITION_MANAGER -> b
    int[] TRANSITION -> c
    int[] CHANGE_BOUNDS -> d
    int[] VISIBILITY_TRANSITION -> e
    int[] TRANSITION_TARGET -> a
    int[] ARC_MOTION -> j
    int[] PATTERN_PATH_MOTION -> k
androidx.transition.Transition -> androidx.transition.Transition:
    androidx.transition.TransitionValuesMaps mStartValues -> p
    int[] mMatchOrder -> s
    java.util.ArrayList mTargetNames -> g
    java.util.ArrayList mTargetIds -> e
    long mDuration -> c
    java.util.ArrayList mAnimators -> B
    androidx.transition.TransitionPropagation mPropagation -> C
    androidx.transition.TransitionSet mParent -> r
    java.util.ArrayList mTargetTypeChildExcludes -> o
    androidx.transition.Transition$EpicenterCallback mEpicenterCallback -> D
    androidx.transition.PathMotion mPathMotion -> E
    java.util.ArrayList mTargetIdChildExcludes -> m
    androidx.transition.PathMotion STRAIGHT_PATH_MOTION -> G
    java.util.ArrayList mTargetTypeExcludes -> k
    boolean mPaused -> y
    java.util.ArrayList mTargetIdExcludes -> i
    java.util.ArrayList mCurrentAnimators -> w
    java.lang.String mName -> a
    java.util.ArrayList mEndValuesList -> u
    android.animation.TimeInterpolator mInterpolator -> d
    androidx.transition.TransitionValuesMaps mEndValues -> q
    long mStartDelay -> b
    java.util.ArrayList mTargets -> f
    boolean mCanRemoveViews -> v
    java.lang.ThreadLocal sRunningAnimators -> H
    java.util.ArrayList mListeners -> A
    int[] DEFAULT_MATCH_ORDER -> F
    java.util.ArrayList mTargetChildExcludes -> n
    java.util.ArrayList mTargetNameExcludes -> l
    java.util.ArrayList mTargetExcludes -> j
    boolean mEnded -> z
    int mNumInstances -> x
    java.util.ArrayList mTargetTypes -> h
    java.util.ArrayList mStartValuesList -> t
    1:1:int[] parseMatchOrder(java.lang.String):0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet):0 -> <init>
    2:2:void <init>(android.content.Context,android.util.AttributeSet):0:0 -> <init>
    void addViewValues(androidx.transition.TransitionValuesMaps,android.view.View,androidx.transition.TransitionValues) -> a
    void captureHierarchy(android.view.View,boolean) -> b
    void capturePropagationValues(androidx.transition.TransitionValues) -> c
    1:1:androidx.transition.WindowIdImpl androidx.transition.ViewUtils.getWindowId(android.view.View):0:0 -> createAnimators
    1:1:void createAnimators(android.view.ViewGroup,androidx.transition.TransitionValuesMaps,androidx.transition.TransitionValuesMaps,java.util.ArrayList,java.util.ArrayList):0 -> createAnimators
    2:2:void createAnimators(android.view.ViewGroup,androidx.transition.TransitionValuesMaps,androidx.transition.TransitionValuesMaps,java.util.ArrayList,java.util.ArrayList):0:0 -> createAnimators
    void captureValues(android.view.ViewGroup,boolean) -> d
    void clearValues(boolean) -> e
    1:1:java.util.ArrayList excludeId(java.util.ArrayList,int,boolean):0:0 -> excludeChildren
    1:1:androidx.transition.Transition excludeChildren(int,boolean):0 -> excludeChildren
    2:2:androidx.transition.Transition excludeChildren(int,boolean):0:0 -> excludeChildren
    3:3:java.util.ArrayList excludeView(java.util.ArrayList,android.view.View,boolean):0:0 -> excludeChildren
    3:3:androidx.transition.Transition excludeChildren(android.view.View,boolean):0 -> excludeChildren
    4:4:androidx.transition.Transition excludeChildren(android.view.View,boolean):0:0 -> excludeChildren
    5:5:java.util.ArrayList excludeType(java.util.ArrayList,java.lang.Class,boolean):0:0 -> excludeChildren
    5:5:androidx.transition.Transition excludeChildren(java.lang.Class,boolean):0 -> excludeChildren
    6:6:androidx.transition.Transition excludeChildren(java.lang.Class,boolean):0:0 -> excludeChildren
    1:1:java.util.ArrayList excludeId(java.util.ArrayList,int,boolean):0:0 -> excludeTarget
    1:1:androidx.transition.Transition excludeTarget(int,boolean):0 -> excludeTarget
    2:2:androidx.transition.Transition excludeTarget(int,boolean):0:0 -> excludeTarget
    3:3:java.util.ArrayList excludeView(java.util.ArrayList,android.view.View,boolean):0:0 -> excludeTarget
    3:3:androidx.transition.Transition excludeTarget(android.view.View,boolean):0 -> excludeTarget
    4:4:androidx.transition.Transition excludeTarget(android.view.View,boolean):0:0 -> excludeTarget
    5:5:java.util.ArrayList excludeType(java.util.ArrayList,java.lang.Class,boolean):0:0 -> excludeTarget
    5:5:androidx.transition.Transition excludeTarget(java.lang.Class,boolean):0 -> excludeTarget
    6:6:androidx.transition.Transition excludeTarget(java.lang.Class,boolean):0:0 -> excludeTarget
    7:7:java.util.ArrayList excludeObject(java.util.ArrayList,java.lang.Object,boolean):0:0 -> excludeTarget
    7:7:androidx.transition.Transition excludeTarget(java.lang.String,boolean):0 -> excludeTarget
    8:8:androidx.transition.Transition excludeTarget(java.lang.String,boolean):0:0 -> excludeTarget
    1:1:androidx.transition.WindowIdImpl androidx.transition.ViewUtils.getWindowId(android.view.View):0:0 -> f
    1:1:void forceToEnd(android.view.ViewGroup):0 -> f
    2:2:void forceToEnd(android.view.ViewGroup):0:0 -> f
    androidx.transition.TransitionValues getMatchedTransitionValues(android.view.View,boolean) -> g
    androidx.collection.ArrayMap getRunningAnimators() -> h
    boolean isValidTarget(android.view.View) -> i
    boolean isValueChanged(androidx.transition.TransitionValues,androidx.transition.TransitionValues,java.lang.String) -> j
    1:1:void matchStartAndEnd(androidx.transition.TransitionValuesMaps,androidx.transition.TransitionValuesMaps):0:0 -> k
    1:1:void playTransition(android.view.ViewGroup):0 -> k
    2:2:void matchItemIds(androidx.collection.ArrayMap,androidx.collection.ArrayMap,androidx.collection.LongSparseArray,androidx.collection.LongSparseArray):0:0 -> k
    2:2:void matchStartAndEnd(androidx.transition.TransitionValuesMaps,androidx.transition.TransitionValuesMaps):0 -> k
    2:2:void playTransition(android.view.ViewGroup):0 -> k
    3:3:void matchStartAndEnd(androidx.transition.TransitionValuesMaps,androidx.transition.TransitionValuesMaps):0:0 -> k
    3:3:void playTransition(android.view.ViewGroup):0 -> k
    4:4:void matchIds(androidx.collection.ArrayMap,androidx.collection.ArrayMap,android.util.SparseArray,android.util.SparseArray):0:0 -> k
    4:4:void matchStartAndEnd(androidx.transition.TransitionValuesMaps,androidx.transition.TransitionValuesMaps):0 -> k
    4:4:void playTransition(android.view.ViewGroup):0 -> k
    5:5:void matchStartAndEnd(androidx.transition.TransitionValuesMaps,androidx.transition.TransitionValuesMaps):0:0 -> k
    5:5:void playTransition(android.view.ViewGroup):0 -> k
    6:6:void matchNames(androidx.collection.ArrayMap,androidx.collection.ArrayMap,androidx.collection.ArrayMap,androidx.collection.ArrayMap):0:0 -> k
    6:6:void matchStartAndEnd(androidx.transition.TransitionValuesMaps,androidx.transition.TransitionValuesMaps):0 -> k
    6:6:void playTransition(android.view.ViewGroup):0 -> k
    7:7:void matchInstances(androidx.collection.ArrayMap,androidx.collection.ArrayMap):0:0 -> k
    7:7:void matchStartAndEnd(androidx.transition.TransitionValuesMaps,androidx.transition.TransitionValuesMaps):0 -> k
    7:7:void playTransition(android.view.ViewGroup):0 -> k
    8:8:void addUnmatched(androidx.collection.ArrayMap,androidx.collection.ArrayMap):0:0 -> k
    8:8:void matchStartAndEnd(androidx.transition.TransitionValuesMaps,androidx.transition.TransitionValuesMaps):0 -> k
    8:8:void playTransition(android.view.ViewGroup):0 -> k
    9:9:void playTransition(android.view.ViewGroup):0:0 -> k
    10:10:androidx.transition.WindowIdImpl androidx.transition.ViewUtils.getWindowId(android.view.View):0:0 -> k
    10:10:void playTransition(android.view.ViewGroup):0 -> k
    11:11:void playTransition(android.view.ViewGroup):0:0 -> k
    void setCanRemoveViews(boolean) -> l
    androidx.transition.Transition setSceneRoot(android.view.ViewGroup) -> m
    java.lang.String toString(java.lang.String) -> n
    1:1:androidx.transition.WindowIdImpl androidx.transition.ViewUtils.getWindowId(android.view.View):0:0 -> pause
    1:1:void pause(android.view.View):0 -> pause
    2:2:void pause(android.view.View):0:0 -> pause
    3:3:void androidx.transition.AnimatorUtils.pause(android.animation.Animator):0:0 -> pause
    3:3:void pause(android.view.View):0 -> pause
    4:4:void pause(android.view.View):0:0 -> pause
    1:1:androidx.transition.WindowIdImpl androidx.transition.ViewUtils.getWindowId(android.view.View):0:0 -> resume
    1:1:void resume(android.view.View):0 -> resume
    2:2:void resume(android.view.View):0:0 -> resume
    3:3:void androidx.transition.AnimatorUtils.resume(android.animation.Animator):0:0 -> resume
    3:3:void resume(android.view.View):0 -> resume
    4:4:void resume(android.view.View):0:0 -> resume
    1:1:void runAnimator(android.animation.Animator,androidx.collection.ArrayMap):0:0 -> runAnimators
    1:1:void runAnimators():0 -> runAnimators
    2:2:void runAnimators():0:0 -> runAnimators
    1:1:boolean alreadyContains(int[],int):0:0 -> setMatchOrder
    1:1:void setMatchOrder(int[]):0 -> setMatchOrder
    2:2:void setMatchOrder(int[]):0:0 -> setMatchOrder
androidx.transition.Transition$1 -> androidx.transition.s0:
androidx.transition.Transition$2 -> androidx.transition.t0:
    androidx.transition.Transition this$0 -> b
    androidx.collection.ArrayMap val$runningAnimators -> a
androidx.transition.Transition$3 -> androidx.transition.u0:
    androidx.transition.Transition this$0 -> a
androidx.transition.Transition$AnimationInfo -> androidx.transition.v0:
    androidx.transition.WindowIdImpl mWindowId -> d
    android.view.View mView -> a
    androidx.transition.Transition mTransition -> e
    androidx.transition.TransitionValues mValues -> c
    java.lang.String mName -> b
androidx.transition.TransitionInflater -> androidx.transition.TransitionInflater:
    android.content.Context mContext -> a
    java.lang.Class[] CONSTRUCTOR_SIGNATURE -> b
    androidx.collection.ArrayMap CONSTRUCTORS -> c
    java.lang.Object createCustom(android.util.AttributeSet,java.lang.Class,java.lang.String) -> a
    1:1:void getTargetIds(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,androidx.transition.Transition):0:0 -> b
    1:1:androidx.transition.Transition createTransitionFromXml(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,androidx.transition.Transition):0 -> b
    2:2:androidx.transition.Transition createTransitionFromXml(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,androidx.transition.Transition):0:0 -> b
    1:1:void loadTransition(android.util.AttributeSet,org.xmlpull.v1.XmlPullParser,android.view.ViewGroup,androidx.transition.TransitionManager):0:0 -> c
    1:1:androidx.transition.TransitionManager createTransitionManagerFromXml(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.view.ViewGroup):0 -> c
    2:2:androidx.transition.TransitionManager createTransitionManagerFromXml(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.view.ViewGroup):0:0 -> c
androidx.transition.TransitionManager -> androidx.transition.TransitionManager:
    java.lang.ThreadLocal sRunningTransitions -> d
    androidx.transition.Transition sDefaultTransition -> c
    java.util.ArrayList sPendingTransitions -> e
    androidx.collection.ArrayMap mSceneTransitions -> a
    androidx.collection.ArrayMap mScenePairTransitions -> b
    1:1:void sceneChangeRunTransition(android.view.ViewGroup,androidx.transition.Transition):0:0 -> a
    1:1:void changeScene(androidx.transition.Scene,androidx.transition.Transition):0 -> a
    androidx.collection.ArrayMap getRunningTransitions() -> b
    1:1:void androidx.transition.Scene.setCurrentScene(android.view.View,androidx.transition.Scene):0:0 -> beginDelayedTransition
    1:1:void beginDelayedTransition(android.view.ViewGroup,androidx.transition.Transition):0 -> beginDelayedTransition
    2:2:void sceneChangeRunTransition(android.view.ViewGroup,androidx.transition.Transition):0:0 -> beginDelayedTransition
    2:2:void beginDelayedTransition(android.view.ViewGroup,androidx.transition.Transition):0 -> beginDelayedTransition
    1:1:androidx.transition.Scene androidx.transition.Scene.getCurrentScene(android.view.View):0:0 -> c
    1:1:void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition):0 -> c
    2:2:void sceneChangeSetup(android.view.ViewGroup,androidx.transition.Transition):0:0 -> c
    1:1:androidx.transition.Transition getTransition(androidx.transition.Scene):0:0 -> transitionTo
    1:1:void transitionTo(androidx.transition.Scene):0 -> transitionTo
    2:2:androidx.transition.Scene androidx.transition.Scene.getCurrentScene(android.view.View):0:0 -> transitionTo
    2:2:androidx.transition.Transition getTransition(androidx.transition.Scene):0 -> transitionTo
    2:2:void transitionTo(androidx.transition.Scene):0 -> transitionTo
    3:3:androidx.transition.Transition getTransition(androidx.transition.Scene):0:0 -> transitionTo
    3:3:void transitionTo(androidx.transition.Scene):0 -> transitionTo
    4:4:void transitionTo(androidx.transition.Scene):0:0 -> transitionTo
androidx.transition.TransitionManager$MultiListener -> androidx.transition.x0:
    android.view.ViewGroup mSceneRoot -> b
    androidx.transition.Transition mTransition -> a
    1:1:void removeListeners():0:0 -> onPreDraw
    1:1:boolean onPreDraw():0 -> onPreDraw
    2:2:boolean onPreDraw():0:0 -> onPreDraw
    1:1:void removeListeners():0:0 -> onViewDetachedFromWindow
    1:1:void onViewDetachedFromWindow(android.view.View):0 -> onViewDetachedFromWindow
    2:2:void onViewDetachedFromWindow(android.view.View):0:0 -> onViewDetachedFromWindow
androidx.transition.TransitionManager$MultiListener$1 -> androidx.transition.w0:
    androidx.collection.ArrayMap val$runningTransitions -> a
    androidx.transition.TransitionManager$MultiListener this$0 -> b
androidx.transition.TransitionSet -> androidx.transition.TransitionSet:
    int mChangeFlags -> M
    boolean mPlayTogether -> J
    int mCurrentListeners -> K
    java.util.ArrayList mTransitions -> I
    boolean mStarted -> L
    void capturePropagationValues(androidx.transition.TransitionValues) -> c
    void forceToEnd(android.view.ViewGroup) -> f
    1:1:void androidx.transition.Transition.setCanRemoveViews(boolean):0:0 -> l
    1:1:void setCanRemoveViews(boolean):0 -> l
    2:2:void setCanRemoveViews(boolean):0:0 -> l
    1:1:androidx.transition.TransitionSet setSceneRoot(android.view.ViewGroup):0:0 -> m
    1:1:androidx.transition.Transition setSceneRoot(android.view.ViewGroup):0 -> m
    java.lang.String toString(java.lang.String) -> n
    1:1:void setupStartEndListeners():0:0 -> runAnimators
    1:1:void runAnimators():0 -> runAnimators
    2:2:void runAnimators():0:0 -> runAnimators
androidx.transition.TransitionSet$1 -> androidx.transition.y0:
    androidx.transition.Transition val$nextTransition -> a
androidx.transition.TransitionSet$TransitionSetListener -> androidx.transition.z0:
    androidx.transition.TransitionSet mTransitionSet -> a
androidx.transition.TransitionUtils -> androidx.transition.b1:
    boolean HAS_IS_ATTACHED_TO_WINDOW -> a
    boolean HAS_OVERLAY -> b
    boolean HAS_PICTURE_BITMAP -> c
    1:1:android.graphics.Bitmap createViewBitmap(android.view.View,android.graphics.Matrix,android.graphics.RectF,android.view.ViewGroup):0:0 -> a
    1:1:android.view.View copyViewImage(android.view.ViewGroup,android.view.View,android.view.View):0 -> a
    2:2:android.view.View copyViewImage(android.view.ViewGroup,android.view.View,android.view.View):0:0 -> a
    android.animation.Animator mergeAnimators(android.animation.Animator,android.animation.Animator) -> b
androidx.transition.TransitionUtils$MatrixEvaluator -> androidx.transition.a1:
    android.graphics.Matrix mTempMatrix -> c
    float[] mTempStartValues -> a
    float[] mTempEndValues -> b
    1:1:android.graphics.Matrix evaluate(float,android.graphics.Matrix,android.graphics.Matrix):0:0 -> evaluate
    1:1:java.lang.Object evaluate(float,java.lang.Object,java.lang.Object):0 -> evaluate
androidx.transition.TransitionValues -> androidx.transition.TransitionValues:
    java.util.ArrayList mTargetedTransitions -> a
androidx.transition.TransitionValuesMaps -> androidx.transition.c1:
    android.util.SparseArray mIdValues -> b
    androidx.collection.ArrayMap mNameValues -> d
    androidx.collection.ArrayMap mViewValues -> a
    androidx.collection.LongSparseArray mItemIdValues -> c
androidx.transition.TranslationAnimationCreator$TransitionPositionListener -> androidx.transition.d1:
    float mTerminalY -> i
    float mTerminalX -> h
    float mPausedY -> g
    float mPausedX -> f
    int[] mTransitionPosition -> e
    android.view.View mViewInHierarchy -> a
    int mStartY -> d
    android.view.View mMovingView -> b
    int mStartX -> c
androidx.transition.ViewGroupOverlayApi18 -> androidx.transition.e1:
    android.view.ViewGroupOverlay mViewGroupOverlay -> a
androidx.transition.ViewGroupOverlayImpl -> androidx.transition.f1:
androidx.transition.ViewUtils -> androidx.transition.i1:
    android.util.Property CLIP_BOUNDS -> e
    android.util.Property TRANSITION_ALPHA -> d
    androidx.transition.ViewUtilsBase IMPL -> a
    java.lang.reflect.Field sViewFlagsField -> b
    boolean sViewFlagsFieldFetched -> c
    float getTransitionAlpha(android.view.View) -> a
    void setAnimationMatrix(android.view.View,android.graphics.Matrix) -> b
    void setLeftTopRightBottom(android.view.View,int,int,int,int) -> c
    void setTransitionAlpha(android.view.View,float) -> d
    1:1:void fetchViewFlagsField():0:0 -> e
    1:1:void setTransitionVisibility(android.view.View,int):0 -> e
    2:2:void setTransitionVisibility(android.view.View,int):0:0 -> e
    void transformMatrixToGlobal(android.view.View,android.graphics.Matrix) -> f
    void transformMatrixToLocal(android.view.View,android.graphics.Matrix) -> g
androidx.transition.ViewUtils$1 -> androidx.transition.g1:
    1:1:java.lang.Float get(android.view.View):0:0 -> get
    1:1:java.lang.Object get(java.lang.Object):0 -> get
    1:1:void set(android.view.View,java.lang.Float):0:0 -> set
    1:1:void set(java.lang.Object,java.lang.Object):0 -> set
androidx.transition.ViewUtils$2 -> androidx.transition.h1:
    1:1:android.graphics.Rect get(android.view.View):0:0 -> get
    1:1:java.lang.Object get(java.lang.Object):0 -> get
    1:1:void set(android.view.View,android.graphics.Rect):0:0 -> set
    1:1:void set(java.lang.Object,java.lang.Object):0 -> set
androidx.transition.ViewUtilsApi19 -> androidx.transition.j1:
    java.lang.reflect.Method sGetTransitionAlphaMethod -> c
    boolean sSetTransitionAlphaMethodFetched -> b
    java.lang.reflect.Method sSetTransitionAlphaMethod -> a
    boolean sGetTransitionAlphaMethodFetched -> d
    1:1:void fetchGetTransitionAlphaMethod():0:0 -> getTransitionAlpha
    1:1:float getTransitionAlpha(android.view.View):0 -> getTransitionAlpha
    2:2:float getTransitionAlpha(android.view.View):0:0 -> getTransitionAlpha
    1:1:void fetchSetTransitionAlphaMethod():0:0 -> setTransitionAlpha
    1:1:void setTransitionAlpha(android.view.View,float):0 -> setTransitionAlpha
    2:2:void setTransitionAlpha(android.view.View,float):0:0 -> setTransitionAlpha
androidx.transition.ViewUtilsApi21 -> androidx.transition.k1:
    java.lang.reflect.Method sTransformMatrixToLocalMethod -> g
    boolean sSetAnimationMatrixMethodFetched -> j
    java.lang.reflect.Method sSetAnimationMatrixMethod -> i
    boolean sTransformMatrixToGlobalMethodFetched -> f
    java.lang.reflect.Method sTransformMatrixToGlobalMethod -> e
    boolean sTransformMatrixToLocalMethodFetched -> h
    1:1:void fetchSetAnimationMatrix():0:0 -> setAnimationMatrix
    1:1:void setAnimationMatrix(android.view.View,android.graphics.Matrix):0 -> setAnimationMatrix
    2:2:void setAnimationMatrix(android.view.View,android.graphics.Matrix):0:0 -> setAnimationMatrix
    1:1:void fetchTransformMatrixToGlobalMethod():0:0 -> transformMatrixToGlobal
    1:1:void transformMatrixToGlobal(android.view.View,android.graphics.Matrix):0 -> transformMatrixToGlobal
    2:2:void transformMatrixToGlobal(android.view.View,android.graphics.Matrix):0:0 -> transformMatrixToGlobal
    1:1:void fetchTransformMatrixToLocalMethod():0:0 -> transformMatrixToLocal
    1:1:void transformMatrixToLocal(android.view.View,android.graphics.Matrix):0 -> transformMatrixToLocal
    2:2:void transformMatrixToLocal(android.view.View,android.graphics.Matrix):0:0 -> transformMatrixToLocal
androidx.transition.ViewUtilsApi22 -> androidx.transition.l1:
    java.lang.reflect.Method sSetLeftTopRightBottomMethod -> k
    boolean sSetLeftTopRightBottomMethodFetched -> l
    1:1:void fetchSetLeftTopRightBottomMethod():0:0 -> setLeftTopRightBottom
    1:1:void setLeftTopRightBottom(android.view.View,int,int,int,int):0 -> setLeftTopRightBottom
    2:2:void setLeftTopRightBottom(android.view.View,int,int,int,int):0:0 -> setLeftTopRightBottom
androidx.transition.ViewUtilsBase -> androidx.transition.m1:
androidx.transition.Visibility -> androidx.transition.Visibility:
    java.lang.String[] sTransitionProperties -> J
    int mMode -> I
    void captureValues(androidx.transition.TransitionValues) -> o
    1:1:androidx.transition.ViewGroupOverlayImpl androidx.transition.ViewGroupUtils.getOverlay(android.view.ViewGroup):0:0 -> onDisappear
    1:1:android.animation.Animator onDisappear(android.view.ViewGroup,androidx.transition.TransitionValues,int,androidx.transition.TransitionValues,int):0 -> onDisappear
    2:2:android.animation.Animator onDisappear(android.view.ViewGroup,androidx.transition.TransitionValues,int,androidx.transition.TransitionValues,int):0:0 -> onDisappear
    3:3:void androidx.transition.AnimatorUtils.addPauseListener(android.animation.Animator,android.animation.AnimatorListenerAdapter):0:0 -> onDisappear
    3:3:android.animation.Animator onDisappear(android.view.ViewGroup,androidx.transition.TransitionValues,int,androidx.transition.TransitionValues,int):0 -> onDisappear
    4:4:android.animation.Animator onDisappear(android.view.ViewGroup,androidx.transition.TransitionValues,int,androidx.transition.TransitionValues,int):0:0 -> onDisappear
    androidx.transition.Visibility$VisibilityInfo getVisibilityChangeInfo(androidx.transition.TransitionValues,androidx.transition.TransitionValues) -> p
androidx.transition.Visibility$1 -> androidx.transition.n1:
    androidx.transition.ViewGroupOverlayImpl val$overlay -> a
    android.view.View val$finalOverlayView -> b
androidx.transition.Visibility$DisappearListener -> androidx.transition.o1:
    android.view.ViewGroup mParent -> c
    android.view.View mView -> a
    boolean mLayoutSuppressed -> e
    boolean mCanceled -> f
    int mFinalVisibility -> b
    boolean mSuppressLayout -> d
    void hideViewWhenNotCanceled() -> a
    void suppressLayout(boolean) -> b
androidx.transition.Visibility$VisibilityInfo -> androidx.transition.p1:
    android.view.ViewGroup mEndParent -> f
    android.view.ViewGroup mStartParent -> e
    int mEndVisibility -> d
    boolean mVisibilityChange -> a
    boolean mFadeIn -> b
    int mStartVisibility -> c
androidx.transition.VisibilityPropagation -> androidx.transition.VisibilityPropagation:
    java.lang.String[] VISIBILITY_PROPAGATION_VALUES -> a
    int getViewCoordinate(androidx.transition.TransitionValues,int) -> a
androidx.transition.WindowIdApi18 -> androidx.transition.q1:
    android.view.WindowId mWindowId -> a
androidx.transition.WindowIdImpl -> androidx.transition.r1:
androidx.vectordrawable.graphics.drawable.AndroidResources -> androidx.vectordrawable.graphics.drawable.a:
    int[] STYLEABLE_ANIMATED_VECTOR_DRAWABLE_TARGET -> f
    int[] STYLEABLE_ANIMATOR -> g
    int[] STYLEABLE_ANIMATOR_SET -> h
    int[] STYLEABLE_PROPERTY_VALUES_HOLDER -> i
    int[] STYLEABLE_VECTOR_DRAWABLE_GROUP -> b
    int[] STYLEABLE_VECTOR_DRAWABLE_PATH -> c
    int[] STYLEABLE_VECTOR_DRAWABLE_CLIP_PATH -> d
    int[] STYLEABLE_ANIMATED_VECTOR_DRAWABLE -> e
    int[] STYLEABLE_VECTOR_DRAWABLE_TYPE_ARRAY -> a
    int[] STYLEABLE_KEYFRAME -> j
    int[] STYLEABLE_PROPERTY_ANIMATOR -> k
    int[] STYLEABLE_PATH_INTERPOLATOR -> l
androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback -> androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback:
    android.graphics.drawable.Animatable2$AnimationCallback mPlatformCallback -> a
androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback$1 -> androidx.vectordrawable.graphics.drawable.b:
    androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback this$0 -> a
androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat -> androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat:
    android.graphics.drawable.Drawable$Callback mCallback -> g
    androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState mAnimatedVectorState -> b
    android.content.Context mContext -> c
    android.animation.ArgbEvaluator mArgbEvaluator -> d
    java.util.ArrayList mAnimationCallbacks -> f
    android.animation.Animator$AnimatorListener mAnimatorListener -> e
    1:1:void removeAnimatorSetListener():0:0 -> clearAnimationCallbacks
    1:1:void clearAnimationCallbacks():0 -> clearAnimationCallbacks
    2:2:void clearAnimationCallbacks():0:0 -> clearAnimationCallbacks
    1:1:void <init>(android.content.Context):0:0 -> create
    1:1:androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat create(android.content.Context,int):0 -> create
    2:2:androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat create(android.content.Context,int):0:0 -> create
    1:1:void <init>(android.content.Context):0:0 -> createFromXmlInner
    1:1:androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> createFromXmlInner
    2:2:androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> createFromXmlInner
    1:1:void setupAnimatorsForTarget(java.lang.String,android.animation.Animator):0:0 -> inflate
    1:1:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    2:4:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    5:5:void androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState.setupAnimatorSet():0:0 -> inflate
    5:5:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    1:1:android.graphics.drawable.Animatable2$AnimationCallback androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback.getPlatformCallback():0:0 -> registerAnimationCallback
    1:1:void registerPlatformCallback(android.graphics.drawable.AnimatedVectorDrawable,androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback):0 -> registerAnimationCallback
    1:1:void registerAnimationCallback(android.graphics.drawable.Drawable,androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback):0 -> registerAnimationCallback
    2:2:void registerPlatformCallback(android.graphics.drawable.AnimatedVectorDrawable,androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback):0:0 -> registerAnimationCallback
    2:2:void registerAnimationCallback(android.graphics.drawable.Drawable,androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback):0 -> registerAnimationCallback
    3:3:android.graphics.drawable.Animatable2$AnimationCallback androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback.getPlatformCallback():0:0 -> registerAnimationCallback
    3:3:void registerPlatformCallback(android.graphics.drawable.AnimatedVectorDrawable,androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback):0 -> registerAnimationCallback
    3:3:void registerAnimationCallback(androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback):0 -> registerAnimationCallback
    4:4:void registerPlatformCallback(android.graphics.drawable.AnimatedVectorDrawable,androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback):0:0 -> registerAnimationCallback
    4:4:void registerAnimationCallback(androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback):0 -> registerAnimationCallback
    5:5:void registerAnimationCallback(androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback):0:0 -> registerAnimationCallback
    1:1:android.graphics.drawable.Animatable2$AnimationCallback androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback.getPlatformCallback():0:0 -> unregisterAnimationCallback
    1:1:boolean unregisterPlatformCallback(android.graphics.drawable.AnimatedVectorDrawable,androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback):0 -> unregisterAnimationCallback
    1:1:boolean unregisterAnimationCallback(android.graphics.drawable.Drawable,androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback):0 -> unregisterAnimationCallback
    2:2:boolean unregisterPlatformCallback(android.graphics.drawable.AnimatedVectorDrawable,androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback):0:0 -> unregisterAnimationCallback
    2:2:boolean unregisterAnimationCallback(android.graphics.drawable.Drawable,androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback):0 -> unregisterAnimationCallback
    3:3:android.graphics.drawable.Animatable2$AnimationCallback androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback.getPlatformCallback():0:0 -> unregisterAnimationCallback
    3:3:boolean unregisterPlatformCallback(android.graphics.drawable.AnimatedVectorDrawable,androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback):0 -> unregisterAnimationCallback
    3:3:boolean unregisterAnimationCallback(androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback):0 -> unregisterAnimationCallback
    4:4:boolean unregisterPlatformCallback(android.graphics.drawable.AnimatedVectorDrawable,androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback):0:0 -> unregisterAnimationCallback
    4:4:boolean unregisterAnimationCallback(androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback):0 -> unregisterAnimationCallback
    5:5:boolean unregisterAnimationCallback(androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback):0:0 -> unregisterAnimationCallback
    6:6:void removeAnimatorSetListener():0:0 -> unregisterAnimationCallback
    6:6:boolean unregisterAnimationCallback(androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback):0 -> unregisterAnimationCallback
androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$1 -> androidx.vectordrawable.graphics.drawable.c:
    androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat this$0 -> a
androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$2 -> androidx.vectordrawable.graphics.drawable.d:
    androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat this$0 -> a
androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState -> androidx.vectordrawable.graphics.drawable.e:
    androidx.vectordrawable.graphics.drawable.VectorDrawableCompat mVectorDrawable -> b
    android.animation.AnimatorSet mAnimatorSet -> c
    androidx.collection.ArrayMap mTargetNameMap -> e
    java.util.ArrayList mAnimators -> d
    int mChangingConfigurations -> a
    1:1:void setupAnimatorSet():0:0 -> <init>
    1:1:void <init>(android.content.Context,androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState,android.graphics.drawable.Drawable$Callback,android.content.res.Resources):0 -> <init>
androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableDelegateState -> androidx.vectordrawable.graphics.drawable.f:
    android.graphics.drawable.Drawable$ConstantState mDelegateState -> a
androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat -> androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat:
    1:1:android.animation.ObjectAnimator loadObjectAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,float,org.xmlpull.v1.XmlPullParser):0:0 -> a
    1:1:android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0 -> a
    2:2:android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0:0 -> a
    3:3:android.animation.PropertyValuesHolder[] loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet):0:0 -> a
    3:3:android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0 -> a
    4:4:android.animation.PropertyValuesHolder loadPvh(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,java.lang.String,int):0:0 -> a
    4:4:android.animation.PropertyValuesHolder[] loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet):0 -> a
    4:4:android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0 -> a
    5:5:int inferValueTypeOfKeyframe(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0:0 -> a
    5:5:android.animation.PropertyValuesHolder loadPvh(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,java.lang.String,int):0 -> a
    5:5:android.animation.PropertyValuesHolder[] loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet):0 -> a
    5:5:android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0 -> a
    6:6:android.animation.PropertyValuesHolder loadPvh(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,java.lang.String,int):0:0 -> a
    6:6:android.animation.PropertyValuesHolder[] loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet):0 -> a
    6:6:android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0 -> a
    7:7:android.animation.Keyframe loadKeyframe(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int,org.xmlpull.v1.XmlPullParser):0:0 -> a
    7:7:android.animation.PropertyValuesHolder loadPvh(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,java.lang.String,int):0 -> a
    7:7:android.animation.PropertyValuesHolder[] loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet):0 -> a
    7:7:android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0 -> a
    8:8:android.animation.PropertyValuesHolder loadPvh(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,java.lang.String,int):0:0 -> a
    8:8:android.animation.PropertyValuesHolder[] loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet):0 -> a
    8:8:android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0 -> a
    9:9:void distributeKeyframes(android.animation.Keyframe[],float,int,int):0:0 -> a
    9:9:android.animation.PropertyValuesHolder loadPvh(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,java.lang.String,int):0 -> a
    9:9:android.animation.PropertyValuesHolder[] loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet):0 -> a
    9:9:android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0 -> a
    10:10:android.animation.PropertyValuesHolder loadPvh(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,java.lang.String,int):0:0 -> a
    10:10:android.animation.PropertyValuesHolder[] loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet):0 -> a
    10:10:android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0 -> a
    11:11:android.animation.PropertyValuesHolder[] loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet):0:0 -> a
    11:11:android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0 -> a
    12:12:android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0:0 -> a
    android.animation.Keyframe createNewKeyframe(android.animation.Keyframe,float) -> b
    android.animation.PropertyValuesHolder getPVH(android.content.res.TypedArray,int,int,int,java.lang.String) -> c
    boolean isColorType(int) -> d
    1:1:void parseAnimatorFromTypeArray(android.animation.ValueAnimator,android.content.res.TypedArray,android.content.res.TypedArray,float,org.xmlpull.v1.XmlPullParser):0:0 -> e
    1:1:android.animation.ValueAnimator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser):0 -> e
    2:2:int inferValueTypeFromValues(android.content.res.TypedArray,int,int):0:0 -> e
    2:2:void parseAnimatorFromTypeArray(android.animation.ValueAnimator,android.content.res.TypedArray,android.content.res.TypedArray,float,org.xmlpull.v1.XmlPullParser):0 -> e
    2:2:android.animation.ValueAnimator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser):0 -> e
    3:3:void parseAnimatorFromTypeArray(android.animation.ValueAnimator,android.content.res.TypedArray,android.content.res.TypedArray,float,org.xmlpull.v1.XmlPullParser):0:0 -> e
    3:3:android.animation.ValueAnimator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser):0 -> e
    4:4:void setupObjectAnimator(android.animation.ValueAnimator,android.content.res.TypedArray,int,float,org.xmlpull.v1.XmlPullParser):0:0 -> e
    4:4:void parseAnimatorFromTypeArray(android.animation.ValueAnimator,android.content.res.TypedArray,android.content.res.TypedArray,float,org.xmlpull.v1.XmlPullParser):0 -> e
    4:4:android.animation.ValueAnimator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser):0 -> e
    5:5:void setupPathMotion(android.graphics.Path,android.animation.ObjectAnimator,float,java.lang.String,java.lang.String):0:0 -> e
    5:5:void setupObjectAnimator(android.animation.ValueAnimator,android.content.res.TypedArray,int,float,org.xmlpull.v1.XmlPullParser):0 -> e
    5:5:void parseAnimatorFromTypeArray(android.animation.ValueAnimator,android.content.res.TypedArray,android.content.res.TypedArray,float,org.xmlpull.v1.XmlPullParser):0 -> e
    5:5:android.animation.ValueAnimator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser):0 -> e
    6:6:void setupObjectAnimator(android.animation.ValueAnimator,android.content.res.TypedArray,int,float,org.xmlpull.v1.XmlPullParser):0:0 -> e
    6:6:void parseAnimatorFromTypeArray(android.animation.ValueAnimator,android.content.res.TypedArray,android.content.res.TypedArray,float,org.xmlpull.v1.XmlPullParser):0 -> e
    6:6:android.animation.ValueAnimator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser):0 -> e
    7:7:android.animation.ValueAnimator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser):0:0 -> e
    1:1:android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,float):0:0 -> loadAnimator
    1:1:android.animation.Animator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,int,float):0 -> loadAnimator
    2:2:android.animation.Animator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,int,float):0:0 -> loadAnimator
androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator -> androidx.vectordrawable.graphics.drawable.g:
    androidx.core.graphics.PathParser$PathDataNode[] mNodeArray -> a
    1:1:androidx.core.graphics.PathParser$PathDataNode[] evaluate(float,androidx.core.graphics.PathParser$PathDataNode[],androidx.core.graphics.PathParser$PathDataNode[]):0:0 -> evaluate
    1:1:java.lang.Object evaluate(float,java.lang.Object,java.lang.Object):0 -> evaluate
androidx.vectordrawable.graphics.drawable.ArgbEvaluator -> androidx.vectordrawable.graphics.drawable.ArgbEvaluator:
    androidx.vectordrawable.graphics.drawable.ArgbEvaluator sInstance -> a
androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat -> androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat:
    float[] mX -> a
    float[] mY -> b
    1:1:void parseInterpolatorFromTypeArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0:0 -> <init>
    1:1:void <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0 -> <init>
    2:2:void initQuad(float,float):0:0 -> <init>
    2:2:void parseInterpolatorFromTypeArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0 -> <init>
    2:2:void <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0 -> <init>
    3:3:void parseInterpolatorFromTypeArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0:0 -> <init>
    3:3:void <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0 -> <init>
    4:4:void initCubic(float,float,float,float):0:0 -> <init>
    4:4:void parseInterpolatorFromTypeArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0 -> <init>
    4:4:void <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0 -> <init>
    5:5:void <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0:0 -> <init>
    6:6:void parseInterpolatorFromTypeArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0:0 -> <init>
    6:6:void <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0 -> <init>
    void initPath(android.graphics.Path) -> a
androidx.vectordrawable.graphics.drawable.VectorDrawableCommon -> androidx.vectordrawable.graphics.drawable.h:
    android.graphics.drawable.Drawable mDelegateDrawable -> a
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat -> androidx.vectordrawable.graphics.drawable.VectorDrawableCompat:
    android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE -> j
    android.graphics.PorterDuffColorFilter mTintFilter -> c
    android.graphics.ColorFilter mColorFilter -> d
    android.graphics.Matrix mTmpMatrix -> h
    float[] mTmpFloats -> g
    android.graphics.Rect mTmpBounds -> i
    boolean mMutated -> e
    boolean mAllowCaching -> f
    androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState -> b
    java.lang.Object getTargetByName(java.lang.String) -> a
    void setAllowCaching(boolean) -> b
    android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode) -> c
    1:1:boolean needMirroring():0:0 -> draw
    1:1:void draw(android.graphics.Canvas):0 -> draw
    2:2:void draw(android.graphics.Canvas):0:0 -> draw
    3:3:void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.createCachedBitmapIfNeeded(int,int):0:0 -> draw
    3:3:void draw(android.graphics.Canvas):0 -> draw
    4:4:boolean androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.canReuseBitmap(int,int):0:0 -> draw
    4:4:void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.createCachedBitmapIfNeeded(int,int):0 -> draw
    4:4:void draw(android.graphics.Canvas):0 -> draw
    5:5:void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.createCachedBitmapIfNeeded(int,int):0:0 -> draw
    5:5:void draw(android.graphics.Canvas):0 -> draw
    6:6:void draw(android.graphics.Canvas):0:0 -> draw
    7:7:void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.updateCachedBitmap(int,int):0:0 -> draw
    7:7:void draw(android.graphics.Canvas):0 -> draw
    8:8:void draw(android.graphics.Canvas):0:0 -> draw
    9:9:boolean androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.canReuseCache():0:0 -> draw
    9:9:void draw(android.graphics.Canvas):0 -> draw
    10:10:void draw(android.graphics.Canvas):0:0 -> draw
    11:11:void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.updateCachedBitmap(int,int):0:0 -> draw
    11:11:void draw(android.graphics.Canvas):0 -> draw
    12:12:void draw(android.graphics.Canvas):0:0 -> draw
    13:13:void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.updateCacheStates():0:0 -> draw
    13:13:void draw(android.graphics.Canvas):0 -> draw
    14:14:void draw(android.graphics.Canvas):0:0 -> draw
    15:15:boolean androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.hasTranslucentRoot():0:0 -> draw
    15:15:android.graphics.Paint androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.getPaint(android.graphics.ColorFilter):0 -> draw
    15:15:void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.drawCachedBitmapWithRootAlpha(android.graphics.Canvas,android.graphics.ColorFilter,android.graphics.Rect):0 -> draw
    15:15:void draw(android.graphics.Canvas):0 -> draw
    16:16:android.graphics.Paint androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.getPaint(android.graphics.ColorFilter):0:0 -> draw
    16:16:void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.drawCachedBitmapWithRootAlpha(android.graphics.Canvas,android.graphics.ColorFilter,android.graphics.Rect):0 -> draw
    16:16:void draw(android.graphics.Canvas):0 -> draw
    17:17:void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.drawCachedBitmapWithRootAlpha(android.graphics.Canvas,android.graphics.ColorFilter,android.graphics.Rect):0:0 -> draw
    17:17:void draw(android.graphics.Canvas):0 -> draw
    18:18:void draw(android.graphics.Canvas):0:0 -> draw
    1:1:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0:0 -> inflate
    1:1:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    2:2:android.graphics.PorterDuff$Mode parseTintModeCompat(int,android.graphics.PorterDuff$Mode):0:0 -> inflate
    2:2:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0 -> inflate
    2:2:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    3:3:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0:0 -> inflate
    3:3:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    4:4:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    5:5:void inflateInternal(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    5:5:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    6:6:void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath.inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser):0:0 -> inflate
    6:6:void inflateInternal(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    6:6:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    7:7:void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath.updateStateFromTypedArray(android.content.res.TypedArray):0:0 -> inflate
    7:7:void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath.inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser):0 -> inflate
    7:7:void inflateInternal(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    7:7:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    8:8:void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath.inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser):0:0 -> inflate
    8:8:void inflateInternal(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    8:8:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    9:9:void inflateInternal(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    9:9:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    10:10:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    11:11:void inflateInternal(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    11:11:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    12:12:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0:0 -> inflate
    12:12:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    1:1:boolean androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.onStateChanged(int[]):0:0 -> onStateChange
    1:1:boolean onStateChange(int[]):0 -> onStateChange
    2:2:boolean androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer.onStateChanged(int[]):0:0 -> onStateChange
    2:2:boolean androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.onStateChanged(int[]):0 -> onStateChange
    2:2:boolean onStateChange(int[]):0 -> onStateChange
    3:3:boolean androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.onStateChanged(int[]):0:0 -> onStateChange
    3:3:boolean onStateChange(int[]):0 -> onStateChange
    4:4:boolean onStateChange(int[]):0:0 -> onStateChange
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$1 -> androidx.vectordrawable.graphics.drawable.i:
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath -> androidx.vectordrawable.graphics.drawable.j:
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath -> androidx.vectordrawable.graphics.drawable.k:
    float mTrimPathEnd -> l
    float mTrimPathStart -> k
    float mFillAlpha -> j
    android.graphics.Paint$Cap mStrokeLineCap -> n
    float mStrokeAlpha -> h
    float mStrokeWidth -> f
    int mFillRule -> i
    android.graphics.Paint$Join mStrokeLineJoin -> o
    int[] mThemeAttrs -> d
    androidx.core.content.res.ComplexColorCompat mFillColor -> g
    float mStrokeMiterlimit -> p
    androidx.core.content.res.ComplexColorCompat mStrokeColor -> e
    float mTrimPathOffset -> m
    1:1:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme):0:0 -> inflate
    1:1:void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser):0 -> inflate
    2:2:android.graphics.Paint$Cap getStrokeLineCap(int,android.graphics.Paint$Cap):0:0 -> inflate
    2:2:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme):0 -> inflate
    2:2:void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser):0 -> inflate
    3:3:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme):0:0 -> inflate
    3:3:void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser):0 -> inflate
    4:4:android.graphics.Paint$Join getStrokeLineJoin(int,android.graphics.Paint$Join):0:0 -> inflate
    4:4:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme):0 -> inflate
    4:4:void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser):0 -> inflate
    5:5:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme):0:0 -> inflate
    5:5:void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser):0 -> inflate
    6:6:void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser):0:0 -> inflate
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup -> androidx.vectordrawable.graphics.drawable.l:
    android.graphics.Matrix mLocalMatrix -> j
    float mTranslateY -> i
    float mTranslateX -> h
    float mScaleY -> g
    int mChangingConfigurations -> k
    float mScaleX -> f
    java.lang.String mGroupName -> m
    float mPivotY -> e
    float mPivotX -> d
    float mRotate -> c
    java.util.ArrayList mChildren -> b
    android.graphics.Matrix mStackedMatrix -> a
    int[] mThemeAttrs -> l
    void updateLocalMatrix() -> a
    1:1:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0:0 -> inflate
    1:1:void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser):0 -> inflate
    2:2:void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser):0:0 -> inflate
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VObject -> androidx.vectordrawable.graphics.drawable.m:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$1):0 -> <init>
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath -> androidx.vectordrawable.graphics.drawable.n:
    androidx.core.graphics.PathParser$PathDataNode[] mNodes -> a
    java.lang.String mPathName -> b
    int mChangingConfigurations -> c
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer -> androidx.vectordrawable.graphics.drawable.o:
    android.graphics.Path mPath -> a
    float mViewportHeight -> l
    float mViewportWidth -> k
    float mBaseHeight -> j
    androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup mRootGroup -> h
    float mBaseWidth -> i
    int mRootAlpha -> m
    java.lang.Boolean mIsStateful -> o
    int mChangingConfigurations -> g
    java.lang.String mRootName -> n
    android.graphics.Matrix IDENTITY_MATRIX -> q
    android.graphics.Path mRenderPath -> b
    androidx.collection.ArrayMap mVGTargetsMap -> p
    android.graphics.PathMeasure mPathMeasure -> f
    android.graphics.Paint mFillPaint -> e
    android.graphics.Paint mStrokePaint -> d
    android.graphics.Matrix mFinalPathMatrix -> c
    1:1:void drawPath(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0:0 -> a
    1:1:void drawGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,android.graphics.Matrix,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0 -> a
    2:2:float getMatrixScale(android.graphics.Matrix):0:0 -> a
    2:2:void drawPath(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0 -> a
    2:2:void drawGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,android.graphics.Matrix,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0 -> a
    3:3:void drawPath(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0:0 -> a
    3:3:void drawGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,android.graphics.Matrix,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0 -> a
    4:4:void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath.toPath(android.graphics.Path):0:0 -> a
    4:4:void drawPath(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0 -> a
    4:4:void drawGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,android.graphics.Matrix,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0 -> a
    5:5:void drawPath(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0:0 -> a
    5:5:void drawGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,android.graphics.Matrix,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0 -> a
    6:6:int androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.applyAlpha(int,float):0:0 -> a
    6:6:void drawPath(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0 -> a
    6:6:void drawGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,android.graphics.Matrix,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0 -> a
    7:7:void drawPath(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0:0 -> a
    7:7:void drawGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,android.graphics.Matrix,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0 -> a
    8:8:int androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.applyAlpha(int,float):0:0 -> a
    8:8:void drawPath(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0 -> a
    8:8:void drawGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,android.graphics.Matrix,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0 -> a
    9:9:void drawPath(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0:0 -> a
    9:9:void drawGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,android.graphics.Matrix,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0 -> a
    10:10:void drawGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,android.graphics.Matrix,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0:0 -> a
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState -> androidx.vectordrawable.graphics.drawable.p:
    android.content.res.ColorStateList mTint -> c
    boolean mCachedAutoMirrored -> j
    android.graphics.PorterDuff$Mode mCachedTintMode -> h
    boolean mCacheDirty -> k
    int mCachedRootAlpha -> i
    androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer -> b
    boolean mAutoMirrored -> e
    android.graphics.Bitmap mCachedBitmap -> f
    android.content.res.ColorStateList mCachedTint -> g
    android.graphics.PorterDuff$Mode mTintMode -> d
    android.graphics.Paint mTempPaint -> l
    int mChangingConfigurations -> a
    1:1:boolean androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer.isStateful():0:0 -> isStateful
    1:1:boolean isStateful():0 -> isStateful
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState -> androidx.vectordrawable.graphics.drawable.q:
    android.graphics.drawable.Drawable$ConstantState mDelegateState -> a
androidx.versionedparcelable.ParcelImpl -> androidx.versionedparcelable.ParcelImpl:
    androidx.versionedparcelable.VersionedParcelable mParcel -> a
    1:1:void androidx.versionedparcelable.VersionedParcelParcel.<init>(android.os.Parcel):0:0 -> <init>
    1:1:void <init>(android.os.Parcel):0 -> <init>
    2:2:void <init>(android.os.Parcel):0:0 -> <init>
    1:1:void androidx.versionedparcelable.VersionedParcelParcel.<init>(android.os.Parcel):0:0 -> writeToParcel
    1:1:void writeToParcel(android.os.Parcel,int):0 -> writeToParcel
    2:2:void writeToParcel(android.os.Parcel,int):0:0 -> writeToParcel
androidx.versionedparcelable.ParcelImpl$1 -> androidx.versionedparcelable.a:
    1:1:androidx.versionedparcelable.ParcelImpl createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.versionedparcelable.ParcelImpl[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.versionedparcelable.VersionedParcel -> androidx.versionedparcelable.VersionedParcel:
    java.lang.Class findParcelClass(java.lang.Class) -> a
    int getType(java.lang.Object) -> b
    java.util.Collection readCollection(int,java.util.Collection) -> c
    void writeCollection(java.util.Collection,int) -> d
    void writeSerializable(java.io.Serializable) -> e
    1:1:int readExceptionCode():0:0 -> readException
    1:1:java.lang.Exception readException(java.lang.Exception,int):0 -> readException
    2:2:java.lang.Exception readException(java.lang.Exception,int):0:0 -> readException
    3:3:java.lang.Exception createException(int,java.lang.String):0:0 -> readException
    3:3:java.lang.Exception readException(int,java.lang.String):0 -> readException
    3:3:java.lang.Exception readException(java.lang.Exception,int):0 -> readException
    1:1:java.lang.Class findParcelClass(androidx.versionedparcelable.VersionedParcelable):0:0 -> writeToParcel
    1:1:void writeToParcel(androidx.versionedparcelable.VersionedParcelable,androidx.versionedparcelable.VersionedParcel):0 -> writeToParcel
    2:2:void writeToParcel(androidx.versionedparcelable.VersionedParcelable,androidx.versionedparcelable.VersionedParcel):0:0 -> writeToParcel
    1:1:void writeVersionedParcelableCreator(androidx.versionedparcelable.VersionedParcelable):0:0 -> writeVersionedParcelable
    1:1:void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable):0 -> writeVersionedParcelable
    2:2:void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable):0:0 -> writeVersionedParcelable
    3:3:void writeVersionedParcelableCreator(androidx.versionedparcelable.VersionedParcelable):0:0 -> writeVersionedParcelable
    3:3:void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable):0 -> writeVersionedParcelable
androidx.versionedparcelable.VersionedParcel$1 -> androidx.versionedparcelable.b:
androidx.versionedparcelable.VersionedParcelParcel -> androidx.versionedparcelable.c:
    android.util.SparseIntArray mPositionLookup -> a
    android.os.Parcel mParcel -> b
    int mCurrentField -> f
    int mNextRead -> g
    int mEnd -> d
    int mOffset -> c
    java.lang.String mPrefix -> e
    1:1:int readUntilField(int):0:0 -> readField
    1:1:boolean readField(int):0 -> readField
    2:2:boolean readField(int):0:0 -> readField
    1:1:void writeInt(int):0:0 -> setOutputField
    1:1:void setOutputField(int):0 -> setOutputField
androidx.versionedparcelable.VersionedParcelStream -> androidx.versionedparcelable.f:
    java.io.DataOutputStream mMasterOutput -> b
    androidx.versionedparcelable.VersionedParcelStream$FieldBuffer mFieldBuffer -> f
    android.util.SparseArray mCachedFields -> c
    java.io.DataInputStream mMasterInput -> a
    java.io.DataInputStream mCurrentInput -> d
    java.io.DataOutputStream mCurrentOutput -> e
    boolean mIgnoreParcelables -> g
    java.nio.charset.Charset UTF_16 -> h
    void writeObject(java.lang.Object) -> f
    1:1:void readObject(int,java.lang.String,android.os.Bundle):0:0 -> readBundle
    1:1:android.os.Bundle readBundle():0 -> readBundle
androidx.versionedparcelable.VersionedParcelStream$FieldBuffer -> androidx.versionedparcelable.d:
    java.io.DataOutputStream mDataStream -> b
    java.io.ByteArrayOutputStream mOutput -> a
    java.io.DataOutputStream mTarget -> d
    int mFieldId -> c
    void flushField() -> a
androidx.versionedparcelable.VersionedParcelStream$InputBuffer -> androidx.versionedparcelable.e:
    java.io.DataInputStream mInputStream -> a
    int mSize -> b
    int mFieldId -> c
androidx.viewpager.widget.PagerAdapter -> androidx.viewpager.widget.PagerAdapter:
    android.database.DataSetObservable mObservable -> a
    android.database.DataSetObserver mViewPagerObserver -> b
    void setViewPagerObserver(android.database.DataSetObserver) -> a
androidx.viewpager.widget.PagerTabStrip -> androidx.viewpager.widget.PagerTabStrip:
    android.graphics.Paint mTabPaint -> w
    float mInitialMotionY -> E
    float mInitialMotionX -> D
    int mTouchSlop -> F
    int mFullUnderlineHeight -> B
    boolean mDrawFullUnderline -> z
    int mTabAlpha -> y
    int mTabPadding -> v
    android.graphics.Rect mTempRect -> x
    int mMinTextSpacing -> t
    int mMinStripHeight -> u
    int mIndicatorHeight -> r
    boolean mDrawFullUnderlineSet -> A
    int mMinPaddingBottom -> s
    boolean mIgnoreTap -> C
    int mIndicatorColor -> q
    1:1:int androidx.viewpager.widget.PagerTitleStrip.getMinHeight():0:0 -> a
    1:1:int getMinHeight():0 -> a
    2:2:int getMinHeight():0:0 -> a
    void updateTextPositions(int,float,boolean) -> e
androidx.viewpager.widget.PagerTabStrip$1 -> androidx.viewpager.widget.a:
    androidx.viewpager.widget.PagerTabStrip this$0 -> a
androidx.viewpager.widget.PagerTabStrip$2 -> androidx.viewpager.widget.b:
    androidx.viewpager.widget.PagerTabStrip this$0 -> a
androidx.viewpager.widget.PagerTitleStrip -> androidx.viewpager.widget.PagerTitleStrip:
    androidx.viewpager.widget.PagerTitleStrip$PageListener mPageListener -> k
    java.lang.ref.WeakReference mWatchingAdapter -> l
    int mTextColor -> n
    int mNonPrimaryAlpha -> m
    boolean mUpdatingText -> i
    boolean mUpdatingPositions -> j
    float mLastKnownPositionOffset -> f
    int mGravity -> h
    androidx.viewpager.widget.ViewPager mPager -> a
    int mScaledTextSpacing -> g
    int mLastKnownCurrentPage -> e
    android.widget.TextView mCurrText -> c
    android.widget.TextView mPrevText -> b
    android.widget.TextView mNextText -> d
    int[] ATTRS -> o
    int[] TEXT_ATTRS -> p
    int getMinHeight() -> a
    void setSingleLineAllCaps(android.widget.TextView) -> b
    void updateAdapter(androidx.viewpager.widget.PagerAdapter,androidx.viewpager.widget.PagerAdapter) -> c
    void updateText(int,androidx.viewpager.widget.PagerAdapter) -> d
    void updateTextPositions(int,float,boolean) -> e
androidx.viewpager.widget.PagerTitleStrip$PageListener -> androidx.viewpager.widget.c:
    androidx.viewpager.widget.PagerTitleStrip this$0 -> b
    int mScrollState -> a
androidx.viewpager.widget.PagerTitleStrip$SingleLineAllCapsTransform -> androidx.viewpager.widget.d:
    java.util.Locale mLocale -> a
androidx.viewpager.widget.ViewPager -> androidx.viewpager.widget.ViewPager:
    int mFlingDistance -> K
    float mInitialMotionY -> F
    boolean mScrollingCacheEnabled -> u
    int mActivePointerId -> G
    android.view.VelocityTracker mVelocityTracker -> H
    java.util.List mAdapterChangeListeners -> W
    androidx.viewpager.widget.ViewPager$ItemInfo mTempItem -> c
    java.util.ArrayList mDrawingOrderedChildren -> d0
    boolean mIsUnableToDrag -> y
    java.lang.Runnable mEndScrollRunnable -> e0
    boolean mFakeDragging -> M
    androidx.viewpager.widget.ViewPager$OnPageChangeListener mInternalPageChangeListener -> V
    java.util.Comparator COMPARATOR -> h0
    int mCloseEnough -> L
    int mPageTransformerLayerType -> b0
    int mPageMargin -> m
    int mScrollState -> f0
    boolean mPopulatePending -> v
    float mLastMotionX -> C
    android.view.animation.Interpolator sInterpolator -> i0
    androidx.viewpager.widget.ViewPager$PagerObserver mObserver -> l
    boolean mFirstLayout -> Q
    java.util.ArrayList mItems -> b
    android.graphics.Rect mTempRect -> d
    int mExpectedAdapterCount -> a
    int mDefaultGutterSize -> z
    androidx.viewpager.widget.PagerAdapter mAdapter -> e
    android.widget.Scroller mScroller -> j
    boolean mIsScrollStarted -> k
    int mMinimumVelocity -> I
    int mCurItem -> f
    float mLastMotionY -> D
    androidx.viewpager.widget.ViewPager$ViewPositionComparator sPositionComparator -> j0
    android.widget.EdgeEffect mRightEdge -> P
    android.os.Parcelable mRestoredAdapterState -> h
    boolean mCalledSuper -> R
    int mGutterSize -> A
    androidx.viewpager.widget.ViewPager$OnPageChangeListener mOnPageChangeListener -> U
    int mOffscreenPageLimit -> w
    android.graphics.drawable.Drawable mMarginDrawable -> n
    float mFirstOffset -> q
    long mFakeDragBeginTime -> N
    int mChildHeightMeasureSpec -> s
    int mTopPageBounds -> o
    int mDrawingOrder -> c0
    java.lang.ClassLoader mRestoredClassLoader -> i
    int mMaximumVelocity -> J
    java.util.List mOnPageChangeListeners -> T
    float mInitialMotionX -> E
    int mRestoredCurItem -> g
    android.widget.EdgeEffect mLeftEdge -> O
    androidx.viewpager.widget.ViewPager$PageTransformer mPageTransformer -> a0
    boolean mIsBeingDragged -> x
    int mTouchSlop -> B
    boolean mInLayout -> t
    int[] LAYOUT_ATTRS -> g0
    float mLastOffset -> r
    int mDecorChildCount -> S
    int mBottomPageBounds -> p
    androidx.viewpager.widget.ViewPager$ItemInfo addNewItem(int,int) -> a
    1:1:boolean isDecorView(android.view.View):0:0 -> addView
    1:1:void addView(android.view.View,int,android.view.ViewGroup$LayoutParams):0 -> addView
    2:2:void addView(android.view.View,int,android.view.ViewGroup$LayoutParams):0:0 -> addView
    void completeScroll(boolean) -> b
    1:1:void setCurrentItemInternal(int,boolean,boolean):0:0 -> c
    1:1:void dataSetChanged():0 -> c
    2:2:void dataSetChanged():0:0 -> c
    int determineTargetPage(int,float,int,int) -> d
    void dispatchOnPageSelected(int) -> e
    1:1:void endDrag():0:0 -> endFakeDrag
    1:1:void endFakeDrag():0 -> endFakeDrag
    2:2:void endFakeDrag():0:0 -> endFakeDrag
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> f
    int getClientWidth() -> g
    androidx.viewpager.widget.ViewPager$ItemInfo infoForChild(android.view.View) -> h
    androidx.viewpager.widget.ViewPager$ItemInfo infoForCurrentScrollPosition() -> i
    androidx.viewpager.widget.ViewPager$ItemInfo infoForPosition(int) -> j
    void initViewPager() -> k
    void onSecondaryPointerUp(android.view.MotionEvent) -> l
    boolean pageLeft() -> m
    boolean pageRight() -> n
    boolean pageScrolled(int) -> o
    1:1:boolean isGutterDrag(float,float):0:0 -> onInterceptTouchEvent
    1:1:boolean onInterceptTouchEvent(android.view.MotionEvent):0 -> onInterceptTouchEvent
    2:2:boolean onInterceptTouchEvent(android.view.MotionEvent):0:0 -> onInterceptTouchEvent
    3:3:void populate():0:0 -> onInterceptTouchEvent
    3:3:boolean onInterceptTouchEvent(android.view.MotionEvent):0 -> onInterceptTouchEvent
    4:4:boolean onInterceptTouchEvent(android.view.MotionEvent):0:0 -> onInterceptTouchEvent
    1:1:void populate():0:0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:void onMeasure(int,int):0:0 -> onMeasure
    1:1:void dispatchOnPageScrolled(int,float,int):0:0 -> onPageScrolled
    1:1:void onPageScrolled(int,float,int):0 -> onPageScrolled
    2:2:void onPageScrolled(int,float,int):0:0 -> onPageScrolled
    1:1:void setCurrentItemInternal(int,boolean,boolean):0:0 -> onRestoreInstanceState
    1:1:void onRestoreInstanceState(android.os.Parcelable):0 -> onRestoreInstanceState
    2:2:void onRestoreInstanceState(android.os.Parcelable):0:0 -> onRestoreInstanceState
    1:1:void populate():0:0 -> onTouchEvent
    1:1:boolean onTouchEvent(android.view.MotionEvent):0 -> onTouchEvent
    2:2:boolean onTouchEvent(android.view.MotionEvent):0:0 -> onTouchEvent
    boolean performDrag(float) -> p
    1:1:void calculatePageOffsets(androidx.viewpager.widget.ViewPager$ItemInfo,int,androidx.viewpager.widget.ViewPager$ItemInfo):0:0 -> q
    1:1:void populate(int):0 -> q
    2:2:void populate(int):0:0 -> q
    3:3:androidx.viewpager.widget.ViewPager$ItemInfo infoForAnyChild(android.view.View):0:0 -> q
    3:3:void populate(int):0 -> q
    4:4:void populate(int):0:0 -> q
    void recomputeScrollPosition(int,int,int,int) -> r
    void requestParentDisallowInterceptTouchEvent(boolean) -> s
    1:1:void removeNonDecorViews():0:0 -> setAdapter
    1:1:void setAdapter(androidx.viewpager.widget.PagerAdapter):0 -> setAdapter
    2:2:void setAdapter(androidx.viewpager.widget.PagerAdapter):0:0 -> setAdapter
    3:3:void setCurrentItemInternal(int,boolean,boolean):0:0 -> setAdapter
    3:3:void setAdapter(androidx.viewpager.widget.PagerAdapter):0 -> setAdapter
    4:4:void setAdapter(androidx.viewpager.widget.PagerAdapter):0:0 -> setAdapter
    5:5:void populate():0:0 -> setAdapter
    5:5:void setAdapter(androidx.viewpager.widget.PagerAdapter):0 -> setAdapter
    6:6:void setAdapter(androidx.viewpager.widget.PagerAdapter):0:0 -> setAdapter
    1:1:void setCurrentItemInternal(int,boolean,boolean):0:0 -> setCurrentItem
    1:1:void setCurrentItem(int):0 -> setCurrentItem
    2:2:void setCurrentItemInternal(int,boolean,boolean):0:0 -> setCurrentItem
    2:2:void setCurrentItem(int,boolean):0 -> setCurrentItem
    1:1:void populate():0:0 -> setOffscreenPageLimit
    1:1:void setOffscreenPageLimit(int):0 -> setOffscreenPageLimit
    1:1:void populate():0:0 -> setPageTransformer
    1:1:void setPageTransformer(boolean,androidx.viewpager.widget.ViewPager$PageTransformer,int):0 -> setPageTransformer
    1:1:void endDrag():0:0 -> t
    1:1:boolean resetTouch():0 -> t
    2:2:boolean resetTouch():0:0 -> t
    1:1:void smoothScrollTo(int,int,int):0:0 -> u
    1:1:void scrollToItem(int,boolean,int,boolean):0 -> u
    2:2:void populate():0:0 -> u
    2:2:void smoothScrollTo(int,int,int):0 -> u
    2:2:void scrollToItem(int,boolean,int,boolean):0 -> u
    3:3:void smoothScrollTo(int,int,int):0:0 -> u
    3:3:void scrollToItem(int,boolean,int,boolean):0 -> u
    4:4:float distanceInfluenceForSnapDuration(float):0:0 -> u
    4:4:void smoothScrollTo(int,int,int):0 -> u
    4:4:void scrollToItem(int,boolean,int,boolean):0 -> u
    5:5:void smoothScrollTo(int,int,int):0:0 -> u
    5:5:void scrollToItem(int,boolean,int,boolean):0 -> u
    6:6:void scrollToItem(int,boolean,int,boolean):0:0 -> u
    void setCurrentItemInternal(int,boolean,boolean,int) -> v
    androidx.viewpager.widget.ViewPager$OnPageChangeListener setInternalPageChangeListener(androidx.viewpager.widget.ViewPager$OnPageChangeListener) -> w
    1:1:void enableLayers(boolean):0:0 -> x
    1:1:void setScrollState(int):0 -> x
    2:2:void dispatchOnScrollStateChanged(int):0:0 -> x
    2:2:void setScrollState(int):0 -> x
    void setScrollingCacheEnabled(boolean) -> y
    void sortChildDrawingOrder() -> z
androidx.viewpager.widget.ViewPager$1 -> androidx.viewpager.widget.e:
    1:1:int compare(androidx.viewpager.widget.ViewPager$ItemInfo,androidx.viewpager.widget.ViewPager$ItemInfo):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
androidx.viewpager.widget.ViewPager$2 -> androidx.viewpager.widget.f:
androidx.viewpager.widget.ViewPager$3 -> androidx.viewpager.widget.g:
    androidx.viewpager.widget.ViewPager this$0 -> a
    1:1:void androidx.viewpager.widget.ViewPager.populate():0:0 -> run
    1:1:void run():0 -> run
androidx.viewpager.widget.ViewPager$4 -> androidx.viewpager.widget.h:
    androidx.viewpager.widget.ViewPager this$0 -> b
    android.graphics.Rect mTempRect -> a
androidx.viewpager.widget.ViewPager$ItemInfo -> androidx.viewpager.widget.i:
    float offset -> e
    float widthFactor -> d
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
androidx.viewpager.widget.ViewPager$LayoutParams -> androidx.viewpager.widget.ViewPager$LayoutParams:
    int childIndex -> d
    float widthFactor -> a
    boolean needsMeasure -> b
    int position -> c
androidx.viewpager.widget.ViewPager$MyAccessibilityDelegate -> androidx.viewpager.widget.j:
    androidx.viewpager.widget.ViewPager this$0 -> c
    1:1:boolean canScroll():0:0 -> onInitializeAccessibilityEvent
    1:1:void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent):0 -> onInitializeAccessibilityEvent
    2:2:void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent):0:0 -> onInitializeAccessibilityEvent
    1:1:boolean canScroll():0:0 -> onInitializeAccessibilityNodeInfo
    1:1:void onInitializeAccessibilityNodeInfo(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat):0 -> onInitializeAccessibilityNodeInfo
    2:2:void onInitializeAccessibilityNodeInfo(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat):0:0 -> onInitializeAccessibilityNodeInfo
androidx.viewpager.widget.ViewPager$PagerObserver -> androidx.viewpager.widget.k:
    androidx.viewpager.widget.ViewPager this$0 -> a
androidx.viewpager.widget.ViewPager$SavedState -> androidx.viewpager.widget.ViewPager$SavedState:
    android.os.Parcelable adapterState -> c
    int position -> b
    java.lang.ClassLoader loader -> d
androidx.viewpager.widget.ViewPager$SavedState$1 -> androidx.viewpager.widget.l:
    1:1:androidx.viewpager.widget.ViewPager$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    2:2:androidx.viewpager.widget.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    2:2:java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader):0 -> createFromParcel
    1:1:androidx.viewpager.widget.ViewPager$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.viewpager.widget.ViewPager$ViewPositionComparator -> androidx.viewpager.widget.m:
    1:1:int compare(android.view.View,android.view.View):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
com.android.tools.r8.GeneratedOutlineSupport -> a.a.a.a.a:
    float outline0(float,float,float,float) -> a
    int outline1(java.lang.String,int) -> b
    java.lang.String outline10(java.lang.StringBuilder,java.lang.String,java.lang.String) -> c
    java.lang.StringBuilder outline11(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> d
    java.lang.StringBuilder outline12(java.lang.String) -> e
    java.lang.StringBuilder outline13(java.lang.String,int,java.lang.String) -> f
    void outline14(java.lang.String,androidx.fragment.app.Fragment,java.lang.String) -> g
    boolean outline15(androidx.renderscript.Allocation,androidx.renderscript.Element) -> h
    java.lang.String outline2(int,java.lang.String,int) -> i
    java.lang.String outline3(int,java.lang.String,java.lang.String) -> j
    java.lang.String outline4(int,java.lang.String,java.lang.String,java.lang.String) -> k
    java.lang.String outline5(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> l
    java.lang.String outline6(java.lang.String,int) -> m
    java.lang.String outline7(java.lang.String,androidx.fragment.app.Fragment,java.lang.String) -> n
    java.lang.String outline8(java.lang.String,java.lang.String) -> o
    java.lang.String outline9(java.lang.String,java.lang.String,java.lang.String) -> p
com.google.android.material.animation.ArgbEvaluatorCompat -> com.google.android.material.animation.ArgbEvaluatorCompat:
    com.google.android.material.animation.ArgbEvaluatorCompat instance -> a
com.google.android.material.animation.DrawableAlphaProperty -> com.google.android.material.animation.DrawableAlphaProperty:
    java.util.WeakHashMap alphaCache -> a
com.google.android.material.animation.ImageMatrixProperty -> com.google.android.material.animation.ImageMatrixProperty:
    android.graphics.Matrix matrix -> a
com.google.android.material.animation.MatrixEvaluator -> com.google.android.material.animation.MatrixEvaluator:
    android.graphics.Matrix tempMatrix -> c
    float[] tempStartValues -> a
    float[] tempEndValues -> b
com.google.android.material.animation.MotionSpec -> com.google.android.material.animation.MotionSpec:
    androidx.collection.SimpleArrayMap timings -> a
    1:1:void addTimingFromAnimator(com.google.android.material.animation.MotionSpec,android.animation.Animator):0:0 -> a
    1:1:com.google.android.material.animation.MotionSpec createSpecFromAnimators(java.util.List):0 -> a
com.google.android.material.animation.MotionTiming -> com.google.android.material.animation.MotionTiming:
    android.animation.TimeInterpolator interpolator -> c
    long duration -> b
    long delay -> a
    int repeatCount -> d
    int repeatMode -> e
    1:1:android.animation.TimeInterpolator getInterpolatorCompat(android.animation.ValueAnimator):0:0 -> a
    1:1:com.google.android.material.animation.MotionTiming createFromAnimator(android.animation.ValueAnimator):0 -> a
    2:2:com.google.android.material.animation.MotionTiming createFromAnimator(android.animation.ValueAnimator):0:0 -> a
com.google.android.material.appbar.AppBarLayout -> com.google.android.material.appbar.AppBarLayout:
    boolean liftable -> i
    boolean lifted -> j
    boolean liftOnScroll -> k
    androidx.core.view.WindowInsetsCompat lastInsets -> f
    int pendingAction -> e
    java.util.List listeners -> g
    boolean liftableOverride -> h
    int downPreScrollRange -> b
    int downScrollRange -> c
    int[] tmpStatesArray -> l
    int totalScrollRange -> a
    boolean haveChildWithInterpolator -> d
    1:1:void com.google.android.material.appbar.ViewUtilsLollipop.setBoundsViewOutlineProvider(android.view.View):0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet):0 -> <init>
    2:2:void <init>(android.content.Context,android.util.AttributeSet):0:0 -> <init>
    void dispatchOffsetUpdates(int) -> a
    int getDownNestedPreScrollRange() -> b
    int getDownNestedScrollRange() -> c
    int getPendingAction() -> d
    int getTopInset() -> e
    boolean hasChildWithInterpolator() -> f
    void invalidateScrollRanges() -> g
    androidx.core.view.WindowInsetsCompat onWindowInsetChanged(androidx.core.view.WindowInsetsCompat) -> h
    void resetPendingAction() -> i
    void setExpanded(boolean,boolean,boolean) -> j
    boolean setLiftedState(boolean) -> k
    1:1:boolean hasCollapsibleChild():0:0 -> onLayout
    1:1:void onLayout(boolean,int,int,int,int):0 -> onLayout
    2:2:boolean com.google.android.material.appbar.AppBarLayout$LayoutParams.isCollapsible():0:0 -> onLayout
    2:2:boolean hasCollapsibleChild():0 -> onLayout
    2:2:void onLayout(boolean,int,int,int,int):0 -> onLayout
    3:3:boolean setLiftableState(boolean):0:0 -> onLayout
    3:3:void onLayout(boolean,int,int,int,int):0 -> onLayout
    1:1:boolean setLiftableState(boolean):0:0 -> setLiftable
    1:1:boolean setLiftable(boolean):0 -> setLiftable
com.google.android.material.appbar.AppBarLayout$1 -> com.google.android.material.appbar.a:
    com.google.android.material.appbar.AppBarLayout this$0 -> a
com.google.android.material.appbar.AppBarLayout$BaseBehavior -> com.google.android.material.appbar.AppBarLayout$BaseBehavior:
    int offsetToChildIndexOnLayout -> n
    int lastStartedType -> l
    android.animation.ValueAnimator offsetAnimator -> m
    boolean offsetToChildIndexOnLayoutIsMinHeight -> o
    com.google.android.material.appbar.AppBarLayout$BaseBehavior$BaseDragCallback onDragCallback -> r
    int offsetDelta -> k
    java.lang.ref.WeakReference lastNestedScrollingChildRef -> q
    float offsetToChildIndexOnLayoutPerc -> p
    1:1:boolean canDragView(com.google.android.material.appbar.AppBarLayout):0:0 -> a
    1:1:boolean canDragView(android.view.View):0 -> a
    1:1:int getMaxDragOffset(com.google.android.material.appbar.AppBarLayout):0:0 -> b
    1:1:int getMaxDragOffset(android.view.View):0 -> b
    1:1:int getScrollRangeForDragFling(com.google.android.material.appbar.AppBarLayout):0:0 -> c
    1:1:int getScrollRangeForDragFling(android.view.View):0 -> c
    int getTopBottomOffsetForScrollingSibling() -> d
    1:1:void onFlingFinished(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout):0:0 -> e
    1:1:void onFlingFinished(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View):0 -> e
    1:1:int setHeaderTopBottomOffset(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout,int,int,int):0:0 -> h
    1:1:int setHeaderTopBottomOffset(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,int,int,int):0 -> h
    2:2:int interpolateOffset(com.google.android.material.appbar.AppBarLayout,int):0:0 -> h
    2:2:int setHeaderTopBottomOffset(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout,int,int,int):0 -> h
    2:2:int setHeaderTopBottomOffset(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,int,int,int):0 -> h
    3:3:int setHeaderTopBottomOffset(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout,int,int,int):0:0 -> h
    3:3:int setHeaderTopBottomOffset(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,int,int,int):0 -> h
    int access$000(com.google.android.material.appbar.AppBarLayout$BaseBehavior) -> i
    1:1:void animateOffsetWithDuration(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout,int,int):0:0 -> j
    1:1:void animateOffsetTo(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout,int,float):0 -> j
    boolean checkFlag(int,int) -> k
    1:1:int getChildIndexOnOffset(com.google.android.material.appbar.AppBarLayout,int):0:0 -> l
    1:1:void snapToChildIfNeeded(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout):0 -> l
    2:2:void snapToChildIfNeeded(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout):0:0 -> l
    void stopNestedScrollIfNeeded(int,com.google.android.material.appbar.AppBarLayout,android.view.View,int) -> m
    1:1:android.view.View getAppBarChildOnOffset(com.google.android.material.appbar.AppBarLayout,int):0:0 -> n
    1:1:void updateAppBarLayoutDrawableState(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout,int,int,boolean):0 -> n
    2:2:void updateAppBarLayoutDrawableState(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout,int,int,boolean):0:0 -> n
    3:3:android.view.View findFirstScrollingChild(androidx.coordinatorlayout.widget.CoordinatorLayout):0:0 -> n
    3:3:void updateAppBarLayoutDrawableState(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout,int,int,boolean):0 -> n
    4:4:void updateAppBarLayoutDrawableState(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout,int,int,boolean):0:0 -> n
    5:5:boolean shouldJumpElevationState(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout):0:0 -> n
    5:5:void updateAppBarLayoutDrawableState(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout,int,int,boolean):0 -> n
    6:6:void updateAppBarLayoutDrawableState(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout,int,int,boolean):0:0 -> n
    1:1:int com.google.android.material.appbar.AppBarLayout.getUpNestedPreScrollRange():0:0 -> onLayoutChild
    1:1:boolean onLayoutChild(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout,int):0 -> onLayoutChild
    2:4:boolean onLayoutChild(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout,int):0:0 -> onLayoutChild
    1:1:int com.google.android.material.appbar.AppBarLayout.getUpNestedPreScrollRange():0:0 -> onNestedPreScroll
    1:1:void onNestedPreScroll(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout,android.view.View,int,int,int[],int):0 -> onNestedPreScroll
    2:2:void onNestedPreScroll(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout,android.view.View,int,int,int[],int):0:0 -> onNestedPreScroll
    1:1:boolean com.google.android.material.appbar.AppBarLayout.hasScrollableChildren():0:0 -> onStartNestedScroll
    1:1:boolean canScrollChildren(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout,android.view.View):0 -> onStartNestedScroll
    1:1:boolean onStartNestedScroll(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout,android.view.View,android.view.View,int,int):0 -> onStartNestedScroll
    2:2:boolean canScrollChildren(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout,android.view.View):0:0 -> onStartNestedScroll
    2:2:boolean onStartNestedScroll(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout,android.view.View,android.view.View,int,int):0 -> onStartNestedScroll
    3:3:boolean onStartNestedScroll(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout,android.view.View,android.view.View,int,int):0:0 -> onStartNestedScroll
com.google.android.material.appbar.AppBarLayout$BaseBehavior$1 -> com.google.android.material.appbar.b:
    com.google.android.material.appbar.AppBarLayout val$child -> b
    com.google.android.material.appbar.AppBarLayout$BaseBehavior this$0 -> c
    androidx.coordinatorlayout.widget.CoordinatorLayout val$coordinatorLayout -> a
com.google.android.material.appbar.AppBarLayout$BaseBehavior$SavedState -> com.google.android.material.appbar.AppBarLayout$BaseBehavior$SavedState:
    float firstVisibleChildPercentageShown -> c
    int firstVisibleChildIndex -> b
    boolean firstVisibleChildAtMinimumHeight -> d
com.google.android.material.appbar.AppBarLayout$BaseBehavior$SavedState$1 -> com.google.android.material.appbar.c:
    1:1:com.google.android.material.appbar.AppBarLayout$BaseBehavior$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    2:2:com.google.android.material.appbar.AppBarLayout$BaseBehavior$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    2:2:java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader):0 -> createFromParcel
    1:1:com.google.android.material.appbar.AppBarLayout$BaseBehavior$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
com.google.android.material.appbar.AppBarLayout$LayoutParams -> com.google.android.material.appbar.AppBarLayout$LayoutParams:
    android.view.animation.Interpolator scrollInterpolator -> b
    int scrollFlags -> a
com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior -> com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior:
    android.view.View findFirstDependency(java.util.List) -> a
    1:1:int getAppBarLayoutOffset(com.google.android.material.appbar.AppBarLayout):0:0 -> c
    1:1:float getOverlapRatioForOffset(android.view.View):0 -> c
    1:1:int com.google.android.material.appbar.HeaderScrollingViewBehavior.getScrollRange(android.view.View):0:0 -> d
    1:1:int getScrollRange(android.view.View):0 -> d
    com.google.android.material.appbar.AppBarLayout findFirstDependency(java.util.List) -> f
    1:1:void offsetChildAsNeeded(android.view.View,android.view.View):0:0 -> onDependentViewChanged
    1:1:boolean onDependentViewChanged(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,android.view.View):0 -> onDependentViewChanged
    2:2:void updateLiftedStateIfNeeded(android.view.View,android.view.View):0:0 -> onDependentViewChanged
    2:2:boolean onDependentViewChanged(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,android.view.View):0 -> onDependentViewChanged
com.google.android.material.appbar.CollapsingToolbarLayout -> com.google.android.material.appbar.CollapsingToolbarLayout:
    boolean drawCollapsingTitle -> m
    com.google.android.material.internal.CollapsingTextHelper collapsingTextHelper -> k
    androidx.appcompat.widget.Toolbar toolbar -> c
    int expandedMarginEnd -> h
    int expandedMarginBottom -> i
    boolean collapsingTitleEnabled -> l
    int expandedMarginStart -> f
    int expandedMarginTop -> g
    androidx.core.view.WindowInsetsCompat lastInsets -> w
    int toolbarId -> b
    boolean scrimsAreShown -> q
    android.animation.ValueAnimator scrimAnimator -> r
    com.google.android.material.appbar.AppBarLayout$OnOffsetChangedListener onOffsetChangedListener -> u
    android.graphics.Rect tmpRect -> j
    int currentOffset -> v
    int scrimVisibleHeightTrigger -> t
    android.graphics.drawable.Drawable contentScrim -> n
    long scrimAnimationDuration -> s
    boolean refreshToolbar -> a
    android.view.View dummyView -> e
    android.graphics.drawable.Drawable statusBarScrim -> o
    android.view.View toolbarDirectChild -> d
    int scrimAlpha -> p
    1:1:android.view.View findDirectChild(android.view.View):0:0 -> a
    1:1:void ensureToolbar():0 -> a
    2:2:void ensureToolbar():0:0 -> a
    int getHeightWithMargins(android.view.View) -> b
    int getMaxOffsetForPinChild(android.view.View) -> c
    com.google.android.material.appbar.ViewOffsetHelper getViewOffsetHelper(android.view.View) -> d
    1:1:boolean isToolbarChild(android.view.View):0:0 -> drawChild
    1:1:boolean drawChild(android.graphics.Canvas,android.view.View,long):0 -> drawChild
    2:2:boolean drawChild(android.graphics.Canvas,android.view.View,long):0:0 -> drawChild
    void setScrimAlpha(int) -> e
    void updateDummyView() -> f
    void updateScrimVisibility() -> g
    1:1:void animateScrim(int):0:0 -> setScrimsShown
    1:1:void setScrimsShown(boolean,boolean):0 -> setScrimsShown
    2:2:void setScrimAlpha(int):0:0 -> setScrimsShown
    2:2:void setScrimsShown(boolean,boolean):0 -> setScrimsShown
    3:3:void setScrimsShown(boolean,boolean):0:0 -> setScrimsShown
    1:1:void updateContentDescriptionFromTitle():0:0 -> setTitle
    1:1:void setTitle(java.lang.CharSequence):0 -> setTitle
    1:1:void updateContentDescriptionFromTitle():0:0 -> setTitleEnabled
    1:1:void setTitleEnabled(boolean):0 -> setTitleEnabled
    2:2:void setTitleEnabled(boolean):0:0 -> setTitleEnabled
com.google.android.material.appbar.CollapsingToolbarLayout$1 -> com.google.android.material.appbar.d:
    com.google.android.material.appbar.CollapsingToolbarLayout this$0 -> a
    1:1:androidx.core.view.WindowInsetsCompat com.google.android.material.appbar.CollapsingToolbarLayout.onWindowInsetChanged(androidx.core.view.WindowInsetsCompat):0:0 -> onApplyWindowInsets
    1:1:androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat):0 -> onApplyWindowInsets
com.google.android.material.appbar.CollapsingToolbarLayout$2 -> com.google.android.material.appbar.e:
    com.google.android.material.appbar.CollapsingToolbarLayout this$0 -> a
com.google.android.material.appbar.CollapsingToolbarLayout$LayoutParams -> com.google.android.material.appbar.CollapsingToolbarLayout$LayoutParams:
    float parallaxMult -> b
    int collapseMode -> a
com.google.android.material.appbar.CollapsingToolbarLayout$OffsetUpdateListener -> com.google.android.material.appbar.f:
    com.google.android.material.appbar.CollapsingToolbarLayout this$0 -> a
com.google.android.material.appbar.HeaderBehavior -> com.google.android.material.appbar.HeaderBehavior:
    java.lang.Runnable flingRunnable -> d
    int lastMotionY -> h
    int touchSlop -> i
    android.view.VelocityTracker velocityTracker -> j
    boolean isBeingDragged -> f
    int activePointerId -> g
    android.widget.OverScroller scroller -> e
    boolean canDragView(android.view.View) -> a
    int getMaxDragOffset(android.view.View) -> b
    int getScrollRangeForDragFling(android.view.View) -> c
    int getTopBottomOffsetForScrollingSibling() -> d
    void onFlingFinished(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View) -> e
    int scroll(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,int,int,int) -> f
    int setHeaderTopBottomOffset(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,int) -> g
    int setHeaderTopBottomOffset(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,int,int,int) -> h
    1:1:void ensureVelocityTracker():0:0 -> onInterceptTouchEvent
    1:1:boolean onInterceptTouchEvent(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,android.view.MotionEvent):0 -> onInterceptTouchEvent
    2:2:boolean onInterceptTouchEvent(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,android.view.MotionEvent):0:0 -> onInterceptTouchEvent
    1:1:boolean fling(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,int,int,float):0:0 -> onTouchEvent
    1:1:boolean onTouchEvent(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,android.view.MotionEvent):0 -> onTouchEvent
    2:2:boolean onTouchEvent(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,android.view.MotionEvent):0:0 -> onTouchEvent
    3:3:void ensureVelocityTracker():0:0 -> onTouchEvent
    3:3:boolean onTouchEvent(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,android.view.MotionEvent):0 -> onTouchEvent
    4:4:boolean onTouchEvent(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,android.view.MotionEvent):0:0 -> onTouchEvent
com.google.android.material.appbar.HeaderBehavior$FlingRunnable -> com.google.android.material.appbar.g:
    androidx.coordinatorlayout.widget.CoordinatorLayout parent -> a
    com.google.android.material.appbar.HeaderBehavior this$0 -> c
    android.view.View layout -> b
com.google.android.material.appbar.HeaderScrollingViewBehavior -> com.google.android.material.appbar.HeaderScrollingViewBehavior:
    int verticalLayoutGap -> f
    int overlayTop -> g
    android.graphics.Rect tempRect2 -> e
    android.graphics.Rect tempRect1 -> d
    android.view.View findFirstDependency(java.util.List) -> a
    int getOverlapPixelsForOffset(android.view.View) -> b
    float getOverlapRatioForOffset(android.view.View) -> c
    int getScrollRange(android.view.View) -> d
    int getVerticalLayoutGap() -> e
com.google.android.material.appbar.ViewOffsetBehavior -> com.google.android.material.appbar.ViewOffsetBehavior:
    int tempTopBottomOffset -> b
    com.google.android.material.appbar.ViewOffsetHelper viewOffsetHelper -> a
    int tempLeftRightOffset -> c
com.google.android.material.appbar.ViewOffsetHelper -> com.google.android.material.appbar.h:
    android.view.View view -> a
    int offsetTop -> d
    int offsetLeft -> e
    int layoutTop -> b
    int layoutLeft -> c
    void updateOffsets() -> a
com.google.android.material.appbar.ViewUtilsLollipop -> com.google.android.material.appbar.i:
    int[] STATE_LIST_ANIM_ATTRS -> a
    void setDefaultAppBarLayoutStateListAnimator(android.view.View,float) -> a
    void setStateListAnimatorFromAttrs(android.view.View,android.util.AttributeSet,int,int) -> b
com.google.android.material.behavior.HideBottomViewOnScrollBehavior -> com.google.android.material.behavior.HideBottomViewOnScrollBehavior:
    android.view.ViewPropertyAnimator currentAnimator -> c
    int currentState -> b
    int height -> a
    android.view.ViewPropertyAnimator access$002(com.google.android.material.behavior.HideBottomViewOnScrollBehavior,android.view.ViewPropertyAnimator) -> a
    void animateChildTo(android.view.View,int,long,android.animation.TimeInterpolator) -> b
com.google.android.material.behavior.HideBottomViewOnScrollBehavior$1 -> com.google.android.material.behavior.a:
    com.google.android.material.behavior.HideBottomViewOnScrollBehavior this$0 -> a
com.google.android.material.behavior.SwipeDismissBehavior -> com.google.android.material.behavior.SwipeDismissBehavior:
    androidx.customview.widget.ViewDragHelper viewDragHelper -> a
    com.google.android.material.behavior.SwipeDismissBehavior$OnDismissListener listener -> b
    float alphaEndSwipeDistance -> i
    float alphaStartSwipeDistance -> h
    float dragDismissThreshold -> g
    androidx.customview.widget.ViewDragHelper$Callback dragCallback -> j
    float sensitivity -> d
    boolean sensitivitySet -> e
    int swipeDirection -> f
    boolean interceptingEvents -> c
    float clamp(float,float,float) -> a
    1:1:void ensureViewDragHelper(android.view.ViewGroup):0:0 -> onInterceptTouchEvent
    1:1:boolean onInterceptTouchEvent(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,android.view.MotionEvent):0 -> onInterceptTouchEvent
    2:2:boolean onInterceptTouchEvent(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,android.view.MotionEvent):0:0 -> onInterceptTouchEvent
com.google.android.material.behavior.SwipeDismissBehavior$1 -> com.google.android.material.behavior.b:
    com.google.android.material.behavior.SwipeDismissBehavior this$0 -> c
    int activePointerId -> b
    int originalCapturedViewLeft -> a
    1:1:int com.google.android.material.behavior.SwipeDismissBehavior.clamp(int,int,int):0:0 -> clampViewPositionHorizontal
    1:1:int clampViewPositionHorizontal(android.view.View,int,int):0 -> clampViewPositionHorizontal
    1:1:boolean shouldDismiss(android.view.View,float):0:0 -> onViewReleased
    1:1:void onViewReleased(android.view.View,float,float):0 -> onViewReleased
    2:2:void onViewReleased(android.view.View,float,float):0:0 -> onViewReleased
com.google.android.material.behavior.SwipeDismissBehavior$SettleRunnable -> com.google.android.material.behavior.c:
    com.google.android.material.behavior.SwipeDismissBehavior this$0 -> c
    android.view.View view -> a
    boolean dismiss -> b
com.google.android.material.bottomappbar.BottomAppBar -> com.google.android.material.bottomappbar.BottomAppBar:
    android.animation.Animator menuAnimator -> U
    com.google.android.material.bottomappbar.BottomAppBarTopEdgeTreatment topEdgeTreatment -> R
    boolean fabAttached -> a0
    android.animation.AnimatorListenerAdapter fabAnimationListener -> b0
    android.animation.Animator attachAnimator -> S
    android.animation.Animator modeAnimator -> T
    int fabAlignmentMode -> V
    boolean hideOnScroll -> W
    int fabOffsetEndMode -> P
    com.google.android.material.shape.MaterialShapeDrawable materialShapeDrawable -> Q
    android.animation.Animator access$302(com.google.android.material.bottomappbar.BottomAppBar,android.animation.Animator) -> A
    void access$400(com.google.android.material.bottomappbar.BottomAppBar,androidx.appcompat.widget.ActionMenuView,int,boolean) -> B
    android.animation.Animator access$502(com.google.android.material.bottomappbar.BottomAppBar,android.animation.Animator) -> C
    boolean access$600(com.google.android.material.bottomappbar.BottomAppBar) -> D
    1:1:void maybeAnimateAttachChange(boolean):0:0 -> E
    1:1:void access$700(com.google.android.material.bottomappbar.BottomAppBar,boolean):0 -> E
    2:2:void createCradleShapeAnimation(boolean,java.util.List):0:0 -> E
    2:2:void maybeAnimateAttachChange(boolean):0 -> E
    2:2:void access$700(com.google.android.material.bottomappbar.BottomAppBar,boolean):0 -> E
    3:3:void createFabTranslationYAnimation(boolean,java.util.List):0:0 -> E
    3:3:void maybeAnimateAttachChange(boolean):0 -> E
    3:3:void access$700(com.google.android.material.bottomappbar.BottomAppBar,boolean):0 -> E
    4:4:void maybeAnimateAttachChange(boolean):0:0 -> E
    4:4:void access$700(com.google.android.material.bottomappbar.BottomAppBar,boolean):0 -> E
    int access$800(com.google.android.material.bottomappbar.BottomAppBar) -> F
    void access$900(com.google.android.material.bottomappbar.BottomAppBar,int,boolean) -> G
    com.google.android.material.floatingactionbutton.FloatingActionButton findDependentFab() -> H
    androidx.appcompat.widget.ActionMenuView getActionMenuView() -> I
    float getFabTranslationX() -> J
    int getFabTranslationX(int) -> K
    float getFabTranslationY(boolean) -> L
    boolean isVisibleFab() -> M
    1:1:void createMenuViewTranslationAnimation(int,boolean,java.util.List):0:0 -> N
    1:1:void maybeAnimateMenuView(int,boolean):0 -> N
    2:2:void maybeAnimateMenuView(int,boolean):0:0 -> N
    1:1:float getFabTranslationY():0:0 -> O
    1:1:void setCutoutState():0 -> O
    2:2:void setCutoutState():0:0 -> O
    void setFabDiameter(int) -> P
    void translateActionMenuView(androidx.appcompat.widget.ActionMenuView,int,boolean) -> Q
    1:1:void cancelAnimations():0:0 -> onLayout
    1:1:void onLayout(boolean,int,int,int,int):0 -> onLayout
    2:2:void onLayout(boolean,int,int,int,int):0:0 -> onLayout
    1:1:void maybeAnimateModeChange(int):0:0 -> setFabAlignmentMode
    1:1:void setFabAlignmentMode(int):0 -> setFabAlignmentMode
    2:2:void createCradleTranslationAnimation(int,java.util.List):0:0 -> setFabAlignmentMode
    2:2:void maybeAnimateModeChange(int):0 -> setFabAlignmentMode
    2:2:void setFabAlignmentMode(int):0 -> setFabAlignmentMode
    3:3:void createFabTranslationXAnimation(int,java.util.List):0:0 -> setFabAlignmentMode
    3:3:void maybeAnimateModeChange(int):0 -> setFabAlignmentMode
    3:3:void setFabAlignmentMode(int):0 -> setFabAlignmentMode
    4:4:void maybeAnimateModeChange(int):0:0 -> setFabAlignmentMode
    4:4:void setFabAlignmentMode(int):0 -> setFabAlignmentMode
    5:5:void setFabAlignmentMode(int):0:0 -> setFabAlignmentMode
    android.animation.Animator access$002(com.google.android.material.bottomappbar.BottomAppBar,android.animation.Animator) -> t
    com.google.android.material.bottomappbar.BottomAppBarTopEdgeTreatment access$100(com.google.android.material.bottomappbar.BottomAppBar) -> u
    com.google.android.material.floatingactionbutton.FloatingActionButton access$1100(com.google.android.material.bottomappbar.BottomAppBar) -> v
    1:1:boolean isAnimationRunning():0:0 -> w
    1:1:boolean access$1200(com.google.android.material.bottomappbar.BottomAppBar):0 -> w
    void access$1300(com.google.android.material.bottomappbar.BottomAppBar) -> x
    1:1:float getFabTranslationY():0:0 -> y
    1:1:float access$1400(com.google.android.material.bottomappbar.BottomAppBar):0 -> y
    com.google.android.material.shape.MaterialShapeDrawable access$200(com.google.android.material.bottomappbar.BottomAppBar) -> z
com.google.android.material.bottomappbar.BottomAppBar$1 -> com.google.android.material.bottomappbar.a:
    com.google.android.material.bottomappbar.BottomAppBar this$0 -> a
com.google.android.material.bottomappbar.BottomAppBar$2 -> com.google.android.material.bottomappbar.b:
    com.google.android.material.bottomappbar.BottomAppBar this$0 -> a
com.google.android.material.bottomappbar.BottomAppBar$3 -> com.google.android.material.bottomappbar.c:
    com.google.android.material.bottomappbar.BottomAppBar this$0 -> a
com.google.android.material.bottomappbar.BottomAppBar$4 -> com.google.android.material.bottomappbar.d:
    com.google.android.material.bottomappbar.BottomAppBar this$0 -> e
    androidx.appcompat.widget.ActionMenuView val$actionMenuView -> b
    boolean cancelled -> a
    int val$targetMode -> c
    boolean val$targetAttached -> d
com.google.android.material.bottomappbar.BottomAppBar$5 -> com.google.android.material.bottomappbar.e:
    com.google.android.material.bottomappbar.BottomAppBar this$0 -> a
com.google.android.material.bottomappbar.BottomAppBar$6 -> com.google.android.material.bottomappbar.f:
    com.google.android.material.bottomappbar.BottomAppBar this$0 -> a
com.google.android.material.bottomappbar.BottomAppBar$7 -> com.google.android.material.bottomappbar.g:
    com.google.android.material.bottomappbar.BottomAppBar this$0 -> a
com.google.android.material.bottomappbar.BottomAppBar$Behavior -> com.google.android.material.bottomappbar.BottomAppBar$Behavior:
    android.graphics.Rect fabContentRect -> d
    1:1:boolean updateFabPositionAndVisibility(com.google.android.material.floatingactionbutton.FloatingActionButton,com.google.android.material.bottomappbar.BottomAppBar):0:0 -> onLayoutChild
    1:1:boolean onLayoutChild(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.bottomappbar.BottomAppBar,int):0 -> onLayoutChild
    2:2:void com.google.android.material.bottomappbar.BottomAppBar.removeFabAnimationListeners(com.google.android.material.floatingactionbutton.FloatingActionButton):0:0 -> onLayoutChild
    2:2:void com.google.android.material.bottomappbar.BottomAppBar.addFabAnimationListeners(com.google.android.material.floatingactionbutton.FloatingActionButton):0 -> onLayoutChild
    2:2:void com.google.android.material.bottomappbar.BottomAppBar.access$1000(com.google.android.material.bottomappbar.BottomAppBar,com.google.android.material.floatingactionbutton.FloatingActionButton):0 -> onLayoutChild
    2:2:boolean updateFabPositionAndVisibility(com.google.android.material.floatingactionbutton.FloatingActionButton,com.google.android.material.bottomappbar.BottomAppBar):0 -> onLayoutChild
    2:2:boolean onLayoutChild(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.bottomappbar.BottomAppBar,int):0 -> onLayoutChild
    3:3:void com.google.android.material.bottomappbar.BottomAppBar.addFabAnimationListeners(com.google.android.material.floatingactionbutton.FloatingActionButton):0:0 -> onLayoutChild
    3:3:void com.google.android.material.bottomappbar.BottomAppBar.access$1000(com.google.android.material.bottomappbar.BottomAppBar,com.google.android.material.floatingactionbutton.FloatingActionButton):0 -> onLayoutChild
    3:3:boolean updateFabPositionAndVisibility(com.google.android.material.floatingactionbutton.FloatingActionButton,com.google.android.material.bottomappbar.BottomAppBar):0 -> onLayoutChild
    3:3:boolean onLayoutChild(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.bottomappbar.BottomAppBar,int):0 -> onLayoutChild
    4:4:boolean onLayoutChild(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.bottomappbar.BottomAppBar,int):0:0 -> onLayoutChild
com.google.android.material.bottomappbar.BottomAppBar$SavedState -> com.google.android.material.bottomappbar.BottomAppBar$SavedState:
    int fabAlignmentMode -> b
    boolean fabAttached -> c
com.google.android.material.bottomappbar.BottomAppBar$SavedState$1 -> com.google.android.material.bottomappbar.h:
    1:1:com.google.android.material.bottomappbar.BottomAppBar$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    2:2:com.google.android.material.bottomappbar.BottomAppBar$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    2:2:java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader):0 -> createFromParcel
    1:1:com.google.android.material.bottomappbar.BottomAppBar$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
com.google.android.material.bottomappbar.BottomAppBarTopEdgeTreatment -> com.google.android.material.bottomappbar.BottomAppBarTopEdgeTreatment:
    float horizontalOffset -> e
    float cradleVerticalOffset -> d
    float fabDiameter -> c
    float fabMargin -> b
    float roundedCornerRadius -> a
    float getCradleVerticalOffset() -> a
    float getFabCradleMargin() -> b
    float getFabCradleRoundedCornerRadius() -> c
    float getFabDiameter() -> d
    float getHorizontalOffset() -> e
    void setCradleVerticalOffset(float) -> f
    void setFabCradleMargin(float) -> g
    void setFabCradleRoundedCornerRadius(float) -> h
    void setFabDiameter(float) -> i
    void setHorizontalOffset(float) -> j
com.google.android.material.bottomnavigation.BottomNavigationItemView -> com.google.android.material.bottomnavigation.BottomNavigationItemView:
    int itemPosition -> j
    float scaleDownFactor -> d
    float scaleUpFactor -> c
    float shiftAmount -> b
    int labelVisibilityMode -> e
    int defaultMargin -> a
    android.widget.ImageView icon -> g
    androidx.appcompat.view.menu.MenuItemImpl itemData -> k
    boolean isShifting -> f
    android.widget.TextView largeLabel -> i
    android.widget.TextView smallLabel -> h
    android.content.res.ColorStateList iconTint -> l
    int[] CHECKED_STATE_SET -> m
    void calculateTextScaleFactors(float,float) -> a
    void setViewLayoutParams(android.view.View,int,int) -> b
    void setViewValues(android.view.View,float,float,int) -> c
com.google.android.material.bottomnavigation.BottomNavigationMenuView -> com.google.android.material.bottomnavigation.BottomNavigationMenuView:
    android.content.res.ColorStateList itemTextColorFromUser -> p
    int selectedItemId -> l
    int[] CHECKED_STATE_SET -> y
    androidx.core.util.Pools$Pool itemPool -> h
    boolean itemHorizontalTranslationEnabled -> i
    int labelVisibilityMode -> j
    int itemHeight -> f
    com.google.android.material.bottomnavigation.BottomNavigationItemView[] buttons -> k
    int activeItemMaxWidth -> d
    int inactiveItemMaxWidth -> b
    android.view.View$OnClickListener onClickListener -> g
    android.graphics.drawable.Drawable itemBackground -> t
    int itemBackgroundRes -> u
    int itemTextAppearanceActive -> s
    int[] tempChildWidths -> v
    int itemIconSize -> o
    int selectedItemPosition -> m
    android.content.res.ColorStateList itemTextColorDefault -> q
    com.google.android.material.bottomnavigation.BottomNavigationPresenter presenter -> w
    int activeItemMinWidth -> e
    int[] DISABLED_STATE_SET -> z
    int inactiveItemMinWidth -> c
    androidx.appcompat.view.menu.MenuBuilder menu -> x
    androidx.transition.TransitionSet set -> a
    int itemTextAppearanceInactive -> r
    android.content.res.ColorStateList itemIconTint -> n
    com.google.android.material.bottomnavigation.BottomNavigationPresenter access$000(com.google.android.material.bottomnavigation.BottomNavigationMenuView) -> a
    androidx.appcompat.view.menu.MenuBuilder access$100(com.google.android.material.bottomnavigation.BottomNavigationMenuView) -> b
    1:1:com.google.android.material.bottomnavigation.BottomNavigationItemView getNewItem():0:0 -> buildMenuView
    1:1:void buildMenuView():0 -> buildMenuView
    2:2:void buildMenuView():0:0 -> buildMenuView
    boolean isShifting(int,int) -> c
    void tryRestoreSelectedItemId(int) -> d
com.google.android.material.bottomnavigation.BottomNavigationMenuView$1 -> com.google.android.material.bottomnavigation.a:
    com.google.android.material.bottomnavigation.BottomNavigationMenuView this$0 -> a
com.google.android.material.bottomnavigation.BottomNavigationPresenter -> com.google.android.material.bottomnavigation.BottomNavigationPresenter:
    androidx.appcompat.view.menu.MenuBuilder menu -> a
    int id -> d
    com.google.android.material.bottomnavigation.BottomNavigationMenuView menuView -> b
    boolean updateSuspended -> c
com.google.android.material.bottomnavigation.BottomNavigationPresenter$SavedState -> com.google.android.material.bottomnavigation.BottomNavigationPresenter$SavedState:
    int selectedItemId -> a
com.google.android.material.bottomnavigation.BottomNavigationPresenter$SavedState$1 -> com.google.android.material.bottomnavigation.b:
    1:1:com.google.android.material.bottomnavigation.BottomNavigationPresenter$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:com.google.android.material.bottomnavigation.BottomNavigationPresenter$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
com.google.android.material.bottomnavigation.BottomNavigationView -> com.google.android.material.bottomnavigation.BottomNavigationView:
    com.google.android.material.bottomnavigation.BottomNavigationView$OnNavigationItemReselectedListener reselectedListener -> f
    android.view.MenuInflater menuInflater -> d
    com.google.android.material.bottomnavigation.BottomNavigationPresenter presenter -> c
    androidx.appcompat.view.menu.MenuBuilder menu -> a
    com.google.android.material.bottomnavigation.BottomNavigationView$OnNavigationItemSelectedListener selectedListener -> e
    com.google.android.material.bottomnavigation.BottomNavigationMenuView menuView -> b
    com.google.android.material.bottomnavigation.BottomNavigationView$OnNavigationItemReselectedListener access$000(com.google.android.material.bottomnavigation.BottomNavigationView) -> a
    com.google.android.material.bottomnavigation.BottomNavigationView$OnNavigationItemSelectedListener access$100(com.google.android.material.bottomnavigation.BottomNavigationView) -> b
    1:1:android.view.MenuInflater getMenuInflater():0:0 -> inflateMenu
    1:1:void inflateMenu(int):0 -> inflateMenu
    2:2:void inflateMenu(int):0:0 -> inflateMenu
com.google.android.material.bottomnavigation.BottomNavigationView$1 -> com.google.android.material.bottomnavigation.c:
    com.google.android.material.bottomnavigation.BottomNavigationView this$0 -> a
com.google.android.material.bottomnavigation.BottomNavigationView$SavedState -> com.google.android.material.bottomnavigation.BottomNavigationView$SavedState:
    android.os.Bundle menuPresenterState -> b
    1:1:void readFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> <init>
    1:1:void <init>(android.os.Parcel,java.lang.ClassLoader):0 -> <init>
com.google.android.material.bottomnavigation.BottomNavigationView$SavedState$1 -> com.google.android.material.bottomnavigation.d:
    1:1:com.google.android.material.bottomnavigation.BottomNavigationView$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    2:2:com.google.android.material.bottomnavigation.BottomNavigationView$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    2:2:java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader):0 -> createFromParcel
    1:1:com.google.android.material.bottomnavigation.BottomNavigationView$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
com.google.android.material.bottomsheet.BottomSheetBehavior -> com.google.android.material.bottomsheet.BottomSheetBehavior:
    int state -> l
    int halfExpandedOffset -> h
    boolean skipCollapsed -> k
    int lastPeekHeight -> f
    java.util.Map importantForAccessibilityMap -> y
    java.lang.ref.WeakReference viewRef -> r
    androidx.customview.widget.ViewDragHelper viewDragHelper -> m
    com.google.android.material.bottomsheet.BottomSheetBehavior$BottomSheetCallback callback -> t
    int initialY -> w
    boolean peekHeightAuto -> d
    int parentHeight -> q
    boolean ignoreEvents -> n
    int lastNestedScrollDy -> o
    boolean nestedScrolled -> p
    boolean hideable -> j
    androidx.customview.widget.ViewDragHelper$Callback dragCallback -> z
    int collapsedOffset -> i
    int fitToContentsOffset -> g
    java.lang.ref.WeakReference nestedScrollingChildRef -> s
    float maximumVelocity -> b
    int peekHeightMin -> e
    boolean touchingScrollingChild -> x
    int peekHeight -> c
    int activePointerId -> v
    boolean fitToContents -> a
    android.view.VelocityTracker velocityTracker -> u
    boolean access$000(com.google.android.material.bottomsheet.BottomSheetBehavior) -> a
    int access$100(com.google.android.material.bottomsheet.BottomSheetBehavior) -> b
    void calculateCollapsedOffset() -> c
    void dispatchOnSlide(int) -> d
    android.view.View findScrollingChild(android.view.View) -> e
    int getExpandedOffset() -> f
    void setStateInternal(int) -> g
    boolean shouldHide(android.view.View,float) -> h
    void startSettlingAnimation(android.view.View,int) -> i
    void updateImportantForAccessibility(boolean) -> j
    1:1:void reset():0:0 -> onInterceptTouchEvent
    1:1:boolean onInterceptTouchEvent(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,android.view.MotionEvent):0 -> onInterceptTouchEvent
    2:2:boolean onInterceptTouchEvent(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,android.view.MotionEvent):0:0 -> onInterceptTouchEvent
    1:1:float getYVelocity():0:0 -> onStopNestedScroll
    1:1:void onStopNestedScroll(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,android.view.View,int):0 -> onStopNestedScroll
    2:2:void onStopNestedScroll(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,android.view.View,int):0:0 -> onStopNestedScroll
    1:1:void reset():0:0 -> onTouchEvent
    1:1:boolean onTouchEvent(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,android.view.MotionEvent):0 -> onTouchEvent
    2:2:boolean onTouchEvent(androidx.coordinatorlayout.widget.CoordinatorLayout,android.view.View,android.view.MotionEvent):0:0 -> onTouchEvent
com.google.android.material.bottomsheet.BottomSheetBehavior$1 -> com.google.android.material.bottomsheet.a:
    com.google.android.material.bottomsheet.BottomSheetBehavior this$0 -> c
    android.view.View val$child -> a
    int val$finalState -> b
com.google.android.material.bottomsheet.BottomSheetBehavior$2 -> com.google.android.material.bottomsheet.b:
    com.google.android.material.bottomsheet.BottomSheetBehavior this$0 -> a
com.google.android.material.bottomsheet.BottomSheetBehavior$SavedState -> com.google.android.material.bottomsheet.BottomSheetBehavior$SavedState:
    int state -> b
com.google.android.material.bottomsheet.BottomSheetBehavior$SavedState$1 -> com.google.android.material.bottomsheet.c:
    1:1:com.google.android.material.bottomsheet.BottomSheetBehavior$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    2:2:com.google.android.material.bottomsheet.BottomSheetBehavior$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    2:2:java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader):0 -> createFromParcel
    1:1:com.google.android.material.bottomsheet.BottomSheetBehavior$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
com.google.android.material.bottomsheet.BottomSheetBehavior$SettleRunnable -> com.google.android.material.bottomsheet.d:
    com.google.android.material.bottomsheet.BottomSheetBehavior this$0 -> c
    android.view.View view -> a
    int targetState -> b
com.google.android.material.bottomsheet.BottomSheetDialog -> com.google.android.material.bottomsheet.BottomSheetDialog:
    com.google.android.material.bottomsheet.BottomSheetBehavior behavior -> c
    com.google.android.material.bottomsheet.BottomSheetBehavior$BottomSheetCallback bottomSheetCallback -> g
    boolean canceledOnTouchOutside -> e
    boolean canceledOnTouchOutsideSet -> f
    boolean cancelable -> d
    1:1:int getThemeResId(android.content.Context,int):0:0 -> <init>
    1:1:void <init>(android.content.Context,int):0 -> <init>
    2:2:void <init>(android.content.Context,int):0:0 -> <init>
    boolean shouldWindowCloseOnTouchOutside() -> b
    android.view.View wrapInBottomSheet(int,android.view.View,android.view.ViewGroup$LayoutParams) -> c
com.google.android.material.bottomsheet.BottomSheetDialog$1 -> com.google.android.material.bottomsheet.e:
    com.google.android.material.bottomsheet.BottomSheetDialog this$0 -> a
com.google.android.material.bottomsheet.BottomSheetDialog$2 -> com.google.android.material.bottomsheet.f:
    com.google.android.material.bottomsheet.BottomSheetDialog this$0 -> c
com.google.android.material.bottomsheet.BottomSheetDialog$3 -> com.google.android.material.bottomsheet.g:
com.google.android.material.bottomsheet.BottomSheetDialog$4 -> com.google.android.material.bottomsheet.h:
    com.google.android.material.bottomsheet.BottomSheetDialog this$0 -> a
com.google.android.material.button.MaterialButton -> com.google.android.material.button.MaterialButton:
    com.google.android.material.button.MaterialButtonHelper materialButtonHelper -> c
    android.graphics.drawable.Drawable icon -> g
    int iconGravity -> j
    android.graphics.PorterDuff$Mode iconTintMode -> e
    android.content.res.ColorStateList iconTint -> f
    int iconSize -> h
    int iconLeft -> i
    int iconPadding -> d
    boolean isUsingOriginalBackground() -> a
    void setInternalBackground(android.graphics.drawable.Drawable) -> b
    void updateIcon() -> c
    1:1:boolean isLayoutRTL():0:0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:void onMeasure(int,int):0:0 -> onMeasure
com.google.android.material.button.MaterialButtonBackgroundDrawable -> com.google.android.material.button.a:
com.google.android.material.button.MaterialButtonHelper -> com.google.android.material.button.b:
    android.graphics.drawable.GradientDrawable maskDrawableLollipop -> q
    android.graphics.drawable.GradientDrawable backgroundDrawableLollipop -> o
    android.graphics.drawable.GradientDrawable strokeDrawableLollipop -> p
    int cornerRadius -> f
    int strokeWidth -> g
    int insetTop -> d
    int insetBottom -> e
    int insetLeft -> b
    int insetRight -> c
    boolean backgroundOverwritten -> r
    android.graphics.Paint buttonStrokePaint -> l
    android.graphics.RectF rectF -> n
    android.graphics.Rect bounds -> m
    com.google.android.material.button.MaterialButton materialButton -> a
    android.graphics.PorterDuff$Mode backgroundTintMode -> h
    android.content.res.ColorStateList strokeColor -> j
    android.content.res.ColorStateList backgroundTint -> i
    android.content.res.ColorStateList rippleColor -> k
    1:1:android.graphics.drawable.InsetDrawable wrapDrawableWithInset(android.graphics.drawable.Drawable):0:0 -> a
    1:1:android.graphics.drawable.Drawable createBackgroundLollipop():0 -> a
    2:2:android.graphics.drawable.Drawable createBackgroundLollipop():0:0 -> a
    int getCornerRadius() -> b
    android.content.res.ColorStateList getRippleColor() -> c
    android.content.res.ColorStateList getStrokeColor() -> d
    int getStrokeWidth() -> e
    android.content.res.ColorStateList getSupportBackgroundTintList() -> f
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode() -> g
    boolean isBackgroundOverwritten() -> h
    void setBackgroundColor(int) -> i
    void setBackgroundOverwritten() -> j
    void setCornerRadius(int) -> k
    void setRippleColor(android.content.res.ColorStateList) -> l
    1:1:void updateStroke():0:0 -> m
    1:1:void setStrokeColor(android.content.res.ColorStateList):0 -> m
    1:1:void updateStroke():0:0 -> n
    1:1:void setStrokeWidth(int):0 -> n
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> o
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> p
    void updateTintAndTintModeLollipop() -> q
com.google.android.material.card.MaterialCardView -> com.google.android.material.card.MaterialCardView:
    com.google.android.material.card.MaterialCardViewHelper cardViewHelper -> j
com.google.android.material.card.MaterialCardViewHelper -> com.google.android.material.card.a:
    com.google.android.material.card.MaterialCardView materialCardView -> a
    int strokeColor -> b
    int strokeWidth -> c
    void adjustContentPadding() -> a
    int getStrokeColor() -> b
    int getStrokeWidth() -> c
    void setStrokeColor(int) -> d
    void setStrokeWidth(int) -> e
    1:1:android.graphics.drawable.Drawable createForegroundDrawable():0:0 -> f
    1:1:void updateForeground():0 -> f
    2:2:void updateForeground():0:0 -> f
com.google.android.material.chip.Chip -> com.google.android.material.chip.Chip:
    boolean closeIconPressed -> i
    boolean closeIconHovered -> j
    int focusedVirtualView -> h
    boolean closeIconFocused -> k
    androidx.core.content.res.ResourcesCompat$FontCallback fontCallback -> o
    android.view.View$OnClickListener onCloseIconClickListener -> e
    android.graphics.RectF rectF -> n
    android.graphics.Rect EMPTY_BOUNDS -> p
    android.graphics.Rect rect -> m
    com.google.android.material.chip.ChipDrawable chipDrawable -> c
    android.widget.CompoundButton$OnCheckedChangeListener onCheckedChangeListenerInternal -> f
    com.google.android.material.chip.Chip$ChipTouchHelper touchHelper -> l
    boolean deferredCheckedValue -> g
    int[] SELECTED_STATE -> q
    android.graphics.drawable.RippleDrawable ripple -> d
    1:1:void validateAttributes(android.util.AttributeSet):0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    2:2:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    3:3:void initOutlineProvider():0:0 -> <init>
    3:3:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    4:4:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    5:5:void validateAttributes(android.util.AttributeSet):0:0 -> <init>
    5:5:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    com.google.android.material.chip.ChipDrawable access$000(com.google.android.material.chip.Chip) -> a
    1:1:boolean hasCloseIcon():0:0 -> b
    1:1:boolean access$100(com.google.android.material.chip.Chip):0 -> b
    android.graphics.RectF access$200(com.google.android.material.chip.Chip) -> c
    android.graphics.Rect access$300(com.google.android.material.chip.Chip) -> d
    1:1:boolean handleAccessibilityExit(android.view.MotionEvent):0:0 -> dispatchHoverEvent
    1:1:boolean dispatchHoverEvent(android.view.MotionEvent):0 -> dispatchHoverEvent
    2:2:boolean dispatchHoverEvent(android.view.MotionEvent):0:0 -> dispatchHoverEvent
    1:1:int[] createCloseIconDrawableState():0:0 -> drawableStateChanged
    1:1:void drawableStateChanged():0 -> drawableStateChanged
    2:2:void drawableStateChanged():0:0 -> drawableStateChanged
    android.graphics.Rect access$400() -> e
    1:1:boolean hasCloseIcon():0:0 -> f
    1:1:android.graphics.RectF getCloseIconTouchBounds():0 -> f
    2:2:android.graphics.RectF getCloseIconTouchBounds():0:0 -> f
    android.graphics.Rect getCloseIconTouchBoundsInt() -> g
    com.google.android.material.resources.TextAppearance getTextAppearance() -> h
    1:1:void ensureFocus():0:0 -> i
    1:1:boolean moveFocus(boolean):0 -> i
    2:2:boolean moveFocus(boolean):0:0 -> i
    void setCloseIconPressed(boolean) -> j
    1:1:void setCloseIconFocused(boolean):0:0 -> k
    1:1:void setFocusedVirtualView(int):0 -> k
    2:2:void setFocusedVirtualView(int):0:0 -> k
    3:3:void setCloseIconFocused(boolean):0:0 -> k
    3:3:void setFocusedVirtualView(int):0 -> k
    void setOnCheckedChangeListenerInternal(android.widget.CompoundButton$OnCheckedChangeListener) -> l
    void updatePaddingInternal() -> m
    void updateTextPaintDrawState(com.google.android.material.resources.TextAppearance) -> n
    1:1:float calculateTextOffsetFromStart(com.google.android.material.chip.ChipDrawable):0:0 -> onDraw
    1:1:void onDraw(android.graphics.Canvas):0 -> onDraw
    2:2:void onDraw(android.graphics.Canvas):0:0 -> onDraw
    1:1:void setCloseIconHovered(boolean):0:0 -> onHoverEvent
    1:1:boolean onHoverEvent(android.view.MotionEvent):0 -> onHoverEvent
    2:2:boolean onHoverEvent(android.view.MotionEvent):0:0 -> onHoverEvent
    3:3:void setCloseIconHovered(boolean):0:0 -> onHoverEvent
    3:3:boolean onHoverEvent(android.view.MotionEvent):0 -> onHoverEvent
    4:4:boolean onHoverEvent(android.view.MotionEvent):0:0 -> onHoverEvent
    1:1:void unapplyChipDrawable(com.google.android.material.chip.ChipDrawable):0:0 -> setChipDrawable
    1:1:void setChipDrawable(com.google.android.material.chip.ChipDrawable):0 -> setChipDrawable
    2:2:void setChipDrawable(com.google.android.material.chip.ChipDrawable):0:0 -> setChipDrawable
    3:3:void applyChipDrawable(com.google.android.material.chip.ChipDrawable):0:0 -> setChipDrawable
    3:3:void setChipDrawable(com.google.android.material.chip.ChipDrawable):0 -> setChipDrawable
    4:4:void setChipDrawable(com.google.android.material.chip.ChipDrawable):0:0 -> setChipDrawable
com.google.android.material.chip.Chip$1 -> com.google.android.material.chip.a:
    com.google.android.material.chip.Chip this$0 -> a
com.google.android.material.chip.Chip$2 -> com.google.android.material.chip.b:
    com.google.android.material.chip.Chip this$0 -> a
com.google.android.material.chip.Chip$ChipTouchHelper -> com.google.android.material.chip.c:
    com.google.android.material.chip.Chip this$0 -> p
com.google.android.material.chip.ChipDrawable -> com.google.android.material.chip.ChipDrawable:
    int currentCompatRippleColor -> O
    android.graphics.PorterDuffColorFilter tintFilter -> U
    float chipEndPadding -> F
    boolean textWidthDirty -> b0
    boolean checkedIconVisible -> u
    float chipCornerRadius -> c
    float textStartPadding -> B
    java.lang.CharSequence unicodeWrappedText -> h
    android.graphics.Paint chipPaint -> I
    android.graphics.drawable.Drawable chipIcon -> l
    android.graphics.drawable.Drawable closeIcon -> p
    int currentTextColor -> P
    float textWidth -> c0
    android.graphics.Paint$FontMetrics fontMetrics -> J
    android.content.res.ColorStateList closeIconTint -> q
    int maxWidth -> f0
    float textEndPadding -> C
    java.lang.CharSequence rawText -> g
    boolean currentChecked -> Q
    java.lang.ref.WeakReference delegate -> a0
    android.content.res.ColorStateList chipStrokeColor -> d
    android.graphics.ColorFilter colorFilter -> T
    boolean useCompatRipple -> Y
    boolean shouldDrawText -> e0
    boolean closeIconVisible -> o
    int[] closeIconStateSet -> X
    int currentChipBackgroundColor -> M
    boolean chipIconVisible -> k
    float chipStrokeWidth -> e
    float closeIconStartPadding -> D
    android.graphics.RectF rectF -> K
    com.google.android.material.resources.TextAppearance textAppearance -> i
    android.content.res.ColorStateList chipBackgroundColor -> a
    android.graphics.drawable.Drawable checkedIcon -> v
    float chipStartPadding -> y
    android.graphics.PointF pointF -> L
    java.lang.CharSequence closeIconContentDescription -> s
    com.google.android.material.animation.MotionSpec showMotionSpec -> w
    int currentTint -> R
    android.content.res.ColorStateList chipIconTint -> m
    int currentChipStrokeColor -> N
    android.content.res.ColorStateList tint -> V
    float closeIconEndPadding -> E
    android.graphics.PorterDuff$Mode tintMode -> W
    float chipMinHeight -> b
    android.content.res.ColorStateList compatRippleColor -> Z
    float iconEndPadding -> A
    android.content.Context context -> G
    boolean checkable -> t
    androidx.core.content.res.ResourcesCompat$FontCallback fontCallback -> j
    float iconStartPadding -> z
    android.text.TextUtils$TruncateAt truncateAt -> d0
    int[] DEFAULT_STATE -> g0
    android.content.res.ColorStateList rippleColor -> f
    float closeIconSize -> r
    com.google.android.material.animation.MotionSpec hideMotionSpec -> x
    int alpha -> S
    float chipIconSize -> n
    android.text.TextPaint textPaint -> H
    boolean access$002(com.google.android.material.chip.ChipDrawable,boolean) -> a
    void applyChildDrawable(android.graphics.drawable.Drawable) -> b
    void calculateChipIconBounds(android.graphics.Rect,android.graphics.RectF) -> c
    1:1:void loadFromAttributes(android.util.AttributeSet,int,int):0:0 -> createFromAttributes
    1:1:com.google.android.material.chip.ChipDrawable createFromAttributes(android.content.Context,android.util.AttributeSet,int,int):0 -> createFromAttributes
    float calculateChipIconWidth() -> d
    1:1:void drawChipBackground(android.graphics.Canvas,android.graphics.Rect):0:0 -> draw
    1:1:void draw(android.graphics.Canvas):0 -> draw
    2:2:android.graphics.ColorFilter getTintColorFilter():0:0 -> draw
    2:2:void drawChipBackground(android.graphics.Canvas,android.graphics.Rect):0 -> draw
    2:2:void draw(android.graphics.Canvas):0 -> draw
    3:3:void drawChipBackground(android.graphics.Canvas,android.graphics.Rect):0:0 -> draw
    3:3:void draw(android.graphics.Canvas):0 -> draw
    4:4:void drawChipStroke(android.graphics.Canvas,android.graphics.Rect):0:0 -> draw
    4:4:void draw(android.graphics.Canvas):0 -> draw
    5:5:android.graphics.ColorFilter getTintColorFilter():0:0 -> draw
    5:5:void drawChipStroke(android.graphics.Canvas,android.graphics.Rect):0 -> draw
    5:5:void draw(android.graphics.Canvas):0 -> draw
    6:6:void drawChipStroke(android.graphics.Canvas,android.graphics.Rect):0:0 -> draw
    6:6:void draw(android.graphics.Canvas):0 -> draw
    7:7:void drawCompatRipple(android.graphics.Canvas,android.graphics.Rect):0:0 -> draw
    7:7:void draw(android.graphics.Canvas):0 -> draw
    8:8:void drawChipIcon(android.graphics.Canvas,android.graphics.Rect):0:0 -> draw
    8:8:void draw(android.graphics.Canvas):0 -> draw
    9:9:void drawCheckedIcon(android.graphics.Canvas,android.graphics.Rect):0:0 -> draw
    9:9:void draw(android.graphics.Canvas):0 -> draw
    10:10:void draw(android.graphics.Canvas):0:0 -> draw
    11:11:void drawText(android.graphics.Canvas,android.graphics.Rect):0:0 -> draw
    11:11:void draw(android.graphics.Canvas):0 -> draw
    12:12:android.graphics.Paint$Align calculateTextOriginAndAlignment(android.graphics.Rect,android.graphics.PointF):0:0 -> draw
    12:12:void drawText(android.graphics.Canvas,android.graphics.Rect):0 -> draw
    12:12:void draw(android.graphics.Canvas):0 -> draw
    13:13:float calculateTextCenterFromBaseline():0:0 -> draw
    13:13:android.graphics.Paint$Align calculateTextOriginAndAlignment(android.graphics.Rect,android.graphics.PointF):0 -> draw
    13:13:void drawText(android.graphics.Canvas,android.graphics.Rect):0 -> draw
    13:13:void draw(android.graphics.Canvas):0 -> draw
    14:14:android.graphics.Paint$Align calculateTextOriginAndAlignment(android.graphics.Rect,android.graphics.PointF):0:0 -> draw
    14:14:void drawText(android.graphics.Canvas,android.graphics.Rect):0 -> draw
    14:14:void draw(android.graphics.Canvas):0 -> draw
    15:15:void drawText(android.graphics.Canvas,android.graphics.Rect):0:0 -> draw
    15:15:void draw(android.graphics.Canvas):0 -> draw
    16:16:void calculateTextBounds(android.graphics.Rect,android.graphics.RectF):0:0 -> draw
    16:16:void drawText(android.graphics.Canvas,android.graphics.Rect):0 -> draw
    16:16:void draw(android.graphics.Canvas):0 -> draw
    17:17:void drawText(android.graphics.Canvas,android.graphics.Rect):0:0 -> draw
    17:17:void draw(android.graphics.Canvas):0 -> draw
    18:18:void drawCloseIcon(android.graphics.Canvas,android.graphics.Rect):0:0 -> draw
    18:18:void draw(android.graphics.Canvas):0 -> draw
    19:19:void draw(android.graphics.Canvas):0:0 -> draw
    void calculateChipTouchBounds(android.graphics.Rect,android.graphics.RectF) -> e
    void calculateCloseIconBounds(android.graphics.Rect,android.graphics.RectF) -> f
    void calculateCloseIconTouchBounds(android.graphics.Rect,android.graphics.RectF) -> g
    float calculateCloseIconWidth() -> h
    1:1:float calculateTextWidth(java.lang.CharSequence):0:0 -> i
    1:1:float getTextWidth():0 -> i
    2:2:float getTextWidth():0:0 -> i
    1:1:boolean isStateful(com.google.android.material.resources.TextAppearance):0:0 -> isStateful
    1:1:boolean isStateful():0 -> isStateful
    2:2:boolean canShowCheckedIcon():0:0 -> isStateful
    2:2:boolean isStateful():0 -> isStateful
    3:3:boolean isStateful():0:0 -> isStateful
    boolean isStateful(android.content.res.ColorStateList) -> j
    boolean isStateful(android.graphics.drawable.Drawable) -> k
    1:1:boolean hasState(int[],int):0:0 -> l
    1:1:boolean onStateChange(int[],int[]):0 -> l
    2:2:boolean onStateChange(int[],int[]):0:0 -> l
    void setShouldDrawText(boolean) -> m
    boolean shouldDrawText() -> n
    boolean showsCheckedIcon() -> o
    boolean showsChipIcon() -> p
    boolean showsCloseIcon() -> q
    void unapplyChildDrawable(android.graphics.drawable.Drawable) -> r
    1:1:void updateCompatRippleColor():0:0 -> setRippleColor
    1:1:void setRippleColor(android.content.res.ColorStateList):0 -> setRippleColor
    2:2:void setRippleColor(android.content.res.ColorStateList):0:0 -> setRippleColor
    1:1:void updateCompatRippleColor():0:0 -> setUseCompatRipple
    1:1:void setUseCompatRipple(boolean):0 -> setUseCompatRipple
    2:2:void setUseCompatRipple(boolean):0:0 -> setUseCompatRipple
com.google.android.material.chip.ChipDrawable$1 -> com.google.android.material.chip.d:
    com.google.android.material.chip.ChipDrawable this$0 -> a
com.google.android.material.chip.ChipGroup -> com.google.android.material.chip.ChipGroup:
    com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener passThroughListener -> i
    int checkedId -> j
    boolean protectFromCheckedChange -> k
    boolean singleSelection -> f
    int chipSpacingHorizontal -> d
    int chipSpacingVertical -> e
    com.google.android.material.chip.ChipGroup$CheckedStateTracker checkedStateTracker -> h
    com.google.android.material.chip.ChipGroup$OnCheckedChangeListener onCheckedChangeListener -> g
    boolean access$300(com.google.android.material.chip.ChipGroup) -> b
    int access$400(com.google.android.material.chip.ChipGroup) -> c
    1:1:void setCheckedId(int):0:0 -> check
    1:1:void check(int):0 -> check
    boolean access$500(com.google.android.material.chip.ChipGroup) -> d
    void access$600(com.google.android.material.chip.ChipGroup,int,boolean) -> e
    1:1:void setCheckedId(int):0:0 -> f
    1:1:void access$700(com.google.android.material.chip.ChipGroup,int):0 -> f
    com.google.android.material.chip.ChipGroup$CheckedStateTracker access$800(com.google.android.material.chip.ChipGroup) -> g
    void setCheckedId(int) -> h
    void setCheckedStateForView(int,boolean) -> i
com.google.android.material.chip.ChipGroup$1 -> com.google.android.material.chip.e:
com.google.android.material.chip.ChipGroup$CheckedStateTracker -> com.google.android.material.chip.f:
    com.google.android.material.chip.ChipGroup this$0 -> a
    1:1:void <init>(com.google.android.material.chip.ChipGroup):0:0 -> <init>
    1:1:void <init>(com.google.android.material.chip.ChipGroup,com.google.android.material.chip.ChipGroup$1):0 -> <init>
com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener -> com.google.android.material.chip.g:
    android.view.ViewGroup$OnHierarchyChangeListener onHierarchyChangeListener -> a
    com.google.android.material.chip.ChipGroup this$0 -> b
    1:1:void <init>(com.google.android.material.chip.ChipGroup):0:0 -> <init>
    1:1:void <init>(com.google.android.material.chip.ChipGroup,com.google.android.material.chip.ChipGroup$1):0 -> <init>
    android.view.ViewGroup$OnHierarchyChangeListener access$202(com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener,android.view.ViewGroup$OnHierarchyChangeListener) -> a
com.google.android.material.circularreveal.CircularRevealCompat$1 -> com.google.android.material.circularreveal.a:
    com.google.android.material.circularreveal.CircularRevealWidget val$view -> a
com.google.android.material.circularreveal.CircularRevealFrameLayout -> com.google.android.material.circularreveal.CircularRevealFrameLayout:
    com.google.android.material.circularreveal.CircularRevealHelper helper -> a
com.google.android.material.circularreveal.CircularRevealGridLayout -> com.google.android.material.circularreveal.CircularRevealGridLayout:
    com.google.android.material.circularreveal.CircularRevealHelper helper -> a
com.google.android.material.circularreveal.CircularRevealHelper -> com.google.android.material.circularreveal.CircularRevealHelper:
    com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo revealInfo -> f
    android.graphics.drawable.Drawable overlayDrawable -> g
    boolean hasCircularRevealCache -> i
    android.graphics.Paint scrimPaint -> e
    android.graphics.Paint revealPaint -> d
    android.view.View view -> b
    boolean buildingCircularRevealCache -> h
    com.google.android.material.circularreveal.CircularRevealHelper$Delegate delegate -> a
    android.graphics.Path revealPath -> c
    float getDistanceToFurthestCorner(com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo) -> a
    boolean shouldDrawCircularReveal() -> b
    boolean shouldDrawScrim() -> c
    1:1:boolean shouldDrawOverlayDrawable():0:0 -> draw
    1:1:void drawOverlayDrawable(android.graphics.Canvas):0 -> draw
    1:1:void draw(android.graphics.Canvas):0 -> draw
    2:2:void drawOverlayDrawable(android.graphics.Canvas):0:0 -> draw
    2:2:void draw(android.graphics.Canvas):0 -> draw
    1:1:void invalidateRevealInfo():0:0 -> setRevealInfo
    1:1:void setRevealInfo(com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo):0 -> setRevealInfo
com.google.android.material.circularreveal.CircularRevealHelper$Delegate -> com.google.android.material.circularreveal.b:
com.google.android.material.circularreveal.CircularRevealLinearLayout -> com.google.android.material.circularreveal.CircularRevealLinearLayout:
    com.google.android.material.circularreveal.CircularRevealHelper helper -> a
com.google.android.material.circularreveal.CircularRevealRelativeLayout -> com.google.android.material.circularreveal.CircularRevealRelativeLayout:
    com.google.android.material.circularreveal.CircularRevealHelper helper -> a
com.google.android.material.circularreveal.CircularRevealWidget$1 -> com.google.android.material.circularreveal.c:
com.google.android.material.circularreveal.CircularRevealWidget$CircularRevealEvaluator -> com.google.android.material.circularreveal.CircularRevealWidget$CircularRevealEvaluator:
    com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo revealInfo -> a
com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo -> com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.android.material.circularreveal.CircularRevealWidget$1):0 -> <init>
com.google.android.material.circularreveal.cardview.CircularRevealCardView -> com.google.android.material.circularreveal.cardview.CircularRevealCardView:
    com.google.android.material.circularreveal.CircularRevealHelper helper -> j
com.google.android.material.circularreveal.coordinatorlayout.CircularRevealCoordinatorLayout -> com.google.android.material.circularreveal.coordinatorlayout.CircularRevealCoordinatorLayout:
    com.google.android.material.circularreveal.CircularRevealHelper helper -> y
com.google.android.material.expandable.ExpandableWidgetHelper -> com.google.android.material.expandable.ExpandableWidgetHelper:
    android.view.View widget -> a
    boolean expanded -> b
    int expandedComponentIdHint -> c
    1:1:void dispatchExpandedStateChanged():0:0 -> onRestoreInstanceState
    1:1:void onRestoreInstanceState(android.os.Bundle):0 -> onRestoreInstanceState
    1:1:void dispatchExpandedStateChanged():0:0 -> setExpanded
    1:1:boolean setExpanded(boolean):0 -> setExpanded
com.google.android.material.floatingactionbutton.FloatingActionButton -> com.google.android.material.floatingactionbutton.FloatingActionButton:
    int imagePadding -> j
    int maxImageSize -> k
    int size -> h
    int customSize -> i
    boolean compatPadding -> l
    int borderWidth -> f
    androidx.appcompat.widget.AppCompatImageHelper imageHelper -> o
    android.graphics.PorterDuff$Mode backgroundTintMode -> c
    android.content.res.ColorStateList backgroundTint -> b
    android.graphics.Rect shadowPadding -> m
    android.graphics.Rect touchArea -> n
    com.google.android.material.floatingactionbutton.FloatingActionButtonImpl impl -> q
    android.content.res.ColorStateList imageTint -> d
    android.graphics.PorterDuff$Mode imageMode -> e
    android.content.res.ColorStateList rippleColor -> g
    com.google.android.material.expandable.ExpandableWidgetHelper expandableWidgetHelper -> p
    1:1:void com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.setElevation(float):0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    2:2:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    3:3:void com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.setHoveredFocusedTranslationZ(float):0:0 -> <init>
    3:3:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    4:4:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    5:5:void com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.setPressedTranslationZ(float):0:0 -> <init>
    5:5:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    6:6:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    7:7:void com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.setMaxImageSize(int):0:0 -> <init>
    7:7:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    8:8:void com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.updateImageMatrixScale():0:0 -> <init>
    8:8:void com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.setMaxImageSize(int):0 -> <init>
    8:8:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    9:9:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    10:10:void com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.setShowMotionSpec(com.google.android.material.animation.MotionSpec):0:0 -> <init>
    10:10:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    11:11:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    12:12:void com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.setHideMotionSpec(com.google.android.material.animation.MotionSpec):0:0 -> <init>
    12:12:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    13:13:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    int access$000(com.google.android.material.floatingactionbutton.FloatingActionButton) -> a
    void access$101(com.google.android.material.floatingactionbutton.FloatingActionButton,android.graphics.drawable.Drawable) -> b
    1:1:com.google.android.material.floatingactionbutton.FloatingActionButtonImpl createImpl():0:0 -> c
    1:1:com.google.android.material.floatingactionbutton.FloatingActionButtonImpl getImpl():0 -> c
    2:2:com.google.android.material.floatingactionbutton.FloatingActionButtonImpl getImpl():0:0 -> c
    int getSizeDimension() -> d
    int getSizeDimension(int) -> e
    1:1:com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$InternalVisibilityChangedListener wrapOnVisibilityChangedListener(com.google.android.material.floatingactionbutton.FloatingActionButton$OnVisibilityChangedListener):0:0 -> f
    1:1:void hide(com.google.android.material.floatingactionbutton.FloatingActionButton$OnVisibilityChangedListener,boolean):0 -> f
    2:2:void hide(com.google.android.material.floatingactionbutton.FloatingActionButton$OnVisibilityChangedListener,boolean):0:0 -> f
    void offsetRectWithShadow(android.graphics.Rect) -> g
    1:1:float com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.getHoveredFocusedTranslationZ():0:0 -> getCompatHoveredFocusedTranslationZ
    1:1:float getCompatHoveredFocusedTranslationZ():0 -> getCompatHoveredFocusedTranslationZ
    1:1:float com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.getPressedTranslationZ():0:0 -> getCompatPressedTranslationZ
    1:1:float getCompatPressedTranslationZ():0 -> getCompatPressedTranslationZ
    1:1:android.graphics.drawable.Drawable com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.getContentBackground():0:0 -> getContentBackground
    1:1:android.graphics.drawable.Drawable getContentBackground():0 -> getContentBackground
    1:1:com.google.android.material.animation.MotionSpec com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.getHideMotionSpec():0:0 -> getHideMotionSpec
    1:1:com.google.android.material.animation.MotionSpec getHideMotionSpec():0 -> getHideMotionSpec
    1:1:com.google.android.material.animation.MotionSpec com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.getShowMotionSpec():0:0 -> getShowMotionSpec
    1:1:com.google.android.material.animation.MotionSpec getShowMotionSpec():0 -> getShowMotionSpec
    void onApplySupportImageTint() -> h
    int resolveAdjustedSize(int,int) -> i
    1:1:com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$InternalVisibilityChangedListener wrapOnVisibilityChangedListener(com.google.android.material.floatingactionbutton.FloatingActionButton$OnVisibilityChangedListener):0:0 -> j
    1:1:void show(com.google.android.material.floatingactionbutton.FloatingActionButton$OnVisibilityChangedListener,boolean):0 -> j
    2:2:void show(com.google.android.material.floatingactionbutton.FloatingActionButton$OnVisibilityChangedListener,boolean):0:0 -> j
    1:1:int getSizeDimension():0:0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:void onMeasure(int,int):0:0 -> onMeasure
    1:1:void com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.setBackgroundTintList(android.content.res.ColorStateList):0:0 -> setBackgroundTintList
    1:1:void setBackgroundTintList(android.content.res.ColorStateList):0 -> setBackgroundTintList
    1:1:void com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.setBackgroundTintMode(android.graphics.PorterDuff$Mode):0:0 -> setBackgroundTintMode
    1:1:void setBackgroundTintMode(android.graphics.PorterDuff$Mode):0 -> setBackgroundTintMode
    1:1:void com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.setElevation(float):0:0 -> setCompatElevation
    1:1:void setCompatElevation(float):0 -> setCompatElevation
    1:1:void com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.setHoveredFocusedTranslationZ(float):0:0 -> setCompatHoveredFocusedTranslationZ
    1:1:void setCompatHoveredFocusedTranslationZ(float):0 -> setCompatHoveredFocusedTranslationZ
    1:1:void com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.setPressedTranslationZ(float):0:0 -> setCompatPressedTranslationZ
    1:1:void setCompatPressedTranslationZ(float):0 -> setCompatPressedTranslationZ
    1:1:void com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.setHideMotionSpec(com.google.android.material.animation.MotionSpec):0:0 -> setHideMotionSpec
    1:1:void setHideMotionSpec(com.google.android.material.animation.MotionSpec):0 -> setHideMotionSpec
    1:1:void com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.updateImageMatrixScale():0:0 -> setImageDrawable
    1:1:void setImageDrawable(android.graphics.drawable.Drawable):0 -> setImageDrawable
    1:1:void com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.setShowMotionSpec(com.google.android.material.animation.MotionSpec):0:0 -> setShowMotionSpec
    1:1:void setShowMotionSpec(com.google.android.material.animation.MotionSpec):0 -> setShowMotionSpec
com.google.android.material.floatingactionbutton.FloatingActionButton$1 -> com.google.android.material.floatingactionbutton.a:
    com.google.android.material.floatingactionbutton.FloatingActionButton this$0 -> b
    com.google.android.material.floatingactionbutton.FloatingActionButton$OnVisibilityChangedListener val$listener -> a
com.google.android.material.floatingactionbutton.FloatingActionButton$BaseBehavior -> com.google.android.material.floatingactionbutton.FloatingActionButton$BaseBehavior:
    com.google.android.material.floatingactionbutton.FloatingActionButton$OnVisibilityChangedListener internalAutoHideListener -> b
    android.graphics.Rect tmpRect -> a
    boolean autoHideEnabled -> c
    boolean isBottomSheet(android.view.View) -> a
    boolean shouldUpdateVisibility(android.view.View,com.google.android.material.floatingactionbutton.FloatingActionButton) -> b
    boolean updateFabVisibilityForAppBarLayout(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.appbar.AppBarLayout,com.google.android.material.floatingactionbutton.FloatingActionButton) -> c
    boolean updateFabVisibilityForBottomSheet(android.view.View,com.google.android.material.floatingactionbutton.FloatingActionButton) -> d
    1:1:void offsetIfNeeded(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.floatingactionbutton.FloatingActionButton):0:0 -> onLayoutChild
    1:1:boolean onLayoutChild(androidx.coordinatorlayout.widget.CoordinatorLayout,com.google.android.material.floatingactionbutton.FloatingActionButton,int):0 -> onLayoutChild
com.google.android.material.floatingactionbutton.FloatingActionButton$ShadowDelegateImpl -> com.google.android.material.floatingactionbutton.b:
    com.google.android.material.floatingactionbutton.FloatingActionButton this$0 -> a
com.google.android.material.floatingactionbutton.FloatingActionButtonImpl -> com.google.android.material.floatingactionbutton.k:
    float rotation -> i
    android.animation.TimeInterpolator ELEVATION_ANIM_INTERPOLATOR -> B
    com.google.android.material.animation.MotionSpec showMotionSpec -> c
    com.google.android.material.animation.MotionSpec defaultShowMotionSpec -> e
    com.google.android.material.internal.StateListAnimator stateListAnimator -> g
    int[] ENABLED_STATE_SET -> G
    android.graphics.Matrix tmpMatrix -> z
    int[] PRESSED_ENABLED_STATE_SET -> C
    int[] FOCUSED_ENABLED_STATE_SET -> E
    android.graphics.RectF tmpRectF1 -> x
    java.util.ArrayList showListeners -> s
    float hoveredFocusedTranslationZ -> o
    int maxImageSize -> q
    com.google.android.material.internal.VisibilityAwareImageButton view -> u
    android.graphics.drawable.Drawable shapeDrawable -> j
    com.google.android.material.shadow.ShadowDrawableWrapper shadowDrawable -> h
    com.google.android.material.animation.MotionSpec hideMotionSpec -> d
    com.google.android.material.animation.MotionSpec defaultHideMotionSpec -> f
    int animState -> a
    int[] HOVERED_ENABLED_STATE_SET -> F
    int[] EMPTY_STATE_SET -> H
    com.google.android.material.internal.CircularBorderDrawable borderDrawable -> l
    android.animation.Animator currentAnimator -> b
    int[] HOVERED_FOCUSED_ENABLED_STATE_SET -> D
    android.graphics.drawable.Drawable rippleDrawable -> k
    android.graphics.Rect tmpRect -> w
    android.view.ViewTreeObserver$OnPreDrawListener preDrawListener -> A
    android.graphics.drawable.Drawable contentBackground -> m
    float imageMatrixScale -> r
    java.util.ArrayList hideListeners -> t
    android.graphics.RectF tmpRectF2 -> y
    float pressedTranslationZ -> p
    float elevation -> n
    com.google.android.material.shadow.ShadowViewDelegate shadowViewDelegate -> v
    1:1:com.google.android.material.animation.MotionSpec getDefaultShowMotionSpec():0:0 -> A
    1:1:void show(com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$InternalVisibilityChangedListener,boolean):0 -> A
    2:2:void show(com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$InternalVisibilityChangedListener,boolean):0:0 -> A
    3:3:void com.google.android.material.floatingactionbutton.FloatingActionButton$1.onShown():0:0 -> A
    3:3:void show(com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$InternalVisibilityChangedListener,boolean):0 -> A
    void updatePadding() -> B
    void addOnShowAnimationListener(android.animation.Animator$AnimatorListener) -> a
    void calculateImageMatrixFromScale(float,android.graphics.Matrix) -> b
    android.animation.AnimatorSet createAnimator(com.google.android.material.animation.MotionSpec,float,float,float) -> c
    com.google.android.material.internal.CircularBorderDrawable createBorderDrawable(int,android.content.res.ColorStateList) -> d
    android.animation.ValueAnimator createElevationAnimator(com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$ShadowAnimatorImpl) -> e
    android.graphics.drawable.GradientDrawable createShapeDrawable() -> f
    void getPadding(android.graphics.Rect) -> g
    1:1:com.google.android.material.animation.MotionSpec getDefaultHideMotionSpec():0:0 -> h
    1:1:void hide(com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$InternalVisibilityChangedListener,boolean):0 -> h
    2:2:void hide(com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$InternalVisibilityChangedListener,boolean):0:0 -> h
    3:3:void com.google.android.material.floatingactionbutton.FloatingActionButton$1.onHidden():0:0 -> h
    3:3:void hide(com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$InternalVisibilityChangedListener,boolean):0 -> h
    boolean isOrWillBeHidden() -> i
    boolean isOrWillBeShown() -> j
    void jumpDrawableToCurrentState() -> k
    com.google.android.material.internal.CircularBorderDrawable newCircularDrawable() -> l
    android.graphics.drawable.GradientDrawable newGradientDrawableForShape() -> m
    1:1:void ensurePreDrawListener():0:0 -> n
    1:1:void onAttachedToWindow():0 -> n
    2:2:void onAttachedToWindow():0:0 -> n
    void onCompatShadowChanged() -> o
    void onDetachedFromWindow() -> p
    void onDrawableStateChanged(int[]) -> q
    void onElevationsChanged(float,float,float) -> r
    void onPaddingUpdated(android.graphics.Rect) -> s
    1:1:void updateFromViewRotation():0:0 -> t
    1:1:void onPreDraw():0 -> t
    void removeOnShowAnimationListener(android.animation.Animator$AnimatorListener) -> u
    boolean requirePreDrawListener() -> v
    void setBackgroundDrawable(android.content.res.ColorStateList,android.graphics.PorterDuff$Mode,android.content.res.ColorStateList,int) -> w
    void setImageMatrixScale(float) -> x
    void setRippleColor(android.content.res.ColorStateList) -> y
    boolean shouldAnimateVisibilityChange() -> z
com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$1 -> com.google.android.material.floatingactionbutton.c:
    com.google.android.material.floatingactionbutton.FloatingActionButtonImpl this$0 -> d
    boolean cancelled -> a
    boolean val$fromUser -> b
    com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$InternalVisibilityChangedListener val$listener -> c
    1:1:void com.google.android.material.floatingactionbutton.FloatingActionButton$1.onHidden():0:0 -> onAnimationEnd
    1:1:void onAnimationEnd(android.animation.Animator):0 -> onAnimationEnd
com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$2 -> com.google.android.material.floatingactionbutton.d:
    com.google.android.material.floatingactionbutton.FloatingActionButtonImpl this$0 -> c
    boolean val$fromUser -> a
    com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$InternalVisibilityChangedListener val$listener -> b
    1:1:void com.google.android.material.floatingactionbutton.FloatingActionButton$1.onShown():0:0 -> onAnimationEnd
    1:1:void onAnimationEnd(android.animation.Animator):0 -> onAnimationEnd
com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$3 -> com.google.android.material.floatingactionbutton.e:
    com.google.android.material.floatingactionbutton.FloatingActionButtonImpl this$0 -> a
com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$DisabledElevationAnimation -> com.google.android.material.floatingactionbutton.f:
com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$ElevateToHoveredFocusedTranslationZAnimation -> com.google.android.material.floatingactionbutton.g:
    com.google.android.material.floatingactionbutton.FloatingActionButtonImpl this$0 -> e
com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$ElevateToPressedTranslationZAnimation -> com.google.android.material.floatingactionbutton.h:
    com.google.android.material.floatingactionbutton.FloatingActionButtonImpl this$0 -> e
com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$ResetElevationAnimation -> com.google.android.material.floatingactionbutton.i:
    com.google.android.material.floatingactionbutton.FloatingActionButtonImpl this$0 -> e
com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$ShadowAnimatorImpl -> com.google.android.material.floatingactionbutton.j:
    com.google.android.material.floatingactionbutton.FloatingActionButtonImpl this$0 -> d
    float shadowSizeEnd -> c
    float shadowSizeStart -> b
    boolean validValues -> a
    1:1:void <init>(com.google.android.material.floatingactionbutton.FloatingActionButtonImpl):0:0 -> <init>
    1:1:void <init>(com.google.android.material.floatingactionbutton.FloatingActionButtonImpl,com.google.android.material.floatingactionbutton.FloatingActionButtonImpl$1):0 -> <init>
com.google.android.material.floatingactionbutton.FloatingActionButtonImplLollipop -> com.google.android.material.floatingactionbutton.m:
    android.graphics.drawable.InsetDrawable insetDrawable -> I
    android.animation.Animator createElevationAnimator(float,float) -> C
    1:1:float getElevation():0:0 -> g
    1:1:void getPadding(android.graphics.Rect):0 -> g
    2:2:void getPadding(android.graphics.Rect):0:0 -> g
    void jumpDrawableToCurrentState() -> k
    com.google.android.material.internal.CircularBorderDrawable newCircularDrawable() -> l
    android.graphics.drawable.GradientDrawable newGradientDrawableForShape() -> m
    void onCompatShadowChanged() -> o
    void onDrawableStateChanged(int[]) -> q
    void onElevationsChanged(float,float,float) -> r
    void onPaddingUpdated(android.graphics.Rect) -> s
    boolean requirePreDrawListener() -> v
    void setBackgroundDrawable(android.content.res.ColorStateList,android.graphics.PorterDuff$Mode,android.content.res.ColorStateList,int) -> w
    1:1:void com.google.android.material.floatingactionbutton.FloatingActionButtonImpl.setRippleColor(android.content.res.ColorStateList):0:0 -> y
    1:1:void setRippleColor(android.content.res.ColorStateList):0 -> y
com.google.android.material.floatingactionbutton.FloatingActionButtonImplLollipop$AlwaysStatefulGradientDrawable -> com.google.android.material.floatingactionbutton.l:
com.google.android.material.internal.BaselineLayout -> com.google.android.material.internal.BaselineLayout:
    int baseline -> a
com.google.android.material.internal.CheckableImageButton -> com.google.android.material.internal.CheckableImageButton:
    int[] DRAWABLE_STATE_CHECKED -> d
    boolean checked -> c
com.google.android.material.internal.CheckableImageButton$1 -> com.google.android.material.internal.a:
    com.google.android.material.internal.CheckableImageButton this$0 -> c
com.google.android.material.internal.CircularBorderDrawable -> com.google.android.material.internal.CircularBorderDrawable:
    com.google.android.material.internal.CircularBorderDrawable$CircularBorderState state -> d
    android.graphics.RectF rectF -> c
    int currentBorderTintColor -> k
    int bottomOuterStrokeColor -> h
    float borderWidth -> e
    int bottomInnerStrokeColor -> i
    boolean invalidateShader -> l
    int topOuterStrokeColor -> f
    int topInnerStrokeColor -> g
    android.graphics.Rect rect -> b
    android.graphics.Paint paint -> a
    android.content.res.ColorStateList borderTint -> j
    float rotation -> m
    1:1:android.graphics.Shader createGradientShader():0:0 -> draw
    1:1:void draw(android.graphics.Canvas):0 -> draw
    2:2:void draw(android.graphics.Canvas):0:0 -> draw
com.google.android.material.internal.CircularBorderDrawable$1 -> com.google.android.material.internal.b:
com.google.android.material.internal.CircularBorderDrawable$CircularBorderState -> com.google.android.material.internal.c:
    com.google.android.material.internal.CircularBorderDrawable this$0 -> a
    1:1:void <init>(com.google.android.material.internal.CircularBorderDrawable):0:0 -> <init>
    1:1:void <init>(com.google.android.material.internal.CircularBorderDrawable,com.google.android.material.internal.CircularBorderDrawable$1):0 -> <init>
com.google.android.material.internal.CollapsingTextHelper -> com.google.android.material.internal.CollapsingTextHelper:
    float expandedShadowRadius -> L
    int expandedShadowColor -> O
    float collapsedShadowDy -> J
    float expandedTextSize -> i
    float collapsedShadowRadius -> H
    int collapsedShadowColor -> K
    android.graphics.RectF currentBounds -> f
    int collapsedTextGravity -> h
    android.animation.TimeInterpolator positionInterpolator -> F
    float expandedFraction -> c
    android.graphics.Rect collapsedBounds -> e
    android.graphics.Typeface collapsedTypeface -> s
    android.text.TextPaint tmpPaint -> E
    android.view.View view -> a
    float currentDrawX -> q
    java.lang.CharSequence textToDraw -> w
    boolean drawTitle -> b
    android.content.res.ColorStateList expandedTextColor -> k
    float expandedDrawX -> o
    android.graphics.Typeface currentTypeface -> u
    boolean boundsChanged -> C
    float expandedShadowDy -> N
    float expandedDrawY -> m
    android.graphics.Bitmap expandedTitleTexture -> y
    float collapsedTextSize -> j
    float collapsedShadowDx -> I
    int expandedTextGravity -> g
    android.animation.TimeInterpolator textSizeInterpolator -> G
    boolean isRtl -> x
    float currentTextSize -> A
    android.graphics.Rect expandedBounds -> d
    float scale -> z
    android.text.TextPaint textPaint -> D
    int[] state -> B
    float currentDrawY -> r
    java.lang.CharSequence text -> v
    android.content.res.ColorStateList collapsedTextColor -> l
    float collapsedDrawX -> p
    android.graphics.Typeface expandedTypeface -> t
    float collapsedDrawY -> n
    float expandedShadowDx -> M
    int blendColors(int,int,float) -> a
    boolean calculateIsRtl(java.lang.CharSequence) -> b
    1:1:void interpolateBounds(float):0:0 -> c
    1:1:void calculateOffsets(float):0 -> c
    2:2:void calculateOffsets(float):0:0 -> c
    3:3:int getCurrentExpandedTextColor():0:0 -> c
    3:3:void calculateOffsets(float):0 -> c
    4:4:void calculateOffsets(float):0:0 -> c
    1:1:void getTextPaintCollapsed(android.text.TextPaint):0:0 -> calculateCollapsedTextWidth
    1:1:float calculateCollapsedTextWidth():0 -> calculateCollapsedTextWidth
    2:2:float calculateCollapsedTextWidth():0:0 -> calculateCollapsedTextWidth
    1:1:boolean isClose(float,float):0:0 -> d
    1:1:void calculateUsingTextSize(float):0 -> d
    2:2:void calculateUsingTextSize(float):0:0 -> d
    3:3:boolean isClose(float,float):0:0 -> d
    3:3:void calculateUsingTextSize(float):0 -> d
    4:4:void calculateUsingTextSize(float):0:0 -> d
    float lerp(float,float,float,android.animation.TimeInterpolator) -> e
    void onBoundsChanged() -> f
    android.graphics.Typeface readFontFamilyTypeface(int) -> g
    1:1:void getTextPaintCollapsed(android.text.TextPaint):0:0 -> getCollapsedTextHeight
    1:1:float getCollapsedTextHeight():0 -> getCollapsedTextHeight
    2:2:float getCollapsedTextHeight():0:0 -> getCollapsedTextHeight
    boolean rectEquals(android.graphics.Rect,int,int,int,int) -> h
    void setInterpolatedTextSize(float) -> i
    1:1:void calculateBaseOffsets():0:0 -> recalculate
    1:1:void recalculate():0 -> recalculate
    2:2:void clearTexture():0:0 -> recalculate
    2:2:void calculateBaseOffsets():0 -> recalculate
    2:2:void recalculate():0 -> recalculate
    3:3:void setInterpolatedTextSize(float):0:0 -> recalculate
    3:3:void calculateBaseOffsets():0 -> recalculate
    3:3:void recalculate():0 -> recalculate
    4:4:void calculateCurrentOffsets():0:0 -> recalculate
    4:4:void recalculate():0 -> recalculate
    1:1:void calculateCurrentOffsets():0:0 -> setExpansionFraction
    1:1:void setExpansionFraction(float):0 -> setExpansionFraction
    1:1:void clearTexture():0:0 -> setText
    1:1:void setText(java.lang.CharSequence):0 -> setText
    2:2:void setText(java.lang.CharSequence):0:0 -> setText
com.google.android.material.internal.DescendantOffsetUtils -> com.google.android.material.internal.DescendantOffsetUtils:
    java.lang.ThreadLocal matrix -> a
    java.lang.ThreadLocal rectF -> b
    void offsetDescendantMatrix(android.view.ViewParent,android.view.View,android.graphics.Matrix) -> a
com.google.android.material.internal.DrawableUtils -> com.google.android.material.internal.DrawableUtils:
    boolean setConstantStateMethodFetched -> b
    java.lang.reflect.Method setConstantStateMethod -> a
    1:1:boolean setContainerConstantStateV9(android.graphics.drawable.DrawableContainer,android.graphics.drawable.Drawable$ConstantState):0:0 -> setContainerConstantState
    1:1:boolean setContainerConstantState(android.graphics.drawable.DrawableContainer,android.graphics.drawable.Drawable$ConstantState):0 -> setContainerConstantState
com.google.android.material.internal.FlowLayout -> com.google.android.material.internal.FlowLayout:
    int itemSpacing -> b
    boolean singleLine -> c
    int lineSpacing -> a
    void loadFromAttributes(android.content.Context,android.util.AttributeSet) -> a
    1:1:int getMeasuredDimension(int,int,int):0:0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:void onMeasure(int,int):0:0 -> onMeasure
com.google.android.material.internal.ForegroundLinearLayout -> com.google.android.material.internal.ForegroundLinearLayout:
    android.graphics.drawable.Drawable foreground -> p
    int foregroundGravity -> s
    android.graphics.Rect selfBounds -> q
    android.graphics.Rect overlayBounds -> r
    boolean foregroundBoundsChanged -> t
com.google.android.material.internal.NavigationMenuItemView -> com.google.android.material.internal.NavigationMenuItemView:
    android.graphics.drawable.Drawable emptyDrawable -> C
    android.content.res.ColorStateList iconTintList -> A
    androidx.appcompat.view.menu.MenuItemImpl itemData -> z
    int[] CHECKED_STATE_SET -> E
    android.widget.FrameLayout actionArea -> y
    boolean needsEmptyIcon -> v
    boolean checkable -> w
    int iconSize -> u
    boolean hasIconTintList -> B
    androidx.core.view.AccessibilityDelegateCompat accessibilityDelegate -> D
    android.widget.CheckedTextView textView -> x
    void setIconTintList(android.content.res.ColorStateList) -> h
    1:1:android.graphics.drawable.StateListDrawable createDefaultBackground():0:0 -> initialize
    1:1:void initialize(androidx.appcompat.view.menu.MenuItemImpl,int):0 -> initialize
    2:2:void initialize(androidx.appcompat.view.menu.MenuItemImpl,int):0:0 -> initialize
    3:3:void setActionView(android.view.View):0:0 -> initialize
    3:3:void initialize(androidx.appcompat.view.menu.MenuItemImpl,int):0 -> initialize
    4:4:void initialize(androidx.appcompat.view.menu.MenuItemImpl,int):0:0 -> initialize
    5:5:boolean shouldExpandActionArea():0:0 -> initialize
    5:5:void adjustAppearance():0 -> initialize
    5:5:void initialize(androidx.appcompat.view.menu.MenuItemImpl,int):0 -> initialize
    6:6:void adjustAppearance():0:0 -> initialize
    6:6:void initialize(androidx.appcompat.view.menu.MenuItemImpl,int):0 -> initialize
com.google.android.material.internal.NavigationMenuItemView$1 -> com.google.android.material.internal.d:
    com.google.android.material.internal.NavigationMenuItemView this$0 -> c
com.google.android.material.internal.NavigationMenuPresenter -> com.google.android.material.internal.NavigationMenuPresenter:
    android.widget.LinearLayout headerLayout -> b
    int itemIconPadding -> n
    android.view.LayoutInflater layoutInflater -> g
    int paddingTopDefault -> o
    androidx.appcompat.view.menu.MenuBuilder menu -> d
    int itemHorizontalPadding -> m
    boolean textAppearanceSet -> i
    int textAppearance -> h
    com.google.android.material.internal.NavigationMenuView menuView -> a
    com.google.android.material.internal.NavigationMenuPresenter$NavigationMenuAdapter adapter -> f
    int id -> e
    androidx.appcompat.view.menu.MenuPresenter$Callback callback -> c
    android.graphics.drawable.Drawable itemBackground -> l
    android.view.View$OnClickListener onClickListener -> q
    android.content.res.ColorStateList textColor -> j
    android.content.res.ColorStateList iconTintList -> k
    int paddingSeparator -> p
com.google.android.material.internal.NavigationMenuPresenter$1 -> com.google.android.material.internal.e:
    com.google.android.material.internal.NavigationMenuPresenter this$0 -> a
com.google.android.material.internal.NavigationMenuPresenter$HeaderViewHolder -> com.google.android.material.internal.f:
com.google.android.material.internal.NavigationMenuPresenter$NavigationMenuAdapter -> com.google.android.material.internal.g:
    boolean updateSuspended -> e
    com.google.android.material.internal.NavigationMenuPresenter this$0 -> f
    java.util.ArrayList items -> c
    androidx.appcompat.view.menu.MenuItemImpl checkedItem -> d
    1:1:void appendTransparentIconIfMissing(int,int):0:0 -> a
    1:1:void prepareMenuItems():0 -> a
    2:2:void prepareMenuItems():0:0 -> a
    3:3:void appendTransparentIconIfMissing(int,int):0:0 -> a
    3:3:void prepareMenuItems():0 -> a
    4:4:void prepareMenuItems():0:0 -> a
    1:1:void onBindViewHolder(com.google.android.material.internal.NavigationMenuPresenter$ViewHolder,int):0:0 -> onBindViewHolder
    1:1:void onBindViewHolder(androidx.recyclerview.widget.RecyclerView$ViewHolder,int):0 -> onBindViewHolder
    1:1:com.google.android.material.internal.NavigationMenuPresenter$ViewHolder onCreateViewHolder(android.view.ViewGroup,int):0:0 -> onCreateViewHolder
    1:1:androidx.recyclerview.widget.RecyclerView$ViewHolder onCreateViewHolder(android.view.ViewGroup,int):0 -> onCreateViewHolder
    1:1:void onViewRecycled(com.google.android.material.internal.NavigationMenuPresenter$ViewHolder):0:0 -> onViewRecycled
    1:1:void onViewRecycled(androidx.recyclerview.widget.RecyclerView$ViewHolder):0 -> onViewRecycled
com.google.android.material.internal.NavigationMenuPresenter$NavigationMenuHeaderItem -> com.google.android.material.internal.h:
com.google.android.material.internal.NavigationMenuPresenter$NavigationMenuItem -> com.google.android.material.internal.i:
com.google.android.material.internal.NavigationMenuPresenter$NavigationMenuSeparatorItem -> com.google.android.material.internal.j:
    int paddingBottom -> b
    int paddingTop -> a
com.google.android.material.internal.NavigationMenuPresenter$NavigationMenuTextItem -> com.google.android.material.internal.k:
    androidx.appcompat.view.menu.MenuItemImpl menuItem -> a
    boolean needsEmptyIcon -> b
com.google.android.material.internal.NavigationMenuPresenter$NormalViewHolder -> com.google.android.material.internal.l:
com.google.android.material.internal.NavigationMenuPresenter$SeparatorViewHolder -> com.google.android.material.internal.m:
com.google.android.material.internal.NavigationMenuPresenter$SubheaderViewHolder -> com.google.android.material.internal.n:
com.google.android.material.internal.NavigationMenuPresenter$ViewHolder -> com.google.android.material.internal.o:
com.google.android.material.internal.ParcelableSparseArray$1 -> com.google.android.material.internal.p:
    1:1:com.google.android.material.internal.ParcelableSparseArray createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    2:2:com.google.android.material.internal.ParcelableSparseArray createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    2:2:java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader):0 -> createFromParcel
    1:1:com.google.android.material.internal.ParcelableSparseArray[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
com.google.android.material.internal.ScrimInsetsFrameLayout -> com.google.android.material.internal.ScrimInsetsFrameLayout:
    android.graphics.Rect tempRect -> c
    android.graphics.drawable.Drawable insetForeground -> a
    android.graphics.Rect insets -> b
com.google.android.material.internal.ScrimInsetsFrameLayout$1 -> com.google.android.material.internal.q:
    com.google.android.material.internal.ScrimInsetsFrameLayout this$0 -> a
com.google.android.material.internal.StateListAnimator -> com.google.android.material.internal.StateListAnimator:
    com.google.android.material.internal.StateListAnimator$Tuple lastMatch -> b
    android.animation.ValueAnimator runningAnimator -> c
    android.animation.Animator$AnimatorListener animationListener -> d
    java.util.ArrayList tuples -> a
    1:1:void cancel():0:0 -> setState
    1:1:void setState(int[]):0 -> setState
    2:2:void setState(int[]):0:0 -> setState
    3:3:void start(com.google.android.material.internal.StateListAnimator$Tuple):0:0 -> setState
    3:3:void setState(int[]):0 -> setState
com.google.android.material.internal.StateListAnimator$1 -> com.google.android.material.internal.r:
    com.google.android.material.internal.StateListAnimator this$0 -> a
com.google.android.material.internal.StateListAnimator$Tuple -> com.google.android.material.internal.s:
    int[] specs -> a
    android.animation.ValueAnimator animator -> b
com.google.android.material.internal.TextScale -> com.google.android.material.internal.TextScale:
    void captureValues(androidx.transition.TransitionValues) -> o
com.google.android.material.internal.TextScale$1 -> com.google.android.material.internal.t:
    android.widget.TextView val$view -> a
com.google.android.material.internal.ThemeEnforcement -> com.google.android.material.internal.ThemeEnforcement:
    int[] MATERIAL_CHECK_ATTRS -> b
    int[] APPCOMPAT_CHECK_ATTRS -> a
    void checkCompatibleTheme(android.content.Context,android.util.AttributeSet,int,int) -> a
    1:1:boolean isCustomTextAppearanceValid(android.content.Context,android.util.AttributeSet,int[],int,int,int[]):0:0 -> b
    1:1:void checkTextAppearance(android.content.Context,android.util.AttributeSet,int[],int,int,int[]):0 -> b
    2:2:void checkTextAppearance(android.content.Context,android.util.AttributeSet,int[],int,int,int[]):0:0 -> b
    1:1:boolean isTheme(android.content.Context,int[]):0:0 -> c
    1:1:void checkTheme(android.content.Context,int[],java.lang.String):0 -> c
    2:2:void checkTheme(android.content.Context,int[],java.lang.String):0:0 -> c
    1:1:boolean isTheme(android.content.Context,int[]):0:0 -> isAppCompatTheme
    1:1:boolean isAppCompatTheme(android.content.Context):0 -> isAppCompatTheme
    1:1:boolean isTheme(android.content.Context,int[]):0:0 -> isMaterialTheme
    1:1:boolean isMaterialTheme(android.content.Context):0 -> isMaterialTheme
com.google.android.material.internal.VisibilityAwareImageButton -> com.google.android.material.internal.VisibilityAwareImageButton:
    int userSetVisibility -> a
com.google.android.material.navigation.NavigationView -> com.google.android.material.navigation.NavigationView:
    com.google.android.material.internal.NavigationMenu menu -> d
    int[] CHECKED_STATE_SET -> i
    com.google.android.material.navigation.NavigationView$OnNavigationItemSelectedListener listener -> f
    int maxWidth -> g
    com.google.android.material.internal.NavigationMenuPresenter presenter -> e
    int[] DISABLED_STATE_SET -> j
    android.view.MenuInflater menuInflater -> h
    android.content.res.ColorStateList createDefaultColorStateList(int) -> a
    1:1:android.view.MenuInflater getMenuInflater():0:0 -> inflateMenu
    1:1:void inflateMenu(int):0 -> inflateMenu
    2:2:void inflateMenu(int):0:0 -> inflateMenu
com.google.android.material.navigation.NavigationView$1 -> com.google.android.material.navigation.a:
    com.google.android.material.navigation.NavigationView this$0 -> a
com.google.android.material.navigation.NavigationView$SavedState$1 -> com.google.android.material.navigation.b:
    1:1:com.google.android.material.navigation.NavigationView$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    2:2:com.google.android.material.navigation.NavigationView$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    2:2:java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader):0 -> createFromParcel
    1:1:com.google.android.material.navigation.NavigationView$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
com.google.android.material.resources.TextAppearance -> com.google.android.material.resources.TextAppearance:
    android.graphics.Typeface font -> c
    boolean fontResolved -> b
    int fontFamilyResourceId -> a
    1:1:int com.google.android.material.resources.MaterialResources.getIndexWithValue(android.content.res.TypedArray,int,int):0:0 -> <init>
    1:1:void <init>(android.content.Context,int):0 -> <init>
    2:2:void <init>(android.content.Context,int):0:0 -> <init>
    android.graphics.Typeface access$002(com.google.android.material.resources.TextAppearance,android.graphics.Typeface) -> a
    boolean access$102(com.google.android.material.resources.TextAppearance,boolean) -> b
    void access$200(com.google.android.material.resources.TextAppearance) -> c
    void createFallbackTypeface() -> d
com.google.android.material.resources.TextAppearance$1 -> com.google.android.material.resources.a:
    android.text.TextPaint val$textPaint -> a
    com.google.android.material.resources.TextAppearance this$0 -> c
    androidx.core.content.res.ResourcesCompat$FontCallback val$callback -> b
com.google.android.material.resources.TextAppearanceConfig -> com.google.android.material.resources.TextAppearanceConfig:
    boolean shouldLoadFontSynchronously -> a
com.google.android.material.ripple.RippleUtils -> com.google.android.material.ripple.RippleUtils:
    int[] SELECTED_HOVERED_FOCUSED_STATE_SET -> f
    int[] SELECTED_FOCUSED_STATE_SET -> g
    int[] SELECTED_HOVERED_STATE_SET -> h
    int[] SELECTED_STATE_SET -> i
    int[] HOVERED_FOCUSED_STATE_SET -> b
    int[] FOCUSED_STATE_SET -> c
    int[] HOVERED_STATE_SET -> d
    int[] SELECTED_PRESSED_STATE_SET -> e
    int[] PRESSED_STATE_SET -> a
    1:1:int doubleAlpha(int):0:0 -> a
    1:1:int getColorForState(android.content.res.ColorStateList,int[]):0 -> a
com.google.android.material.shadow.ShadowDrawableWrapper -> com.google.android.material.shadow.ShadowDrawableWrapper:
    boolean addPaddingForCorners -> n
    int shadowMiddleColor -> l
    float rawShadowSize -> i
    int shadowEndColor -> m
    boolean printedShadowClipWarning -> p
    android.graphics.RectF contentBounds -> d
    float shadowSize -> h
    float rawMaxShadowSize -> g
    boolean dirty -> j
    int shadowStartColor -> k
    float cornerRadius -> e
    android.graphics.Path cornerShadowPath -> f
    double COS_45 -> q
    android.graphics.Paint edgeShadowPaint -> c
    android.graphics.Paint cornerShadowPaint -> b
    float rotation -> o
    1:1:void buildComponents(android.graphics.Rect):0:0 -> draw
    1:1:void draw(android.graphics.Canvas):0 -> draw
    2:2:void buildShadowCorners():0:0 -> draw
    2:2:void buildComponents(android.graphics.Rect):0 -> draw
    2:2:void draw(android.graphics.Canvas):0 -> draw
    3:3:void draw(android.graphics.Canvas):0:0 -> draw
    4:4:void drawShadow(android.graphics.Canvas):0:0 -> draw
    4:4:void draw(android.graphics.Canvas):0 -> draw
    5:5:void draw(android.graphics.Canvas):0:0 -> draw
    1:1:int toEven(float):0:0 -> setShadowSize
    1:1:void setShadowSize(float,float):0 -> setShadowSize
    2:2:void setShadowSize(float,float):0:0 -> setShadowSize
com.google.android.material.shape.CutCornerTreatment -> com.google.android.material.shape.CutCornerTreatment:
    float size -> a
com.google.android.material.shape.InterpolateOnScrollPositionChangeHelper -> com.google.android.material.shape.InterpolateOnScrollPositionChangeHelper:
    android.widget.ScrollView containingScrollView -> c
    int[] scrollLocation -> d
    int[] containerLocation -> e
    android.view.ViewTreeObserver$OnScrollChangedListener scrollChangedListener -> f
    android.view.View shapedView -> a
    com.google.android.material.shape.MaterialShapeDrawable materialShapeDrawable -> b
com.google.android.material.shape.InterpolateOnScrollPositionChangeHelper$1 -> com.google.android.material.shape.a:
    com.google.android.material.shape.InterpolateOnScrollPositionChangeHelper this$0 -> a
com.google.android.material.shape.MaterialShapeDrawable -> com.google.android.material.shape.MaterialShapeDrawable:
    android.graphics.PorterDuffColorFilter tintFilter -> x
    android.graphics.PorterDuff$Mode tintMode -> y
    boolean useTintColorForShadow -> o
    float[] scratch2 -> l
    android.content.res.ColorStateList tintList -> z
    android.graphics.PointF pointF -> g
    android.graphics.Matrix[] edgeTransforms -> c
    float scale -> u
    android.graphics.Matrix matrix -> e
    android.graphics.Region scratchRegion -> j
    int shadowRadius -> s
    int shadowColor -> q
    boolean shadowEnabled -> n
    float[] scratch -> k
    com.google.android.material.shape.ShapePath[] cornerPaths -> d
    android.graphics.Paint$Style paintStyle -> w
    android.graphics.Path path -> f
    android.graphics.Matrix[] cornerTransforms -> b
    com.google.android.material.shape.ShapePath shapePath -> h
    com.google.android.material.shape.ShapePathModel shapedViewModel -> m
    float strokeWidth -> v
    android.graphics.Paint paint -> a
    int alpha -> t
    android.graphics.Region transparentRegion -> i
    float interpolation -> p
    int shadowElevation -> r
    float angleOfEdge(int,int,int) -> a
    void getCoordinatesOfCorner(int,int,int,android.graphics.PointF) -> b
    void getPath(int,int,android.graphics.Path) -> c
    void updateTintFilter() -> d
    1:1:void setCornerPathAndTransform(int,int,int):0:0 -> getPathForSize
    1:1:void getPathForSize(int,int,android.graphics.Path):0 -> getPathForSize
    2:2:float angleOfCorner(int,int,int):0:0 -> getPathForSize
    2:2:void setCornerPathAndTransform(int,int,int):0 -> getPathForSize
    2:2:void getPathForSize(int,int,android.graphics.Path):0 -> getPathForSize
    3:3:com.google.android.material.shape.CornerTreatment getCornerTreatmentForIndex(int):0:0 -> getPathForSize
    3:3:void setCornerPathAndTransform(int,int,int):0 -> getPathForSize
    3:3:void getPathForSize(int,int,android.graphics.Path):0 -> getPathForSize
    4:4:void setCornerPathAndTransform(int,int,int):0:0 -> getPathForSize
    4:4:void getPathForSize(int,int,android.graphics.Path):0 -> getPathForSize
    5:5:void setEdgeTransform(int,int,int):0:0 -> getPathForSize
    5:5:void getPathForSize(int,int,android.graphics.Path):0 -> getPathForSize
    6:6:void appendCornerPath(int,android.graphics.Path):0:0 -> getPathForSize
    6:6:void getPathForSize(int,int,android.graphics.Path):0 -> getPathForSize
    7:7:void appendEdgePath(int,android.graphics.Path):0:0 -> getPathForSize
    7:7:void getPathForSize(int,int,android.graphics.Path):0 -> getPathForSize
    8:8:com.google.android.material.shape.EdgeTreatment getEdgeTreatmentForIndex(int):0:0 -> getPathForSize
    8:8:void appendEdgePath(int,android.graphics.Path):0 -> getPathForSize
    8:8:void getPathForSize(int,int,android.graphics.Path):0 -> getPathForSize
    9:9:void appendEdgePath(int,android.graphics.Path):0:0 -> getPathForSize
    9:9:void getPathForSize(int,int,android.graphics.Path):0 -> getPathForSize
    10:10:void getPathForSize(int,int,android.graphics.Path):0:0 -> getPathForSize
com.google.android.material.shape.RoundedCornerTreatment -> com.google.android.material.shape.RoundedCornerTreatment:
    float radius -> a
com.google.android.material.shape.ShapePath -> com.google.android.material.shape.ShapePath:
    java.util.List operations -> a
com.google.android.material.shape.ShapePath$PathArcOperation -> com.google.android.material.shape.ShapePath$PathArcOperation:
    android.graphics.RectF rectF -> a
com.google.android.material.shape.ShapePath$PathLineOperation -> com.google.android.material.shape.ShapePath$PathLineOperation:
    float y -> b
    float x -> a
    float access$002(com.google.android.material.shape.ShapePath$PathLineOperation,float) -> a
    float access$102(com.google.android.material.shape.ShapePath$PathLineOperation,float) -> b
com.google.android.material.shape.ShapePathModel -> com.google.android.material.shape.ShapePathModel:
    com.google.android.material.shape.EdgeTreatment rightEdge -> f
    com.google.android.material.shape.EdgeTreatment topEdge -> e
    com.google.android.material.shape.CornerTreatment DEFAULT_CORNER_TREATMENT -> i
    com.google.android.material.shape.CornerTreatment bottomLeftCorner -> d
    com.google.android.material.shape.CornerTreatment bottomRightCorner -> c
    com.google.android.material.shape.EdgeTreatment DEFAULT_EDGE_TREATMENT -> j
    com.google.android.material.shape.CornerTreatment topRightCorner -> b
    com.google.android.material.shape.CornerTreatment topLeftCorner -> a
    com.google.android.material.shape.EdgeTreatment leftEdge -> h
    com.google.android.material.shape.EdgeTreatment bottomEdge -> g
com.google.android.material.shape.TriangleEdgeTreatment -> com.google.android.material.shape.TriangleEdgeTreatment:
    float size -> a
    boolean inside -> b
com.google.android.material.snackbar.BaseTransientBottomBar -> com.google.android.material.snackbar.BaseTransientBottomBar:
    android.view.ViewGroup targetParent -> a
    android.content.Context context -> b
    java.util.List callbacks -> e
    com.google.android.material.snackbar.SnackbarManager$Callback managerCallback -> h
    android.view.accessibility.AccessibilityManager accessibilityManager -> g
    int duration -> d
    com.google.android.material.snackbar.BaseTransientBottomBar$Behavior behavior -> f
    int[] SNACKBAR_STYLE_ATTR -> j
    android.os.Handler handler -> i
    com.google.android.material.snackbar.ContentViewCallback contentViewCallback -> c
    com.google.android.material.snackbar.ContentViewCallback access$100(com.google.android.material.snackbar.BaseTransientBottomBar) -> a
    void animateViewIn() -> b
    int getTranslationYBottom() -> c
    1:1:void animateViewOut(int):0:0 -> d
    1:1:void hideView(int):0 -> d
    2:2:void hideView(int):0:0 -> d
    void onViewHidden(int) -> e
    void onViewShown() -> f
    boolean shouldAnimate() -> g
    void showView() -> h
com.google.android.material.snackbar.BaseTransientBottomBar$1 -> com.google.android.material.snackbar.c:
com.google.android.material.snackbar.BaseTransientBottomBar$10 -> com.google.android.material.snackbar.a:
    com.google.android.material.snackbar.BaseTransientBottomBar this$0 -> b
    int val$event -> a
com.google.android.material.snackbar.BaseTransientBottomBar$11 -> com.google.android.material.snackbar.b:
    com.google.android.material.snackbar.BaseTransientBottomBar this$0 -> b
    int previousAnimatedIntValue -> a
com.google.android.material.snackbar.BaseTransientBottomBar$2 -> com.google.android.material.snackbar.d:
com.google.android.material.snackbar.BaseTransientBottomBar$3 -> com.google.android.material.snackbar.e:
    com.google.android.material.snackbar.BaseTransientBottomBar this$0 -> c
com.google.android.material.snackbar.BaseTransientBottomBar$4 -> com.google.android.material.snackbar.f:
    com.google.android.material.snackbar.BaseTransientBottomBar this$0 -> a
com.google.android.material.snackbar.BaseTransientBottomBar$5 -> com.google.android.material.snackbar.g:
    com.google.android.material.snackbar.BaseTransientBottomBar this$0 -> a
com.google.android.material.snackbar.BaseTransientBottomBar$6 -> com.google.android.material.snackbar.i:
    com.google.android.material.snackbar.BaseTransientBottomBar this$0 -> a
com.google.android.material.snackbar.BaseTransientBottomBar$6$1 -> com.google.android.material.snackbar.h:
    com.google.android.material.snackbar.BaseTransientBottomBar$6 this$1 -> a
com.google.android.material.snackbar.BaseTransientBottomBar$7 -> com.google.android.material.snackbar.j:
    com.google.android.material.snackbar.BaseTransientBottomBar this$0 -> a
com.google.android.material.snackbar.BaseTransientBottomBar$8 -> com.google.android.material.snackbar.k:
    com.google.android.material.snackbar.BaseTransientBottomBar this$0 -> a
com.google.android.material.snackbar.BaseTransientBottomBar$9 -> com.google.android.material.snackbar.l:
    com.google.android.material.snackbar.BaseTransientBottomBar this$0 -> c
    int val$translationYBottom -> b
    int previousAnimatedIntValue -> a
com.google.android.material.snackbar.BaseTransientBottomBar$Behavior -> com.google.android.material.snackbar.BaseTransientBottomBar$Behavior:
    com.google.android.material.snackbar.BaseTransientBottomBar$BehaviorDelegate delegate -> k
    1:1:void setBaseTransientBottomBar(com.google.android.material.snackbar.BaseTransientBottomBar):0:0 -> b
    1:1:void access$000(com.google.android.material.snackbar.BaseTransientBottomBar$Behavior,com.google.android.material.snackbar.BaseTransientBottomBar):0 -> b
com.google.android.material.snackbar.BaseTransientBottomBar$BehaviorDelegate -> com.google.android.material.snackbar.BaseTransientBottomBar$BehaviorDelegate:
    com.google.android.material.snackbar.SnackbarManager$Callback managerCallback -> a
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout -> com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout:
    com.google.android.material.snackbar.BaseTransientBottomBar$OnAttachStateChangeListener onAttachStateChangeListener -> d
    android.view.accessibility.AccessibilityManager accessibilityManager -> a
    androidx.core.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener touchExplorationStateChangeListener -> b
    int $r8$clinit -> e
    com.google.android.material.snackbar.BaseTransientBottomBar$OnLayoutChangeListener onLayoutChangeListener -> c
    1:1:void setClickableOrFocusableBasedOnAccessibility(boolean):0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet):0 -> <init>
    void setOnAttachStateChangeListener(com.google.android.material.snackbar.BaseTransientBottomBar$OnAttachStateChangeListener) -> a
    void setOnLayoutChangeListener(com.google.android.material.snackbar.BaseTransientBottomBar$OnLayoutChangeListener) -> b
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout$1 -> com.google.android.material.snackbar.m:
    com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout this$0 -> a
    1:1:void com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout.access$300(com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout,boolean):0:0 -> onTouchExplorationStateChanged
    1:1:void onTouchExplorationStateChanged(boolean):0 -> onTouchExplorationStateChanged
    2:2:void com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout.setClickableOrFocusableBasedOnAccessibility(boolean):0:0 -> onTouchExplorationStateChanged
    2:2:void com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout.access$300(com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout,boolean):0 -> onTouchExplorationStateChanged
    2:2:void onTouchExplorationStateChanged(boolean):0 -> onTouchExplorationStateChanged
com.google.android.material.snackbar.Snackbar -> com.google.android.material.snackbar.Snackbar:
    android.view.accessibility.AccessibilityManager accessibilityManager -> k
    boolean hasAction -> l
    com.google.android.material.snackbar.BaseTransientBottomBar$BaseCallback callback -> m
    int[] SNACKBAR_BUTTON_STYLE_ATTR -> n
    1:1:android.view.ViewGroup findSuitableParent(android.view.View):0:0 -> make
    1:1:com.google.android.material.snackbar.Snackbar make(android.view.View,java.lang.CharSequence,int):0 -> make
    2:2:com.google.android.material.snackbar.Snackbar make(android.view.View,java.lang.CharSequence,int):0:0 -> make
com.google.android.material.snackbar.Snackbar$1 -> com.google.android.material.snackbar.n:
    android.view.View$OnClickListener val$listener -> a
    com.google.android.material.snackbar.Snackbar this$0 -> b
com.google.android.material.snackbar.SnackbarContentLayout -> com.google.android.material.snackbar.SnackbarContentLayout:
    android.widget.TextView messageView -> a
    int maxInlineActionWidth -> d
    int maxWidth -> c
    android.widget.Button actionView -> b
    1:1:void updateTopBottomPadding(android.view.View,int,int):0:0 -> a
    1:1:boolean updateViewsWithinLayout(int,int,int):0 -> a
com.google.android.material.snackbar.SnackbarManager -> com.google.android.material.snackbar.r:
    com.google.android.material.snackbar.SnackbarManager snackbarManager -> e
    android.os.Handler handler -> b
    com.google.android.material.snackbar.SnackbarManager$SnackbarRecord nextSnackbar -> d
    com.google.android.material.snackbar.SnackbarManager$SnackbarRecord currentSnackbar -> c
    java.lang.Object lock -> a
    boolean cancelSnackbarLocked(com.google.android.material.snackbar.SnackbarManager$SnackbarRecord,int) -> a
    com.google.android.material.snackbar.SnackbarManager getInstance() -> b
    void handleTimeout(com.google.android.material.snackbar.SnackbarManager$SnackbarRecord) -> c
    1:1:boolean com.google.android.material.snackbar.SnackbarManager$SnackbarRecord.isSnackbar(com.google.android.material.snackbar.SnackbarManager$Callback):0:0 -> d
    1:1:boolean isCurrentSnackbarLocked(com.google.android.material.snackbar.SnackbarManager$Callback):0 -> d
    1:1:boolean com.google.android.material.snackbar.SnackbarManager$SnackbarRecord.isSnackbar(com.google.android.material.snackbar.SnackbarManager$Callback):0:0 -> e
    1:1:boolean isNextSnackbarLocked(com.google.android.material.snackbar.SnackbarManager$Callback):0 -> e
    void scheduleTimeoutLocked(com.google.android.material.snackbar.SnackbarManager$SnackbarRecord) -> f
    void showNextSnackbarLocked() -> g
com.google.android.material.snackbar.SnackbarManager$1 -> com.google.android.material.snackbar.o:
    com.google.android.material.snackbar.SnackbarManager this$0 -> a
com.google.android.material.snackbar.SnackbarManager$Callback -> com.google.android.material.snackbar.p:
com.google.android.material.snackbar.SnackbarManager$SnackbarRecord -> com.google.android.material.snackbar.q:
    java.lang.ref.WeakReference callback -> a
    int duration -> b
    boolean paused -> c
com.google.android.material.stateful.ExtendableSavedState -> com.google.android.material.stateful.ExtendableSavedState:
    1:1:void <init>(android.os.Parcel,java.lang.ClassLoader):0:0 -> <init>
    1:1:void <init>(android.os.Parcel,java.lang.ClassLoader,com.google.android.material.stateful.ExtendableSavedState$1):0 -> <init>
com.google.android.material.stateful.ExtendableSavedState$1 -> com.google.android.material.stateful.a:
    1:1:com.google.android.material.stateful.ExtendableSavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    2:2:com.google.android.material.stateful.ExtendableSavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    2:2:java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader):0 -> createFromParcel
    1:1:com.google.android.material.stateful.ExtendableSavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
com.google.android.material.tabs.TabLayout -> com.google.android.material.tabs.TabLayout:
    androidx.viewpager.widget.ViewPager viewPager -> H
    int tabPaddingBottom -> h
    int tabPaddingTop -> f
    com.google.android.material.tabs.TabLayout$Tab selectedTab -> b
    java.util.ArrayList tabs -> a
    int tabIndicatorGravity -> y
    android.database.DataSetObserver pagerAdapterObserver -> J
    android.animation.ValueAnimator scrollAnimator -> G
    int tabGravity -> w
    int scrollableTabMinWidth -> u
    boolean inlineLabel -> A
    android.content.res.ColorStateList tabIconTint -> k
    float tabTextSize -> o
    int requestedTabMinWidth -> s
    androidx.core.util.Pools$Pool tabViewPool -> N
    boolean unboundedRipple -> C
    androidx.viewpager.widget.PagerAdapter pagerAdapter -> I
    int tabBackgroundResId -> q
    boolean setupViewPagerImplicitly -> M
    android.graphics.RectF tabViewContentBounds -> c
    int tabTextAppearance -> i
    int tabPaddingEnd -> g
    java.util.ArrayList selectedListeners -> E
    int tabPaddingStart -> e
    com.google.android.material.tabs.TabLayout$BaseOnTabSelectedListener selectedListener -> D
    com.google.android.material.tabs.TabLayout$BaseOnTabSelectedListener currentVpSelectedListener -> F
    int mode -> z
    int tabIndicatorAnimationDuration -> x
    int contentInsetStart -> v
    android.content.res.ColorStateList tabTextColors -> j
    android.graphics.drawable.Drawable tabSelectedIndicator -> m
    int requestedTabMaxWidth -> t
    androidx.core.util.Pools$Pool tabPool -> O
    com.google.android.material.tabs.TabLayout$SlidingTabIndicator slidingTabIndicator -> d
    android.content.res.ColorStateList tabRippleColorStateList -> l
    android.graphics.PorterDuff$Mode tabIconTintMode -> n
    float tabTextMultiLineSize -> p
    int tabMaxWidth -> r
    boolean tabIndicatorFullWidth -> B
    com.google.android.material.tabs.TabLayout$TabLayoutOnPageChangeListener pageChangeListener -> K
    com.google.android.material.tabs.TabLayout$AdapterChangeListener adapterChangeListener -> L
    android.graphics.RectF access$400(com.google.android.material.tabs.TabLayout) -> a
    1:1:void configureTab(com.google.android.material.tabs.TabLayout$Tab,int):0:0 -> addTab
    1:1:void addTab(com.google.android.material.tabs.TabLayout$Tab,int,boolean):0 -> addTab
    2:2:void addTabView(com.google.android.material.tabs.TabLayout$Tab):0:0 -> addTab
    2:2:void addTab(com.google.android.material.tabs.TabLayout$Tab,int,boolean):0 -> addTab
    3:3:android.widget.LinearLayout$LayoutParams createLayoutParamsForTabs():0:0 -> addTab
    3:3:void addTabView(com.google.android.material.tabs.TabLayout$Tab):0 -> addTab
    3:3:void addTab(com.google.android.material.tabs.TabLayout$Tab,int,boolean):0 -> addTab
    4:4:void addTabView(com.google.android.material.tabs.TabLayout$Tab):0:0 -> addTab
    4:4:void addTab(com.google.android.material.tabs.TabLayout$Tab,int,boolean):0 -> addTab
    5:5:void addTab(com.google.android.material.tabs.TabLayout$Tab,int,boolean):0:0 -> addTab
    1:1:void addTabFromItemView(com.google.android.material.tabs.TabItem):0:0 -> b
    1:1:void addViewInternal(android.view.View):0 -> b
    2:2:void addViewInternal(android.view.View):0:0 -> b
    1:1:boolean com.google.android.material.tabs.TabLayout$SlidingTabIndicator.childrenNeedLayout():0:0 -> c
    1:1:void animateToTab(int):0 -> c
    2:2:void animateToTab(int):0:0 -> c
    3:3:void ensureScrollAnimator():0:0 -> c
    3:3:void animateToTab(int):0 -> c
    4:4:void animateToTab(int):0:0 -> c
    void applyModeAndGravity() -> d
    int calculateScrollXForTab(int,float) -> e
    android.content.res.ColorStateList createColorStateList(int,int) -> f
    int dpToPx(int) -> g
    1:1:void selectTab(com.google.android.material.tabs.TabLayout$Tab):0:0 -> h
    1:1:void populateFromPagerAdapter():0 -> h
    void removeTabViewAt(int) -> i
    1:1:void dispatchTabReselected(com.google.android.material.tabs.TabLayout$Tab):0:0 -> j
    1:1:void selectTab(com.google.android.material.tabs.TabLayout$Tab,boolean):0 -> j
    2:2:void selectTab(com.google.android.material.tabs.TabLayout$Tab,boolean):0:0 -> j
    3:3:void dispatchTabUnselected(com.google.android.material.tabs.TabLayout$Tab):0:0 -> j
    3:3:void selectTab(com.google.android.material.tabs.TabLayout$Tab,boolean):0 -> j
    4:4:void dispatchTabSelected(com.google.android.material.tabs.TabLayout$Tab):0:0 -> j
    4:4:void selectTab(com.google.android.material.tabs.TabLayout$Tab,boolean):0 -> j
    void setPagerAdapter(androidx.viewpager.widget.PagerAdapter,boolean) -> k
    void setScrollPosition(int,float,boolean,boolean) -> l
    void setSelectedTabView(int) -> m
    void setupWithViewPager(androidx.viewpager.widget.ViewPager,boolean,boolean) -> n
    1:1:com.google.android.material.tabs.TabLayout$TabView createTabView(com.google.android.material.tabs.TabLayout$Tab):0:0 -> newTab
    1:1:com.google.android.material.tabs.TabLayout$Tab newTab():0 -> newTab
    2:2:int getTabMinWidth():0:0 -> newTab
    2:2:com.google.android.material.tabs.TabLayout$TabView createTabView(com.google.android.material.tabs.TabLayout$Tab):0 -> newTab
    2:2:com.google.android.material.tabs.TabLayout$Tab newTab():0 -> newTab
    3:3:com.google.android.material.tabs.TabLayout$TabView createTabView(com.google.android.material.tabs.TabLayout$Tab):0:0 -> newTab
    3:3:com.google.android.material.tabs.TabLayout$Tab newTab():0 -> newTab
    4:4:com.google.android.material.tabs.TabLayout$Tab newTab():0:0 -> newTab
    void updateAllTabs() -> o
    1:1:int getDefaultHeight():0:0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:void onMeasure(int,int):0:0 -> onMeasure
    void updateTabViewLayoutParams(android.widget.LinearLayout$LayoutParams) -> p
    1:1:int getTabMinWidth():0:0 -> q
    1:1:void updateTabViews(boolean):0 -> q
    2:2:void updateTabViews(boolean):0:0 -> q
    1:1:void selectTab(com.google.android.material.tabs.TabLayout$Tab):0:0 -> removeTabAt
    1:1:void removeTabAt(int):0 -> removeTabAt
    1:1:int getTabScrollRange():0:0 -> shouldDelayChildPressedState
    1:1:boolean shouldDelayChildPressedState():0 -> shouldDelayChildPressedState
com.google.android.material.tabs.TabLayout$1 -> com.google.android.material.tabs.a:
    com.google.android.material.tabs.TabLayout this$0 -> a
com.google.android.material.tabs.TabLayout$AdapterChangeListener -> com.google.android.material.tabs.b:
    com.google.android.material.tabs.TabLayout this$0 -> b
    boolean autoRefresh -> a
    void setAutoRefresh(boolean) -> a
com.google.android.material.tabs.TabLayout$PagerAdapterObserver -> com.google.android.material.tabs.c:
    com.google.android.material.tabs.TabLayout this$0 -> a
com.google.android.material.tabs.TabLayout$SlidingTabIndicator -> com.google.android.material.tabs.f:
    int indicatorRight -> h
    android.animation.ValueAnimator indicatorAnimator -> i
    float selectionOffset -> e
    android.graphics.Paint selectedIndicatorPaint -> b
    int layoutDirection -> f
    int indicatorLeft -> g
    android.graphics.drawable.GradientDrawable defaultSelectionIndicator -> c
    int selectedPosition -> d
    int selectedIndicatorHeight -> a
    com.google.android.material.tabs.TabLayout this$0 -> j
    void animateIndicatorToPosition(int,int) -> a
    void calculateTabViewContentBounds(com.google.android.material.tabs.TabLayout$TabView,android.graphics.RectF) -> b
    void setIndicatorPosition(int,int) -> c
    void setIndicatorPositionFromTabPosition(int,float) -> d
    void setSelectedIndicatorColor(int) -> e
    void setSelectedIndicatorHeight(int) -> f
    1:1:void setIndicatorPosition(int,int):0:0 -> g
    1:1:void updateIndicatorPosition():0 -> g
com.google.android.material.tabs.TabLayout$SlidingTabIndicator$1 -> com.google.android.material.tabs.d:
    int val$finalTargetRight -> d
    int val$finalTargetLeft -> b
    int val$startRight -> c
    com.google.android.material.tabs.TabLayout$SlidingTabIndicator this$1 -> e
    int val$startLeft -> a
com.google.android.material.tabs.TabLayout$SlidingTabIndicator$2 -> com.google.android.material.tabs.e:
    com.google.android.material.tabs.TabLayout$SlidingTabIndicator this$1 -> b
    int val$position -> a
com.google.android.material.tabs.TabLayout$Tab -> com.google.android.material.tabs.TabLayout$Tab:
    java.lang.CharSequence text -> c
    java.lang.CharSequence contentDesc -> d
    java.lang.Object tag -> a
    int position -> e
    android.graphics.drawable.Drawable icon -> b
    android.view.View customView -> f
    java.lang.CharSequence access$100(com.google.android.material.tabs.TabLayout$Tab) -> a
    java.lang.CharSequence access$200(com.google.android.material.tabs.TabLayout$Tab) -> b
    void reset() -> c
    void setPosition(int) -> d
    void updateView() -> e
    1:1:void com.google.android.material.tabs.TabLayout.selectTab(com.google.android.material.tabs.TabLayout$Tab):0:0 -> select
    1:1:void select():0 -> select
    2:2:void select():0:0 -> select
com.google.android.material.tabs.TabLayout$TabLayoutOnPageChangeListener -> com.google.android.material.tabs.TabLayout$TabLayoutOnPageChangeListener:
    java.lang.ref.WeakReference tabLayoutRef -> a
    int previousScrollState -> b
    int scrollState -> c
    void reset() -> a
com.google.android.material.tabs.TabLayout$TabView -> com.google.android.material.tabs.g:
    android.widget.ImageView customIconView -> f
    android.graphics.drawable.Drawable baseBackgroundDrawable -> g
    android.widget.TextView textView -> b
    android.widget.TextView customTextView -> e
    int defaultMaxLines -> h
    com.google.android.material.tabs.TabLayout this$0 -> i
    com.google.android.material.tabs.TabLayout$Tab tab -> a
    android.view.View customView -> d
    android.widget.ImageView iconView -> c
    void access$000(com.google.android.material.tabs.TabLayout$TabView,android.content.Context) -> a
    1:1:void drawBackground(android.graphics.Canvas):0:0 -> b
    1:1:void access$300(com.google.android.material.tabs.TabLayout$TabView,android.graphics.Canvas):0 -> b
    1:1:int getContentWidth():0:0 -> c
    1:1:int access$500(com.google.android.material.tabs.TabLayout$TabView):0 -> c
    1:1:void setTab(com.google.android.material.tabs.TabLayout$Tab):0:0 -> d
    1:1:void reset():0 -> d
    2:2:void reset():0:0 -> d
    void setTab(com.google.android.material.tabs.TabLayout$Tab) -> e
    void update() -> f
    void updateBackgroundDrawable(android.content.Context) -> g
    void updateOrientation() -> h
    void updateTextAndIcon(android.widget.TextView,android.widget.ImageView) -> i
    1:1:int com.google.android.material.tabs.TabLayout.getTabMaxWidth():0:0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:void onMeasure(int,int):0:0 -> onMeasure
    3:3:float approximateLineWidth(android.text.Layout,int,float):0:0 -> onMeasure
    3:3:void onMeasure(int,int):0 -> onMeasure
    4:4:void onMeasure(int,int):0:0 -> onMeasure
com.google.android.material.tabs.TabLayout$ViewPagerOnTabSelectedListener -> com.google.android.material.tabs.TabLayout$ViewPagerOnTabSelectedListener:
    androidx.viewpager.widget.ViewPager viewPager -> a
com.google.android.material.textfield.CutoutDrawable -> com.google.android.material.textfield.a:
    android.graphics.RectF cutoutBounds -> b
    android.graphics.Paint cutoutPaint -> a
    int savedLayer -> c
    1:1:void setPaintStyles():0:0 -> <init>
    1:1:void <init>():0 -> <init>
    2:2:void <init>():0:0 -> <init>
    boolean hasCutout() -> a
    void setCutout(float,float,float,float) -> b
    1:1:void preDraw(android.graphics.Canvas):0:0 -> draw
    1:1:void draw(android.graphics.Canvas):0 -> draw
    2:2:boolean useHardwareLayer(android.graphics.drawable.Drawable$Callback):0:0 -> draw
    2:2:void preDraw(android.graphics.Canvas):0 -> draw
    2:2:void draw(android.graphics.Canvas):0 -> draw
    3:3:void preDraw(android.graphics.Canvas):0:0 -> draw
    3:3:void draw(android.graphics.Canvas):0 -> draw
    4:4:void saveCanvasLayer(android.graphics.Canvas):0:0 -> draw
    4:4:void preDraw(android.graphics.Canvas):0 -> draw
    4:4:void draw(android.graphics.Canvas):0 -> draw
    5:5:void draw(android.graphics.Canvas):0:0 -> draw
    6:6:void postDraw(android.graphics.Canvas):0:0 -> draw
    6:6:void draw(android.graphics.Canvas):0 -> draw
    7:7:boolean useHardwareLayer(android.graphics.drawable.Drawable$Callback):0:0 -> draw
    7:7:void postDraw(android.graphics.Canvas):0 -> draw
    7:7:void draw(android.graphics.Canvas):0 -> draw
    8:8:void postDraw(android.graphics.Canvas):0:0 -> draw
    8:8:void draw(android.graphics.Canvas):0 -> draw
com.google.android.material.textfield.IndicatorViewController -> com.google.android.material.textfield.c:
    android.content.Context context -> a
    int errorTextAppearance -> n
    android.widget.TextView helperTextView -> q
    android.widget.FrameLayout captionArea -> e
    boolean helperTextEnabled -> p
    float captionTranslationYPx -> h
    int captionToShow -> j
    com.google.android.material.textfield.TextInputLayout textInputView -> b
    int captionDisplayed -> i
    boolean errorEnabled -> l
    int captionViewsAdded -> f
    int indicatorsAdded -> d
    android.widget.LinearLayout indicatorArea -> c
    java.lang.CharSequence errorText -> k
    android.animation.Animator captionAnimator -> g
    java.lang.CharSequence helperText -> o
    android.graphics.Typeface typeface -> s
    int helperTextTextAppearance -> r
    android.widget.TextView errorView -> m
    void showError(java.lang.CharSequence) -> A
    void showHelper(java.lang.CharSequence) -> B
    1:1:void setCaptionViewVisibilities(int,int):0:0 -> C
    1:1:void updateCaptionViewsVisibility(int,int,boolean):0 -> C
    2:2:void updateCaptionViewsVisibility(int,int,boolean):0:0 -> C
    int access$002(com.google.android.material.textfield.IndicatorViewController,int) -> a
    android.animation.Animator access$102(com.google.android.material.textfield.IndicatorViewController,android.animation.Animator) -> b
    android.widget.TextView access$200(com.google.android.material.textfield.IndicatorViewController) -> c
    void addIndicator(android.widget.TextView,int) -> d
    1:1:boolean canAdjustIndicatorPadding():0:0 -> e
    1:1:void adjustIndicatorPadding():0 -> e
    2:2:void adjustIndicatorPadding():0:0 -> e
    void cancelCaptionAnimator() -> f
    1:1:android.animation.ObjectAnimator createCaptionOpacityAnimator(android.widget.TextView,boolean):0:0 -> g
    1:1:void createCaptionAnimators(java.util.List,boolean,android.widget.TextView,int,int,int):0 -> g
    2:2:void createCaptionAnimators(java.util.List,boolean,android.widget.TextView,int,int,int):0:0 -> g
    3:3:android.animation.ObjectAnimator createCaptionTranslationYAnimator(android.widget.TextView):0:0 -> g
    3:3:void createCaptionAnimators(java.util.List,boolean,android.widget.TextView,int,int,int):0 -> g
    4:4:void createCaptionAnimators(java.util.List,boolean,android.widget.TextView,int,int,int):0:0 -> g
    1:1:boolean isCaptionStateError(int):0:0 -> h
    1:1:boolean errorShouldBeShown():0 -> h
    android.widget.TextView getCaptionViewFromDisplayState(int) -> i
    java.lang.CharSequence getErrorText() -> j
    int getErrorViewCurrentTextColor() -> k
    android.content.res.ColorStateList getErrorViewTextColors() -> l
    java.lang.CharSequence getHelperText() -> m
    int getHelperTextViewCurrentTextColor() -> n
    void hideError() -> o
    boolean isErrorEnabled() -> p
    boolean isHelperTextEnabled() -> q
    1:1:void setViewGroupGoneIfEmpty(android.view.ViewGroup,int):0:0 -> r
    1:1:void removeIndicator(android.widget.TextView,int):0 -> r
    2:2:void removeIndicator(android.widget.TextView,int):0:0 -> r
    3:3:void setViewGroupGoneIfEmpty(android.view.ViewGroup,int):0:0 -> r
    3:3:void removeIndicator(android.widget.TextView,int):0 -> r
    1:1:void setErrorTextAppearance(int):0:0 -> s
    1:1:void setErrorEnabled(boolean):0 -> s
    2:2:void setErrorEnabled(boolean):0:0 -> s
    void setErrorTextAppearance(int) -> t
    void setErrorViewTextColor(android.content.res.ColorStateList) -> u
    void setHelperTextAppearance(int) -> v
    1:1:void setHelperTextAppearance(int):0:0 -> w
    1:1:void setHelperTextEnabled(boolean):0 -> w
    2:2:void setHelperTextEnabled(boolean):0:0 -> w
    3:3:void hideHelperText():0:0 -> w
    3:3:void setHelperTextEnabled(boolean):0 -> w
    4:4:void setHelperTextEnabled(boolean):0:0 -> w
    void setHelperTextViewTextColor(android.content.res.ColorStateList) -> x
    1:1:void setTextViewTypeface(android.widget.TextView,android.graphics.Typeface):0:0 -> y
    1:1:void setTypefaces(android.graphics.Typeface):0 -> y
    2:2:void setTypefaces(android.graphics.Typeface):0:0 -> y
    3:3:void setTextViewTypeface(android.widget.TextView,android.graphics.Typeface):0:0 -> y
    3:3:void setTypefaces(android.graphics.Typeface):0 -> y
    boolean shouldAnimateCaptionView(android.widget.TextView,java.lang.CharSequence) -> z
com.google.android.material.textfield.IndicatorViewController$1 -> com.google.android.material.textfield.b:
    android.widget.TextView val$captionViewToHide -> b
    android.widget.TextView val$captionViewToShow -> d
    int val$captionToHide -> c
    com.google.android.material.textfield.IndicatorViewController this$0 -> e
    int val$captionToShow -> a
com.google.android.material.textfield.TextInputEditText -> com.google.android.material.textfield.TextInputEditText:
    com.google.android.material.textfield.TextInputLayout getTextInputLayout() -> a
    1:1:java.lang.CharSequence getHintFromLayout():0:0 -> onCreateInputConnection
    1:1:android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo):0 -> onCreateInputConnection
    2:2:android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo):0:0 -> onCreateInputConnection
com.google.android.material.textfield.TextInputLayout -> com.google.android.material.textfield.TextInputLayout:
    boolean isProvidingHint -> m
    boolean inDrawableStateChanged -> d0
    boolean hasPasswordToggleTintMode -> P
    boolean hintAnimationEnabled -> b0
    android.graphics.drawable.Drawable editTextOriginalDrawable -> B
    int boxStrokeWidthFocusedPx -> y
    android.graphics.drawable.Drawable passwordToggleDummyDrawable -> K
    float boxCornerRadiusTopStart -> s
    int hoveredStrokeColor -> T
    int boxBackgroundMode -> q
    android.graphics.drawable.GradientDrawable boxBackground -> n
    android.graphics.drawable.Drawable passwordToggleDrawable -> G
    java.lang.CharSequence originalHint -> c
    int counterOverflowTextAppearance -> i
    android.graphics.Rect tmpRect -> C
    com.google.android.material.internal.CollapsingTextHelper collapsingTextHelper -> a0
    java.lang.CharSequence hint -> l
    int boxStrokeColor -> z
    boolean counterEnabled -> e
    float boxCornerRadiusTopEnd -> t
    android.graphics.drawable.Drawable originalEditTextEndDrawable -> L
    int focusedStrokeColor -> U
    int boxCollapsedPaddingTopPx -> r
    com.google.android.material.textfield.IndicatorViewController indicatorViewController -> d
    boolean hasPasswordToggleTintList -> N
    boolean restoringSavedState -> e0
    android.content.res.ColorStateList defaultHintTextColor -> Q
    int counterTextAppearance -> j
    boolean passwordToggledVisible -> J
    boolean hintEnabled -> k
    int counterMaxLength -> f
    android.widget.FrameLayout inputFrame -> a
    int boxBackgroundColor -> A
    float boxCornerRadiusBottomEnd -> u
    int disabledColor -> V
    int boxStrokeWidthPx -> w
    android.widget.TextView counterView -> h
    android.widget.EditText editText -> b
    int boxBottomOffsetPx -> o
    android.content.res.ColorStateList focusedTextColor -> R
    android.graphics.RectF tmpRectF -> D
    com.google.android.material.internal.CheckableImageButton passwordToggleView -> I
    boolean hintExpanded -> W
    java.lang.CharSequence passwordToggleContentDesc -> H
    android.graphics.Typeface typeface -> E
    android.animation.ValueAnimator animator -> c0
    float boxCornerRadiusBottomStart -> v
    int boxStrokeWidthDefaultPx -> x
    boolean passwordToggleEnabled -> F
    boolean counterOverflowed -> g
    int defaultStrokeColor -> S
    int boxLabelCutoutPaddingPx -> p
    android.content.res.ColorStateList passwordToggleTintList -> M
    android.graphics.PorterDuff$Mode passwordToggleTintMode -> O
    boolean access$000(com.google.android.material.textfield.TextInputLayout) -> a
    1:1:void setEditText(android.widget.EditText):0:0 -> addView
    1:1:void addView(android.view.View,int,android.view.ViewGroup$LayoutParams):0 -> addView
    2:2:void addView(android.view.View,int,android.view.ViewGroup$LayoutParams):0:0 -> addView
    void animateToExpansionFraction(float) -> b
    1:1:void setBoxAttributes():0:0 -> c
    1:1:void applyBoxAttributes():0 -> c
    2:2:void applyBoxAttributes():0:0 -> c
    3:3:float[] getCornerRadiiAsArray():0:0 -> c
    3:3:void applyBoxAttributes():0 -> c
    4:4:void applyBoxAttributes():0:0 -> c
    void applyPasswordToggleTint() -> d
    1:1:void updateLabelState(boolean):0:0 -> drawableStateChanged
    1:1:void drawableStateChanged():0 -> drawableStateChanged
    2:2:void drawableStateChanged():0:0 -> drawableStateChanged
    int calculateLabelMarginTop() -> e
    boolean cutoutEnabled() -> f
    android.graphics.drawable.Drawable getBoxBackground() -> g
    java.lang.CharSequence getCounterOverflowDescription() -> h
    boolean hasPasswordTransformation() -> i
    boolean isProvidingHint() -> j
    1:1:void assignBoxBackgroundByMode():0:0 -> k
    1:1:void onApplyBoxBackgroundMode():0 -> k
    2:2:void onApplyBoxBackgroundMode():0:0 -> k
    1:1:void applyCutoutPadding(android.graphics.RectF):0:0 -> l
    1:1:void openCutout():0 -> l
    2:2:void openCutout():0:0 -> l
    3:3:void com.google.android.material.textfield.CutoutDrawable.setCutout(android.graphics.RectF):0:0 -> l
    3:3:void openCutout():0 -> l
    void recursiveSetEnabled(android.view.ViewGroup,boolean) -> m
    void setHintInternal(java.lang.CharSequence) -> n
    void setTextAppearanceCompatWithErrorFallback(android.widget.TextView,int) -> o
    1:1:int calculateCollapsedTextTopBounds():0:0 -> onLayout
    1:1:void onLayout(boolean,int,int,int,int):0 -> onLayout
    2:2:void onLayout(boolean,int,int,int,int):0:0 -> onLayout
    1:1:void updateLabelState(boolean):0:0 -> p
    1:1:void updateCounter(int):0 -> p
    2:2:void updateCounter(int):0:0 -> p
    void updateEditTextBackground() -> q
    void updateInputLayoutMargins() -> r
    void updateLabelState(boolean) -> s
    1:1:void updateLabelState(boolean):0:0 -> setDefaultHintTextColor
    1:1:void setDefaultHintTextColor(android.content.res.ColorStateList):0 -> setDefaultHintTextColor
    1:1:void updateLabelState(boolean):0:0 -> setHintTextAppearance
    1:1:void setHintTextAppearance(int):0 -> setHintTextAppearance
    2:2:void setHintTextAppearance(int):0:0 -> setHintTextAppearance
    1:1:void expandHint(boolean):0:0 -> t
    1:1:void updateLabelState(boolean,boolean):0 -> t
    2:2:void closeCutout():0:0 -> t
    2:2:void expandHint(boolean):0 -> t
    2:2:void updateLabelState(boolean,boolean):0 -> t
    3:3:void com.google.android.material.textfield.CutoutDrawable.removeCutout():0:0 -> t
    3:3:void closeCutout():0 -> t
    3:3:void expandHint(boolean):0 -> t
    3:3:void updateLabelState(boolean,boolean):0 -> t
    4:4:void expandHint(boolean):0:0 -> t
    4:4:void updateLabelState(boolean,boolean):0 -> t
    5:5:void updateLabelState(boolean,boolean):0:0 -> t
    6:6:void collapseHint(boolean):0:0 -> t
    6:6:void updateLabelState(boolean,boolean):0 -> t
    1:1:boolean shouldShowPasswordIcon():0:0 -> u
    1:1:void updatePasswordToggleView():0 -> u
    2:2:void updatePasswordToggleView():0:0 -> u
    1:1:int calculateBoxBackgroundTop():0:0 -> v
    1:1:void updateTextInputBoxBounds():0 -> v
    2:2:void updateTextInputBoxBounds():0:0 -> v
    3:3:void updateEditTextBackgroundBounds():0:0 -> v
    3:3:void updateTextInputBoxBounds():0 -> v
    void updateTextInputBoxState() -> w
com.google.android.material.textfield.TextInputLayout$1 -> com.google.android.material.textfield.d:
    com.google.android.material.textfield.TextInputLayout this$0 -> a
com.google.android.material.textfield.TextInputLayout$2 -> com.google.android.material.textfield.e:
    com.google.android.material.textfield.TextInputLayout this$0 -> a
com.google.android.material.textfield.TextInputLayout$3 -> com.google.android.material.textfield.f:
    com.google.android.material.textfield.TextInputLayout this$0 -> a
com.google.android.material.textfield.TextInputLayout$AccessibilityDelegate -> com.google.android.material.textfield.TextInputLayout$AccessibilityDelegate:
    com.google.android.material.textfield.TextInputLayout layout -> c
com.google.android.material.textfield.TextInputLayout$SavedState -> com.google.android.material.textfield.TextInputLayout$SavedState:
    java.lang.CharSequence error -> b
    boolean isPasswordToggledVisible -> c
com.google.android.material.textfield.TextInputLayout$SavedState$1 -> com.google.android.material.textfield.g:
    1:1:com.google.android.material.textfield.TextInputLayout$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    2:2:com.google.android.material.textfield.TextInputLayout$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    2:2:java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader):0 -> createFromParcel
    1:1:com.google.android.material.textfield.TextInputLayout$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
com.google.android.material.transformation.ExpandableBehavior -> com.google.android.material.transformation.ExpandableBehavior:
    int currentState -> a
    int access$000(com.google.android.material.transformation.ExpandableBehavior) -> a
    boolean didStateChange(boolean) -> b
com.google.android.material.transformation.ExpandableBehavior$1 -> com.google.android.material.transformation.a:
    com.google.android.material.expandable.ExpandableWidget val$dep -> c
    android.view.View val$child -> a
    int val$expectedState -> b
    com.google.android.material.transformation.ExpandableBehavior this$0 -> d
com.google.android.material.transformation.ExpandableTransformationBehavior -> com.google.android.material.transformation.ExpandableTransformationBehavior:
    android.animation.AnimatorSet currentAnimation -> b
    android.animation.AnimatorSet access$002(com.google.android.material.transformation.ExpandableTransformationBehavior,android.animation.AnimatorSet) -> c
com.google.android.material.transformation.ExpandableTransformationBehavior$1 -> com.google.android.material.transformation.b:
    com.google.android.material.transformation.ExpandableTransformationBehavior this$0 -> a
com.google.android.material.transformation.FabTransformationBehavior -> com.google.android.material.transformation.FabTransformationBehavior:
    int[] tmpArray -> f
    android.graphics.RectF tmpRectF1 -> d
    android.graphics.RectF tmpRectF2 -> e
    android.graphics.Rect tmpRect -> c
    float calculateTranslationX(android.view.View,android.view.View,com.google.android.material.animation.Positioning) -> d
    float calculateTranslationY(android.view.View,android.view.View,com.google.android.material.animation.Positioning) -> e
    float calculateValueOfAnimationAtEndOfExpansion(com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,com.google.android.material.animation.MotionTiming,float,float) -> f
    void calculateWindowBounds(android.view.View,android.graphics.RectF) -> g
    android.view.ViewGroup toViewGroupOrNull(android.view.View) -> h
    1:1:void createElevationAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List,java.util.List):0:0 -> onCreateExpandedStateChangeAnimation
    1:1:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    2:2:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0:0 -> onCreateExpandedStateChangeAnimation
    3:3:void createTranslationAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List,java.util.List,android.graphics.RectF):0:0 -> onCreateExpandedStateChangeAnimation
    3:3:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    4:4:void calculateChildVisibleBoundsAtEndOfExpansion(android.view.View,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,com.google.android.material.animation.MotionTiming,com.google.android.material.animation.MotionTiming,float,float,float,float,android.graphics.RectF):0:0 -> onCreateExpandedStateChangeAnimation
    4:4:void createTranslationAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List,java.util.List,android.graphics.RectF):0 -> onCreateExpandedStateChangeAnimation
    4:4:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    5:5:void createTranslationAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List,java.util.List,android.graphics.RectF):0:0 -> onCreateExpandedStateChangeAnimation
    5:5:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    6:6:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0:0 -> onCreateExpandedStateChangeAnimation
    7:7:void createIconFadeAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List,java.util.List):0:0 -> onCreateExpandedStateChangeAnimation
    7:7:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    8:8:void createExpansionAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,float,float,java.util.List,java.util.List):0:0 -> onCreateExpandedStateChangeAnimation
    8:8:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    9:9:float calculateRevealCenterX(android.view.View,android.view.View,com.google.android.material.animation.Positioning):0:0 -> onCreateExpandedStateChangeAnimation
    9:9:void createExpansionAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,float,float,java.util.List,java.util.List):0 -> onCreateExpandedStateChangeAnimation
    9:9:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    10:10:void createExpansionAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,float,float,java.util.List,java.util.List):0:0 -> onCreateExpandedStateChangeAnimation
    10:10:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    11:11:float calculateRevealCenterY(android.view.View,android.view.View,com.google.android.material.animation.Positioning):0:0 -> onCreateExpandedStateChangeAnimation
    11:11:void createExpansionAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,float,float,java.util.List,java.util.List):0 -> onCreateExpandedStateChangeAnimation
    11:11:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    12:12:void createExpansionAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,float,float,java.util.List,java.util.List):0:0 -> onCreateExpandedStateChangeAnimation
    12:12:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    13:13:void createPreFillRadialExpansion(android.view.View,long,int,int,float,java.util.List):0:0 -> onCreateExpandedStateChangeAnimation
    13:13:void createExpansionAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,float,float,java.util.List,java.util.List):0 -> onCreateExpandedStateChangeAnimation
    13:13:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    14:14:void createExpansionAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,float,float,java.util.List,java.util.List):0:0 -> onCreateExpandedStateChangeAnimation
    14:14:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    15:15:void createPreFillRadialExpansion(android.view.View,long,int,int,float,java.util.List):0:0 -> onCreateExpandedStateChangeAnimation
    15:15:void createExpansionAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,float,float,java.util.List,java.util.List):0 -> onCreateExpandedStateChangeAnimation
    15:15:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    16:16:void createExpansionAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,float,float,java.util.List,java.util.List):0:0 -> onCreateExpandedStateChangeAnimation
    16:16:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    17:17:void createPostFillRadialExpansion(android.view.View,long,long,long,int,int,float,java.util.List):0:0 -> onCreateExpandedStateChangeAnimation
    17:17:void createExpansionAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,float,float,java.util.List,java.util.List):0 -> onCreateExpandedStateChangeAnimation
    17:17:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    18:18:void createExpansionAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,float,float,java.util.List,java.util.List):0:0 -> onCreateExpandedStateChangeAnimation
    18:18:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    19:19:void createColorAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List,java.util.List):0:0 -> onCreateExpandedStateChangeAnimation
    19:19:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    20:20:int getBackgroundTint(android.view.View):0:0 -> onCreateExpandedStateChangeAnimation
    20:20:void createColorAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List,java.util.List):0 -> onCreateExpandedStateChangeAnimation
    20:20:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    21:21:void createColorAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List,java.util.List):0:0 -> onCreateExpandedStateChangeAnimation
    21:21:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    22:22:void createChildrenFadeAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List,java.util.List):0:0 -> onCreateExpandedStateChangeAnimation
    22:22:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    23:23:android.view.ViewGroup calculateChildContentContainer(android.view.View):0:0 -> onCreateExpandedStateChangeAnimation
    23:23:void createChildrenFadeAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List,java.util.List):0 -> onCreateExpandedStateChangeAnimation
    23:23:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    24:24:void createChildrenFadeAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List,java.util.List):0:0 -> onCreateExpandedStateChangeAnimation
    24:24:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    25:25:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0:0 -> onCreateExpandedStateChangeAnimation
com.google.android.material.transformation.FabTransformationBehavior$1 -> com.google.android.material.transformation.c:
    android.view.View val$dependency -> c
    android.view.View val$child -> b
    boolean val$expanded -> a
com.google.android.material.transformation.FabTransformationBehavior$2 -> com.google.android.material.transformation.d:
    android.view.View val$child -> a
com.google.android.material.transformation.FabTransformationBehavior$3 -> com.google.android.material.transformation.e:
    com.google.android.material.circularreveal.CircularRevealWidget val$circularRevealChild -> a
    android.graphics.drawable.Drawable val$icon -> b
com.google.android.material.transformation.FabTransformationBehavior$4 -> com.google.android.material.transformation.f:
    com.google.android.material.circularreveal.CircularRevealWidget val$circularRevealChild -> a
com.google.android.material.transformation.FabTransformationScrimBehavior -> com.google.android.material.transformation.FabTransformationScrimBehavior:
    com.google.android.material.animation.MotionTiming expandTiming -> c
    com.google.android.material.animation.MotionTiming collapseTiming -> d
    1:1:void createScrimAnimation(android.view.View,boolean,boolean,java.util.List,java.util.List):0:0 -> onCreateExpandedStateChangeAnimation
    1:1:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0 -> onCreateExpandedStateChangeAnimation
    2:2:android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View,android.view.View,boolean,boolean):0:0 -> onCreateExpandedStateChangeAnimation
com.google.android.material.transformation.FabTransformationScrimBehavior$1 -> com.google.android.material.transformation.g:
    android.view.View val$child -> b
    boolean val$expanded -> a
com.google.android.material.transformation.FabTransformationSheetBehavior -> com.google.android.material.transformation.FabTransformationSheetBehavior:
    java.util.Map importantForAccessibilityMap -> g
    1:1:void updateImportantForAccessibility(android.view.View,boolean):0:0 -> onExpandedStateChange
    1:1:boolean onExpandedStateChange(android.view.View,android.view.View,boolean,boolean):0 -> onExpandedStateChange
    2:2:boolean onExpandedStateChange(android.view.View,android.view.View,boolean,boolean):0:0 -> onExpandedStateChange
com.google.common.base.Absent -> com.google.common.base.a:
    com.google.common.base.Absent INSTANCE -> a
com.google.common.base.AbstractIterator -> com.google.common.base.c:
    com.google.common.base.AbstractIterator$State state -> a
    java.lang.Object next -> b
    1:1:boolean tryToComputeNext():0:0 -> hasNext
    1:1:boolean hasNext():0 -> hasNext
com.google.common.base.AbstractIterator$State -> com.google.common.base.b:
    com.google.common.base.AbstractIterator$State FAILED -> d
    com.google.common.base.AbstractIterator$State NOT_READY -> b
    com.google.common.base.AbstractIterator$State DONE -> c
    com.google.common.base.AbstractIterator$State READY -> a
    com.google.common.base.AbstractIterator$State[] $VALUES -> e
com.google.common.base.CaseFormat -> com.google.common.base.CaseFormat:
    com.google.common.base.CaseFormat[] $VALUES -> c
    com.google.common.base.CharMatcher wordBoundary -> a
    java.lang.String wordSeparator -> b
    1:1:void <init>(java.lang.String,int,com.google.common.base.CharMatcher,java.lang.String):0:0 -> <init>
    1:1:void <init>(java.lang.String,int,com.google.common.base.CharMatcher,java.lang.String,com.google.common.base.CaseFormat$1):0 -> <init>
    1:1:java.lang.String firstCharOnlyToUpper(java.lang.String):0:0 -> a
    1:1:java.lang.String access$100(java.lang.String):0 -> a
    java.lang.String convert(com.google.common.base.CaseFormat,java.lang.String) -> b
    java.lang.String normalizeFirstWord(java.lang.String) -> c
    java.lang.String normalizeWord(java.lang.String) -> d
com.google.common.base.CaseFormat$1 -> com.google.common.base.d:
    java.lang.String convert(com.google.common.base.CaseFormat,java.lang.String) -> b
    java.lang.String normalizeWord(java.lang.String) -> d
com.google.common.base.CaseFormat$2 -> com.google.common.base.e:
    java.lang.String convert(com.google.common.base.CaseFormat,java.lang.String) -> b
    java.lang.String normalizeWord(java.lang.String) -> d
com.google.common.base.CaseFormat$3 -> com.google.common.base.f:
    java.lang.String normalizeFirstWord(java.lang.String) -> c
    java.lang.String normalizeWord(java.lang.String) -> d
com.google.common.base.CaseFormat$4 -> com.google.common.base.g:
    java.lang.String normalizeWord(java.lang.String) -> d
com.google.common.base.CaseFormat$5 -> com.google.common.base.h:
    java.lang.String convert(com.google.common.base.CaseFormat,java.lang.String) -> b
    java.lang.String normalizeWord(java.lang.String) -> d
com.google.common.base.CaseFormat$StringConverter -> com.google.common.base.i:
    com.google.common.base.CaseFormat sourceFormat -> c
    com.google.common.base.CaseFormat targetFormat -> d
    1:1:java.lang.String doBackward(java.lang.String):0:0 -> doBackward
    1:1:java.lang.Object doBackward(java.lang.Object):0 -> doBackward
    1:1:java.lang.String doForward(java.lang.String):0:0 -> doForward
    1:1:java.lang.Object doForward(java.lang.Object):0 -> doForward
com.google.common.base.CharMatcher -> com.google.common.base.CharMatcher:
    1:1:java.lang.String showCharacter(char):0:0 -> a
    1:1:java.lang.String access$100(char):0 -> a
    1:1:com.google.common.base.CharMatcher$IsEither isEither(char,char):0:0 -> anyOf
    1:1:com.google.common.base.CharMatcher anyOf(java.lang.CharSequence):0 -> anyOf
    2:2:com.google.common.base.CharMatcher anyOf(java.lang.CharSequence):0:0 -> anyOf
    java.lang.String finishCollapseFrom(java.lang.CharSequence,int,int,char,java.lang.StringBuilder,boolean) -> b
    com.google.common.base.CharMatcher precomputedInternal() -> c
    1:1:com.google.common.base.CharMatcher$IsEither isEither(char,char):0:0 -> d
    1:1:com.google.common.base.CharMatcher precomputedPositive(int,java.util.BitSet,java.lang.String):0 -> d
    2:2:com.google.common.base.CharMatcher precomputedPositive(int,java.util.BitSet,java.lang.String):0:0 -> d
    void setBits(java.util.BitSet) -> e
    1:1:com.google.common.base.CharMatcher com.google.common.base.Platform.precomputeCharMatcher(com.google.common.base.CharMatcher):0:0 -> precomputed
    1:1:com.google.common.base.CharMatcher precomputed():0 -> precomputed
com.google.common.base.CharMatcher$1 -> com.google.common.base.j:
    java.lang.String val$description -> b
com.google.common.base.CharMatcher$And -> com.google.common.base.k:
    com.google.common.base.CharMatcher second -> b
    com.google.common.base.CharMatcher first -> a
    void setBits(java.util.BitSet) -> e
com.google.common.base.CharMatcher$Any -> com.google.common.base.l:
    com.google.common.base.CharMatcher$Any INSTANCE -> b
    1:1:com.google.common.base.CharMatcher negate():0:0 -> negate
    1:1:java.util.function.Predicate negate():0 -> negate
com.google.common.base.CharMatcher$AnyOf -> com.google.common.base.m:
    char[] chars -> a
    void setBits(java.util.BitSet) -> e
com.google.common.base.CharMatcher$Ascii -> com.google.common.base.n:
    com.google.common.base.CharMatcher$Ascii INSTANCE -> b
com.google.common.base.CharMatcher$BitSetMatcher -> com.google.common.base.o:
    java.util.BitSet table -> b
    1:1:void <init>(java.util.BitSet,java.lang.String):0:0 -> <init>
    1:1:void <init>(java.util.BitSet,java.lang.String,com.google.common.base.CharMatcher$1):0 -> <init>
    void setBits(java.util.BitSet) -> e
com.google.common.base.CharMatcher$BreakingWhitespace -> com.google.common.base.p:
    com.google.common.base.CharMatcher INSTANCE -> a
com.google.common.base.CharMatcher$Digit -> com.google.common.base.q:
    com.google.common.base.CharMatcher$Digit INSTANCE -> d
    1:1:char[] zeroes():0:0 -> <init>
    1:1:void <init>():0 -> <init>
    2:2:char[] nines():0:0 -> <init>
    2:2:void <init>():0 -> <init>
    3:3:void <init>():0:0 -> <init>
com.google.common.base.CharMatcher$FastMatcher -> com.google.common.base.r:
com.google.common.base.CharMatcher$ForPredicate -> com.google.common.base.s:
    com.google.common.base.Predicate predicate -> a
    1:1:boolean apply(java.lang.Character):0:0 -> apply
    1:1:boolean apply(java.lang.Object):0 -> apply
com.google.common.base.CharMatcher$InRange -> com.google.common.base.t:
    char endInclusive -> b
    char startInclusive -> a
    void setBits(java.util.BitSet) -> e
com.google.common.base.CharMatcher$Invisible -> com.google.common.base.u:
    com.google.common.base.CharMatcher$Invisible INSTANCE -> d
com.google.common.base.CharMatcher$Is -> com.google.common.base.v:
    char match -> a
    void setBits(java.util.BitSet) -> e
com.google.common.base.CharMatcher$IsEither -> com.google.common.base.w:
    char match2 -> b
    char match1 -> a
    void setBits(java.util.BitSet) -> e
com.google.common.base.CharMatcher$IsNot -> com.google.common.base.x:
    char match -> a
    void setBits(java.util.BitSet) -> e
com.google.common.base.CharMatcher$JavaDigit -> com.google.common.base.y:
    com.google.common.base.CharMatcher$JavaDigit INSTANCE -> a
com.google.common.base.CharMatcher$JavaIsoControl -> com.google.common.base.z:
    com.google.common.base.CharMatcher$JavaIsoControl INSTANCE -> b
com.google.common.base.CharMatcher$JavaLetter -> com.google.common.base.a0:
    com.google.common.base.CharMatcher$JavaLetter INSTANCE -> a
com.google.common.base.CharMatcher$JavaLetterOrDigit -> com.google.common.base.b0:
    com.google.common.base.CharMatcher$JavaLetterOrDigit INSTANCE -> a
com.google.common.base.CharMatcher$JavaLowerCase -> com.google.common.base.c0:
    com.google.common.base.CharMatcher$JavaLowerCase INSTANCE -> a
com.google.common.base.CharMatcher$JavaUpperCase -> com.google.common.base.d0:
    com.google.common.base.CharMatcher$JavaUpperCase INSTANCE -> a
com.google.common.base.CharMatcher$NamedFastMatcher -> com.google.common.base.e0:
    java.lang.String description -> a
com.google.common.base.CharMatcher$Negated -> com.google.common.base.f0:
    com.google.common.base.CharMatcher original -> a
    void setBits(java.util.BitSet) -> e
    1:1:com.google.common.base.CharMatcher negate():0:0 -> negate
    1:1:java.util.function.Predicate negate():0 -> negate
com.google.common.base.CharMatcher$NegatedFastMatcher -> com.google.common.base.g0:
com.google.common.base.CharMatcher$None -> com.google.common.base.h0:
    com.google.common.base.CharMatcher$None INSTANCE -> b
    1:1:com.google.common.base.CharMatcher negate():0:0 -> negate
    1:1:java.util.function.Predicate negate():0 -> negate
com.google.common.base.CharMatcher$Or -> com.google.common.base.i0:
    com.google.common.base.CharMatcher second -> b
    com.google.common.base.CharMatcher first -> a
    void setBits(java.util.BitSet) -> e
com.google.common.base.CharMatcher$RangesMatcher -> com.google.common.base.j0:
    char[] rangeStarts -> b
    char[] rangeEnds -> c
    java.lang.String description -> a
com.google.common.base.CharMatcher$SingleWidth -> com.google.common.base.k0:
    com.google.common.base.CharMatcher$SingleWidth INSTANCE -> d
com.google.common.base.CharMatcher$Whitespace -> com.google.common.base.l0:
    com.google.common.base.CharMatcher$Whitespace INSTANCE -> c
    int SHIFT -> b
    void setBits(java.util.BitSet) -> e
com.google.common.base.CommonPattern -> com.google.common.base.m0:
com.google.common.base.Converter -> com.google.common.base.Converter:
    boolean handleNullAutomatically -> a
    com.google.common.base.Converter reverse -> b
    1:1:void <init>(boolean):0:0 -> <init>
    1:1:void <init>():0 -> <init>
    java.lang.Object correctedDoBackward(java.lang.Object) -> a
    java.lang.Object correctedDoForward(java.lang.Object) -> b
    com.google.common.base.Converter doAndThen(com.google.common.base.Converter) -> c
com.google.common.base.Converter$1 -> com.google.common.base.o0:
    java.lang.Iterable val$fromIterable -> a
    com.google.common.base.Converter this$0 -> b
com.google.common.base.Converter$1$1 -> com.google.common.base.n0:
    com.google.common.base.Converter$1 this$1 -> b
    java.util.Iterator fromIterator -> a
com.google.common.base.Converter$ConverterComposition -> com.google.common.base.p0:
    com.google.common.base.Converter first -> c
    com.google.common.base.Converter second -> d
    java.lang.Object correctedDoBackward(java.lang.Object) -> a
    java.lang.Object correctedDoForward(java.lang.Object) -> b
com.google.common.base.Converter$FunctionBasedConverter -> com.google.common.base.q0:
    com.google.common.base.Function forwardFunction -> c
    com.google.common.base.Function backwardFunction -> d
    1:1:void <init>(com.google.common.base.Function,com.google.common.base.Function):0:0 -> <init>
    1:1:void <init>(com.google.common.base.Function,com.google.common.base.Function,com.google.common.base.Converter$1):0 -> <init>
com.google.common.base.Converter$IdentityConverter -> com.google.common.base.r0:
    com.google.common.base.Converter$IdentityConverter INSTANCE -> c
    com.google.common.base.Converter doAndThen(com.google.common.base.Converter) -> c
com.google.common.base.Converter$ReverseConverter -> com.google.common.base.s0:
    com.google.common.base.Converter original -> c
    java.lang.Object correctedDoBackward(java.lang.Object) -> a
    java.lang.Object correctedDoForward(java.lang.Object) -> b
com.google.common.base.Defaults -> com.google.common.base.Defaults:
    java.lang.Double DOUBLE_DEFAULT -> a
    java.lang.Float FLOAT_DEFAULT -> b
com.google.common.base.Enums -> com.google.common.base.Enums:
    java.util.Map enumConstantCache -> a
    1:1:java.util.Map populateCache(java.lang.Class):0:0 -> a
    1:1:java.util.Map getEnumConstants(java.lang.Class):0 -> a
    2:2:java.util.Map getEnumConstants(java.lang.Class):0:0 -> a
    1:1:com.google.common.base.Optional com.google.common.base.Platform.getEnumIfPresent(java.lang.Class,java.lang.String):0:0 -> getIfPresent
    1:1:com.google.common.base.Optional getIfPresent(java.lang.Class,java.lang.String):0 -> getIfPresent
com.google.common.base.Enums$StringConverter -> com.google.common.base.t0:
    java.lang.Class enumClass -> c
    1:1:java.lang.String doBackward(java.lang.Enum):0:0 -> doBackward
    1:1:java.lang.Object doBackward(java.lang.Object):0 -> doBackward
    1:1:java.lang.Enum doForward(java.lang.String):0:0 -> doForward
    1:1:java.lang.Object doForward(java.lang.Object):0 -> doForward
com.google.common.base.Equivalence$1 -> com.google.common.base.u0:
com.google.common.base.Equivalence$Equals -> com.google.common.base.v0:
    com.google.common.base.Equivalence$Equals INSTANCE -> a
com.google.common.base.Equivalence$EquivalentToPredicate -> com.google.common.base.w0:
    com.google.common.base.Equivalence equivalence -> a
    java.lang.Object target -> b
com.google.common.base.Equivalence$Identity -> com.google.common.base.x0:
    com.google.common.base.Equivalence$Identity INSTANCE -> a
com.google.common.base.Equivalence$Wrapper -> com.google.common.base.Equivalence$Wrapper:
    com.google.common.base.Equivalence equivalence -> a
    java.lang.Object reference -> b
    1:1:void <init>(com.google.common.base.Equivalence,java.lang.Object):0:0 -> <init>
    1:1:void <init>(com.google.common.base.Equivalence,java.lang.Object,com.google.common.base.Equivalence$1):0 -> <init>
com.google.common.base.FinalizableReferenceQueue -> com.google.common.base.FinalizableReferenceQueue:
    java.lang.ref.PhantomReference frqRef -> b
    java.util.logging.Logger logger -> d
    java.lang.reflect.Method startFinalizer -> e
    boolean threadStarted -> c
    java.lang.ref.ReferenceQueue queue -> a
    1:1:java.lang.Class loadFinalizer(com.google.common.base.FinalizableReferenceQueue$FinalizerLoader[]):0:0 -> <clinit>
    1:1:void <clinit>():0 -> <clinit>
    2:2:java.lang.reflect.Method getStartFinalizer(java.lang.Class):0:0 -> <clinit>
    2:2:void <clinit>():0 -> <clinit>
    3:3:void <clinit>():0:0 -> <clinit>
    4:4:java.lang.reflect.Method getStartFinalizer(java.lang.Class):0:0 -> <clinit>
    4:4:void <clinit>():0 -> <clinit>
    5:5:java.lang.Class loadFinalizer(com.google.common.base.FinalizableReferenceQueue$FinalizerLoader[]):0:0 -> <clinit>
    5:5:void <clinit>():0 -> <clinit>
    java.util.logging.Logger access$000() -> a
    void cleanUp() -> b
com.google.common.base.FinalizableReferenceQueue$DecoupledLoader -> com.google.common.base.y0:
    java.net.URL getBaseUrl() -> a
    1:1:java.net.URLClassLoader newLoader(java.net.URL):0:0 -> loadFinalizer
    1:1:java.lang.Class loadFinalizer():0 -> loadFinalizer
    2:2:java.lang.Class loadFinalizer():0:0 -> loadFinalizer
com.google.common.base.FinalizableReferenceQueue$DirectLoader -> com.google.common.base.z0:
com.google.common.base.FinalizableReferenceQueue$FinalizerLoader -> com.google.common.base.a1:
com.google.common.base.FinalizableReferenceQueue$SystemLoader -> com.google.common.base.b1:
com.google.common.base.FunctionalEquivalence -> com.google.common.base.c1:
    com.google.common.base.Function function -> a
    com.google.common.base.Equivalence resultEquivalence -> b
com.google.common.base.Functions$1 -> com.google.common.base.d1:
com.google.common.base.Functions$ConstantFunction -> com.google.common.base.e1:
    java.lang.Object value -> a
com.google.common.base.Functions$ForMapWithDefault -> com.google.common.base.f1:
    java.util.Map map -> a
    java.lang.Object defaultValue -> b
com.google.common.base.Functions$FunctionComposition -> com.google.common.base.g1:
    com.google.common.base.Function g -> a
    com.google.common.base.Function f -> b
com.google.common.base.Functions$FunctionForMapNoDefault -> com.google.common.base.h1:
    java.util.Map map -> a
com.google.common.base.Functions$IdentityFunction -> com.google.common.base.i1:
    com.google.common.base.Functions$IdentityFunction[] $VALUES -> b
    com.google.common.base.Functions$IdentityFunction INSTANCE -> a
    com.google.common.base.Functions$IdentityFunction[] $values() -> a
com.google.common.base.Functions$PredicateFunction -> com.google.common.base.j1:
    com.google.common.base.Predicate predicate -> a
    1:1:void <init>(com.google.common.base.Predicate):0:0 -> <init>
    1:1:void <init>(com.google.common.base.Predicate,com.google.common.base.Functions$1):0 -> <init>
    1:1:java.lang.Boolean apply(java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.base.Functions$SupplierFunction -> com.google.common.base.k1:
    com.google.common.base.Supplier supplier -> a
    1:1:void <init>(com.google.common.base.Supplier):0:0 -> <init>
    1:1:void <init>(com.google.common.base.Supplier,com.google.common.base.Functions$1):0 -> <init>
com.google.common.base.Functions$ToStringFunction -> com.google.common.base.l1:
    com.google.common.base.Functions$ToStringFunction INSTANCE -> a
    com.google.common.base.Functions$ToStringFunction[] $VALUES -> b
    com.google.common.base.Functions$ToStringFunction[] $values() -> a
    1:1:java.lang.String apply(java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.base.JdkPattern -> com.google.common.base.n1:
    java.util.regex.Pattern pattern -> a
com.google.common.base.JdkPattern$JdkMatcher -> com.google.common.base.m1:
    java.util.regex.Matcher matcher -> a
    1:1:void com.google.common.base.CommonMatcher.<init>():0:0 -> <init>
    1:1:void <init>(java.util.regex.Matcher):0 -> <init>
    2:2:void <init>(java.util.regex.Matcher):0:0 -> <init>
com.google.common.base.Joiner -> com.google.common.base.Joiner:
    java.lang.String separator -> a
    1:1:void <init>(com.google.common.base.Joiner):0:0 -> <init>
    1:1:void <init>(com.google.common.base.Joiner,com.google.common.base.Joiner$1):0 -> <init>
    java.lang.String access$100(com.google.common.base.Joiner) -> a
    java.lang.Iterable iterable(java.lang.Object,java.lang.Object,java.lang.Object[]) -> b
    java.lang.CharSequence toString(java.lang.Object) -> c
com.google.common.base.Joiner$1 -> com.google.common.base.o1:
    com.google.common.base.Joiner this$0 -> c
    java.lang.String val$nullText -> b
    java.lang.CharSequence toString(java.lang.Object) -> c
com.google.common.base.Joiner$2 -> com.google.common.base.p1:
    com.google.common.base.Joiner this$0 -> b
com.google.common.base.Joiner$3 -> com.google.common.base.q1:
    java.lang.Object[] val$rest -> a
    java.lang.Object val$first -> b
    java.lang.Object val$second -> c
com.google.common.base.Joiner$MapJoiner -> com.google.common.base.Joiner$MapJoiner:
    java.lang.String keyValueSeparator -> b
    com.google.common.base.Joiner joiner -> a
    1:1:void <init>(com.google.common.base.Joiner,java.lang.String):0:0 -> <init>
    1:1:void <init>(com.google.common.base.Joiner,java.lang.String,com.google.common.base.Joiner$1):0 -> <init>
com.google.common.base.MoreObjects$1 -> com.google.common.base.r1:
com.google.common.base.MoreObjects$ToStringHelper -> com.google.common.base.MoreObjects$ToStringHelper:
    com.google.common.base.MoreObjects$ToStringHelper$ValueHolder holderHead -> b
    boolean performedJava8CompatibilityCheck -> e
    java.lang.String className -> a
    com.google.common.base.MoreObjects$ToStringHelper$ValueHolder holderTail -> c
    boolean omitNullValues -> d
    1:1:void <init>(java.lang.String):0:0 -> <init>
    1:1:void <init>(java.lang.String,com.google.common.base.MoreObjects$1):0 -> <init>
    2:2:void java8CompatibilityCheck():0:0 -> <init>
    2:2:void <init>(java.lang.String):0 -> <init>
    2:2:void <init>(java.lang.String,com.google.common.base.MoreObjects$1):0 -> <init>
    3:3:void <init>(java.lang.String):0:0 -> <init>
    3:3:void <init>(java.lang.String,com.google.common.base.MoreObjects$1):0 -> <init>
    4:4:void java8CompatibilityCheck():0:0 -> <init>
    4:4:void <init>(java.lang.String):0 -> <init>
    4:4:void <init>(java.lang.String,com.google.common.base.MoreObjects$1):0 -> <init>
    1:1:com.google.common.base.MoreObjects$ToStringHelper$ValueHolder addHolder():0:0 -> a
    1:1:com.google.common.base.MoreObjects$ToStringHelper addHolder(java.lang.Object):0 -> a
    2:2:com.google.common.base.MoreObjects$ToStringHelper addHolder(java.lang.Object):0:0 -> a
    1:1:com.google.common.base.MoreObjects$ToStringHelper$ValueHolder addHolder():0:0 -> b
    1:1:com.google.common.base.MoreObjects$ToStringHelper addHolder(java.lang.String,java.lang.Object):0 -> b
    2:2:com.google.common.base.MoreObjects$ToStringHelper addHolder(java.lang.String,java.lang.Object):0:0 -> b
com.google.common.base.MoreObjects$ToStringHelper$ValueHolder -> com.google.common.base.s1:
    java.lang.Object value -> b
    java.lang.String name -> a
    com.google.common.base.MoreObjects$ToStringHelper$ValueHolder next -> c
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.base.MoreObjects$1):0 -> <init>
com.google.common.base.Objects -> com.google.common.base.Objects:
    1:1:void com.google.common.base.ExtraObjectsMethodsForWeb.<init>():0:0 -> <init>
    1:1:void <init>():0 -> <init>
com.google.common.base.Optional$1 -> com.google.common.base.u1:
    java.lang.Iterable val$optionals -> a
com.google.common.base.Optional$1$1 -> com.google.common.base.t1:
    java.util.Iterator iterator -> c
    com.google.common.base.Optional$1 this$0 -> d
com.google.common.base.PairwiseEquivalence -> com.google.common.base.v1:
    com.google.common.base.Equivalence elementEquivalence -> a
    1:1:boolean doEquivalent(java.lang.Iterable,java.lang.Iterable):0:0 -> doEquivalent
    1:1:boolean doEquivalent(java.lang.Object,java.lang.Object):0 -> doEquivalent
    1:1:int doHash(java.lang.Iterable):0:0 -> doHash
    1:1:int doHash(java.lang.Object):0 -> doHash
com.google.common.base.Platform -> com.google.common.base.y1:
    com.google.common.base.PatternCompiler patternCompiler -> a
    int $r8$clinit -> b
    1:1:com.google.common.base.PatternCompiler loadPatternCompiler():0:0 -> <clinit>
    1:1:void <clinit>():0 -> <clinit>
    2:2:void <clinit>():0:0 -> <clinit>
    1:1:com.google.common.base.CommonPattern com.google.common.base.Platform$JdkPatternCompiler.compile(java.lang.String):0:0 -> a
    1:1:com.google.common.base.CommonPattern compilePattern(java.lang.String):0 -> a
com.google.common.base.Platform$1 -> com.google.common.base.w1:
com.google.common.base.Platform$JdkPatternCompiler -> com.google.common.base.x1:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.base.Platform$1):0 -> <init>
com.google.common.base.Preconditions -> com.google.common.base.Preconditions:
    java.lang.String badPositionIndex(int,int,java.lang.String) -> a
    1:1:java.lang.String badElementIndex(int,int,java.lang.String):0:0 -> checkElementIndex
    1:1:int checkElementIndex(int,int,java.lang.String):0 -> checkElementIndex
    2:2:int checkElementIndex(int,int,java.lang.String):0:0 -> checkElementIndex
    1:1:java.lang.String badPositionIndexes(int,int,int):0:0 -> checkPositionIndexes
    1:1:void checkPositionIndexes(int,int,int):0 -> checkPositionIndexes
    2:2:void checkPositionIndexes(int,int,int):0:0 -> checkPositionIndexes
com.google.common.base.Predicates -> com.google.common.base.Predicates:
    1:1:java.lang.String toStringHelper(java.lang.String,java.lang.Iterable):0:0 -> a
    1:1:java.lang.String access$800(java.lang.String,java.lang.Iterable):0 -> a
    1:1:java.util.List asList(com.google.common.base.Predicate,com.google.common.base.Predicate):0:0 -> and
    1:1:com.google.common.base.Predicate and(com.google.common.base.Predicate,com.google.common.base.Predicate):0 -> and
    2:2:com.google.common.base.Predicate and(com.google.common.base.Predicate,com.google.common.base.Predicate):0:0 -> and
    3:3:java.util.List defensiveCopy(java.lang.Object[]):0:0 -> and
    3:3:com.google.common.base.Predicate and(com.google.common.base.Predicate[]):0 -> and
    4:4:com.google.common.base.Predicate and(com.google.common.base.Predicate[]):0:0 -> and
    java.util.List defensiveCopy(java.lang.Iterable) -> b
    1:1:java.util.List asList(com.google.common.base.Predicate,com.google.common.base.Predicate):0:0 -> or
    1:1:com.google.common.base.Predicate or(com.google.common.base.Predicate,com.google.common.base.Predicate):0 -> or
    2:2:com.google.common.base.Predicate or(com.google.common.base.Predicate,com.google.common.base.Predicate):0:0 -> or
    3:3:java.util.List defensiveCopy(java.lang.Object[]):0:0 -> or
    3:3:com.google.common.base.Predicate or(com.google.common.base.Predicate[]):0 -> or
    4:4:com.google.common.base.Predicate or(com.google.common.base.Predicate[]):0:0 -> or
com.google.common.base.Predicates$1 -> com.google.common.base.z1:
com.google.common.base.Predicates$AndPredicate -> com.google.common.base.a2:
    java.util.List components -> a
    1:1:void <init>(java.util.List):0:0 -> <init>
    1:1:void <init>(java.util.List,com.google.common.base.Predicates$1):0 -> <init>
com.google.common.base.Predicates$CompositionPredicate -> com.google.common.base.b2:
    com.google.common.base.Function f -> b
    com.google.common.base.Predicate p -> a
    1:1:void <init>(com.google.common.base.Predicate,com.google.common.base.Function):0:0 -> <init>
    1:1:void <init>(com.google.common.base.Predicate,com.google.common.base.Function,com.google.common.base.Predicates$1):0 -> <init>
com.google.common.base.Predicates$ContainsPatternFromStringPredicate -> com.google.common.base.c2:
com.google.common.base.Predicates$ContainsPatternPredicate -> com.google.common.base.d2:
    com.google.common.base.CommonPattern pattern -> a
    1:1:boolean apply(java.lang.CharSequence):0:0 -> apply
    1:1:boolean apply(java.lang.Object):0 -> apply
    2:2:boolean com.google.common.base.JdkPattern$JdkMatcher.find():0:0 -> apply
    2:2:boolean apply(java.lang.CharSequence):0 -> apply
    2:2:boolean apply(java.lang.Object):0 -> apply
com.google.common.base.Predicates$InPredicate -> com.google.common.base.e2:
    java.util.Collection target -> a
    1:1:void <init>(java.util.Collection):0:0 -> <init>
    1:1:void <init>(java.util.Collection,com.google.common.base.Predicates$1):0 -> <init>
com.google.common.base.Predicates$InstanceOfPredicate -> com.google.common.base.f2:
    java.lang.Class clazz -> a
    1:1:void <init>(java.lang.Class):0:0 -> <init>
    1:1:void <init>(java.lang.Class,com.google.common.base.Predicates$1):0 -> <init>
com.google.common.base.Predicates$IsEqualToPredicate -> com.google.common.base.g2:
    java.lang.Object target -> a
    1:1:void <init>(java.lang.Object):0:0 -> <init>
    1:1:void <init>(java.lang.Object,com.google.common.base.Predicates$1):0 -> <init>
com.google.common.base.Predicates$NotPredicate -> com.google.common.base.h2:
    com.google.common.base.Predicate predicate -> a
com.google.common.base.Predicates$ObjectPredicate -> com.google.common.base.m2:
    com.google.common.base.Predicates$ObjectPredicate ALWAYS_FALSE -> b
    com.google.common.base.Predicates$ObjectPredicate ALWAYS_TRUE -> a
    com.google.common.base.Predicates$ObjectPredicate[] $VALUES -> e
    com.google.common.base.Predicates$ObjectPredicate NOT_NULL -> d
    com.google.common.base.Predicates$ObjectPredicate IS_NULL -> c
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:void <init>(java.lang.String,int,com.google.common.base.Predicates$1):0 -> <init>
    com.google.common.base.Predicates$ObjectPredicate[] $values() -> a
com.google.common.base.Predicates$ObjectPredicate$1 -> com.google.common.base.i2:
com.google.common.base.Predicates$ObjectPredicate$2 -> com.google.common.base.j2:
com.google.common.base.Predicates$ObjectPredicate$3 -> com.google.common.base.k2:
com.google.common.base.Predicates$ObjectPredicate$4 -> com.google.common.base.l2:
com.google.common.base.Predicates$OrPredicate -> com.google.common.base.n2:
    java.util.List components -> a
    1:1:void <init>(java.util.List):0:0 -> <init>
    1:1:void <init>(java.util.List,com.google.common.base.Predicates$1):0 -> <init>
com.google.common.base.Predicates$SubtypeOfPredicate -> com.google.common.base.o2:
    java.lang.Class clazz -> a
    1:1:void <init>(java.lang.Class):0:0 -> <init>
    1:1:void <init>(java.lang.Class,com.google.common.base.Predicates$1):0 -> <init>
    1:1:boolean apply(java.lang.Class):0:0 -> apply
    1:1:boolean apply(java.lang.Object):0 -> apply
com.google.common.base.Present -> com.google.common.base.p2:
    java.lang.Object reference -> a
com.google.common.base.SmallCharMatcher -> com.google.common.base.q2:
    char[] table -> b
    long filter -> d
    boolean containsZero -> c
    void setBits(java.util.BitSet) -> e
    1:1:int chooseTableSize(int):0:0 -> f
    1:1:com.google.common.base.CharMatcher from(java.util.BitSet,java.lang.String):0 -> f
    2:2:com.google.common.base.CharMatcher from(java.util.BitSet,java.lang.String):0:0 -> f
    3:3:int smear(int):0:0 -> f
    3:3:com.google.common.base.CharMatcher from(java.util.BitSet,java.lang.String):0 -> f
    4:4:com.google.common.base.CharMatcher from(java.util.BitSet,java.lang.String):0:0 -> f
    1:1:boolean checkFilter(int):0:0 -> matches
    1:1:boolean matches(char):0 -> matches
    2:2:boolean matches(char):0:0 -> matches
    3:3:int smear(int):0:0 -> matches
    3:3:boolean matches(char):0 -> matches
    4:4:boolean matches(char):0:0 -> matches
com.google.common.base.Splitter -> com.google.common.base.Splitter:
    int limit -> d
    com.google.common.base.CharMatcher trimmer -> a
    com.google.common.base.Splitter$Strategy strategy -> c
    boolean omitEmptyStrings -> b
    1:1:void <init>(com.google.common.base.Splitter$Strategy,boolean,com.google.common.base.CharMatcher,int):0:0 -> <init>
    1:1:void <init>(com.google.common.base.Splitter$Strategy):0 -> <init>
    1:1:java.util.Iterator splittingIterator(java.lang.CharSequence):0:0 -> a
    1:1:java.util.Iterator access$000(com.google.common.base.Splitter,java.lang.CharSequence):0 -> a
    com.google.common.base.CharMatcher access$200(com.google.common.base.Splitter) -> b
    boolean access$300(com.google.common.base.Splitter) -> c
    int access$400(com.google.common.base.Splitter) -> d
    1:1:boolean com.google.common.base.JdkPattern$JdkMatcher.matches():0:0 -> e
    1:1:com.google.common.base.Splitter on(com.google.common.base.CommonPattern):0 -> e
    2:2:com.google.common.base.Splitter on(com.google.common.base.CommonPattern):0:0 -> e
    1:1:java.util.Iterator splittingIterator(java.lang.CharSequence):0:0 -> splitToList
    1:1:java.util.List splitToList(java.lang.CharSequence):0 -> splitToList
    2:2:java.util.List splitToList(java.lang.CharSequence):0:0 -> splitToList
com.google.common.base.Splitter$1 -> com.google.common.base.s2:
    com.google.common.base.CharMatcher val$separatorMatcher -> a
    1:1:com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter,java.lang.CharSequence):0:0 -> iterator
    1:1:java.util.Iterator iterator(com.google.common.base.Splitter,java.lang.CharSequence):0 -> iterator
com.google.common.base.Splitter$1$1 -> com.google.common.base.r2:
    com.google.common.base.Splitter$1 this$0 -> h
com.google.common.base.Splitter$2 -> com.google.common.base.u2:
    java.lang.String val$separator -> a
    1:1:com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter,java.lang.CharSequence):0:0 -> iterator
    1:1:java.util.Iterator iterator(com.google.common.base.Splitter,java.lang.CharSequence):0 -> iterator
com.google.common.base.Splitter$2$1 -> com.google.common.base.t2:
    com.google.common.base.Splitter$2 this$0 -> h
com.google.common.base.Splitter$3 -> com.google.common.base.w2:
    com.google.common.base.CommonPattern val$separatorPattern -> a
    1:1:com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter,java.lang.CharSequence):0:0 -> iterator
    1:1:java.util.Iterator iterator(com.google.common.base.Splitter,java.lang.CharSequence):0 -> iterator
com.google.common.base.Splitter$3$1 -> com.google.common.base.v2:
    com.google.common.base.CommonMatcher val$matcher -> h
    1:1:int com.google.common.base.JdkPattern$JdkMatcher.end():0:0 -> separatorEnd
    1:1:int separatorEnd(int):0 -> separatorEnd
    1:1:boolean com.google.common.base.JdkPattern$JdkMatcher.find(int):0:0 -> separatorStart
    1:1:int separatorStart(int):0 -> separatorStart
    2:2:int separatorStart(int):0:0 -> separatorStart
    3:3:int com.google.common.base.JdkPattern$JdkMatcher.start():0:0 -> separatorStart
    3:3:int separatorStart(int):0 -> separatorStart
com.google.common.base.Splitter$4 -> com.google.common.base.y2:
    int val$length -> a
    1:1:com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter,java.lang.CharSequence):0:0 -> iterator
    1:1:java.util.Iterator iterator(com.google.common.base.Splitter,java.lang.CharSequence):0 -> iterator
com.google.common.base.Splitter$4$1 -> com.google.common.base.x2:
    com.google.common.base.Splitter$4 this$0 -> h
com.google.common.base.Splitter$5 -> com.google.common.base.z2:
    com.google.common.base.Splitter this$0 -> b
    java.lang.CharSequence val$sequence -> a
com.google.common.base.Splitter$MapSplitter -> com.google.common.base.Splitter$MapSplitter:
    com.google.common.base.Splitter entrySplitter -> b
    com.google.common.base.Splitter outerSplitter -> a
    1:1:void <init>(com.google.common.base.Splitter,com.google.common.base.Splitter):0:0 -> <init>
    1:1:void <init>(com.google.common.base.Splitter,com.google.common.base.Splitter,com.google.common.base.Splitter$1):0 -> <init>
com.google.common.base.Splitter$SplittingIterator -> com.google.common.base.a3:
    com.google.common.base.CharMatcher trimmer -> d
    java.lang.CharSequence toSplit -> c
    boolean omitEmptyStrings -> e
    int offset -> f
    int limit -> g
    1:1:java.lang.String computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
com.google.common.base.Splitter$Strategy -> com.google.common.base.b3:
com.google.common.base.StandardSystemProperty -> com.google.common.base.StandardSystemProperty:
    com.google.common.base.StandardSystemProperty[] $VALUES -> b
    java.lang.String key -> a
com.google.common.base.Stopwatch -> com.google.common.base.Stopwatch:
    long startTick -> d
    com.google.common.base.Ticker ticker -> a
    long elapsedNanos -> c
    boolean isRunning -> b
    long elapsedNanos() -> a
    1:1:java.util.concurrent.TimeUnit chooseUnit(long):0:0 -> toString
    1:1:java.lang.String toString():0 -> toString
    2:2:java.lang.String toString():0:0 -> toString
    3:3:java.lang.String com.google.common.base.Platform.formatCompact4Digits(double):0:0 -> toString
    3:3:java.lang.String toString():0 -> toString
    4:4:java.lang.String abbreviate(java.util.concurrent.TimeUnit):0:0 -> toString
    4:4:java.lang.String toString():0 -> toString
    5:5:java.lang.String toString():0:0 -> toString
com.google.common.base.Stopwatch$1 -> com.google.common.base.c3:
    int[] $SwitchMap$java$util$concurrent$TimeUnit -> a
com.google.common.base.Strings -> com.google.common.base.Strings:
    boolean validSurrogatePairAt(java.lang.CharSequence,int) -> a
    1:1:java.lang.String com.google.common.base.Platform.emptyToNull(java.lang.String):0:0 -> emptyToNull
    1:1:java.lang.String emptyToNull(java.lang.String):0 -> emptyToNull
    2:2:boolean com.google.common.base.Platform.stringIsNullOrEmpty(java.lang.String):0:0 -> emptyToNull
    2:2:java.lang.String com.google.common.base.Platform.emptyToNull(java.lang.String):0 -> emptyToNull
    2:2:java.lang.String emptyToNull(java.lang.String):0 -> emptyToNull
    1:1:boolean com.google.common.base.Platform.stringIsNullOrEmpty(java.lang.String):0:0 -> isNullOrEmpty
    1:1:boolean isNullOrEmpty(java.lang.String):0 -> isNullOrEmpty
    1:1:java.lang.String lenientToString(java.lang.Object):0:0 -> lenientFormat
    1:1:java.lang.String lenientFormat(java.lang.String,java.lang.Object[]):0 -> lenientFormat
    2:2:java.lang.String lenientFormat(java.lang.String,java.lang.Object[]):0:0 -> lenientFormat
    1:1:java.lang.String com.google.common.base.Platform.nullToEmpty(java.lang.String):0:0 -> nullToEmpty
    1:1:java.lang.String nullToEmpty(java.lang.String):0 -> nullToEmpty
com.google.common.base.Suppliers$ExpiringMemoizingSupplier -> com.google.common.base.d3:
    long durationNanos -> b
    java.lang.Object value -> c
    long expirationNanos -> d
    com.google.common.base.Supplier delegate -> a
    1:1:long com.google.common.base.Platform.systemNanoTime():0:0 -> get
    1:1:java.lang.Object get():0 -> get
    2:2:java.lang.Object get():0:0 -> get
com.google.common.base.Suppliers$MemoizingSupplier -> com.google.common.base.e3:
    java.lang.Object value -> c
    com.google.common.base.Supplier delegate -> a
    boolean initialized -> b
com.google.common.base.Suppliers$NonSerializableMemoizingSupplier -> com.google.common.base.f3:
    java.lang.Object value -> c
    com.google.common.base.Supplier delegate -> a
    boolean initialized -> b
com.google.common.base.Suppliers$SupplierComposition -> com.google.common.base.g3:
    com.google.common.base.Function function -> a
    com.google.common.base.Supplier supplier -> b
com.google.common.base.Suppliers$SupplierFunctionImpl -> com.google.common.base.h3:
    com.google.common.base.Suppliers$SupplierFunctionImpl[] $VALUES -> b
    com.google.common.base.Suppliers$SupplierFunctionImpl INSTANCE -> a
    com.google.common.base.Suppliers$SupplierFunctionImpl[] $values() -> a
    1:1:java.lang.Object apply(com.google.common.base.Supplier):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.base.Suppliers$SupplierOfInstance -> com.google.common.base.i3:
    java.lang.Object instance -> a
com.google.common.base.Suppliers$ThreadSafeSupplier -> com.google.common.base.j3:
    com.google.common.base.Supplier delegate -> a
com.google.common.base.Throwables -> com.google.common.base.Throwables:
    java.lang.reflect.Method getStackTraceDepthMethod -> c
    java.lang.Object jla -> a
    java.lang.reflect.Method getStackTraceElementMethod -> b
    1:1:java.lang.reflect.Method getGetMethod():0:0 -> <clinit>
    1:1:void <clinit>():0 -> <clinit>
    2:2:void <clinit>():0:0 -> <clinit>
    3:3:java.lang.reflect.Method getSizeMethod():0:0 -> <clinit>
    3:3:void <clinit>():0 -> <clinit>
    4:4:void <clinit>():0:0 -> <clinit>
    java.lang.reflect.Method access$000() -> a
    java.lang.Object access$100() -> b
    1:1:java.lang.Object invokeAccessibleNonThrowingMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[]):0:0 -> c
    1:1:java.lang.Object access$200(java.lang.reflect.Method,java.lang.Object,java.lang.Object[]):0 -> c
    java.lang.reflect.Method access$300() -> d
    java.lang.Object getJLA() -> e
    java.lang.reflect.Method getJlaMethod(java.lang.String,java.lang.Class[]) -> f
    1:1:java.util.List jlaStackTrace(java.lang.Throwable):0:0 -> lazyStackTrace
    1:1:java.util.List lazyStackTrace(java.lang.Throwable):0 -> lazyStackTrace
    2:2:java.util.List lazyStackTrace(java.lang.Throwable):0:0 -> lazyStackTrace
com.google.common.base.Throwables$1 -> com.google.common.base.k3:
    java.lang.Throwable val$t -> a
    1:1:java.lang.StackTraceElement get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
com.google.common.base.Ticker -> com.google.common.base.Ticker:
    com.google.common.base.Ticker SYSTEM_TICKER -> a
com.google.common.base.Ticker$1 -> com.google.common.base.l3:
    1:1:long com.google.common.base.Platform.systemNanoTime():0:0 -> read
    1:1:long read():0 -> read
com.google.common.base.Utf8 -> com.google.common.base.Utf8:
    1:1:int encodedLengthGeneral(java.lang.CharSequence,int):0:0 -> encodedLength
    1:1:int encodedLength(java.lang.CharSequence):0 -> encodedLength
    2:2:java.lang.String unpairedSurrogateMsg(int):0:0 -> encodedLength
    2:2:int encodedLengthGeneral(java.lang.CharSequence,int):0 -> encodedLength
    2:2:int encodedLength(java.lang.CharSequence):0 -> encodedLength
    3:3:int encodedLengthGeneral(java.lang.CharSequence,int):0:0 -> encodedLength
    3:3:int encodedLength(java.lang.CharSequence):0 -> encodedLength
    4:4:int encodedLength(java.lang.CharSequence):0:0 -> encodedLength
    1:1:boolean isWellFormedSlowPath(byte[],int,int):0:0 -> isWellFormed
    1:1:boolean isWellFormed(byte[],int,int):0 -> isWellFormed
com.google.common.base.internal.Finalizer -> com.google.common.base.internal.Finalizer:
    java.lang.reflect.Field inheritableThreadLocals -> f
    java.lang.ref.PhantomReference frqReference -> b
    java.util.logging.Logger logger -> d
    java.lang.reflect.Constructor bigThreadConstructor -> e
    java.lang.ref.ReferenceQueue queue -> c
    java.lang.ref.WeakReference finalizableReferenceClassReference -> a
    1:1:java.lang.reflect.Constructor getBigThreadConstructor():0:0 -> <clinit>
    1:1:void <clinit>():0 -> <clinit>
    2:2:void <clinit>():0:0 -> <clinit>
    3:3:java.lang.reflect.Field getInheritableThreadLocalsField():0:0 -> <clinit>
    3:3:void <clinit>():0 -> <clinit>
    4:4:void <clinit>():0:0 -> <clinit>
    1:1:java.lang.reflect.Method getFinalizeReferentMethod():0:0 -> a
    1:1:boolean cleanUp(java.lang.ref.Reference):0 -> a
    2:2:boolean cleanUp(java.lang.ref.Reference):0:0 -> a
    3:3:java.lang.reflect.Method getFinalizeReferentMethod():0:0 -> a
    3:3:boolean cleanUp(java.lang.ref.Reference):0 -> a
com.google.common.cache.-$$Lambda$LocalCache$EntrySet$wyX9Fr3AG0HGMyfXw_doqMI5_xM -> com.google.common.cache.a:
    java.util.function.Predicate f$0 -> a
    1:1:boolean com.google.common.cache.LocalCache$EntrySet.lambda$removeIf$0(java.util.function.Predicate,java.lang.Object,java.lang.Object):0:0 -> test
    1:1:boolean test(java.lang.Object,java.lang.Object):0 -> test
com.google.common.cache.-$$Lambda$LocalCache$GZ-zfBzaDmOFoCrgoBVM5YvBNJ0 -> com.google.common.cache.b:
    java.util.function.BiFunction f$1 -> b
    java.lang.Object f$0 -> a
    1:1:java.lang.Object com.google.common.cache.LocalCache.lambda$merge$2(java.lang.Object,java.util.function.BiFunction,java.lang.Object,java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object,java.lang.Object):0 -> apply
com.google.common.cache.-$$Lambda$LocalCache$Values$Ym3sLsdmuSfnVutzdWg2f1NtHbs -> com.google.common.cache.c:
    java.util.function.Predicate f$0 -> a
    1:1:boolean com.google.common.cache.LocalCache$Values.lambda$removeIf$0(java.util.function.Predicate,java.lang.Object,java.lang.Object):0:0 -> test
    1:1:boolean test(java.lang.Object,java.lang.Object):0 -> test
com.google.common.cache.-$$Lambda$LocalCache$_WwkUFbVbttGViG-f6jdpuXJ7bw -> com.google.common.cache.d:
    java.lang.Object f$1 -> b
    java.util.function.Function f$0 -> a
    1:1:java.lang.Object com.google.common.cache.LocalCache.lambda$computeIfAbsent$0(java.util.function.Function,java.lang.Object,java.lang.Object,java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object,java.lang.Object):0 -> apply
com.google.common.cache.-$$Lambda$LocalCache$vJVeDGGoF7EUhjhtnAVXQs8CnU0 -> com.google.common.cache.e:
    java.util.function.BiFunction f$0 -> a
    1:1:java.lang.Object com.google.common.cache.LocalCache.lambda$computeIfPresent$1(java.util.function.BiFunction,java.lang.Object,java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object,java.lang.Object):0 -> apply
com.google.common.cache.AbstractCache$SimpleStatsCounter -> com.google.common.cache.AbstractCache$SimpleStatsCounter:
    com.google.common.cache.LongAddable loadSuccessCount -> c
    com.google.common.cache.LongAddable loadExceptionCount -> d
    com.google.common.cache.LongAddable hitCount -> a
    com.google.common.cache.LongAddable missCount -> b
    com.google.common.cache.LongAddable totalLoadTime -> e
    com.google.common.cache.LongAddable evictionCount -> f
    long negativeToMaxValue(long) -> a
com.google.common.cache.CacheBuilder -> com.google.common.cache.CacheBuilder:
    long expireAfterAccessNanos -> j
    com.google.common.cache.Weigher weigher -> f
    long expireAfterWriteNanos -> i
    long refreshNanos -> k
    long maximumWeight -> e
    com.google.common.cache.LocalCache$Strength keyStrength -> g
    com.google.common.base.Supplier statsCounterSupplier -> n
    long maximumSize -> d
    int initialCapacity -> b
    int concurrencyLevel -> c
    com.google.common.cache.RemovalListener removalListener -> l
    com.google.common.cache.CacheStats EMPTY_STATS -> p
    com.google.common.base.Supplier NULL_STATS_COUNTER -> o
    com.google.common.cache.LocalCache$Strength valueStrength -> h
    com.google.common.base.Ticker NULL_TICKER -> r
    com.google.common.base.Supplier CACHE_STATS_COUNTER -> q
    boolean strictParsing -> a
    java.util.logging.Logger logger -> s
    com.google.common.base.Ticker ticker -> m
    void checkWeightWithWeigher() -> a
    com.google.common.cache.CacheBuilder setValueStrength(com.google.common.cache.LocalCache$Strength) -> b
    1:1:void checkNonLoadingCache():0:0 -> build
    1:1:com.google.common.cache.Cache build():0 -> build
    2:2:com.google.common.cache.Cache build():0:0 -> build
    long toNanosSaturated(java.time.Duration) -> c
    1:1:com.google.common.cache.CacheBuilder com.google.common.cache.CacheBuilderSpec.toCacheBuilder():0:0 -> from
    1:1:com.google.common.cache.CacheBuilder from(com.google.common.cache.CacheBuilderSpec):0 -> from
    2:2:com.google.common.cache.CacheBuilder lenientParsing():0:0 -> from
    2:2:com.google.common.cache.CacheBuilder from(com.google.common.cache.CacheBuilderSpec):0 -> from
    1:1:com.google.common.cache.CacheBuilder setKeyStrength(com.google.common.cache.LocalCache$Strength):0:0 -> weakKeys
    1:1:com.google.common.cache.CacheBuilder weakKeys():0 -> weakKeys
com.google.common.cache.CacheBuilder$1 -> com.google.common.cache.f:
com.google.common.cache.CacheBuilder$2 -> com.google.common.cache.g:
    1:1:com.google.common.cache.AbstractCache$StatsCounter get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.cache.CacheBuilder$3 -> com.google.common.cache.h:
com.google.common.cache.CacheBuilder$NullListener -> com.google.common.cache.i:
    com.google.common.cache.CacheBuilder$NullListener[] $VALUES -> b
    com.google.common.cache.CacheBuilder$NullListener INSTANCE -> a
com.google.common.cache.CacheBuilder$OneWeigher -> com.google.common.cache.j:
    com.google.common.cache.CacheBuilder$OneWeigher INSTANCE -> a
    com.google.common.cache.CacheBuilder$OneWeigher[] $VALUES -> b
com.google.common.cache.CacheBuilderSpec -> com.google.common.cache.CacheBuilderSpec:
    java.lang.Boolean recordStats -> g
    long accessExpirationDuration -> j
    java.lang.Integer concurrencyLevel -> d
    long refreshDuration -> l
    java.util.concurrent.TimeUnit refreshTimeUnit -> m
    com.google.common.cache.LocalCache$Strength keyStrength -> e
    java.util.concurrent.TimeUnit accessExpirationTimeUnit -> k
    long writeExpirationDuration -> h
    com.google.common.cache.LocalCache$Strength valueStrength -> f
    java.util.concurrent.TimeUnit writeExpirationTimeUnit -> i
    java.lang.Long maximumWeight -> c
    java.lang.String specification -> n
    java.lang.Long maximumSize -> b
    com.google.common.base.Splitter KEY_VALUE_SPLITTER -> p
    com.google.common.base.Splitter KEYS_SPLITTER -> o
    java.lang.Integer initialCapacity -> a
    com.google.common.collect.ImmutableMap VALUE_PARSERS -> q
    1:1:java.lang.String format(java.lang.String,java.lang.Object[]):0:0 -> a
    1:1:java.lang.String access$000(java.lang.String,java.lang.Object[]):0 -> a
    java.lang.Long durationInNanos(long,java.util.concurrent.TimeUnit) -> b
com.google.common.cache.CacheBuilderSpec$AccessDurationParser -> com.google.common.cache.k:
com.google.common.cache.CacheBuilderSpec$ConcurrencyLevelParser -> com.google.common.cache.l:
com.google.common.cache.CacheBuilderSpec$DurationParser -> com.google.common.cache.m:
com.google.common.cache.CacheBuilderSpec$InitialCapacityParser -> com.google.common.cache.n:
com.google.common.cache.CacheBuilderSpec$IntegerParser -> com.google.common.cache.o:
com.google.common.cache.CacheBuilderSpec$KeyStrengthParser -> com.google.common.cache.p:
    com.google.common.cache.LocalCache$Strength strength -> a
com.google.common.cache.CacheBuilderSpec$LongParser -> com.google.common.cache.q:
com.google.common.cache.CacheBuilderSpec$MaximumSizeParser -> com.google.common.cache.r:
com.google.common.cache.CacheBuilderSpec$MaximumWeightParser -> com.google.common.cache.s:
com.google.common.cache.CacheBuilderSpec$RecordStatsParser -> com.google.common.cache.t:
com.google.common.cache.CacheBuilderSpec$RefreshDurationParser -> com.google.common.cache.u:
com.google.common.cache.CacheBuilderSpec$ValueParser -> com.google.common.cache.v:
com.google.common.cache.CacheBuilderSpec$ValueStrengthParser -> com.google.common.cache.w:
    com.google.common.cache.LocalCache$Strength strength -> a
com.google.common.cache.CacheBuilderSpec$WriteDurationParser -> com.google.common.cache.x:
com.google.common.cache.CacheLoader$1 -> com.google.common.cache.z:
    com.google.common.cache.CacheLoader val$loader -> a
    java.util.concurrent.Executor val$executor -> b
com.google.common.cache.CacheLoader$1$1 -> com.google.common.cache.y:
    com.google.common.cache.CacheLoader$1 this$0 -> c
    java.lang.Object val$oldValue -> b
    java.lang.Object val$key -> a
com.google.common.cache.CacheLoader$FunctionToCacheLoader -> com.google.common.cache.a0:
    com.google.common.base.Function computingFunction -> a
com.google.common.cache.CacheLoader$SupplierToCacheLoader -> com.google.common.cache.b0:
    com.google.common.base.Supplier computingSupplier -> a
com.google.common.cache.CacheStats -> com.google.common.cache.CacheStats:
    long evictionCount -> f
    long totalLoadTime -> e
    long missCount -> b
    long hitCount -> a
    long loadExceptionCount -> d
    long loadSuccessCount -> c
com.google.common.cache.ForwardingCache$SimpleForwardingCache -> com.google.common.cache.ForwardingCache$SimpleForwardingCache:
    com.google.common.cache.Cache delegate -> a
com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache -> com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache:
    com.google.common.cache.LoadingCache delegate -> a
com.google.common.cache.LocalCache -> com.google.common.cache.e2:
    long maxWeight -> i
    com.google.common.cache.LocalCache$ValueReference UNSET -> x
    long expireAfterAccessNanos -> k
    com.google.common.cache.Weigher weigher -> j
    com.google.common.cache.CacheLoader defaultLoader -> s
    com.google.common.cache.LocalCache$Strength keyStrength -> g
    com.google.common.cache.LocalCache$EntryFactory entryFactory -> q
    java.util.Queue removalNotificationQueue -> n
    int concurrencyLevel -> d
    com.google.common.base.Equivalence valueEquivalence -> f
    int segmentShift -> b
    com.google.common.cache.LocalCache$Segment[] segments -> c
    java.util.Queue DISCARDING_QUEUE -> y
    com.google.common.cache.AbstractCache$StatsCounter globalStatsCounter -> r
    com.google.common.cache.LocalCache$Strength valueStrength -> h
    long refreshNanos -> m
    long expireAfterWriteNanos -> l
    java.util.Set keySet -> t
    java.util.Set entrySet -> v
    com.google.common.cache.RemovalListener removalListener -> o
    com.google.common.base.Equivalence keyEquivalence -> e
    int segmentMask -> a
    java.util.Collection values -> u
    java.util.logging.Logger logger -> w
    com.google.common.base.Ticker ticker -> p
    1:1:int com.google.common.cache.CacheBuilder.getConcurrencyLevel():0:0 -> <init>
    1:1:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    2:2:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0:0 -> <init>
    3:3:com.google.common.cache.LocalCache$Strength com.google.common.cache.CacheBuilder.getKeyStrength():0:0 -> <init>
    3:3:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    4:4:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0:0 -> <init>
    5:5:com.google.common.cache.LocalCache$Strength com.google.common.cache.CacheBuilder.getValueStrength():0:0 -> <init>
    5:5:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    6:6:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0:0 -> <init>
    7:7:com.google.common.cache.LocalCache$Strength com.google.common.cache.CacheBuilder.getKeyStrength():0:0 -> <init>
    7:7:com.google.common.base.Equivalence com.google.common.cache.CacheBuilder.getKeyEquivalence():0 -> <init>
    7:7:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    8:8:com.google.common.base.Equivalence com.google.common.cache.CacheBuilder.getKeyEquivalence():0:0 -> <init>
    8:8:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    9:9:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0:0 -> <init>
    10:10:com.google.common.cache.LocalCache$Strength com.google.common.cache.CacheBuilder.getValueStrength():0:0 -> <init>
    10:10:com.google.common.base.Equivalence com.google.common.cache.CacheBuilder.getValueEquivalence():0 -> <init>
    10:10:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    11:11:com.google.common.base.Equivalence com.google.common.cache.CacheBuilder.getValueEquivalence():0:0 -> <init>
    11:11:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    12:12:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0:0 -> <init>
    13:13:long com.google.common.cache.CacheBuilder.getMaximumWeight():0:0 -> <init>
    13:13:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    14:14:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0:0 -> <init>
    15:15:com.google.common.cache.Weigher com.google.common.cache.CacheBuilder.getWeigher():0:0 -> <init>
    15:15:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    16:16:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0:0 -> <init>
    17:17:long com.google.common.cache.CacheBuilder.getExpireAfterAccessNanos():0:0 -> <init>
    17:17:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    18:18:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0:0 -> <init>
    19:19:long com.google.common.cache.CacheBuilder.getExpireAfterWriteNanos():0:0 -> <init>
    19:19:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    20:20:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0:0 -> <init>
    21:21:long com.google.common.cache.CacheBuilder.getRefreshNanos():0:0 -> <init>
    21:21:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    22:22:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0:0 -> <init>
    23:23:com.google.common.cache.RemovalListener com.google.common.cache.CacheBuilder.getRemovalListener():0:0 -> <init>
    23:23:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    24:24:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0:0 -> <init>
    25:25:java.util.Queue discardingQueue():0:0 -> <init>
    25:25:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    26:26:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0:0 -> <init>
    27:27:boolean recordsTime():0:0 -> <init>
    27:27:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    28:28:boolean recordsAccess():0:0 -> <init>
    28:28:boolean recordsTime():0 -> <init>
    28:28:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    29:29:com.google.common.base.Ticker com.google.common.cache.CacheBuilder.getTicker(boolean):0:0 -> <init>
    29:29:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    30:30:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0:0 -> <init>
    31:31:boolean usesAccessEntries():0:0 -> <init>
    31:31:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    32:32:boolean recordsAccess():0:0 -> <init>
    32:32:boolean usesAccessEntries():0 -> <init>
    32:32:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    33:33:boolean usesWriteQueue():0:0 -> <init>
    33:33:boolean usesWriteEntries():0 -> <init>
    33:33:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    34:34:boolean usesWriteEntries():0:0 -> <init>
    34:34:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    35:35:com.google.common.cache.LocalCache$EntryFactory com.google.common.cache.LocalCache$EntryFactory.getFactory(com.google.common.cache.LocalCache$Strength,boolean,boolean):0:0 -> <init>
    35:35:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    36:36:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0:0 -> <init>
    37:37:com.google.common.base.Supplier com.google.common.cache.CacheBuilder.getStatsCounterSupplier():0:0 -> <init>
    37:37:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    38:38:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0:0 -> <init>
    39:39:int com.google.common.cache.CacheBuilder.getInitialCapacity():0:0 -> <init>
    39:39:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    40:40:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0:0 -> <init>
    41:41:com.google.common.cache.LocalCache$Segment[] newSegmentArray(int):0:0 -> <init>
    41:41:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    42:42:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0:0 -> <init>
    43:43:com.google.common.base.Supplier com.google.common.cache.CacheBuilder.getStatsCounterSupplier():0:0 -> <init>
    43:43:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    44:44:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0:0 -> <init>
    45:45:com.google.common.cache.LocalCache$Segment createSegment(int,long,com.google.common.cache.AbstractCache$StatsCounter):0:0 -> <init>
    45:45:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    46:46:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0:0 -> <init>
    47:47:com.google.common.base.Supplier com.google.common.cache.CacheBuilder.getStatsCounterSupplier():0:0 -> <init>
    47:47:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    48:48:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0:0 -> <init>
    49:49:com.google.common.cache.LocalCache$Segment createSegment(int,long,com.google.common.cache.AbstractCache$StatsCounter):0:0 -> <init>
    49:49:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0 -> <init>
    50:50:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader):0:0 -> <init>
    1:1:java.util.ArrayList toArrayList(java.util.Collection):0:0 -> a
    1:1:java.util.ArrayList access$200(java.util.Collection):0 -> a
    boolean evictsBySize() -> b
    boolean expiresAfterAccess() -> c
    1:1:void com.google.common.cache.LocalCache$Segment.clear():0:0 -> clear
    1:1:void clear():0 -> clear
    2:2:void com.google.common.cache.LocalCache$Segment.preWriteCleanup(long):0:0 -> clear
    2:2:void com.google.common.cache.LocalCache$Segment.clear():0 -> clear
    2:2:void clear():0 -> clear
    3:3:void com.google.common.cache.LocalCache$Segment.clear():0:0 -> clear
    3:3:void clear():0 -> clear
    4:4:void com.google.common.cache.LocalCache$Segment.clearReferenceQueues():0:0 -> clear
    4:4:void com.google.common.cache.LocalCache$Segment.clear():0 -> clear
    4:4:void clear():0 -> clear
    5:5:void com.google.common.cache.LocalCache$Segment.clearKeyReferenceQueue():0:0 -> clear
    5:5:void com.google.common.cache.LocalCache$Segment.clearReferenceQueues():0 -> clear
    5:5:void com.google.common.cache.LocalCache$Segment.clear():0 -> clear
    5:5:void clear():0 -> clear
    6:6:void com.google.common.cache.LocalCache$Segment.clearReferenceQueues():0:0 -> clear
    6:6:void com.google.common.cache.LocalCache$Segment.clear():0 -> clear
    6:6:void clear():0 -> clear
    7:7:void com.google.common.cache.LocalCache$Segment.clearValueReferenceQueue():0:0 -> clear
    7:7:void com.google.common.cache.LocalCache$Segment.clearReferenceQueues():0 -> clear
    7:7:void com.google.common.cache.LocalCache$Segment.clear():0 -> clear
    7:7:void clear():0 -> clear
    8:8:void com.google.common.cache.LocalCache$Segment.clear():0:0 -> clear
    8:8:void clear():0 -> clear
    9:9:void com.google.common.cache.LocalCache$Segment.postWriteCleanup():0:0 -> clear
    9:9:void com.google.common.cache.LocalCache$Segment.clear():0 -> clear
    9:9:void clear():0 -> clear
    10:10:void com.google.common.cache.LocalCache$Segment.clear():0:0 -> clear
    10:10:void clear():0 -> clear
    11:11:void com.google.common.cache.LocalCache$Segment.postWriteCleanup():0:0 -> clear
    11:11:void com.google.common.cache.LocalCache$Segment.clear():0 -> clear
    11:11:void clear():0 -> clear
    12:12:void com.google.common.cache.LocalCache$Segment.clear():0:0 -> clear
    12:12:void clear():0 -> clear
    1:1:java.lang.Object com.google.common.cache.LocalCache$Segment.compute(java.lang.Object,int,java.util.function.BiFunction):0:0 -> compute
    1:1:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction):0 -> compute
    2:2:void com.google.common.cache.LocalCache$Segment.preWriteCleanup(long):0:0 -> compute
    2:2:java.lang.Object com.google.common.cache.LocalCache$Segment.compute(java.lang.Object,int,java.util.function.BiFunction):0 -> compute
    2:2:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction):0 -> compute
    3:3:java.lang.Object com.google.common.cache.LocalCache$Segment.compute(java.lang.Object,int,java.util.function.BiFunction):0:0 -> compute
    3:3:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction):0 -> compute
    4:4:com.google.common.cache.ReferenceEntry com.google.common.cache.LocalCache$Segment.newEntry(java.lang.Object,int,com.google.common.cache.ReferenceEntry):0:0 -> compute
    4:4:java.lang.Object com.google.common.cache.LocalCache$Segment.compute(java.lang.Object,int,java.util.function.BiFunction):0 -> compute
    4:4:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction):0 -> compute
    5:5:java.lang.Object com.google.common.cache.LocalCache$Segment.compute(java.lang.Object,int,java.util.function.BiFunction):0:0 -> compute
    5:5:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction):0 -> compute
    6:6:java.lang.Object com.google.common.cache.LocalCache$LoadingValueReference.compute(java.lang.Object,java.util.function.BiFunction):0:0 -> compute
    6:6:java.lang.Object com.google.common.cache.LocalCache$Segment.compute(java.lang.Object,int,java.util.function.BiFunction):0 -> compute
    6:6:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction):0 -> compute
    7:7:java.lang.Object com.google.common.cache.LocalCache$Segment.compute(java.lang.Object,int,java.util.function.BiFunction):0:0 -> compute
    7:7:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction):0 -> compute
    8:8:boolean com.google.common.cache.LocalCache$LoadingValueReference.set(java.lang.Object):0:0 -> compute
    8:8:java.lang.Object com.google.common.cache.LocalCache$Segment.compute(java.lang.Object,int,java.util.function.BiFunction):0 -> compute
    8:8:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction):0 -> compute
    9:9:java.lang.Object com.google.common.cache.LocalCache$Segment.compute(java.lang.Object,int,java.util.function.BiFunction):0:0 -> compute
    9:9:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction):0 -> compute
    10:10:void com.google.common.cache.LocalCache$Segment.postWriteCleanup():0:0 -> compute
    10:10:java.lang.Object com.google.common.cache.LocalCache$Segment.compute(java.lang.Object,int,java.util.function.BiFunction):0 -> compute
    10:10:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction):0 -> compute
    11:11:java.lang.Object com.google.common.cache.LocalCache$Segment.compute(java.lang.Object,int,java.util.function.BiFunction):0:0 -> compute
    11:11:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction):0 -> compute
    12:12:void com.google.common.cache.LocalCache$Segment.postWriteCleanup():0:0 -> compute
    12:12:java.lang.Object com.google.common.cache.LocalCache$Segment.compute(java.lang.Object,int,java.util.function.BiFunction):0 -> compute
    12:12:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction):0 -> compute
    13:13:java.lang.Object com.google.common.cache.LocalCache$Segment.compute(java.lang.Object,int,java.util.function.BiFunction):0:0 -> compute
    13:13:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction):0 -> compute
    14:14:void com.google.common.cache.LocalCache$Segment.postWriteCleanup():0:0 -> compute
    14:14:java.lang.Object com.google.common.cache.LocalCache$Segment.compute(java.lang.Object,int,java.util.function.BiFunction):0 -> compute
    14:14:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction):0 -> compute
    15:15:java.lang.Object com.google.common.cache.LocalCache$Segment.compute(java.lang.Object,int,java.util.function.BiFunction):0:0 -> compute
    15:15:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction):0 -> compute
    16:16:boolean com.google.common.cache.LocalCache$LoadingValueReference.setException(java.lang.Throwable):0:0 -> compute
    16:16:java.lang.Object com.google.common.cache.LocalCache$LoadingValueReference.compute(java.lang.Object,java.util.function.BiFunction):0 -> compute
    16:16:java.lang.Object com.google.common.cache.LocalCache$Segment.compute(java.lang.Object,int,java.util.function.BiFunction):0 -> compute
    16:16:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction):0 -> compute
    17:17:java.lang.Object com.google.common.cache.LocalCache$LoadingValueReference.compute(java.lang.Object,java.util.function.BiFunction):0:0 -> compute
    17:17:java.lang.Object com.google.common.cache.LocalCache$Segment.compute(java.lang.Object,int,java.util.function.BiFunction):0 -> compute
    17:17:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction):0 -> compute
    18:18:java.lang.Object com.google.common.cache.LocalCache$Segment.compute(java.lang.Object,int,java.util.function.BiFunction):0:0 -> compute
    18:18:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction):0 -> compute
    19:19:void com.google.common.cache.LocalCache$Segment.postWriteCleanup():0:0 -> compute
    19:19:java.lang.Object com.google.common.cache.LocalCache$Segment.compute(java.lang.Object,int,java.util.function.BiFunction):0 -> compute
    19:19:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction):0 -> compute
    20:20:java.lang.Object com.google.common.cache.LocalCache$Segment.compute(java.lang.Object,int,java.util.function.BiFunction):0:0 -> compute
    20:20:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction):0 -> compute
    1:1:boolean com.google.common.cache.LocalCache$Segment.containsKey(java.lang.Object,int):0:0 -> containsKey
    1:1:boolean containsKey(java.lang.Object):0 -> containsKey
    boolean expiresAfterWrite() -> d
    1:1:java.lang.Object com.google.common.cache.LocalCache$Segment.get(java.lang.Object,int,com.google.common.cache.CacheLoader):0:0 -> e
    1:1:java.lang.Object get(java.lang.Object,com.google.common.cache.CacheLoader):0 -> e
    int hash(java.lang.Object) -> f
    boolean isExpired(com.google.common.cache.ReferenceEntry,long) -> g
    java.util.Map loadAll(java.util.Set,com.google.common.cache.CacheLoader) -> h
    long longSize() -> i
    1:1:boolean refreshes():0:0 -> j
    1:1:boolean recordsWrite():0 -> j
    boolean removeIf(java.util.function.BiPredicate) -> k
    com.google.common.cache.LocalCache$Segment segmentFor(int) -> l
    boolean usesAccessQueue() -> m
    boolean usesKeyReferences() -> n
    boolean usesValueReferences() -> o
    1:1:java.lang.Object com.google.common.cache.LocalCache$Segment.remove(java.lang.Object,int):0:0 -> remove
    1:1:java.lang.Object remove(java.lang.Object):0 -> remove
    2:2:void com.google.common.cache.LocalCache$Segment.preWriteCleanup(long):0:0 -> remove
    2:2:java.lang.Object com.google.common.cache.LocalCache$Segment.remove(java.lang.Object,int):0 -> remove
    2:2:java.lang.Object remove(java.lang.Object):0 -> remove
    3:3:java.lang.Object com.google.common.cache.LocalCache$Segment.remove(java.lang.Object,int):0:0 -> remove
    3:3:java.lang.Object remove(java.lang.Object):0 -> remove
    4:4:void com.google.common.cache.LocalCache$Segment.postWriteCleanup():0:0 -> remove
    4:4:java.lang.Object com.google.common.cache.LocalCache$Segment.remove(java.lang.Object,int):0 -> remove
    4:4:java.lang.Object remove(java.lang.Object):0 -> remove
    5:5:java.lang.Object com.google.common.cache.LocalCache$Segment.remove(java.lang.Object,int):0:0 -> remove
    5:5:java.lang.Object remove(java.lang.Object):0 -> remove
    6:6:void com.google.common.cache.LocalCache$Segment.postWriteCleanup():0:0 -> remove
    6:6:java.lang.Object com.google.common.cache.LocalCache$Segment.remove(java.lang.Object,int):0 -> remove
    6:6:java.lang.Object remove(java.lang.Object):0 -> remove
    7:7:java.lang.Object com.google.common.cache.LocalCache$Segment.remove(java.lang.Object,int):0:0 -> remove
    7:7:java.lang.Object remove(java.lang.Object):0 -> remove
    8:8:void com.google.common.cache.LocalCache$Segment.postWriteCleanup():0:0 -> remove
    8:8:java.lang.Object com.google.common.cache.LocalCache$Segment.remove(java.lang.Object,int):0 -> remove
    8:8:java.lang.Object remove(java.lang.Object):0 -> remove
    9:9:java.lang.Object com.google.common.cache.LocalCache$Segment.remove(java.lang.Object,int):0:0 -> remove
    9:9:java.lang.Object remove(java.lang.Object):0 -> remove
    10:10:boolean com.google.common.cache.LocalCache$Segment.remove(java.lang.Object,int,java.lang.Object):0:0 -> remove
    10:10:boolean remove(java.lang.Object,java.lang.Object):0 -> remove
    11:11:void com.google.common.cache.LocalCache$Segment.preWriteCleanup(long):0:0 -> remove
    11:11:boolean com.google.common.cache.LocalCache$Segment.remove(java.lang.Object,int,java.lang.Object):0 -> remove
    11:11:boolean remove(java.lang.Object,java.lang.Object):0 -> remove
    12:12:boolean com.google.common.cache.LocalCache$Segment.remove(java.lang.Object,int,java.lang.Object):0:0 -> remove
    12:12:boolean remove(java.lang.Object,java.lang.Object):0 -> remove
    13:13:void com.google.common.cache.LocalCache$Segment.postWriteCleanup():0:0 -> remove
    13:13:boolean com.google.common.cache.LocalCache$Segment.remove(java.lang.Object,int,java.lang.Object):0 -> remove
    13:13:boolean remove(java.lang.Object,java.lang.Object):0 -> remove
    14:14:boolean com.google.common.cache.LocalCache$Segment.remove(java.lang.Object,int,java.lang.Object):0:0 -> remove
    14:14:boolean remove(java.lang.Object,java.lang.Object):0 -> remove
    15:15:void com.google.common.cache.LocalCache$Segment.postWriteCleanup():0:0 -> remove
    15:15:boolean com.google.common.cache.LocalCache$Segment.remove(java.lang.Object,int,java.lang.Object):0 -> remove
    15:15:boolean remove(java.lang.Object,java.lang.Object):0 -> remove
    16:16:boolean com.google.common.cache.LocalCache$Segment.remove(java.lang.Object,int,java.lang.Object):0:0 -> remove
    16:16:boolean remove(java.lang.Object,java.lang.Object):0 -> remove
    1:1:java.lang.Object com.google.common.cache.LocalCache$Segment.replace(java.lang.Object,int,java.lang.Object):0:0 -> replace
    1:1:java.lang.Object replace(java.lang.Object,java.lang.Object):0 -> replace
    2:2:void com.google.common.cache.LocalCache$Segment.preWriteCleanup(long):0:0 -> replace
    2:2:java.lang.Object com.google.common.cache.LocalCache$Segment.replace(java.lang.Object,int,java.lang.Object):0 -> replace
    2:2:java.lang.Object replace(java.lang.Object,java.lang.Object):0 -> replace
    3:3:java.lang.Object com.google.common.cache.LocalCache$Segment.replace(java.lang.Object,int,java.lang.Object):0:0 -> replace
    3:3:java.lang.Object replace(java.lang.Object,java.lang.Object):0 -> replace
    4:4:void com.google.common.cache.LocalCache$Segment.postWriteCleanup():0:0 -> replace
    4:4:java.lang.Object com.google.common.cache.LocalCache$Segment.replace(java.lang.Object,int,java.lang.Object):0 -> replace
    4:4:java.lang.Object replace(java.lang.Object,java.lang.Object):0 -> replace
    5:5:java.lang.Object com.google.common.cache.LocalCache$Segment.replace(java.lang.Object,int,java.lang.Object):0:0 -> replace
    5:5:java.lang.Object replace(java.lang.Object,java.lang.Object):0 -> replace
    6:6:void com.google.common.cache.LocalCache$Segment.postWriteCleanup():0:0 -> replace
    6:6:java.lang.Object com.google.common.cache.LocalCache$Segment.replace(java.lang.Object,int,java.lang.Object):0 -> replace
    6:6:java.lang.Object replace(java.lang.Object,java.lang.Object):0 -> replace
    7:7:java.lang.Object com.google.common.cache.LocalCache$Segment.replace(java.lang.Object,int,java.lang.Object):0:0 -> replace
    7:7:java.lang.Object replace(java.lang.Object,java.lang.Object):0 -> replace
    8:8:void com.google.common.cache.LocalCache$Segment.postWriteCleanup():0:0 -> replace
    8:8:java.lang.Object com.google.common.cache.LocalCache$Segment.replace(java.lang.Object,int,java.lang.Object):0 -> replace
    8:8:java.lang.Object replace(java.lang.Object,java.lang.Object):0 -> replace
    9:9:java.lang.Object com.google.common.cache.LocalCache$Segment.replace(java.lang.Object,int,java.lang.Object):0:0 -> replace
    9:9:java.lang.Object replace(java.lang.Object,java.lang.Object):0 -> replace
    10:10:boolean com.google.common.cache.LocalCache$Segment.replace(java.lang.Object,int,java.lang.Object,java.lang.Object):0:0 -> replace
    10:10:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object):0 -> replace
    11:11:void com.google.common.cache.LocalCache$Segment.preWriteCleanup(long):0:0 -> replace
    11:11:boolean com.google.common.cache.LocalCache$Segment.replace(java.lang.Object,int,java.lang.Object,java.lang.Object):0 -> replace
    11:11:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object):0 -> replace
    12:12:boolean com.google.common.cache.LocalCache$Segment.replace(java.lang.Object,int,java.lang.Object,java.lang.Object):0:0 -> replace
    12:12:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object):0 -> replace
    13:13:void com.google.common.cache.LocalCache$Segment.postWriteCleanup():0:0 -> replace
    13:13:boolean com.google.common.cache.LocalCache$Segment.replace(java.lang.Object,int,java.lang.Object,java.lang.Object):0 -> replace
    13:13:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object):0 -> replace
    14:14:boolean com.google.common.cache.LocalCache$Segment.replace(java.lang.Object,int,java.lang.Object,java.lang.Object):0:0 -> replace
    14:14:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object):0 -> replace
    15:15:void com.google.common.cache.LocalCache$Segment.postWriteCleanup():0:0 -> replace
    15:15:boolean com.google.common.cache.LocalCache$Segment.replace(java.lang.Object,int,java.lang.Object,java.lang.Object):0 -> replace
    15:15:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object):0 -> replace
    16:16:boolean com.google.common.cache.LocalCache$Segment.replace(java.lang.Object,int,java.lang.Object,java.lang.Object):0:0 -> replace
    16:16:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object):0 -> replace
    17:17:void com.google.common.cache.LocalCache$Segment.postWriteCleanup():0:0 -> replace
    17:17:boolean com.google.common.cache.LocalCache$Segment.replace(java.lang.Object,int,java.lang.Object,java.lang.Object):0 -> replace
    17:17:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object):0 -> replace
    18:18:boolean com.google.common.cache.LocalCache$Segment.replace(java.lang.Object,int,java.lang.Object,java.lang.Object):0:0 -> replace
    18:18:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object):0 -> replace
com.google.common.cache.LocalCache$1 -> com.google.common.cache.c0:
com.google.common.cache.LocalCache$2 -> com.google.common.cache.d0:
com.google.common.cache.LocalCache$AbstractCacheSet -> com.google.common.cache.e0:
    com.google.common.cache.LocalCache this$0 -> a
com.google.common.cache.LocalCache$AbstractReferenceEntry -> com.google.common.cache.f0:
com.google.common.cache.LocalCache$AccessQueue -> com.google.common.cache.i0:
    com.google.common.cache.ReferenceEntry head -> a
    1:1:void com.google.common.cache.LocalCache.nullifyAccessOrder(com.google.common.cache.ReferenceEntry):0:0 -> clear
    1:1:void clear():0 -> clear
    2:2:void clear():0:0 -> clear
    1:1:com.google.common.cache.ReferenceEntry peek():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
    2:2:java.util.Iterator iterator():0:0 -> iterator
    1:1:boolean offer(com.google.common.cache.ReferenceEntry):0:0 -> offer
    1:1:boolean offer(java.lang.Object):0 -> offer
    2:2:void com.google.common.cache.LocalCache.connectAccessOrder(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> offer
    2:2:boolean offer(com.google.common.cache.ReferenceEntry):0 -> offer
    2:2:boolean offer(java.lang.Object):0 -> offer
    3:3:boolean offer(com.google.common.cache.ReferenceEntry):0:0 -> offer
    3:3:boolean offer(java.lang.Object):0 -> offer
    4:4:void com.google.common.cache.LocalCache.connectAccessOrder(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> offer
    4:4:boolean offer(com.google.common.cache.ReferenceEntry):0 -> offer
    4:4:boolean offer(java.lang.Object):0 -> offer
    5:5:boolean offer(com.google.common.cache.ReferenceEntry):0:0 -> offer
    5:5:boolean offer(java.lang.Object):0 -> offer
    6:6:void com.google.common.cache.LocalCache.connectAccessOrder(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> offer
    6:6:boolean offer(com.google.common.cache.ReferenceEntry):0 -> offer
    6:6:boolean offer(java.lang.Object):0 -> offer
    1:1:com.google.common.cache.ReferenceEntry peek():0:0 -> peek
    1:1:java.lang.Object peek():0 -> peek
    1:1:com.google.common.cache.ReferenceEntry poll():0:0 -> poll
    1:1:java.lang.Object poll():0 -> poll
    1:1:void com.google.common.cache.LocalCache.connectAccessOrder(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> remove
    1:1:boolean remove(java.lang.Object):0 -> remove
    2:2:void com.google.common.cache.LocalCache.nullifyAccessOrder(com.google.common.cache.ReferenceEntry):0:0 -> remove
    2:2:boolean remove(java.lang.Object):0 -> remove
com.google.common.cache.LocalCache$AccessQueue$1 -> com.google.common.cache.g0:
    com.google.common.cache.ReferenceEntry previousAccess -> b
    com.google.common.cache.ReferenceEntry nextAccess -> a
com.google.common.cache.LocalCache$AccessQueue$2 -> com.google.common.cache.h0:
    com.google.common.cache.LocalCache$AccessQueue this$0 -> b
    1:1:com.google.common.cache.ReferenceEntry computeNext(com.google.common.cache.ReferenceEntry):0:0 -> computeNext
    1:1:java.lang.Object computeNext(java.lang.Object):0 -> computeNext
com.google.common.cache.LocalCache$EntryFactory -> com.google.common.cache.r0:
    com.google.common.cache.LocalCache$EntryFactory WEAK_WRITE -> g
    com.google.common.cache.LocalCache$EntryFactory WEAK_ACCESS_WRITE -> h
    com.google.common.cache.LocalCache$EntryFactory STRONG -> a
    com.google.common.cache.LocalCache$EntryFactory STRONG_ACCESS -> b
    com.google.common.cache.LocalCache$EntryFactory[] $VALUES -> j
    com.google.common.cache.LocalCache$EntryFactory[] factories -> i
    com.google.common.cache.LocalCache$EntryFactory WEAK -> e
    com.google.common.cache.LocalCache$EntryFactory WEAK_ACCESS -> f
    com.google.common.cache.LocalCache$EntryFactory STRONG_WRITE -> c
    com.google.common.cache.LocalCache$EntryFactory STRONG_ACCESS_WRITE -> d
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1):0 -> <init>
    1:1:void com.google.common.cache.LocalCache.connectAccessOrder(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> a
    1:1:void copyAccessEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0 -> a
    2:2:void copyAccessEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> a
    3:3:void com.google.common.cache.LocalCache.connectAccessOrder(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> a
    3:3:void copyAccessEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0 -> a
    4:4:void com.google.common.cache.LocalCache.nullifyAccessOrder(com.google.common.cache.ReferenceEntry):0:0 -> a
    4:4:void copyAccessEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0 -> a
    com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> b
    1:1:void com.google.common.cache.LocalCache.connectWriteOrder(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> c
    1:1:void copyWriteEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0 -> c
    2:2:void copyWriteEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> c
    3:3:void com.google.common.cache.LocalCache.connectWriteOrder(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> c
    3:3:void copyWriteEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0 -> c
    4:4:void com.google.common.cache.LocalCache.nullifyWriteOrder(com.google.common.cache.ReferenceEntry):0:0 -> c
    4:4:void copyWriteEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0 -> c
    com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> d
com.google.common.cache.LocalCache$EntryFactory$1 -> com.google.common.cache.j0:
    com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> d
com.google.common.cache.LocalCache$EntryFactory$2 -> com.google.common.cache.k0:
    1:1:com.google.common.cache.ReferenceEntry com.google.common.cache.LocalCache$EntryFactory.copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> b
    1:1:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0 -> b
    2:2:com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry):0:0 -> b
    2:2:com.google.common.cache.ReferenceEntry com.google.common.cache.LocalCache$EntryFactory.copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0 -> b
    2:2:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0 -> b
    3:3:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> b
    com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> d
com.google.common.cache.LocalCache$EntryFactory$3 -> com.google.common.cache.l0:
    1:1:com.google.common.cache.ReferenceEntry com.google.common.cache.LocalCache$EntryFactory.copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> b
    1:1:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0 -> b
    2:2:com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry):0:0 -> b
    2:2:com.google.common.cache.ReferenceEntry com.google.common.cache.LocalCache$EntryFactory.copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0 -> b
    2:2:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0 -> b
    3:3:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> b
    com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> d
com.google.common.cache.LocalCache$EntryFactory$4 -> com.google.common.cache.m0:
    1:1:com.google.common.cache.ReferenceEntry com.google.common.cache.LocalCache$EntryFactory.copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> b
    1:1:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0 -> b
    2:2:com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry):0:0 -> b
    2:2:com.google.common.cache.ReferenceEntry com.google.common.cache.LocalCache$EntryFactory.copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0 -> b
    2:2:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0 -> b
    3:3:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> b
    com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> d
com.google.common.cache.LocalCache$EntryFactory$5 -> com.google.common.cache.n0:
    com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> d
com.google.common.cache.LocalCache$EntryFactory$6 -> com.google.common.cache.o0:
    1:1:com.google.common.cache.ReferenceEntry com.google.common.cache.LocalCache$EntryFactory.copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> b
    1:1:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0 -> b
    2:2:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> b
    com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> d
com.google.common.cache.LocalCache$EntryFactory$7 -> com.google.common.cache.p0:
    1:1:com.google.common.cache.ReferenceEntry com.google.common.cache.LocalCache$EntryFactory.copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> b
    1:1:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0 -> b
    2:2:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> b
    com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> d
com.google.common.cache.LocalCache$EntryFactory$8 -> com.google.common.cache.q0:
    1:1:com.google.common.cache.ReferenceEntry com.google.common.cache.LocalCache$EntryFactory.copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> b
    1:1:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0 -> b
    2:2:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> b
    com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> d
com.google.common.cache.LocalCache$EntryIterator -> com.google.common.cache.s0:
    1:1:java.util.Map$Entry next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
com.google.common.cache.LocalCache$EntrySet -> com.google.common.cache.t0:
    com.google.common.cache.LocalCache this$0 -> b
com.google.common.cache.LocalCache$HashIterator -> com.google.common.cache.u0:
    com.google.common.cache.LocalCache$WriteThroughEntry lastReturned -> g
    com.google.common.cache.ReferenceEntry nextEntry -> e
    com.google.common.cache.LocalCache$Segment currentSegment -> c
    java.util.concurrent.atomic.AtomicReferenceArray currentTable -> d
    int nextTableIndex -> b
    com.google.common.cache.LocalCache this$0 -> h
    com.google.common.cache.LocalCache$WriteThroughEntry nextExternal -> f
    int nextSegmentIndex -> a
    void advance() -> a
    1:1:java.lang.Object com.google.common.cache.LocalCache.getLiveValue(com.google.common.cache.ReferenceEntry,long):0:0 -> b
    1:1:boolean advanceTo(com.google.common.cache.ReferenceEntry):0 -> b
    2:2:boolean advanceTo(com.google.common.cache.ReferenceEntry):0:0 -> b
    com.google.common.cache.LocalCache$WriteThroughEntry nextEntry() -> c
    boolean nextInChain() -> d
    boolean nextInTable() -> e
    1:1:java.lang.Object com.google.common.cache.LocalCache$WriteThroughEntry.getKey():0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
com.google.common.cache.LocalCache$KeyIterator -> com.google.common.cache.v0:
    1:1:java.lang.Object com.google.common.cache.LocalCache$WriteThroughEntry.getKey():0:0 -> next
    1:1:java.lang.Object next():0 -> next
com.google.common.cache.LocalCache$KeySet -> com.google.common.cache.w0:
    com.google.common.cache.LocalCache this$0 -> b
com.google.common.cache.LocalCache$LoadingValueReference -> com.google.common.cache.y0:
    com.google.common.cache.LocalCache$ValueReference oldValue -> a
    com.google.common.base.Stopwatch stopwatch -> c
    com.google.common.util.concurrent.SettableFuture futureValue -> b
    1:1:com.google.common.cache.LocalCache$ValueReference com.google.common.cache.LocalCache.unset():0:0 -> <init>
    1:1:void <init>(com.google.common.cache.LocalCache$ValueReference):0 -> <init>
    2:2:void <init>(com.google.common.cache.LocalCache$ValueReference):0:0 -> <init>
    1:1:boolean setException(java.lang.Throwable):0:0 -> loadFuture
    1:1:com.google.common.util.concurrent.ListenableFuture loadFuture(java.lang.Object,com.google.common.cache.CacheLoader):0 -> loadFuture
    2:2:com.google.common.util.concurrent.ListenableFuture loadFuture(java.lang.Object,com.google.common.cache.CacheLoader):0:0 -> loadFuture
    3:3:com.google.common.util.concurrent.ListenableFuture fullyFailedFuture(java.lang.Throwable):0:0 -> loadFuture
    3:3:com.google.common.util.concurrent.ListenableFuture loadFuture(java.lang.Object,com.google.common.cache.CacheLoader):0 -> loadFuture
    4:4:com.google.common.util.concurrent.ListenableFuture loadFuture(java.lang.Object,com.google.common.cache.CacheLoader):0:0 -> loadFuture
    1:1:boolean set(java.lang.Object):0:0 -> notifyNewValue
    1:1:void notifyNewValue(java.lang.Object):0 -> notifyNewValue
    2:2:com.google.common.cache.LocalCache$ValueReference com.google.common.cache.LocalCache.unset():0:0 -> notifyNewValue
    2:2:void notifyNewValue(java.lang.Object):0 -> notifyNewValue
    3:3:void notifyNewValue(java.lang.Object):0:0 -> notifyNewValue
com.google.common.cache.LocalCache$LoadingValueReference$1 -> com.google.common.cache.x0:
    com.google.common.cache.LocalCache$LoadingValueReference this$0 -> a
    1:1:boolean com.google.common.cache.LocalCache$LoadingValueReference.set(java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.cache.LocalCache$LocalLoadingCache -> com.google.common.cache.z0:
    1:1:java.lang.Object com.google.common.cache.LocalCache.getOrLoad(java.lang.Object):0:0 -> get
    1:1:java.lang.Object get(java.lang.Object):0 -> get
    1:1:com.google.common.collect.ImmutableMap com.google.common.cache.LocalCache.getAll(java.lang.Iterable):0:0 -> getAll
    1:1:com.google.common.collect.ImmutableMap getAll(java.lang.Iterable):0 -> getAll
    1:1:java.lang.Object get(java.lang.Object):0:0 -> getUnchecked
    1:1:java.lang.Object getUnchecked(java.lang.Object):0 -> getUnchecked
    2:2:java.lang.Object com.google.common.cache.LocalCache.getOrLoad(java.lang.Object):0:0 -> getUnchecked
    2:2:java.lang.Object get(java.lang.Object):0 -> getUnchecked
    2:2:java.lang.Object getUnchecked(java.lang.Object):0 -> getUnchecked
    3:3:java.lang.Object getUnchecked(java.lang.Object):0:0 -> getUnchecked
    1:1:void com.google.common.cache.LocalCache.refresh(java.lang.Object):0:0 -> refresh
    1:1:void refresh(java.lang.Object):0 -> refresh
com.google.common.cache.LocalCache$LocalManualCache -> com.google.common.cache.b1:
    com.google.common.cache.LocalCache localCache -> a
    1:1:void <init>(com.google.common.cache.LocalCache):0:0 -> <init>
    1:1:void <init>(com.google.common.cache.CacheBuilder):0 -> <init>
    2:2:void <init>(com.google.common.cache.LocalCache):0:0 -> <init>
    2:2:void <init>(com.google.common.cache.LocalCache,com.google.common.cache.LocalCache$1):0 -> <init>
    1:1:void com.google.common.cache.LocalCache.cleanUp():0:0 -> cleanUp
    1:1:void cleanUp():0 -> cleanUp
    2:2:void com.google.common.cache.LocalCache$Segment.cleanUp():0:0 -> cleanUp
    2:2:void com.google.common.cache.LocalCache.cleanUp():0 -> cleanUp
    2:2:void cleanUp():0 -> cleanUp
    1:1:com.google.common.collect.ImmutableMap com.google.common.cache.LocalCache.getAllPresent(java.lang.Iterable):0:0 -> getAllPresent
    1:1:com.google.common.collect.ImmutableMap getAllPresent(java.lang.Iterable):0 -> getAllPresent
    1:1:java.lang.Object com.google.common.cache.LocalCache.getIfPresent(java.lang.Object):0:0 -> getIfPresent
    1:1:java.lang.Object getIfPresent(java.lang.Object):0 -> getIfPresent
    1:1:void com.google.common.cache.LocalCache.invalidateAll(java.lang.Iterable):0:0 -> invalidateAll
    1:1:void invalidateAll(java.lang.Iterable):0 -> invalidateAll
com.google.common.cache.LocalCache$LocalManualCache$1 -> com.google.common.cache.a1:
    java.util.concurrent.Callable val$valueLoader -> a
com.google.common.cache.LocalCache$NullEntry -> com.google.common.cache.c1:
    com.google.common.cache.LocalCache$NullEntry INSTANCE -> a
    com.google.common.cache.LocalCache$NullEntry[] $VALUES -> b
com.google.common.cache.LocalCache$Segment -> com.google.common.cache.e1:
    long maxSegmentWeight -> g
    int modCount -> d
    long totalWeight -> c
    int threshold -> e
    int count -> b
    java.util.Queue recencyQueue -> j
    java.util.concurrent.atomic.AtomicInteger readCount -> k
    java.util.Queue accessQueue -> m
    java.util.Queue writeQueue -> l
    com.google.common.cache.AbstractCache$StatsCounter statsCounter -> n
    java.util.concurrent.atomic.AtomicReferenceArray table -> f
    java.lang.ref.ReferenceQueue keyReferenceQueue -> h
    com.google.common.cache.LocalCache map -> a
    java.lang.ref.ReferenceQueue valueReferenceQueue -> i
    1:1:java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int):0:0 -> <init>
    1:1:void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter):0 -> <init>
    2:2:void initTable(java.util.concurrent.atomic.AtomicReferenceArray):0:0 -> <init>
    2:2:void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter):0 -> <init>
    3:3:boolean com.google.common.cache.LocalCache.customWeigher():0:0 -> <init>
    3:3:void initTable(java.util.concurrent.atomic.AtomicReferenceArray):0 -> <init>
    3:3:void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter):0 -> <init>
    4:4:void initTable(java.util.concurrent.atomic.AtomicReferenceArray):0:0 -> <init>
    4:4:void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter):0 -> <init>
    5:5:void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter):0:0 -> <init>
    6:6:java.util.Queue com.google.common.cache.LocalCache.discardingQueue():0:0 -> <init>
    6:6:void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter):0 -> <init>
    7:7:void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter):0:0 -> <init>
    8:8:boolean com.google.common.cache.LocalCache.usesWriteQueue():0:0 -> <init>
    8:8:void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter):0 -> <init>
    9:9:void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter):0:0 -> <init>
    10:10:java.util.Queue com.google.common.cache.LocalCache.discardingQueue():0:0 -> <init>
    10:10:void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter):0 -> <init>
    11:11:void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter):0:0 -> <init>
    12:12:java.util.Queue com.google.common.cache.LocalCache.discardingQueue():0:0 -> <init>
    12:12:void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter):0 -> <init>
    13:13:void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter):0:0 -> <init>
    1:1:boolean com.google.common.cache.LocalCache.refreshes():0:0 -> A
    1:1:java.lang.Object scheduleRefresh(com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,long,com.google.common.cache.CacheLoader):0 -> A
    2:2:java.lang.Object scheduleRefresh(com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,long,com.google.common.cache.CacheLoader):0:0 -> A
    void setValue(com.google.common.cache.ReferenceEntry,java.lang.Object,java.lang.Object,long) -> B
    1:1:void preWriteCleanup(long):0:0 -> C
    1:1:boolean storeLoadedValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,java.lang.Object):0 -> C
    2:2:boolean storeLoadedValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,java.lang.Object):0:0 -> C
    3:3:void postWriteCleanup():0:0 -> C
    3:3:boolean storeLoadedValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,java.lang.Object):0 -> C
    4:4:boolean storeLoadedValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,java.lang.Object):0:0 -> C
    5:5:void postWriteCleanup():0:0 -> C
    5:5:boolean storeLoadedValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,java.lang.Object):0 -> C
    6:6:boolean storeLoadedValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,java.lang.Object):0:0 -> C
    7:7:com.google.common.cache.ReferenceEntry newEntry(java.lang.Object,int,com.google.common.cache.ReferenceEntry):0:0 -> C
    7:7:boolean storeLoadedValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,java.lang.Object):0 -> C
    8:8:boolean storeLoadedValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,java.lang.Object):0:0 -> C
    9:9:void postWriteCleanup():0:0 -> C
    9:9:boolean storeLoadedValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,java.lang.Object):0 -> C
    10:10:boolean storeLoadedValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,java.lang.Object):0:0 -> C
    void tryDrainReferenceQueues() -> D
    java.lang.Object waitForLoadingValue(com.google.common.cache.ReferenceEntry,java.lang.Object,com.google.common.cache.LocalCache$ValueReference) -> E
    com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> a
    void drainRecencyQueue() -> b
    1:1:void drainKeyReferenceQueue():0:0 -> c
    1:1:void drainReferenceQueues():0 -> c
    2:2:void com.google.common.cache.LocalCache.reclaimKey(com.google.common.cache.ReferenceEntry):0:0 -> c
    2:2:void drainKeyReferenceQueue():0 -> c
    2:2:void drainReferenceQueues():0 -> c
    3:3:boolean reclaimKey(com.google.common.cache.ReferenceEntry,int):0:0 -> c
    3:3:void com.google.common.cache.LocalCache.reclaimKey(com.google.common.cache.ReferenceEntry):0 -> c
    3:3:void drainKeyReferenceQueue():0 -> c
    3:3:void drainReferenceQueues():0 -> c
    4:4:void postWriteCleanup():0:0 -> c
    4:4:boolean reclaimKey(com.google.common.cache.ReferenceEntry,int):0 -> c
    4:4:void com.google.common.cache.LocalCache.reclaimKey(com.google.common.cache.ReferenceEntry):0 -> c
    4:4:void drainKeyReferenceQueue():0 -> c
    4:4:void drainReferenceQueues():0 -> c
    5:5:boolean reclaimKey(com.google.common.cache.ReferenceEntry,int):0:0 -> c
    5:5:void com.google.common.cache.LocalCache.reclaimKey(com.google.common.cache.ReferenceEntry):0 -> c
    5:5:void drainKeyReferenceQueue():0 -> c
    5:5:void drainReferenceQueues():0 -> c
    6:6:void postWriteCleanup():0:0 -> c
    6:6:boolean reclaimKey(com.google.common.cache.ReferenceEntry,int):0 -> c
    6:6:void com.google.common.cache.LocalCache.reclaimKey(com.google.common.cache.ReferenceEntry):0 -> c
    6:6:void drainKeyReferenceQueue():0 -> c
    6:6:void drainReferenceQueues():0 -> c
    7:7:boolean reclaimKey(com.google.common.cache.ReferenceEntry,int):0:0 -> c
    7:7:void com.google.common.cache.LocalCache.reclaimKey(com.google.common.cache.ReferenceEntry):0 -> c
    7:7:void drainKeyReferenceQueue():0 -> c
    7:7:void drainReferenceQueues():0 -> c
    8:8:void drainReferenceQueues():0:0 -> c
    9:9:void drainValueReferenceQueue():0:0 -> c
    9:9:void drainReferenceQueues():0 -> c
    10:10:void com.google.common.cache.LocalCache.reclaimValue(com.google.common.cache.LocalCache$ValueReference):0:0 -> c
    10:10:void drainValueReferenceQueue():0 -> c
    10:10:void drainReferenceQueues():0 -> c
    11:11:boolean reclaimValue(java.lang.Object,int,com.google.common.cache.LocalCache$ValueReference):0:0 -> c
    11:11:void com.google.common.cache.LocalCache.reclaimValue(com.google.common.cache.LocalCache$ValueReference):0 -> c
    11:11:void drainValueReferenceQueue():0 -> c
    11:11:void drainReferenceQueues():0 -> c
    12:12:void postWriteCleanup():0:0 -> c
    12:12:boolean reclaimValue(java.lang.Object,int,com.google.common.cache.LocalCache$ValueReference):0 -> c
    12:12:void com.google.common.cache.LocalCache.reclaimValue(com.google.common.cache.LocalCache$ValueReference):0 -> c
    12:12:void drainValueReferenceQueue():0 -> c
    12:12:void drainReferenceQueues():0 -> c
    13:13:boolean reclaimValue(java.lang.Object,int,com.google.common.cache.LocalCache$ValueReference):0:0 -> c
    13:13:void com.google.common.cache.LocalCache.reclaimValue(com.google.common.cache.LocalCache$ValueReference):0 -> c
    13:13:void drainValueReferenceQueue():0 -> c
    13:13:void drainReferenceQueues():0 -> c
    14:14:void postWriteCleanup():0:0 -> c
    14:14:boolean reclaimValue(java.lang.Object,int,com.google.common.cache.LocalCache$ValueReference):0 -> c
    14:14:void com.google.common.cache.LocalCache.reclaimValue(com.google.common.cache.LocalCache$ValueReference):0 -> c
    14:14:void drainValueReferenceQueue():0 -> c
    14:14:void drainReferenceQueues():0 -> c
    15:15:boolean reclaimValue(java.lang.Object,int,com.google.common.cache.LocalCache$ValueReference):0:0 -> c
    15:15:void com.google.common.cache.LocalCache.reclaimValue(com.google.common.cache.LocalCache$ValueReference):0 -> c
    15:15:void drainValueReferenceQueue():0 -> c
    15:15:void drainReferenceQueues():0 -> c
    void enqueueNotification(java.lang.Object,int,java.lang.Object,int,com.google.common.cache.RemovalCause) -> d
    1:1:com.google.common.cache.ReferenceEntry getNextEvictable():0:0 -> e
    1:1:void evictEntries(com.google.common.cache.ReferenceEntry):0 -> e
    2:2:void evictEntries(com.google.common.cache.ReferenceEntry):0:0 -> e
    3:3:com.google.common.cache.ReferenceEntry getNextEvictable():0:0 -> e
    3:3:void evictEntries(com.google.common.cache.ReferenceEntry):0 -> e
    1:1:java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int):0:0 -> f
    1:1:void expand():0 -> f
    2:2:void expand():0:0 -> f
    void expireEntries(long) -> g
    java.lang.Object get(java.lang.Object,int) -> h
    java.lang.Object getAndRecordStats(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.util.concurrent.ListenableFuture) -> i
    1:1:com.google.common.cache.ReferenceEntry getFirst(int):0:0 -> j
    1:1:com.google.common.cache.ReferenceEntry getEntry(java.lang.Object,int):0 -> j
    2:2:com.google.common.cache.ReferenceEntry getEntry(java.lang.Object,int):0:0 -> j
    1:1:void tryExpireEntries(long):0:0 -> k
    1:1:com.google.common.cache.ReferenceEntry getLiveEntry(java.lang.Object,int,long):0 -> k
    1:1:void tryExpireEntries(long):0:0 -> l
    1:1:java.lang.Object getLiveValue(com.google.common.cache.ReferenceEntry,long):0 -> l
    1:1:void preWriteCleanup(long):0:0 -> m
    1:1:java.lang.Object lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader):0 -> m
    2:2:java.lang.Object lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader):0:0 -> m
    3:3:void postWriteCleanup():0:0 -> m
    3:3:java.lang.Object lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader):0 -> m
    4:4:java.lang.Object lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader):0:0 -> m
    5:5:void com.google.common.cache.LocalCache$LoadingValueReference.<init>():0:0 -> m
    5:5:java.lang.Object lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader):0 -> m
    6:6:com.google.common.cache.ReferenceEntry newEntry(java.lang.Object,int,com.google.common.cache.ReferenceEntry):0:0 -> m
    6:6:java.lang.Object lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader):0 -> m
    7:7:java.lang.Object lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader):0:0 -> m
    8:8:void postWriteCleanup():0:0 -> m
    8:8:java.lang.Object lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader):0 -> m
    9:9:java.lang.Object lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader):0:0 -> m
    10:10:java.lang.Object loadSync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader):0:0 -> m
    10:10:java.lang.Object lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader):0 -> m
    11:11:java.lang.Object lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader):0:0 -> m
    12:12:void postWriteCleanup():0:0 -> m
    12:12:java.lang.Object lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader):0 -> m
    13:13:java.lang.Object lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader):0:0 -> m
    1:1:void cleanUp():0:0 -> n
    1:1:void postReadCleanup():0 -> n
    1:1:void preWriteCleanup(long):0:0 -> o
    1:1:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean):0 -> o
    2:2:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean):0:0 -> o
    3:3:void postWriteCleanup():0:0 -> o
    3:3:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean):0 -> o
    4:4:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean):0:0 -> o
    5:5:void postWriteCleanup():0:0 -> o
    5:5:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean):0 -> o
    6:6:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean):0:0 -> o
    7:7:void postWriteCleanup():0:0 -> o
    7:7:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean):0 -> o
    8:8:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean):0:0 -> o
    9:9:com.google.common.cache.ReferenceEntry newEntry(java.lang.Object,int,com.google.common.cache.ReferenceEntry):0:0 -> o
    9:9:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean):0 -> o
    10:10:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean):0:0 -> o
    11:11:void postWriteCleanup():0:0 -> o
    11:11:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean):0 -> o
    12:12:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean):0:0 -> o
    13:13:void postWriteCleanup():0:0 -> o
    13:13:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean):0 -> o
    14:14:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean):0:0 -> o
    1:1:boolean com.google.common.cache.LocalCache.recordsAccess():0:0 -> p
    1:1:void recordLockedRead(com.google.common.cache.ReferenceEntry,long):0 -> p
    2:2:void recordLockedRead(com.google.common.cache.ReferenceEntry,long):0:0 -> p
    1:1:boolean com.google.common.cache.LocalCache.recordsAccess():0:0 -> q
    1:1:void recordRead(com.google.common.cache.ReferenceEntry,long):0 -> q
    2:2:void recordRead(com.google.common.cache.ReferenceEntry,long):0:0 -> q
    1:1:boolean com.google.common.cache.LocalCache.recordsAccess():0:0 -> r
    1:1:void recordWrite(com.google.common.cache.ReferenceEntry,int,long):0 -> r
    2:2:void recordWrite(com.google.common.cache.ReferenceEntry,int,long):0:0 -> r
    1:1:com.google.common.cache.LocalCache$LoadingValueReference insertLoadingValueReference(java.lang.Object,int,boolean):0:0 -> s
    1:1:java.lang.Object refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean):0 -> s
    2:2:void preWriteCleanup(long):0:0 -> s
    2:2:com.google.common.cache.LocalCache$LoadingValueReference insertLoadingValueReference(java.lang.Object,int,boolean):0 -> s
    2:2:java.lang.Object refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean):0 -> s
    3:3:com.google.common.cache.LocalCache$LoadingValueReference insertLoadingValueReference(java.lang.Object,int,boolean):0:0 -> s
    3:3:java.lang.Object refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean):0 -> s
    4:4:void postWriteCleanup():0:0 -> s
    4:4:com.google.common.cache.LocalCache$LoadingValueReference insertLoadingValueReference(java.lang.Object,int,boolean):0 -> s
    4:4:java.lang.Object refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean):0 -> s
    5:5:com.google.common.cache.LocalCache$LoadingValueReference insertLoadingValueReference(java.lang.Object,int,boolean):0:0 -> s
    5:5:java.lang.Object refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean):0 -> s
    6:6:void com.google.common.cache.LocalCache$LoadingValueReference.<init>():0:0 -> s
    6:6:com.google.common.cache.LocalCache$LoadingValueReference insertLoadingValueReference(java.lang.Object,int,boolean):0 -> s
    6:6:java.lang.Object refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean):0 -> s
    7:7:com.google.common.cache.ReferenceEntry newEntry(java.lang.Object,int,com.google.common.cache.ReferenceEntry):0:0 -> s
    7:7:com.google.common.cache.LocalCache$LoadingValueReference insertLoadingValueReference(java.lang.Object,int,boolean):0 -> s
    7:7:java.lang.Object refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean):0 -> s
    8:8:com.google.common.cache.LocalCache$LoadingValueReference insertLoadingValueReference(java.lang.Object,int,boolean):0:0 -> s
    8:8:java.lang.Object refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean):0 -> s
    9:9:void postWriteCleanup():0:0 -> s
    9:9:com.google.common.cache.LocalCache$LoadingValueReference insertLoadingValueReference(java.lang.Object,int,boolean):0 -> s
    9:9:java.lang.Object refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean):0 -> s
    10:10:com.google.common.util.concurrent.ListenableFuture loadAsync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader):0:0 -> s
    10:10:java.lang.Object refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean):0 -> s
    11:11:java.lang.Object refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean):0:0 -> s
    12:12:com.google.common.cache.LocalCache$LoadingValueReference insertLoadingValueReference(java.lang.Object,int,boolean):0:0 -> s
    12:12:java.lang.Object refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean):0 -> s
    13:13:void postWriteCleanup():0:0 -> s
    13:13:com.google.common.cache.LocalCache$LoadingValueReference insertLoadingValueReference(java.lang.Object,int,boolean):0 -> s
    13:13:java.lang.Object refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean):0 -> s
    14:14:com.google.common.cache.LocalCache$LoadingValueReference insertLoadingValueReference(java.lang.Object,int,boolean):0:0 -> s
    14:14:java.lang.Object refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean):0 -> s
    void removeCollectedEntry(com.google.common.cache.ReferenceEntry) -> t
    boolean removeEntry(com.google.common.cache.ReferenceEntry,int,com.google.common.cache.RemovalCause) -> u
    com.google.common.cache.ReferenceEntry removeEntryFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> v
    1:1:com.google.common.cache.LocalCache$ValueReference com.google.common.cache.LocalCache$LoadingValueReference.getOldValue():0:0 -> w
    1:1:boolean removeLoadingValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference):0 -> w
    2:2:boolean removeLoadingValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference):0:0 -> w
    3:3:void postWriteCleanup():0:0 -> w
    3:3:boolean removeLoadingValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference):0 -> w
    4:4:boolean removeLoadingValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference):0:0 -> w
    5:5:void postWriteCleanup():0:0 -> w
    5:5:boolean removeLoadingValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference):0 -> w
    6:6:boolean removeLoadingValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference):0:0 -> w
    7:7:void postWriteCleanup():0:0 -> w
    7:7:boolean removeLoadingValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference):0 -> w
    8:8:boolean removeLoadingValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference):0:0 -> w
    com.google.common.cache.ReferenceEntry removeValueFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,com.google.common.cache.LocalCache$ValueReference,com.google.common.cache.RemovalCause) -> x
    void runLockedCleanup(long) -> y
    1:1:void com.google.common.cache.LocalCache.processPendingNotifications():0:0 -> z
    1:1:void runUnlockedCleanup():0 -> z
com.google.common.cache.LocalCache$Segment$1 -> com.google.common.cache.d1:
    com.google.common.util.concurrent.ListenableFuture val$loadingFuture -> d
    com.google.common.cache.LocalCache$LoadingValueReference val$loadingValueReference -> c
    java.lang.Object val$key -> a
    com.google.common.cache.LocalCache$Segment this$0 -> e
    int val$hash -> b
    1:1:boolean com.google.common.cache.LocalCache$LoadingValueReference.setException(java.lang.Throwable):0:0 -> run
    1:1:void run():0 -> run
com.google.common.cache.LocalCache$SoftValueReference -> com.google.common.cache.f1:
    com.google.common.cache.ReferenceEntry entry -> a
com.google.common.cache.LocalCache$Strength -> com.google.common.cache.j1:
    com.google.common.cache.LocalCache$Strength STRONG -> a
    com.google.common.cache.LocalCache$Strength WEAK -> c
    com.google.common.cache.LocalCache$Strength SOFT -> b
    com.google.common.cache.LocalCache$Strength[] $VALUES -> d
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1):0 -> <init>
    com.google.common.base.Equivalence defaultEquivalence() -> a
    com.google.common.cache.LocalCache$ValueReference referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int) -> b
com.google.common.cache.LocalCache$Strength$1 -> com.google.common.cache.g1:
    com.google.common.base.Equivalence defaultEquivalence() -> a
    com.google.common.cache.LocalCache$ValueReference referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int) -> b
com.google.common.cache.LocalCache$Strength$2 -> com.google.common.cache.h1:
    com.google.common.base.Equivalence defaultEquivalence() -> a
    com.google.common.cache.LocalCache$ValueReference referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int) -> b
com.google.common.cache.LocalCache$Strength$3 -> com.google.common.cache.i1:
    com.google.common.base.Equivalence defaultEquivalence() -> a
    com.google.common.cache.LocalCache$ValueReference referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int) -> b
com.google.common.cache.LocalCache$StrongAccessEntry -> com.google.common.cache.k1:
    com.google.common.cache.ReferenceEntry nextAccess -> f
    long accessTime -> e
    com.google.common.cache.ReferenceEntry previousAccess -> g
com.google.common.cache.LocalCache$StrongAccessWriteEntry -> com.google.common.cache.l1:
    com.google.common.cache.ReferenceEntry nextAccess -> f
    long accessTime -> e
    long writeTime -> h
    com.google.common.cache.ReferenceEntry previousWrite -> j
    com.google.common.cache.ReferenceEntry nextWrite -> i
    com.google.common.cache.ReferenceEntry previousAccess -> g
com.google.common.cache.LocalCache$StrongEntry -> com.google.common.cache.m1:
    com.google.common.cache.ReferenceEntry next -> c
    com.google.common.cache.LocalCache$ValueReference valueReference -> d
    java.lang.Object key -> a
    int hash -> b
    1:1:com.google.common.cache.LocalCache$ValueReference com.google.common.cache.LocalCache.unset():0:0 -> <init>
    1:1:void <init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry):0 -> <init>
    2:2:void <init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry):0:0 -> <init>
com.google.common.cache.LocalCache$StrongValueReference -> com.google.common.cache.n1:
    java.lang.Object referent -> a
    1:1:java.lang.Object get():0:0 -> waitForValue
    1:1:java.lang.Object waitForValue():0 -> waitForValue
com.google.common.cache.LocalCache$StrongWriteEntry -> com.google.common.cache.o1:
    com.google.common.cache.ReferenceEntry nextWrite -> f
    long writeTime -> e
    com.google.common.cache.ReferenceEntry previousWrite -> g
com.google.common.cache.LocalCache$ValueIterator -> com.google.common.cache.p1:
    1:1:java.lang.Object com.google.common.cache.LocalCache$WriteThroughEntry.getValue():0:0 -> next
    1:1:java.lang.Object next():0 -> next
com.google.common.cache.LocalCache$ValueReference -> com.google.common.cache.q1:
com.google.common.cache.LocalCache$Values -> com.google.common.cache.r1:
    com.google.common.cache.LocalCache this$0 -> a
com.google.common.cache.LocalCache$WeakAccessEntry -> com.google.common.cache.s1:
    com.google.common.cache.ReferenceEntry previousAccess -> f
    com.google.common.cache.ReferenceEntry nextAccess -> e
    long accessTime -> d
com.google.common.cache.LocalCache$WeakAccessWriteEntry -> com.google.common.cache.t1:
    com.google.common.cache.ReferenceEntry previousAccess -> f
    com.google.common.cache.ReferenceEntry nextAccess -> e
    long writeTime -> g
    com.google.common.cache.ReferenceEntry previousWrite -> i
    long accessTime -> d
    com.google.common.cache.ReferenceEntry nextWrite -> h
com.google.common.cache.LocalCache$WeakEntry -> com.google.common.cache.u1:
    com.google.common.cache.ReferenceEntry next -> b
    com.google.common.cache.LocalCache$ValueReference valueReference -> c
    int hash -> a
    1:1:com.google.common.cache.LocalCache$ValueReference com.google.common.cache.LocalCache.unset():0:0 -> <init>
    1:1:void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry):0 -> <init>
    2:2:void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry):0:0 -> <init>
com.google.common.cache.LocalCache$WeakValueReference -> com.google.common.cache.v1:
    com.google.common.cache.ReferenceEntry entry -> a
com.google.common.cache.LocalCache$WeakWriteEntry -> com.google.common.cache.w1:
    com.google.common.cache.ReferenceEntry previousWrite -> f
    com.google.common.cache.ReferenceEntry nextWrite -> e
    long writeTime -> d
com.google.common.cache.LocalCache$WeightedSoftValueReference -> com.google.common.cache.x1:
    int weight -> b
com.google.common.cache.LocalCache$WeightedStrongValueReference -> com.google.common.cache.y1:
    int weight -> b
com.google.common.cache.LocalCache$WeightedWeakValueReference -> com.google.common.cache.z1:
    int weight -> b
com.google.common.cache.LocalCache$WriteQueue -> com.google.common.cache.c2:
    com.google.common.cache.ReferenceEntry head -> a
    1:1:void com.google.common.cache.LocalCache.nullifyWriteOrder(com.google.common.cache.ReferenceEntry):0:0 -> clear
    1:1:void clear():0 -> clear
    2:2:void clear():0:0 -> clear
    1:1:com.google.common.cache.ReferenceEntry peek():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
    2:2:java.util.Iterator iterator():0:0 -> iterator
    1:1:boolean offer(com.google.common.cache.ReferenceEntry):0:0 -> offer
    1:1:boolean offer(java.lang.Object):0 -> offer
    2:2:void com.google.common.cache.LocalCache.connectWriteOrder(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> offer
    2:2:boolean offer(com.google.common.cache.ReferenceEntry):0 -> offer
    2:2:boolean offer(java.lang.Object):0 -> offer
    3:3:boolean offer(com.google.common.cache.ReferenceEntry):0:0 -> offer
    3:3:boolean offer(java.lang.Object):0 -> offer
    4:4:void com.google.common.cache.LocalCache.connectWriteOrder(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> offer
    4:4:boolean offer(com.google.common.cache.ReferenceEntry):0 -> offer
    4:4:boolean offer(java.lang.Object):0 -> offer
    5:5:boolean offer(com.google.common.cache.ReferenceEntry):0:0 -> offer
    5:5:boolean offer(java.lang.Object):0 -> offer
    6:6:void com.google.common.cache.LocalCache.connectWriteOrder(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> offer
    6:6:boolean offer(com.google.common.cache.ReferenceEntry):0 -> offer
    6:6:boolean offer(java.lang.Object):0 -> offer
    1:1:com.google.common.cache.ReferenceEntry peek():0:0 -> peek
    1:1:java.lang.Object peek():0 -> peek
    1:1:com.google.common.cache.ReferenceEntry poll():0:0 -> poll
    1:1:java.lang.Object poll():0 -> poll
    1:1:void com.google.common.cache.LocalCache.connectWriteOrder(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry):0:0 -> remove
    1:1:boolean remove(java.lang.Object):0 -> remove
    2:2:void com.google.common.cache.LocalCache.nullifyWriteOrder(com.google.common.cache.ReferenceEntry):0:0 -> remove
    2:2:boolean remove(java.lang.Object):0 -> remove
com.google.common.cache.LocalCache$WriteQueue$1 -> com.google.common.cache.a2:
    com.google.common.cache.ReferenceEntry previousWrite -> b
    com.google.common.cache.ReferenceEntry nextWrite -> a
com.google.common.cache.LocalCache$WriteQueue$2 -> com.google.common.cache.b2:
    com.google.common.cache.LocalCache$WriteQueue this$0 -> b
    1:1:com.google.common.cache.ReferenceEntry computeNext(com.google.common.cache.ReferenceEntry):0:0 -> computeNext
    1:1:java.lang.Object computeNext(java.lang.Object):0 -> computeNext
com.google.common.cache.LocalCache$WriteThroughEntry -> com.google.common.cache.d2:
    com.google.common.cache.LocalCache this$0 -> c
    java.lang.Object value -> b
    java.lang.Object key -> a
    1:1:java.lang.Object getKey():0:0 -> toString
    1:1:java.lang.String toString():0 -> toString
    2:2:java.lang.String toString():0:0 -> toString
    3:3:java.lang.Object getValue():0:0 -> toString
    3:3:java.lang.String toString():0 -> toString
    4:4:java.lang.String toString():0:0 -> toString
com.google.common.cache.LongAddable -> com.google.common.cache.f2:
com.google.common.cache.LongAddables -> com.google.common.cache.j2:
    com.google.common.base.Supplier SUPPLIER -> a
com.google.common.cache.LongAddables$1 -> com.google.common.cache.g2:
    1:1:com.google.common.cache.LongAddable get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.cache.LongAddables$2 -> com.google.common.cache.h2:
    1:1:com.google.common.cache.LongAddable get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.cache.LongAddables$PureJavaLongAddable -> com.google.common.cache.i2:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.cache.LongAddables$1):0 -> <init>
com.google.common.cache.LongAdder -> com.google.common.cache.k2:
    1:1:void com.google.common.cache.Striped64.retryUpdate(long,int[],boolean):0:0 -> add
    1:1:void add(long):0 -> add
    long fn(long,long) -> e
com.google.common.cache.ReferenceEntry -> com.google.common.cache.l2:
com.google.common.cache.RemovalCause -> com.google.common.cache.RemovalCause:
    com.google.common.cache.RemovalCause[] $VALUES -> a
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:void <init>(java.lang.String,int,com.google.common.cache.RemovalCause$1):0 -> <init>
    boolean wasEvicted() -> a
com.google.common.cache.RemovalCause$1 -> com.google.common.cache.m2:
    boolean wasEvicted() -> a
com.google.common.cache.RemovalCause$2 -> com.google.common.cache.n2:
    boolean wasEvicted() -> a
com.google.common.cache.RemovalCause$3 -> com.google.common.cache.o2:
    boolean wasEvicted() -> a
com.google.common.cache.RemovalCause$4 -> com.google.common.cache.p2:
    boolean wasEvicted() -> a
com.google.common.cache.RemovalCause$5 -> com.google.common.cache.q2:
    boolean wasEvicted() -> a
com.google.common.cache.RemovalListeners$1 -> com.google.common.cache.s2:
    com.google.common.cache.RemovalListener val$listener -> b
    java.util.concurrent.Executor val$executor -> a
com.google.common.cache.RemovalListeners$1$1 -> com.google.common.cache.r2:
    com.google.common.cache.RemovalListeners$1 this$0 -> b
    com.google.common.cache.RemovalNotification val$notification -> a
com.google.common.cache.RemovalNotification -> com.google.common.cache.RemovalNotification:
    com.google.common.cache.RemovalCause cause -> a
com.google.common.cache.Striped64 -> com.google.common.cache.v2:
    long busyOffset -> i
    java.lang.ThreadLocal threadHashCode -> d
    long baseOffset -> h
    java.util.Random rng -> e
    int NCPU -> f
    com.google.common.cache.Striped64$Cell[] cells -> a
    long base -> b
    sun.misc.Unsafe UNSAFE -> g
    int busy -> c
    sun.misc.Unsafe access$000() -> a
    boolean casBase(long,long) -> b
    boolean casBusy() -> c
    sun.misc.Unsafe getUnsafe() -> d
com.google.common.cache.Striped64$1 -> com.google.common.cache.t2:
com.google.common.cache.Striped64$Cell -> com.google.common.cache.u2:
    sun.misc.Unsafe UNSAFE -> b
    long value -> a
    long valueOffset -> c
    boolean cas(long,long) -> a
com.google.common.collect.-$$Lambda$010ui-Gz323NbHKQ5KOkRbREplA -> com.google.common.collect.a:
    com.google.common.collect.-$$Lambda$010ui-Gz323NbHKQ5KOkRbREplA INSTANCE -> a
    1:1:com.google.common.collect.MoreCollectors$ToOptionalState com.google.common.collect.MoreCollectors$ToOptionalState.combine(com.google.common.collect.MoreCollectors$ToOptionalState):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object,java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$3Zdf5F0rNx9_HL1xP9EFYzhGfgM -> com.google.common.collect.b:
    com.google.common.collect.-$$Lambda$3Zdf5F0rNx9_HL1xP9EFYzhGfgM INSTANCE -> a
com.google.common.collect.-$$Lambda$4UhRpYIKXXlqOfq-PtEEhuY9EUw -> com.google.common.collect.c:
    com.google.common.collect.-$$Lambda$4UhRpYIKXXlqOfq-PtEEhuY9EUw INSTANCE -> a
com.google.common.collect.-$$Lambda$4l0Uh8hSbwsCCLC-bi2lr2K4aEY -> com.google.common.collect.d:
    com.google.common.collect.CollectCollectors$EnumMapAccumulator f$0 -> a
com.google.common.collect.-$$Lambda$5ehNMvpQfc2Cm4DPJ8vk2BwhOrI -> com.google.common.collect.e:
    com.google.common.collect.-$$Lambda$5ehNMvpQfc2Cm4DPJ8vk2BwhOrI INSTANCE -> a
com.google.common.collect.-$$Lambda$6Fmi0v9SoDNUguh_UBRiAKfmc7E -> com.google.common.collect.f:
    java.util.stream.LongStream f$0 -> a
com.google.common.collect.-$$Lambda$729PE7C19CRv98lm3wiTh0tAlBI -> com.google.common.collect.g:
    com.google.common.collect.-$$Lambda$729PE7C19CRv98lm3wiTh0tAlBI INSTANCE -> a
com.google.common.collect.-$$Lambda$78xVQapkjVuJ8bMSoiv6-JLU3LI -> com.google.common.collect.h:
    com.google.common.collect.-$$Lambda$78xVQapkjVuJ8bMSoiv6-JLU3LI INSTANCE -> a
com.google.common.collect.-$$Lambda$7TOj2cBiEAXTmA3KkIZWPjlp9kY -> com.google.common.collect.i:
    com.google.common.collect.-$$Lambda$7TOj2cBiEAXTmA3KkIZWPjlp9kY INSTANCE -> a
com.google.common.collect.-$$Lambda$7Yn-srrCw3tmMIJLzmvpisJV8X0 -> com.google.common.collect.j:
    com.google.common.collect.ImmutableList f$0 -> a
com.google.common.collect.-$$Lambda$7wvXIDTYLRn2hXiaQ5jXCq33QvA -> com.google.common.collect.k:
    com.google.common.collect.-$$Lambda$7wvXIDTYLRn2hXiaQ5jXCq33QvA INSTANCE -> a
com.google.common.collect.-$$Lambda$8ll8pi4fSeHLARe5o2NUv_CDysA -> com.google.common.collect.l:
    com.google.common.collect.StandardTable$Row f$0 -> a
    1:1:java.util.Map$Entry com.google.common.collect.StandardTable$Row.wrapEntry(java.util.Map$Entry):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$9JO8iXCWOXiSGG99sM6w2w_Mqp8 -> com.google.common.collect.m:
    com.google.common.collect.-$$Lambda$9JO8iXCWOXiSGG99sM6w2w_Mqp8 INSTANCE -> a
com.google.common.collect.-$$Lambda$9T1NmVGx35xIbLLL0FmZQ13Zths -> com.google.common.collect.n:
    com.google.common.collect.-$$Lambda$9T1NmVGx35xIbLLL0FmZQ13Zths INSTANCE -> a
com.google.common.collect.-$$Lambda$9a7QvnacX-q--xn8JNzXhpgqPwI -> com.google.common.collect.o:
    java.util.stream.IntStream f$0 -> a
com.google.common.collect.-$$Lambda$AMtd9VAAJbKCbecgm4aomzt4MGw -> com.google.common.collect.p:
    com.google.common.collect.-$$Lambda$AMtd9VAAJbKCbecgm4aomzt4MGw INSTANCE -> a
com.google.common.collect.-$$Lambda$AbstractMapBasedMultimap$5RWDlwrY9JHwhnjDCRatNidRafw -> com.google.common.collect.q:
    com.google.common.collect.-$$Lambda$AbstractMapBasedMultimap$5RWDlwrY9JHwhnjDCRatNidRafw INSTANCE -> a
    1:1:java.util.Spliterator com.google.common.collect.AbstractMapBasedMultimap.lambda$entrySpliterator$1(java.util.Map$Entry):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$AbstractMapBasedMultimap$8xNgVvARiYlNYPdP8abucV0k9FU -> com.google.common.collect.r:
    java.lang.Object f$0 -> a
    1:1:java.util.Map$Entry com.google.common.collect.AbstractMapBasedMultimap.lambda$entrySpliterator$0(java.lang.Object,java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$AbstractMapBasedMultimap$DRPoACmyfOCrM78_TZAfGkjjjzU -> com.google.common.collect.s:
    java.lang.Object f$1 -> b
    java.util.function.BiConsumer f$0 -> a
    1:1:void com.google.common.collect.AbstractMapBasedMultimap.lambda$forEach$2(java.util.function.BiConsumer,java.lang.Object,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$AbstractMapBasedMultimap$zLKsCwf7UNv0WX2k4Y0eFESzUjw -> com.google.common.collect.t:
    java.util.function.BiConsumer f$0 -> a
    1:1:void com.google.common.collect.AbstractMapBasedMultimap.lambda$forEach$3(java.util.function.BiConsumer,java.lang.Object,java.util.Collection):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$AbstractMapBasedMultiset$MYpJnkR8AkttYiKJt9tjmnhWf2c -> com.google.common.collect.u:
    java.util.function.ObjIntConsumer f$0 -> a
    1:1:void com.google.common.collect.AbstractMapBasedMultiset.lambda$forEachEntry$0(java.util.function.ObjIntConsumer,java.lang.Object,com.google.common.collect.Count):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$ArrayTable$yqJBEUhtD7sOM-8hNQp9h3Mi57Y -> com.google.common.collect.v:
    com.google.common.collect.ArrayTable f$0 -> a
com.google.common.collect.-$$Lambda$ArrayTable$zTKS5BxTstixK4BzUflA6FnJJlE -> com.google.common.collect.w:
    com.google.common.collect.ArrayTable f$0 -> a
    1:1:com.google.common.collect.Table$Cell com.google.common.collect.ArrayTable.getCell(int):0:0 -> apply
    1:1:com.google.common.collect.Table$Cell com.google.common.collect.ArrayTable.lambda$zTKS5BxTstixK4BzUflA6FnJJlE(com.google.common.collect.ArrayTable,int):0 -> apply
    1:1:java.lang.Object apply(int):0 -> apply
com.google.common.collect.-$$Lambda$Ay_KLTypN8SNVv2fb3GlIknzGgs -> com.google.common.collect.x:
    com.google.common.collect.-$$Lambda$Ay_KLTypN8SNVv2fb3GlIknzGgs INSTANCE -> a
com.google.common.collect.-$$Lambda$BJ3DA29HFseNLOIta1uwtl0FI9o -> com.google.common.collect.y:
    com.google.common.collect.-$$Lambda$BJ3DA29HFseNLOIta1uwtl0FI9o INSTANCE -> a
com.google.common.collect.-$$Lambda$BS3iaglsaeLHtHe_vYykMLMUiY8 -> com.google.common.collect.z:
    com.google.common.collect.-$$Lambda$BS3iaglsaeLHtHe_vYykMLMUiY8 INSTANCE -> a
com.google.common.collect.-$$Lambda$BtlUjlQmAMbKj3ap3livgXAmCTo -> com.google.common.collect.a0:
    com.google.common.collect.-$$Lambda$BtlUjlQmAMbKj3ap3livgXAmCTo INSTANCE -> a
com.google.common.collect.-$$Lambda$CollectCollectors$0qfvNuX_II4kmDJuZx5xNNRW9Xk -> com.google.common.collect.b0:
    com.google.common.collect.-$$Lambda$CollectCollectors$0qfvNuX_II4kmDJuZx5xNNRW9Xk INSTANCE -> a
    1:1:com.google.common.collect.Multimap com.google.common.collect.CollectCollectors.lambda$toMultimap$24(com.google.common.collect.Multimap,com.google.common.collect.Multimap):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object,java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$CollectCollectors$16katxIGYQOqUy4LsKUWUMvrrqs -> com.google.common.collect.c0:
    java.util.function.Function f$0 -> a
    java.util.function.Function f$1 -> b
    1:1:void com.google.common.collect.CollectCollectors.lambda$toImmutableEnumMap$15(java.util.function.Function,java.util.function.Function,com.google.common.collect.CollectCollectors$EnumMapAccumulator,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$CollectCollectors$6xt8-0SzGaL5F0R5a8v_7UHyIbk -> com.google.common.collect.d0:
    java.util.function.Function f$0 -> a
    java.util.function.Function f$1 -> b
    1:1:void com.google.common.collect.CollectCollectors.lambda$toMultimap$23(java.util.function.Function,java.util.function.Function,com.google.common.collect.Multimap,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$CollectCollectors$8GCx_wHkNQrOgkR3CzpAjERr5U8 -> com.google.common.collect.e0:
    com.google.common.collect.-$$Lambda$CollectCollectors$8GCx_wHkNQrOgkR3CzpAjERr5U8 INSTANCE -> a
    1:1:com.google.common.collect.Multimap com.google.common.collect.CollectCollectors.lambda$flatteningToMultimap$26(com.google.common.collect.Multimap,com.google.common.collect.Multimap):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object,java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$CollectCollectors$CuLyKOO8b5hL-ovYYEppWb3scaU -> com.google.common.collect.f0:
    java.util.Comparator f$0 -> a
    1:1:com.google.common.collect.ImmutableSortedMap$Builder com.google.common.collect.CollectCollectors.lambda$toImmutableSortedMap$7(java.util.Comparator):0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.collect.-$$Lambda$CollectCollectors$EnumSetAccumulator$DXK1D4ohk3Ds4wC3bR4Gyv_uoNM -> com.google.common.collect.g0:
    com.google.common.collect.-$$Lambda$CollectCollectors$EnumSetAccumulator$DXK1D4ohk3Ds4wC3bR4Gyv_uoNM INSTANCE -> a
com.google.common.collect.-$$Lambda$CollectCollectors$EqieOXhcPNU_FDzkDxyZNWOBcQU -> com.google.common.collect.h0:
    java.util.function.Function f$0 -> a
    1:1:java.lang.Object com.google.common.collect.CollectCollectors.lambda$flatteningToImmutableSetMultimap$21(java.util.function.Function,java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$CollectCollectors$IRS5OFEhs0p71d06IkkeGLCq9lY -> com.google.common.collect.i0:
    java.util.function.Function f$0 -> a
    java.util.function.Function f$1 -> b
    1:1:void com.google.common.collect.CollectCollectors.lambda$flatteningToMultimap$25(java.util.function.Function,java.util.function.Function,com.google.common.collect.Multimap,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$CollectCollectors$KbQE1LR75xY4rcqrBV5omL8w_qo -> com.google.common.collect.j0:
    java.util.function.Function f$0 -> a
    1:1:java.util.stream.Stream com.google.common.collect.CollectCollectors.lambda$flatteningToImmutableSetMultimap$22(java.util.function.Function,java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$CollectCollectors$KuGu7K59cRrKjWns_g2me2EEpFY -> com.google.common.collect.k0:
    java.util.function.Function f$0 -> a
    java.util.function.Function f$1 -> b
    1:1:void com.google.common.collect.CollectCollectors.lambda$toImmutableSetMultimap$20(java.util.function.Function,java.util.function.Function,com.google.common.collect.ImmutableSetMultimap$Builder,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$CollectCollectors$LedOfYLwszEpB9pjHd0bK45eBSg -> com.google.common.collect.l0:
    java.util.function.Function f$0 -> a
    java.util.function.Function f$1 -> b
    1:1:void com.google.common.collect.CollectCollectors.lambda$toImmutableRangeMap$16(java.util.function.Function,java.util.function.Function,com.google.common.collect.ImmutableRangeMap$Builder,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$CollectCollectors$NXhgL4pPrQiO-7hBC0XlEyH8Wus -> com.google.common.collect.m0:
    java.util.function.Function f$0 -> a
    java.util.function.Function f$1 -> b
    1:1:void com.google.common.collect.CollectCollectors.lambda$toImmutableBiMap$10(java.util.function.Function,java.util.function.Function,com.google.common.collect.ImmutableBiMap$Builder,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$CollectCollectors$RiBDSrVWYkXomW79nfuabRih8gM -> com.google.common.collect.n0:
    java.util.function.BinaryOperator f$0 -> a
    1:1:com.google.common.collect.CollectCollectors$EnumMapAccumulator com.google.common.collect.CollectCollectors.lambda$toImmutableEnumMap$14(java.util.function.BinaryOperator):0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.collect.-$$Lambda$CollectCollectors$RjVYaRV6VEyGgq7nxq2ZrwkIEmU -> com.google.common.collect.o0:
    com.google.common.collect.-$$Lambda$CollectCollectors$RjVYaRV6VEyGgq7nxq2ZrwkIEmU INSTANCE -> a
    1:1:com.google.common.collect.ImmutableMultiset com.google.common.collect.CollectCollectors.lambda$toImmutableMultiset$3(com.google.common.collect.Multiset):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$CollectCollectors$UKOqwy9eXh-Qvt17AMx1Dt12T8E -> com.google.common.collect.p0:
    com.google.common.collect.-$$Lambda$CollectCollectors$UKOqwy9eXh-Qvt17AMx1Dt12T8E INSTANCE -> a
    1:1:com.google.common.collect.CollectCollectors$EnumMapAccumulator com.google.common.collect.CollectCollectors.lambda$toImmutableEnumMap$12():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.collect.-$$Lambda$CollectCollectors$Wkm4b3GwpAKoTOxfOIQY3qN-9Lw -> com.google.common.collect.q0:
    java.util.function.Function f$0 -> a
    java.util.function.Function f$1 -> b
    1:1:void com.google.common.collect.CollectCollectors.lambda$toImmutableSortedMap$8(java.util.function.Function,java.util.function.Function,com.google.common.collect.ImmutableSortedMap$Builder,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$CollectCollectors$X332xQfx17qj-HR9MBVzLjZocSE -> com.google.common.collect.r0:
    java.util.function.ToIntFunction f$1 -> b
    java.util.function.Function f$0 -> a
    1:1:void com.google.common.collect.CollectCollectors.lambda$toMultiset$4(java.util.function.Function,java.util.function.ToIntFunction,com.google.common.collect.Multiset,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$CollectCollectors$eLpLtdSXzLjEWeA9-yX9vKhlVII -> com.google.common.collect.s0:
    com.google.common.collect.-$$Lambda$CollectCollectors$eLpLtdSXzLjEWeA9-yX9vKhlVII INSTANCE -> a
    1:1:com.google.common.collect.Multiset com.google.common.collect.CollectCollectors.lambda$toImmutableMultiset$2(com.google.common.collect.Multiset,com.google.common.collect.Multiset):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object,java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$CollectCollectors$hsaTjdh7-rvWlTGHChqkO73Sj-Q -> com.google.common.collect.t0:
    java.util.Comparator f$0 -> a
    1:1:com.google.common.collect.ImmutableSortedSet$Builder com.google.common.collect.CollectCollectors.lambda$toImmutableSortedSet$0(java.util.Comparator):0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.collect.-$$Lambda$CollectCollectors$iJpUyfc6Ofyu4bXDXKutN3_2xu4 -> com.google.common.collect.u0:
    com.google.common.collect.-$$Lambda$CollectCollectors$iJpUyfc6Ofyu4bXDXKutN3_2xu4 INSTANCE -> a
    1:1:com.google.common.collect.Multiset com.google.common.collect.CollectCollectors.lambda$toMultiset$5(com.google.common.collect.Multiset,com.google.common.collect.Multiset):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object,java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$CollectCollectors$qidWVdz3QjSdR7Pfwel-d1bw1W0 -> com.google.common.collect.v0:
    java.util.Comparator f$0 -> a
    1:1:java.util.TreeMap com.google.common.collect.CollectCollectors.lambda$toImmutableSortedMap$9(java.util.Comparator):0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.collect.-$$Lambda$CollectCollectors$rJXGxwwPcrE3CLpV0wtsCpAozgY -> com.google.common.collect.w0:
    java.util.function.ToIntFunction f$1 -> b
    java.util.function.Function f$0 -> a
    1:1:void com.google.common.collect.CollectCollectors.lambda$toImmutableMultiset$1(java.util.function.Function,java.util.function.ToIntFunction,com.google.common.collect.Multiset,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$CollectCollectors$rnaocEY1HFgbiD6xC9MIgBOPE9E -> com.google.common.collect.x0:
    java.util.function.Function f$0 -> a
    java.util.function.Function f$1 -> b
    1:1:void com.google.common.collect.CollectCollectors.lambda$toImmutableListMultimap$17(java.util.function.Function,java.util.function.Function,com.google.common.collect.ImmutableListMultimap$Builder,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$CollectCollectors$snQv1wUUwlLAl4ZQ4VqxVgOAUrY -> com.google.common.collect.y0:
    java.util.function.Function f$0 -> a
    java.util.function.Function f$1 -> b
    1:1:void com.google.common.collect.CollectCollectors.lambda$toImmutableMap$6(java.util.function.Function,java.util.function.Function,com.google.common.collect.ImmutableMap$Builder,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$CollectCollectors$uNENmSM_ZadoiUK7SuLxMw03MlI -> com.google.common.collect.z0:
    java.util.function.Function f$0 -> a
    1:1:java.lang.Object com.google.common.collect.CollectCollectors.lambda$flatteningToImmutableListMultimap$18(java.util.function.Function,java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$CollectCollectors$xlKsRuBUzA3J9lsuHQBOYCbppxI -> com.google.common.collect.a1:
    java.util.function.Function f$0 -> a
    java.util.function.Function f$1 -> b
    1:1:void com.google.common.collect.CollectCollectors.lambda$toImmutableEnumMap$13(java.util.function.Function,java.util.function.Function,com.google.common.collect.CollectCollectors$EnumMapAccumulator,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$CollectCollectors$xo9dvD5dtPEjJ-xFMaOpKnvKWQo -> com.google.common.collect.b1:
    java.util.function.Function f$0 -> a
    1:1:java.util.stream.Stream com.google.common.collect.CollectCollectors.lambda$flatteningToImmutableListMultimap$19(java.util.function.Function,java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$CollectCollectors$yhni0knW0JIxx-uIOuXCdetdRZ0 -> com.google.common.collect.c1:
    com.google.common.collect.-$$Lambda$CollectCollectors$yhni0knW0JIxx-uIOuXCdetdRZ0 INSTANCE -> a
    1:1:java.lang.Object com.google.common.collect.CollectCollectors.lambda$toImmutableEnumMap$11(java.lang.Object,java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object,java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$CollectSpliterators$1$29eJ-8eqOuezCUOm3lykrvU05TE -> com.google.common.collect.d1:
    java.util.function.Consumer f$0 -> a
    java.util.function.Function f$1 -> b
    1:1:void com.google.common.collect.CollectSpliterators$1.lambda$forEachRemaining$1(java.util.function.Consumer,java.util.function.Function,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$CollectSpliterators$1$eqZGdw-9p-TghD1nN4nxb9Orf6s -> com.google.common.collect.e1:
    java.util.function.Consumer f$0 -> a
    java.util.function.Function f$1 -> b
    1:1:void com.google.common.collect.CollectSpliterators$1.lambda$tryAdvance$0(java.util.function.Consumer,java.util.function.Function,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$CollectSpliterators$1WithCharacteristics$PEvhBd0-3FrqDK24rMerJr0qQY0 -> com.google.common.collect.f1:
    java.util.function.IntFunction f$1 -> b
    java.util.function.Consumer f$0 -> a
    1:1:void com.google.common.collect.CollectSpliterators$1WithCharacteristics.lambda$tryAdvance$0(java.util.function.Consumer,java.util.function.IntFunction,int):0:0 -> accept
    1:1:void accept(int):0 -> accept
com.google.common.collect.-$$Lambda$CollectSpliterators$1WithCharacteristics$haONaxvHdHnMhHDhe4el9FWJhDQ -> com.google.common.collect.g1:
    java.util.function.IntFunction f$1 -> b
    java.util.function.Consumer f$0 -> a
    1:1:void com.google.common.collect.CollectSpliterators$1WithCharacteristics.lambda$forEachRemaining$1(java.util.function.Consumer,java.util.function.IntFunction,int):0:0 -> accept
    1:1:void accept(int):0 -> accept
com.google.common.collect.-$$Lambda$CollectSpliterators$FlatMapSpliterator$BSpT2cX95XnJ6Z1D85KOEy9c1as -> com.google.common.collect.h1:
    java.util.function.Consumer f$1 -> b
    com.google.common.collect.CollectSpliterators$FlatMapSpliterator f$0 -> a
    1:1:void com.google.common.collect.CollectSpliterators$FlatMapSpliterator.lambda$forEachRemaining$1(java.util.function.Consumer,java.lang.Object):0:0 -> accept
    1:1:void com.google.common.collect.CollectSpliterators$FlatMapSpliterator.lambda$forEachRemaining$1$CollectSpliterators$FlatMapSpliterator(java.util.function.Consumer,java.lang.Object):0 -> accept
    1:1:void accept(java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$CollectSpliterators$FlatMapSpliterator$jS9f-e7BaiOkJS9Bf7cxLbwV2yE -> com.google.common.collect.i1:
    com.google.common.collect.CollectSpliterators$FlatMapSpliterator f$0 -> a
    1:1:void com.google.common.collect.CollectSpliterators$FlatMapSpliterator.lambda$tryAdvance$0(java.lang.Object):0:0 -> accept
    1:1:void com.google.common.collect.CollectSpliterators$FlatMapSpliterator.lambda$tryAdvance$0$CollectSpliterators$FlatMapSpliterator(java.lang.Object):0 -> accept
    1:1:void accept(java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$CollectSpliterators$FlatMapSpliteratorOfPrimitive$BtHttlRw8Z4wtJqx1uP7QLQkp8Y -> com.google.common.collect.j1:
    com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfPrimitive f$0 -> a
    1:1:void com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfPrimitive.lambda$tryAdvance$0(java.lang.Object):0:0 -> accept
    1:1:void com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfPrimitive.lambda$tryAdvance$0$CollectSpliterators$FlatMapSpliteratorOfPrimitive(java.lang.Object):0 -> accept
    1:1:void accept(java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$CollectSpliterators$FlatMapSpliteratorOfPrimitive$JfR5oWk-ORX-NlKiz1yKIFtMHEU -> com.google.common.collect.k1:
    com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfPrimitive f$0 -> a
    java.lang.Object f$1 -> b
    1:1:void com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfPrimitive.lambda$forEachRemaining$1(java.lang.Object,java.lang.Object):0:0 -> accept
    1:1:void com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfPrimitive.lambda$forEachRemaining$1$CollectSpliterators$FlatMapSpliteratorOfPrimitive(java.lang.Object,java.lang.Object):0 -> accept
    1:1:void accept(java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$Collections2$FilteredCollection$70IhZg7HLZIkW9bYtgWt1uFQQgU -> com.google.common.collect.l1:
    java.util.Collection f$0 -> a
    1:1:boolean com.google.common.collect.Collections2$FilteredCollection.lambda$retainAll$1(java.util.Collection,java.lang.Object):0:0 -> test
    1:1:boolean test(java.lang.Object):0 -> test
com.google.common.collect.-$$Lambda$Collections2$FilteredCollection$HtbTyUQm3qybrdbO7I5Hln4lF5k -> com.google.common.collect.m1:
    java.util.function.Consumer f$1 -> b
    com.google.common.collect.Collections2$FilteredCollection f$0 -> a
    1:1:void com.google.common.collect.Collections2$FilteredCollection.lambda$forEach$0(java.util.function.Consumer,java.lang.Object):0:0 -> accept
    1:1:void com.google.common.collect.Collections2$FilteredCollection.lambda$forEach$0$Collections2$FilteredCollection(java.util.function.Consumer,java.lang.Object):0 -> accept
    1:1:void accept(java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$Collections2$FilteredCollection$_2Bl5YHmQiruc-AGQOdwxzqfXUk -> com.google.common.collect.n1:
    java.util.function.Predicate f$1 -> b
    com.google.common.collect.Collections2$FilteredCollection f$0 -> a
    1:1:boolean com.google.common.collect.Collections2$FilteredCollection.lambda$removeIf$2(java.util.function.Predicate,java.lang.Object):0:0 -> test
    1:1:boolean com.google.common.collect.Collections2$FilteredCollection.lambda$removeIf$2$Collections2$FilteredCollection(java.util.function.Predicate,java.lang.Object):0 -> test
    1:1:boolean test(java.lang.Object):0 -> test
com.google.common.collect.-$$Lambda$Collections2$TransformedCollection$EBNkr7EHFWtQH9Nm6pSu1VGlCi8 -> com.google.common.collect.o1:
    com.google.common.collect.Collections2$TransformedCollection f$0 -> a
    java.util.function.Predicate f$1 -> b
    1:1:boolean com.google.common.collect.Collections2$TransformedCollection.lambda$removeIf$1(java.util.function.Predicate,java.lang.Object):0:0 -> test
    1:1:boolean com.google.common.collect.Collections2$TransformedCollection.lambda$removeIf$1$Collections2$TransformedCollection(java.util.function.Predicate,java.lang.Object):0 -> test
    1:1:boolean test(java.lang.Object):0 -> test
com.google.common.collect.-$$Lambda$Collections2$TransformedCollection$VYVeX3VQW-SWWFKrlokFHSNQFDw -> com.google.common.collect.p1:
    com.google.common.collect.Collections2$TransformedCollection f$0 -> a
    java.util.function.Consumer f$1 -> b
    1:1:void com.google.common.collect.Collections2$TransformedCollection.lambda$forEach$0(java.util.function.Consumer,java.lang.Object):0:0 -> accept
    1:1:void com.google.common.collect.Collections2$TransformedCollection.lambda$forEach$0$Collections2$TransformedCollection(java.util.function.Consumer,java.lang.Object):0 -> accept
    1:1:void accept(java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$Comparators$MQxiq2HQfiLwrpE8tzR9YQt_H6M -> com.google.common.collect.q1:
    java.util.Comparator f$1 -> b
    int f$0 -> a
    1:1:com.google.common.collect.TopKSelector com.google.common.collect.Comparators.lambda$least$0(int,java.util.Comparator):0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.collect.-$$Lambda$Comparators$OgGiv3o8TMWiaUOqcgclfJsh_bw -> com.google.common.collect.r1:
    com.google.common.collect.-$$Lambda$Comparators$OgGiv3o8TMWiaUOqcgclfJsh_bw INSTANCE -> a
    1:1:java.lang.Object com.google.common.collect.Comparators.lambda$emptiesFirst$1(java.util.Optional):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$Comparators$dKtYCrgM1HU1GgbDAGLX3ijNISA -> com.google.common.collect.s1:
    com.google.common.collect.-$$Lambda$Comparators$dKtYCrgM1HU1GgbDAGLX3ijNISA INSTANCE -> a
    1:1:java.lang.Object com.google.common.collect.Comparators.lambda$emptiesLast$2(java.util.Optional):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$DmmHlW8OCKlwpeI_mQAuPABzaww -> com.google.common.collect.t1:
    com.google.common.collect.-$$Lambda$DmmHlW8OCKlwpeI_mQAuPABzaww INSTANCE -> a
com.google.common.collect.-$$Lambda$EoXqxa1xAFS3xQXlChUugBKKymg -> com.google.common.collect.u1:
    com.google.common.collect.-$$Lambda$EoXqxa1xAFS3xQXlChUugBKKymg INSTANCE -> a
com.google.common.collect.-$$Lambda$Fb0KmdJJU5UGx2b-m9gCsE5q550 -> com.google.common.collect.v1:
    java.util.Collection f$0 -> a
com.google.common.collect.-$$Lambda$FosWIl5LUev4J5RG9VOwYH1gS90 -> com.google.common.collect.w1:
    com.google.common.collect.-$$Lambda$FosWIl5LUev4J5RG9VOwYH1gS90 INSTANCE -> a
com.google.common.collect.-$$Lambda$GqjCN1fuys-fdFXuzuDVPbIaYUE -> com.google.common.collect.x1:
    com.google.common.collect.AbstractMapBasedMultimap$AsMap f$0 -> a
com.google.common.collect.-$$Lambda$HFLqm51g1K0rplRsHCpQqK9Q_iw -> com.google.common.collect.y1:
    com.google.common.collect.ImmutableSet$Indexed f$0 -> a
com.google.common.collect.-$$Lambda$HMLd-HmOoZb2k4J7RPATd0ExEqQ -> com.google.common.collect.z1:
    java.util.stream.Stream f$0 -> a
com.google.common.collect.-$$Lambda$HashBiMap$Inverse$4w97n6nJfhrvpPcRbCQHqjv-EQA -> com.google.common.collect.a2:
    java.util.function.BiConsumer f$0 -> a
    1:1:void com.google.common.collect.HashBiMap$Inverse.lambda$forEach$0(java.util.function.BiConsumer,java.lang.Object,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$HrLLeaavKHytLbs3rPmO49HoUL0 -> com.google.common.collect.b2:
    com.google.common.collect.-$$Lambda$HrLLeaavKHytLbs3rPmO49HoUL0 INSTANCE -> a
    1:1:com.google.common.collect.ImmutableSetMultimap$Builder com.google.common.collect.ImmutableSetMultimap$Builder.combine(com.google.common.collect.ImmutableMultimap$Builder):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object,java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$I25AGMiAT3Mh9p2WsRTbG5A-52U -> com.google.common.collect.c2:
    com.google.common.collect.-$$Lambda$I25AGMiAT3Mh9p2WsRTbG5A-52U INSTANCE -> a
com.google.common.collect.-$$Lambda$IA9uBkOc6EPE5epV9aHgwlAktLg -> com.google.common.collect.d2:
    com.google.common.collect.-$$Lambda$IA9uBkOc6EPE5epV9aHgwlAktLg INSTANCE -> a
com.google.common.collect.-$$Lambda$ImmutableMapKeySet$wqR1nN2E6t37qSNG4XlvaWs_TV4 -> com.google.common.collect.e2:
    java.util.function.Consumer f$0 -> a
    1:1:void com.google.common.collect.ImmutableMapKeySet.lambda$forEach$0(java.util.function.Consumer,java.lang.Object,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$ImmutableMapValues$uQ2dXKWiTIQ6CSy7IcVv7zBRQ0U -> com.google.common.collect.f2:
    java.util.function.Consumer f$0 -> a
    1:1:void com.google.common.collect.ImmutableMapValues.lambda$forEach$0(java.util.function.Consumer,java.lang.Object,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$ImmutableMultimap$FfPiE5qdBmwriOTbl6JPVWe0BHc -> com.google.common.collect.g2:
    com.google.common.collect.-$$Lambda$ImmutableMultimap$FfPiE5qdBmwriOTbl6JPVWe0BHc INSTANCE -> a
    1:1:java.util.Spliterator com.google.common.collect.ImmutableMultimap.lambda$entrySpliterator$1(java.util.Map$Entry):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$ImmutableMultimap$IPaBBAWTpokbP3t-TS250ZD4QGs -> com.google.common.collect.h2:
    java.util.function.BiConsumer f$0 -> a
    1:1:void com.google.common.collect.ImmutableMultimap.lambda$forEach$3(java.util.function.BiConsumer,java.lang.Object,java.util.Collection):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$ImmutableMultimap$YwNVRf37fa43ez6DZFyPOpRAkxc -> com.google.common.collect.i2:
    java.lang.Object f$1 -> b
    java.util.function.BiConsumer f$0 -> a
    1:1:void com.google.common.collect.ImmutableMultimap.lambda$forEach$2(java.util.function.BiConsumer,java.lang.Object,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$ImmutableMultimap$rufzp9pz-kqKcNkPAKI3lHrhrWU -> com.google.common.collect.j2:
    java.lang.Object f$0 -> a
    1:1:java.util.Map$Entry com.google.common.collect.ImmutableMultimap.lambda$entrySpliterator$0(java.lang.Object,java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$ImmutableMultiset$Builder$orWyTFCVJSA94BQGbKM_jVw9u70 -> com.google.common.collect.k2:
    com.google.common.collect.ImmutableMultiset$Builder f$0 -> a
    1:1:void com.google.common.collect.ImmutableMultiset$Builder.lambda$addAll$0(java.lang.Object,int):0:0 -> accept
    1:1:void com.google.common.collect.ImmutableMultiset$Builder.lambda$addAll$0$ImmutableMultiset$Builder(java.lang.Object,int):0 -> accept
    1:1:void accept(java.lang.Object,int):0 -> accept
com.google.common.collect.-$$Lambda$ImmutableMultiset$nRr72W-Leb7qI48k7MjN3TxRaBo -> com.google.common.collect.l2:
    com.google.common.collect.-$$Lambda$ImmutableMultiset$nRr72W-Leb7qI48k7MjN3TxRaBo INSTANCE -> a
com.google.common.collect.-$$Lambda$ImmutableSortedMultiset$JNd1fbc1AVPlXpEV95A1lQ6K3ag -> com.google.common.collect.m2:
    java.util.Comparator f$0 -> a
    1:1:com.google.common.collect.Multiset com.google.common.collect.ImmutableSortedMultiset.lambda$toImmutableSortedMultiset$1(java.util.Comparator):0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.collect.-$$Lambda$ImmutableSortedMultiset$PlSmTAp-gTkrNw1kFIxBkPzJibY -> com.google.common.collect.n2:
    java.util.function.ToIntFunction f$1 -> b
    java.util.function.Function f$0 -> a
    1:1:void com.google.common.collect.ImmutableSortedMultiset.lambda$toImmutableSortedMultiset$2(java.util.function.Function,java.util.function.ToIntFunction,com.google.common.collect.Multiset,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$ImmutableSortedMultiset$bPjUeMMRW6UAEkztohHdze_ihfs -> com.google.common.collect.o2:
    com.google.common.collect.-$$Lambda$ImmutableSortedMultiset$bPjUeMMRW6UAEkztohHdze_ihfs INSTANCE -> a
    1:1:com.google.common.collect.Multiset com.google.common.collect.ImmutableSortedMultiset.lambda$toImmutableSortedMultiset$3(com.google.common.collect.Multiset,com.google.common.collect.Multiset):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object,java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$ImmutableSortedMultiset$mBSdgYis0HLPXoDkoc1Mcsq6ZpE -> com.google.common.collect.p2:
    java.util.Comparator f$0 -> a
com.google.common.collect.-$$Lambda$ImmutableSortedMultiset$nT5AzLNkUKBACXbXKwIKbm6qg_w -> com.google.common.collect.q2:
    com.google.common.collect.-$$Lambda$ImmutableSortedMultiset$nT5AzLNkUKBACXbXKwIKbm6qg_w INSTANCE -> a
com.google.common.collect.-$$Lambda$Iterables$1$qiRIPtE9tWucoD2gTAzjgEVZv2Y -> com.google.common.collect.r2:
    java.lang.Iterable f$0 -> a
com.google.common.collect.-$$Lambda$Iterables$4$rSuZgfYtzR9N1C-t8FWfAtX17Dc -> com.google.common.collect.s2:
    com.google.common.base.Predicate f$0 -> a
    java.util.function.Consumer f$1 -> b
    1:1:void com.google.common.collect.Iterables$4.lambda$forEach$0(com.google.common.base.Predicate,java.util.function.Consumer,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$Iterables$5$QKcSfRaeGfNF5T0jqcGPOfebu1c -> com.google.common.collect.t2:
    com.google.common.base.Function f$1 -> b
    java.util.function.Consumer f$0 -> a
    1:1:void com.google.common.collect.Iterables$5.lambda$forEach$0(java.util.function.Consumer,com.google.common.base.Function,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$JWqlcawkMDz31mCHVR5T5i8cRAs -> com.google.common.collect.u2:
    com.google.common.collect.IndexedImmutableSet f$0 -> a
com.google.common.collect.-$$Lambda$JdkBackedImmutableMap$1gmbrw0PEIM4p2uuJhJAkqZrGu0 -> com.google.common.collect.v2:
    java.util.function.BiConsumer f$0 -> a
    1:1:void com.google.common.collect.JdkBackedImmutableMap.lambda$forEach$0(java.util.function.BiConsumer,java.util.Map$Entry):0:0 -> accept
    1:1:void accept(java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$JkiWm6aCrF3eWsF0etVTYLE_vQs -> com.google.common.collect.w2:
    com.google.common.collect.-$$Lambda$JkiWm6aCrF3eWsF0etVTYLE_vQs INSTANCE -> a
com.google.common.collect.-$$Lambda$Kuom7uWtqDp4LKLkuA3fqKpW1iE -> com.google.common.collect.x2:
    com.google.common.collect.-$$Lambda$Kuom7uWtqDp4LKLkuA3fqKpW1iE INSTANCE -> a
com.google.common.collect.-$$Lambda$KxfAxe-s3ebmIrr-qlO5MIBZODs -> com.google.common.collect.y2:
    com.google.common.collect.-$$Lambda$KxfAxe-s3ebmIrr-qlO5MIBZODs INSTANCE -> a
com.google.common.collect.-$$Lambda$L-V-_LFT29ph8QHrcA_xKzrEjFE -> com.google.common.collect.z2:
    com.google.common.collect.-$$Lambda$L-V-_LFT29ph8QHrcA_xKzrEjFE INSTANCE -> a
com.google.common.collect.-$$Lambda$Lists$TransformingRandomAccessList$ejnOncHNNmmmv_IsgAkCY1rDvWQ -> com.google.common.collect.a3:
    com.google.common.collect.Lists$TransformingRandomAccessList f$0 -> a
    java.util.function.Predicate f$1 -> b
    1:1:boolean com.google.common.collect.Lists$TransformingRandomAccessList.lambda$removeIf$0(java.util.function.Predicate,java.lang.Object):0:0 -> test
    1:1:boolean com.google.common.collect.Lists$TransformingRandomAccessList.lambda$removeIf$0$Lists$TransformingRandomAccessList(java.util.function.Predicate,java.lang.Object):0 -> test
    1:1:boolean test(java.lang.Object):0 -> test
com.google.common.collect.-$$Lambda$Lists$TransformingSequentialList$hGsmnKRk31FyLkkD-A__7CTrsCc -> com.google.common.collect.b3:
    java.util.function.Predicate f$1 -> b
    com.google.common.collect.Lists$TransformingSequentialList f$0 -> a
    1:1:boolean com.google.common.collect.Lists$TransformingSequentialList.lambda$removeIf$0(java.util.function.Predicate,java.lang.Object):0:0 -> test
    1:1:boolean com.google.common.collect.Lists$TransformingSequentialList.lambda$removeIf$0$Lists$TransformingSequentialList(java.util.function.Predicate,java.lang.Object):0 -> test
    1:1:boolean test(java.lang.Object):0 -> test
com.google.common.collect.-$$Lambda$M9KQ1-WdoizsCj5Me-Eqt-Qso4k -> com.google.common.collect.c3:
    com.google.common.collect.-$$Lambda$M9KQ1-WdoizsCj5Me-Eqt-Qso4k INSTANCE -> a
com.google.common.collect.-$$Lambda$MOnaZQAUMbkoTjkRcwrewOHrekM -> com.google.common.collect.d3:
    com.google.common.collect.-$$Lambda$MOnaZQAUMbkoTjkRcwrewOHrekM INSTANCE -> a
com.google.common.collect.-$$Lambda$Maps$AsMapView$N-1U7hmvOVklGaSkMXpG85PCCNI -> com.google.common.collect.e3:
    java.util.function.BiConsumer f$1 -> b
    com.google.common.collect.Maps$AsMapView f$0 -> a
    1:1:void com.google.common.collect.Maps$AsMapView.lambda$forEach$0(java.util.function.BiConsumer,java.lang.Object):0:0 -> accept
    1:1:void com.google.common.collect.Maps$AsMapView.lambda$forEach$0$Maps$AsMapView(java.util.function.BiConsumer,java.lang.Object):0 -> accept
    1:1:void accept(java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$Maps$FilteredEntryBiMap$xbLLZzLvN6p9touJRRU50JOVXWA -> com.google.common.collect.f3:
    java.util.function.BiFunction f$1 -> b
    com.google.common.collect.Maps$FilteredEntryBiMap f$0 -> a
    1:1:java.lang.Object com.google.common.collect.Maps$FilteredEntryBiMap.lambda$replaceAll$0(java.util.function.BiFunction,java.lang.Object,java.lang.Object):0:0 -> apply
    1:1:java.lang.Object com.google.common.collect.Maps$FilteredEntryBiMap.lambda$replaceAll$0$Maps$FilteredEntryBiMap(java.util.function.BiFunction,java.lang.Object,java.lang.Object):0 -> apply
    1:1:java.lang.Object apply(java.lang.Object,java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$Maps$KeySet$ZPl3l4oBQDe8X0agVbEUZ00QUvs -> com.google.common.collect.g3:
    java.util.function.Consumer f$0 -> a
    1:1:void com.google.common.collect.Maps$KeySet.lambda$forEach$0(java.util.function.Consumer,java.lang.Object,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$Maps$NavigableAsMapView$UbjZUgssgvFGFsmcMSG_On-Ucgk -> com.google.common.collect.h3:
    com.google.common.collect.Maps$NavigableAsMapView f$0 -> a
com.google.common.collect.-$$Lambda$Maps$NavigableAsMapView$wNZFNyJKuFJOv_35xtEMijfSrSM -> com.google.common.collect.i3:
    java.util.function.BiConsumer f$1 -> b
    com.google.common.collect.Maps$NavigableAsMapView f$0 -> a
com.google.common.collect.-$$Lambda$Maps$TransformedEntriesMap$G0ImAkyYFsKeWifoHo_DEkteFv8 -> com.google.common.collect.j3:
    com.google.common.collect.Maps$TransformedEntriesMap f$0 -> a
    java.util.function.BiConsumer f$1 -> b
    1:1:void com.google.common.collect.Maps$TransformedEntriesMap.lambda$forEach$0(java.util.function.BiConsumer,java.lang.Object,java.lang.Object):0:0 -> accept
    1:1:void com.google.common.collect.Maps$TransformedEntriesMap.lambda$forEach$0$Maps$TransformedEntriesMap(java.util.function.BiConsumer,java.lang.Object,java.lang.Object):0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$Maps$Values$CNEXpQpCOqPdeK7yrwH5Zd1upM4 -> com.google.common.collect.k3:
    java.util.function.Consumer f$0 -> a
    1:1:void com.google.common.collect.Maps$Values.lambda$forEach$0(java.util.function.Consumer,java.lang.Object,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$MoreCollectors$_NGVHytkwDYrarCbY8MgyGCRt7M -> com.google.common.collect.l3:
    com.google.common.collect.-$$Lambda$MoreCollectors$_NGVHytkwDYrarCbY8MgyGCRt7M INSTANCE -> a
com.google.common.collect.-$$Lambda$MoreCollectors$by3R1RMOe-eR0j7Q2FOY8aX3KAw -> com.google.common.collect.m3:
    com.google.common.collect.-$$Lambda$MoreCollectors$by3R1RMOe-eR0j7Q2FOY8aX3KAw INSTANCE -> a
com.google.common.collect.-$$Lambda$Multimap$7QL5swi9g_G6pz8RA22gO3HwB6o -> com.google.common.collect.n3:
    java.util.function.BiConsumer f$0 -> a
    1:1:void com.google.common.collect.Multimap.lambda$forEach$0(java.util.function.BiConsumer,java.util.Map$Entry):0:0 -> accept
    1:1:void accept(java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$Multimaps$Keys$Q8YHLoO6sw5O9gxio3S8LaRE7hE -> com.google.common.collect.o3:
    java.util.function.Consumer f$0 -> a
    1:1:void com.google.common.collect.Multimaps$Keys.lambda$forEach$0(java.util.function.Consumer,java.util.Map$Entry):0:0 -> accept
    1:1:void accept(java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$Multiset$8IKM2ewVVenZxzFyAJVaxv2smm0 -> com.google.common.collect.p3:
    java.util.function.Consumer f$0 -> a
    1:1:void com.google.common.collect.Multiset.lambda$forEach$1(java.util.function.Consumer,com.google.common.collect.Multiset$Entry):0:0 -> accept
    1:1:void accept(java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$Multiset$K74EFaGACMuCNup3gJtbaLydW2s -> com.google.common.collect.q3:
    java.util.function.ObjIntConsumer f$0 -> a
    1:1:void com.google.common.collect.Multiset.lambda$forEachEntry$0(java.util.function.ObjIntConsumer,com.google.common.collect.Multiset$Entry):0:0 -> accept
    1:1:void accept(java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$Multisets$17wcwICmrZe0nvGfAjlp3M_67EY -> com.google.common.collect.r3:
    com.google.common.collect.-$$Lambda$Multisets$17wcwICmrZe0nvGfAjlp3M_67EY INSTANCE -> a
    1:1:java.util.Spliterator com.google.common.collect.Multisets.lambda$spliteratorImpl$0(com.google.common.collect.Multiset$Entry):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$MutableClassToInstanceMap$2$du35t0Jw_CJxPphpPFF15FKxWZg -> com.google.common.collect.s3:
    com.google.common.collect.-$$Lambda$MutableClassToInstanceMap$2$du35t0Jw_CJxPphpPFF15FKxWZg INSTANCE -> a
    1:1:java.util.Map$Entry com.google.common.collect.MutableClassToInstanceMap.checkedEntry(java.util.Map$Entry):0:0 -> apply
    1:1:java.util.Map$Entry com.google.common.collect.MutableClassToInstanceMap.access$100(java.util.Map$Entry):0 -> apply
    1:1:java.util.Map$Entry com.google.common.collect.MutableClassToInstanceMap$2.lambda$spliterator$0(java.util.Map$Entry):0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$Nckpg5rjzy5Y4I_qUQsK4_wL03I -> com.google.common.collect.t3:
    com.google.common.collect.-$$Lambda$Nckpg5rjzy5Y4I_qUQsK4_wL03I INSTANCE -> a
com.google.common.collect.-$$Lambda$O0PmwAn1cz8ZENjXgafdjFyt8qA -> com.google.common.collect.u3:
    java.util.Set f$0 -> a
com.google.common.collect.-$$Lambda$O3_vJQH5SFtXbmwrHNSgKeBErL0 -> com.google.common.collect.v3:
    com.google.common.collect.-$$Lambda$O3_vJQH5SFtXbmwrHNSgKeBErL0 INSTANCE -> a
com.google.common.collect.-$$Lambda$Oyw8C3EXhbr8RstpeKamFQ-SsGk -> com.google.common.collect.w3:
    com.google.common.collect.ArrayTable$ArrayMap f$0 -> a
    1:1:java.util.Map$Entry com.google.common.collect.ArrayTable$ArrayMap.getEntry(int):0:0 -> apply
    1:1:java.lang.Object apply(int):0 -> apply
com.google.common.collect.-$$Lambda$PMSANYw-IJwk_7wrNWRzjOn3p-k -> com.google.common.collect.x3:
    com.google.common.collect.-$$Lambda$PMSANYw-IJwk_7wrNWRzjOn3p-k INSTANCE -> a
com.google.common.collect.-$$Lambda$RegularImmutableBiMap$Inverse$a92c3TxOCXw_IB-q4UuVGbCPIvw -> com.google.common.collect.y3:
    java.util.function.BiConsumer f$0 -> a
    1:1:void com.google.common.collect.RegularImmutableBiMap$Inverse.lambda$forEach$0(java.util.function.BiConsumer,java.lang.Object,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$Rr5wHpoNM5boD4b5K8greFBFLF8 -> com.google.common.collect.z3:
    com.google.common.collect.-$$Lambda$Rr5wHpoNM5boD4b5K8greFBFLF8 INSTANCE -> a
com.google.common.collect.-$$Lambda$Sets$1$1dO8tXt5WcXYILyPBl9a4QvnFq8 -> com.google.common.collect.a4:
    java.util.Set f$0 -> a
    1:1:boolean com.google.common.collect.Sets$1.lambda$stream$0(java.util.Set,java.lang.Object):0:0 -> test
    1:1:boolean test(java.lang.Object):0 -> test
com.google.common.collect.-$$Lambda$Sets$3$m1lZo2NZ1_rttEOEi3pfgc8wVRs -> com.google.common.collect.b4:
    java.util.Set f$0 -> a
    1:1:boolean com.google.common.collect.Sets$3.lambda$stream$0(java.util.Set,java.lang.Object):0:0 -> test
    1:1:boolean test(java.lang.Object):0 -> test
com.google.common.collect.-$$Lambda$Sets$3$xQlxucVr50zrOP4gd-SuyQ26yXE -> com.google.common.collect.c4:
    java.util.Set f$0 -> a
    1:1:boolean com.google.common.collect.Sets$3.lambda$parallelStream$1(java.util.Set,java.lang.Object):0:0 -> test
    1:1:boolean test(java.lang.Object):0 -> test
com.google.common.collect.-$$Lambda$StandardTable$7XsAO4YEvl8gtkLKKKxBwPPGTxQ -> com.google.common.collect.d4:
    java.util.Map$Entry f$0 -> a
    1:1:com.google.common.collect.Table$Cell com.google.common.collect.StandardTable.lambda$cellSpliterator$0(java.util.Map$Entry,java.util.Map$Entry):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$StandardTable$Vzxo9oL8hvAQvGq0nepV6fnu_bc -> com.google.common.collect.e4:
    com.google.common.collect.-$$Lambda$StandardTable$Vzxo9oL8hvAQvGq0nepV6fnu_bc INSTANCE -> a
    1:1:java.util.Spliterator com.google.common.collect.StandardTable.lambda$cellSpliterator$1(java.util.Map$Entry):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$Streams$9YER62fG8iwT_Mc4Y_ZhKZIvJ0E -> com.google.common.collect.f4:
    com.google.common.collect.-$$Lambda$Streams$9YER62fG8iwT_Mc4Y_ZhKZIvJ0E INSTANCE -> a
com.google.common.collect.-$$Lambda$Streams$BiNmlLoG7ct8rzCf5buGr0b_8qs -> com.google.common.collect.g4:
    java.util.function.BiConsumer f$0 -> a
    1:1:void com.google.common.collect.Streams.lambda$forEachPair$8(java.util.function.BiConsumer,com.google.common.collect.Streams$TemporaryPair):0:0 -> accept
    1:1:void accept(java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$Streams$DgNK27oiP8haPn5auJ2ZT54eVf4 -> com.google.common.collect.h4:
    java.util.stream.Stream[] f$0 -> a
com.google.common.collect.-$$Lambda$Streams$MVAgdwDwcm8cp-I2UpyfvhWcp2A -> com.google.common.collect.i4:
    com.google.common.collect.-$$Lambda$Streams$MVAgdwDwcm8cp-I2UpyfvhWcp2A INSTANCE -> a
com.google.common.collect.-$$Lambda$Streams$OB0R1FA1LQUUx62l_KmshjQSQbM -> com.google.common.collect.j4:
    java.util.stream.IntStream[] f$0 -> a
com.google.common.collect.-$$Lambda$Streams$Qp_P4FaOwCMprLsr62jrkJ917uU -> com.google.common.collect.k4:
    com.google.common.collect.-$$Lambda$Streams$Qp_P4FaOwCMprLsr62jrkJ917uU INSTANCE -> a
com.google.common.collect.-$$Lambda$Streams$S_zuu554HsnxFC9SN9aKUBWKhwg -> com.google.common.collect.l4:
    com.google.common.collect.-$$Lambda$Streams$S_zuu554HsnxFC9SN9aKUBWKhwg INSTANCE -> a
com.google.common.collect.-$$Lambda$Streams$U7gHO0GJgNvOxtXSHBoGndiRTrk -> com.google.common.collect.m4:
    java.util.stream.DoubleStream[] f$0 -> a
com.google.common.collect.-$$Lambda$Streams$xBG3xpJnmcE_Jf0CJXoDLShyxVY -> com.google.common.collect.n4:
    java.util.stream.LongStream[] f$0 -> a
com.google.common.collect.-$$Lambda$THOKFqy-4iTBwYOTXKHEtcBKWaQ -> com.google.common.collect.o4:
    com.google.common.collect.-$$Lambda$THOKFqy-4iTBwYOTXKHEtcBKWaQ INSTANCE -> a
com.google.common.collect.-$$Lambda$TLkZAI8eOVkj-PWTvpgIx13WwqY -> com.google.common.collect.p4:
    com.google.common.collect.Multiset f$0 -> a
com.google.common.collect.-$$Lambda$TableCollectors$2eWnWpIe9jzhGw4tsHzkz-gm9j0 -> com.google.common.collect.q4:
    java.util.function.BinaryOperator f$0 -> a
com.google.common.collect.-$$Lambda$TableCollectors$6o_R9bvIdl3JX-ViiFiEyqCGBAc -> com.google.common.collect.r4:
    java.util.function.BinaryOperator f$3 -> d
    java.util.function.Function f$2 -> c
    java.util.function.Function f$0 -> a
    java.util.function.Function f$1 -> b
com.google.common.collect.-$$Lambda$TableCollectors$885bsD43mistMYsz7ICYR_FFnj8 -> com.google.common.collect.s4:
    com.google.common.collect.-$$Lambda$TableCollectors$885bsD43mistMYsz7ICYR_FFnj8 INSTANCE -> a
    1:1:com.google.common.collect.TableCollectors$ImmutableTableCollectorState com.google.common.collect.TableCollectors.lambda$toImmutableTable$1():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.collect.-$$Lambda$TableCollectors$8_vKqk35qeI2xM4WuaRW5LiTWY8 -> com.google.common.collect.t4:
    java.util.function.BinaryOperator f$0 -> a
    1:1:com.google.common.collect.TableCollectors$ImmutableTableCollectorState com.google.common.collect.TableCollectors$ImmutableTableCollectorState.combine(com.google.common.collect.TableCollectors$ImmutableTableCollectorState,java.util.function.BinaryOperator):0:0 -> apply
    1:1:com.google.common.collect.TableCollectors$ImmutableTableCollectorState com.google.common.collect.TableCollectors.lambda$toImmutableTable$3(java.util.function.BinaryOperator,com.google.common.collect.TableCollectors$ImmutableTableCollectorState,com.google.common.collect.TableCollectors$ImmutableTableCollectorState):0 -> apply
    1:1:java.lang.Object apply(java.lang.Object,java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$TableCollectors$W5AhLmQB2BC-IYrcdI-Vs-SXdrA -> com.google.common.collect.u4:
    com.google.common.collect.-$$Lambda$TableCollectors$W5AhLmQB2BC-IYrcdI-Vs-SXdrA INSTANCE -> a
    1:1:com.google.common.collect.ImmutableTable com.google.common.collect.TableCollectors$ImmutableTableCollectorState.toTable():0:0 -> apply
    1:1:com.google.common.collect.ImmutableTable com.google.common.collect.TableCollectors.lambda$toImmutableTable$4(com.google.common.collect.TableCollectors$ImmutableTableCollectorState):0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$TableCollectors$WbHn2tCWu34Vt9h3go9LaiE48co -> com.google.common.collect.v4:
    java.util.function.BinaryOperator f$3 -> d
    java.util.function.Function f$2 -> c
    java.util.function.Function f$0 -> a
    java.util.function.Function f$1 -> b
    1:1:void com.google.common.collect.TableCollectors.lambda$toImmutableTable$2(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,com.google.common.collect.TableCollectors$ImmutableTableCollectorState,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$TableCollectors$eXnjvVClRzQTtnJlCo-8Gqt3HT4 -> com.google.common.collect.w4:
    java.util.function.Function f$2 -> c
    java.util.function.Function f$0 -> a
    java.util.function.Function f$1 -> b
    1:1:void com.google.common.collect.TableCollectors.lambda$toImmutableTable$0(java.util.function.Function,java.util.function.Function,java.util.function.Function,com.google.common.collect.ImmutableTable$Builder,java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$TableCollectors$y0QHohViEH68Oj_aajwoMXOvTqI -> com.google.common.collect.x4:
    com.google.common.collect.-$$Lambda$TableCollectors$y0QHohViEH68Oj_aajwoMXOvTqI INSTANCE -> a
    1:1:java.lang.Object com.google.common.collect.TableCollectors.lambda$toTable$5(java.lang.Object,java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object,java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$U16N-8PwOz4fo5c-Vol8OK3SUx0 -> com.google.common.collect.y4:
    com.google.common.collect.-$$Lambda$U16N-8PwOz4fo5c-Vol8OK3SUx0 INSTANCE -> a
com.google.common.collect.-$$Lambda$UHf1W1ReHb_v0IbjrqXYRL0KLCE -> com.google.common.collect.z4:
    com.google.common.collect.-$$Lambda$UHf1W1ReHb_v0IbjrqXYRL0KLCE INSTANCE -> a
com.google.common.collect.-$$Lambda$V8ksY1c7dt_x9qbYeLWCcrcYdZw -> com.google.common.collect.a5:
    java.util.Collection f$0 -> a
com.google.common.collect.-$$Lambda$VB50dy0bHvmi2ab6fUqhh1JbVWE -> com.google.common.collect.b5:
    com.google.common.collect.MultimapBuilder$ListMultimapBuilder f$0 -> a
com.google.common.collect.-$$Lambda$Wg4kyVeuwZkqkLuDX0M7XTHh0i4 -> com.google.common.collect.c5:
    com.google.common.collect.-$$Lambda$Wg4kyVeuwZkqkLuDX0M7XTHh0i4 INSTANCE -> a
com.google.common.collect.-$$Lambda$X_ReiLzMMdmLOHBMWZV1MhM0VVw -> com.google.common.collect.d5:
    com.google.common.collect.-$$Lambda$X_ReiLzMMdmLOHBMWZV1MhM0VVw INSTANCE -> a
com.google.common.collect.-$$Lambda$Xht_Ljvt5R8DKx7cj_m0kty-8zw -> com.google.common.collect.e5:
    com.google.common.collect.-$$Lambda$Xht_Ljvt5R8DKx7cj_m0kty-8zw INSTANCE -> a
com.google.common.collect.-$$Lambda$bEmagIn8JeVnMBYk_G6hyaz-MHQ -> com.google.common.collect.f5:
    com.google.common.collect.-$$Lambda$bEmagIn8JeVnMBYk_G6hyaz-MHQ INSTANCE -> a
com.google.common.collect.-$$Lambda$bLY8vG1K5XxVZuIdtn0HUzRlSJs -> com.google.common.collect.g5:
    com.google.common.collect.-$$Lambda$bLY8vG1K5XxVZuIdtn0HUzRlSJs INSTANCE -> a
com.google.common.collect.-$$Lambda$blaAtO--XD8VAXMTziU8JWiW0Ww -> com.google.common.collect.h5:
    com.google.common.collect.-$$Lambda$blaAtO--XD8VAXMTziU8JWiW0Ww INSTANCE -> a
com.google.common.collect.-$$Lambda$cXxboVgO8LkekbP9-sbgiPoMjN0 -> com.google.common.collect.i5:
    com.google.common.collect.-$$Lambda$cXxboVgO8LkekbP9-sbgiPoMjN0 INSTANCE -> a
com.google.common.collect.-$$Lambda$ccIXdoLJAFjjZ8yRnyPiUG74_nY -> com.google.common.collect.j5:
    com.google.common.collect.-$$Lambda$ccIXdoLJAFjjZ8yRnyPiUG74_nY INSTANCE -> a
    1:1:com.google.common.collect.ImmutableListMultimap$Builder com.google.common.collect.ImmutableListMultimap$Builder.combine(com.google.common.collect.ImmutableMultimap$Builder):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object,java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$fSY5nnsvVlX33YcSx99JqLSYEv8 -> com.google.common.collect.k5:
    com.google.common.collect.-$$Lambda$fSY5nnsvVlX33YcSx99JqLSYEv8 INSTANCE -> a
com.google.common.collect.-$$Lambda$fpN4I0QQKnqoRTVgHTJgOxGrirQ -> com.google.common.collect.l5:
    java.util.stream.DoubleStream f$0 -> a
com.google.common.collect.-$$Lambda$gLukCuZ3T8aQ7VqeOU5w3ig8Jwg -> com.google.common.collect.m5:
    com.google.common.collect.-$$Lambda$gLukCuZ3T8aQ7VqeOU5w3ig8Jwg INSTANCE -> a
com.google.common.collect.-$$Lambda$gecpByN4eJJvQ5D8bhEGkiZE_kw -> com.google.common.collect.n5:
    com.google.common.collect.-$$Lambda$gecpByN4eJJvQ5D8bhEGkiZE_kw INSTANCE -> a
com.google.common.collect.-$$Lambda$ggeQ_yh5npLm_4LAk2pp6nTMtVY -> com.google.common.collect.o5:
    com.google.common.collect.-$$Lambda$ggeQ_yh5npLm_4LAk2pp6nTMtVY INSTANCE -> a
com.google.common.collect.-$$Lambda$hOTz7keUQs40Nn8saKqiU19QapI -> com.google.common.collect.p5:
    com.google.common.collect.-$$Lambda$hOTz7keUQs40Nn8saKqiU19QapI INSTANCE -> a
com.google.common.collect.-$$Lambda$hlWN96BsfAOTz2csXahfgErSoOE -> com.google.common.collect.q5:
    com.google.common.collect.Streams$1OptionalState f$0 -> a
    1:1:void com.google.common.collect.Streams$1OptionalState.set(java.lang.Object):0:0 -> accept
    1:1:void accept(java.lang.Object):0 -> accept
com.google.common.collect.-$$Lambda$i1r6VPXBf3X5kIJHWXzorrLMWbA -> com.google.common.collect.r5:
    com.google.common.collect.-$$Lambda$i1r6VPXBf3X5kIJHWXzorrLMWbA INSTANCE -> a
com.google.common.collect.-$$Lambda$i3lBncsrIzHwKA3a2gXNScs0aWs -> com.google.common.collect.s5:
    com.google.common.collect.-$$Lambda$i3lBncsrIzHwKA3a2gXNScs0aWs INSTANCE -> a
com.google.common.collect.-$$Lambda$kPj8Ioh2qrHaOpflIdB8Zk2L0PY -> com.google.common.collect.t5:
    com.google.common.collect.-$$Lambda$kPj8Ioh2qrHaOpflIdB8Zk2L0PY INSTANCE -> a
com.google.common.collect.-$$Lambda$ksvWViqQROyezeRw8hFIxwsJKmQ -> com.google.common.collect.u5:
    com.google.common.collect.MultimapBuilder$SetMultimapBuilder f$0 -> a
com.google.common.collect.-$$Lambda$lR0VKAIjMKe54owYO6FQTIS_CNE -> com.google.common.collect.v5:
    com.google.common.collect.-$$Lambda$lR0VKAIjMKe54owYO6FQTIS_CNE INSTANCE -> a
com.google.common.collect.-$$Lambda$rHhq7tzgnNcBGZtwL3eEI7SHbww -> com.google.common.collect.w5:
    com.google.common.collect.-$$Lambda$rHhq7tzgnNcBGZtwL3eEI7SHbww INSTANCE -> a
com.google.common.collect.-$$Lambda$t9hZLo9d1Rib41DnFRVYzD05ZdA -> com.google.common.collect.x5:
    com.google.common.collect.-$$Lambda$t9hZLo9d1Rib41DnFRVYzD05ZdA INSTANCE -> a
com.google.common.collect.-$$Lambda$tyvZ1FZ2rjWbyALhRg-U1BfoCqE -> com.google.common.collect.y5:
    com.google.common.collect.-$$Lambda$tyvZ1FZ2rjWbyALhRg-U1BfoCqE INSTANCE -> a
    1:1:java.util.Optional com.google.common.collect.MoreCollectors$ToOptionalState.getOptional():0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.-$$Lambda$uo6mGZv0bsq-gnHJiRrqi7rbatA -> com.google.common.collect.z5:
    com.google.common.collect.-$$Lambda$uo6mGZv0bsq-gnHJiRrqi7rbatA INSTANCE -> a
com.google.common.collect.-$$Lambda$vI_VXFf2ocPh9nEqF4KJ8gIpesI -> com.google.common.collect.a6:
    com.google.common.collect.-$$Lambda$vI_VXFf2ocPh9nEqF4KJ8gIpesI INSTANCE -> a
com.google.common.collect.-$$Lambda$vebnCuY8ziEmDivclpgyaIK1QGk -> com.google.common.collect.b6:
    com.google.common.collect.-$$Lambda$vebnCuY8ziEmDivclpgyaIK1QGk INSTANCE -> a
com.google.common.collect.-$$Lambda$vf0n71JGqeu6B0SDNCv1WN6jcME -> com.google.common.collect.c6:
    com.google.common.collect.-$$Lambda$vf0n71JGqeu6B0SDNCv1WN6jcME INSTANCE -> a
com.google.common.collect.-$$Lambda$vqSbRwA1PE2eBzVUwQtQFnvvijY -> com.google.common.collect.d6:
    com.google.common.collect.-$$Lambda$vqSbRwA1PE2eBzVUwQtQFnvvijY INSTANCE -> a
com.google.common.collect.-$$Lambda$wXOTOw1G8z0PqIyYAYDEJ1yAxuU -> com.google.common.collect.e6:
    com.google.common.collect.-$$Lambda$wXOTOw1G8z0PqIyYAYDEJ1yAxuU INSTANCE -> a
com.google.common.collect.-$$Lambda$x5NjFSZe9w9De3LUdFS-_7KLEho -> com.google.common.collect.f6:
    com.google.common.collect.ImmutableSortedMap$1EntrySet$1 f$0 -> a
com.google.common.collect.-$$Lambda$ywKRZI1iCBhL1O7ykEl8_5kBSK0 -> com.google.common.collect.g6:
    com.google.common.collect.-$$Lambda$ywKRZI1iCBhL1O7ykEl8_5kBSK0 INSTANCE -> a
com.google.common.collect.-$$Lambda$zHMeuF_XiSzpwRphisN7v_9L0X4 -> com.google.common.collect.h6:
    com.google.common.collect.-$$Lambda$zHMeuF_XiSzpwRphisN7v_9L0X4 INSTANCE -> a
com.google.common.collect.-$$Lambda$zchdiLpGn-9F8vety37cW5vt_8w -> com.google.common.collect.i6:
    com.google.common.collect.-$$Lambda$zchdiLpGn-9F8vety37cW5vt_8w INSTANCE -> a
com.google.common.collect.-$$Lambda$zgQbEdPgU4dKXB2xhMNf4GcbfQk -> com.google.common.collect.j6:
    com.google.common.collect.-$$Lambda$zgQbEdPgU4dKXB2xhMNf4GcbfQk INSTANCE -> a
com.google.common.collect.AbstractBiMap -> com.google.common.collect.q6:
    java.util.Map delegate -> a
    com.google.common.collect.AbstractBiMap inverse -> b
    java.util.Set keySet -> c
    java.util.Set valueSet -> d
    java.util.Set entrySet -> e
    1:1:void <init>(java.util.Map,com.google.common.collect.AbstractBiMap):0:0 -> <init>
    1:1:void <init>(java.util.Map,com.google.common.collect.AbstractBiMap,com.google.common.collect.AbstractBiMap$1):0 -> <init>
    2:2:void setDelegates(java.util.Map,java.util.Map):0:0 -> <init>
    2:2:void <init>(java.util.Map,java.util.Map):0 -> <init>
    3:3:com.google.common.collect.AbstractBiMap makeInverse(java.util.Map):0:0 -> <init>
    3:3:void setDelegates(java.util.Map,java.util.Map):0 -> <init>
    3:3:void <init>(java.util.Map,java.util.Map):0 -> <init>
    4:4:void setDelegates(java.util.Map,java.util.Map):0:0 -> <init>
    4:4:void <init>(java.util.Map,java.util.Map):0 -> <init>
    java.util.Map access$100(com.google.common.collect.AbstractBiMap) -> a
    1:1:java.lang.Object removeFromBothMaps(java.lang.Object):0:0 -> b
    1:1:java.lang.Object access$200(com.google.common.collect.AbstractBiMap,java.lang.Object):0 -> b
    1:1:void removeFromInverseMap(java.lang.Object):0:0 -> c
    1:1:void updateInverseMap(java.lang.Object,boolean,java.lang.Object,java.lang.Object):0 -> c
    1:1:void access$500(com.google.common.collect.AbstractBiMap,java.lang.Object,boolean,java.lang.Object,java.lang.Object):0 -> c
    2:2:void updateInverseMap(java.lang.Object,boolean,java.lang.Object,java.lang.Object):0:0 -> c
    2:2:void access$500(com.google.common.collect.AbstractBiMap,java.lang.Object,boolean,java.lang.Object,java.lang.Object):0 -> c
    1:1:void removeFromInverseMap(java.lang.Object):0:0 -> d
    1:1:void access$600(com.google.common.collect.AbstractBiMap,java.lang.Object):0 -> d
    java.lang.Object checkKey(java.lang.Object) -> e
    java.lang.Object checkValue(java.lang.Object) -> f
    java.util.Iterator entrySetIterator() -> g
    1:1:void removeFromInverseMap(java.lang.Object):0:0 -> h
    1:1:void updateInverseMap(java.lang.Object,boolean,java.lang.Object,java.lang.Object):0 -> h
    1:1:java.lang.Object putInBothMaps(java.lang.Object,java.lang.Object,boolean):0 -> h
    2:2:void updateInverseMap(java.lang.Object,boolean,java.lang.Object,java.lang.Object):0:0 -> h
    2:2:java.lang.Object putInBothMaps(java.lang.Object,java.lang.Object,boolean):0 -> h
    void removeFromInverseMap(java.lang.Object) -> i
    1:1:java.lang.Object removeFromBothMaps(java.lang.Object):0:0 -> remove
    1:1:java.lang.Object remove(java.lang.Object):0 -> remove
com.google.common.collect.AbstractBiMap$1 -> com.google.common.collect.k6:
    com.google.common.collect.AbstractBiMap this$0 -> c
    java.util.Map$Entry entry -> a
    java.util.Iterator val$iterator -> b
    1:1:java.util.Map$Entry next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
com.google.common.collect.AbstractBiMap$BiMapEntry -> com.google.common.collect.l6:
    java.util.Map$Entry delegate -> a
    com.google.common.collect.AbstractBiMap this$0 -> b
    1:1:java.util.Map$Entry delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
com.google.common.collect.AbstractBiMap$EntrySet -> com.google.common.collect.m6:
    com.google.common.collect.AbstractBiMap this$0 -> b
    java.util.Set esDelegate -> a
    1:1:void <init>(com.google.common.collect.AbstractBiMap):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.AbstractBiMap,com.google.common.collect.AbstractBiMap$1):0 -> <init>
    1:1:java.util.Set delegate():0:0 -> contains
    1:1:boolean contains(java.lang.Object):0 -> contains
    2:2:boolean com.google.common.collect.Maps.containsEntryImpl(java.util.Collection,java.lang.Object):0:0 -> contains
    2:2:boolean contains(java.lang.Object):0 -> contains
    1:1:java.util.Set delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
    2:2:java.util.Set delegate():0:0 -> delegate
    2:2:java.util.Collection delegate():0 -> delegate
com.google.common.collect.AbstractBiMap$Inverse -> com.google.common.collect.n6:
    java.lang.Object checkKey(java.lang.Object) -> e
    java.lang.Object checkValue(java.lang.Object) -> f
com.google.common.collect.AbstractBiMap$KeySet -> com.google.common.collect.o6:
    com.google.common.collect.AbstractBiMap this$0 -> a
    1:1:void <init>(com.google.common.collect.AbstractBiMap):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.AbstractBiMap,com.google.common.collect.AbstractBiMap$1):0 -> <init>
    1:1:java.util.Iterator com.google.common.collect.Maps.keyIterator(java.util.Iterator):0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.collect.AbstractBiMap$ValueSet -> com.google.common.collect.p6:
    com.google.common.collect.AbstractBiMap this$0 -> b
    java.util.Set valuesDelegate -> a
    1:1:void <init>(com.google.common.collect.AbstractBiMap):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.AbstractBiMap,com.google.common.collect.AbstractBiMap$1):0 -> <init>
    1:1:java.util.Set delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
    2:2:java.util.Set delegate():0:0 -> delegate
    2:2:java.util.Collection delegate():0 -> delegate
    1:1:java.util.Iterator com.google.common.collect.Maps.valueIterator(java.util.Iterator):0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.collect.AbstractIndexedListIterator -> com.google.common.collect.r6:
    int position -> b
    int size -> a
    1:1:void <init>(int,int):0:0 -> <init>
    1:1:void <init>(int):0 -> <init>
com.google.common.collect.AbstractIterator -> com.google.common.collect.AbstractIterator:
    com.google.common.collect.AbstractIterator$State state -> a
    java.lang.Object next -> b
    1:1:boolean tryToComputeNext():0:0 -> hasNext
    1:1:boolean hasNext():0 -> hasNext
com.google.common.collect.AbstractIterator$State -> com.google.common.collect.s6:
    com.google.common.collect.AbstractIterator$State DONE -> c
    com.google.common.collect.AbstractIterator$State FAILED -> d
    com.google.common.collect.AbstractIterator$State READY -> a
    com.google.common.collect.AbstractIterator$State NOT_READY -> b
    com.google.common.collect.AbstractIterator$State[] $VALUES -> e
com.google.common.collect.AbstractListMultimap -> com.google.common.collect.t6:
    1:1:java.util.List createUnmodifiableEmptyCollection():0:0 -> t
    1:1:java.util.Collection createUnmodifiableEmptyCollection():0 -> t
    java.util.Collection unmodifiableCollectionSubclass(java.util.Collection) -> u
    java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> v
com.google.common.collect.AbstractMapBasedMultimap -> com.google.common.collect.o7:
    int totalSize -> g
    java.util.Map map -> f
    java.util.Map createAsMap() -> a
    java.util.Collection createEntries() -> b
    java.util.Set createKeySet() -> c
    com.google.common.collect.Multiset createKeys() -> d
    java.util.Collection createValues() -> e
    java.util.Iterator entryIterator() -> f
    java.util.Spliterator entrySpliterator() -> g
    java.util.Iterator valueIterator() -> h
    java.util.Spliterator valueSpliterator() -> i
    java.util.Map access$000(com.google.common.collect.AbstractMapBasedMultimap) -> j
    int access$208(com.google.common.collect.AbstractMapBasedMultimap) -> k
    int access$210(com.google.common.collect.AbstractMapBasedMultimap) -> l
    int access$212(com.google.common.collect.AbstractMapBasedMultimap,int) -> m
    int access$220(com.google.common.collect.AbstractMapBasedMultimap,int) -> n
    1:1:void removeValuesForKey(java.lang.Object):0:0 -> o
    1:1:void access$300(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object):0 -> o
    2:2:java.lang.Object com.google.common.collect.Maps.safeRemove(java.util.Map,java.lang.Object):0:0 -> o
    2:2:void removeValuesForKey(java.lang.Object):0 -> o
    2:2:void access$300(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object):0 -> o
    3:3:void removeValuesForKey(java.lang.Object):0:0 -> o
    3:3:void access$300(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object):0 -> o
    java.util.Map backingMap() -> p
    java.util.Collection createCollection(java.lang.Object) -> q
    java.util.Map createMaybeNavigableAsMap() -> r
    1:1:java.util.Collection getOrCreateCollection(java.lang.Object):0:0 -> replaceValues
    1:1:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable):0 -> replaceValues
    2:2:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable):0:0 -> replaceValues
    java.util.Set createMaybeNavigableKeySet() -> s
    java.util.Collection createUnmodifiableEmptyCollection() -> t
    java.util.Collection unmodifiableCollectionSubclass(java.util.Collection) -> u
    java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> v
    java.util.List wrapList(java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> w
com.google.common.collect.AbstractMapBasedMultimap$1 -> com.google.common.collect.u6:
    java.lang.Object output(java.lang.Object,java.lang.Object) -> a
com.google.common.collect.AbstractMapBasedMultimap$2 -> com.google.common.collect.v6:
    1:1:java.util.Map$Entry output(java.lang.Object,java.lang.Object):0:0 -> a
    1:1:java.lang.Object output(java.lang.Object,java.lang.Object):0 -> a
com.google.common.collect.AbstractMapBasedMultimap$AsMap -> com.google.common.collect.y6:
    java.util.Map submap -> d
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> e
    java.util.Map$Entry wrapEntry(java.util.Map$Entry) -> b
    1:1:java.util.Collection get(java.lang.Object):0:0 -> get
    1:1:java.lang.Object get(java.lang.Object):0 -> get
    1:1:java.util.Collection remove(java.lang.Object):0:0 -> remove
    1:1:java.lang.Object remove(java.lang.Object):0 -> remove
com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries -> com.google.common.collect.w6:
    com.google.common.collect.AbstractMapBasedMultimap$AsMap this$1 -> a
    java.util.Map map() -> a
    1:1:boolean contains(java.lang.Object):0:0 -> remove
    1:1:boolean remove(java.lang.Object):0 -> remove
    2:2:boolean remove(java.lang.Object):0:0 -> remove
com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator -> com.google.common.collect.x6:
    java.util.Collection collection -> b
    java.util.Iterator delegateIterator -> a
    com.google.common.collect.AbstractMapBasedMultimap$AsMap this$1 -> c
    1:1:java.util.Map$Entry next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
com.google.common.collect.AbstractMapBasedMultimap$Itr -> com.google.common.collect.z6:
    java.util.Iterator valueIterator -> d
    java.util.Collection collection -> c
    java.util.Iterator keyIterator -> a
    java.lang.Object key -> b
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> e
    java.lang.Object output(java.lang.Object,java.lang.Object) -> a
com.google.common.collect.AbstractMapBasedMultimap$KeySet -> com.google.common.collect.b7:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> b
    1:1:java.util.Map com.google.common.collect.Maps$KeySet.map():0:0 -> containsAll
    1:1:boolean containsAll(java.util.Collection):0 -> containsAll
    2:2:boolean containsAll(java.util.Collection):0:0 -> containsAll
    1:1:java.util.Map com.google.common.collect.Maps$KeySet.map():0:0 -> equals
    1:1:boolean equals(java.lang.Object):0 -> equals
    2:2:boolean equals(java.lang.Object):0:0 -> equals
    1:1:java.util.Map com.google.common.collect.Maps$KeySet.map():0:0 -> hashCode
    1:1:int hashCode():0 -> hashCode
    2:2:int hashCode():0:0 -> hashCode
    1:1:java.util.Map com.google.common.collect.Maps$KeySet.map():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
    2:2:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.util.Map com.google.common.collect.Maps$KeySet.map():0:0 -> remove
    1:1:boolean remove(java.lang.Object):0 -> remove
    2:2:boolean remove(java.lang.Object):0:0 -> remove
    1:1:java.util.Map com.google.common.collect.Maps$KeySet.map():0:0 -> spliterator
    1:1:java.util.Spliterator spliterator():0 -> spliterator
    2:2:java.util.Spliterator spliterator():0:0 -> spliterator
com.google.common.collect.AbstractMapBasedMultimap$KeySet$1 -> com.google.common.collect.a7:
    java.util.Map$Entry entry -> a
    java.util.Iterator val$entryIterator -> b
    com.google.common.collect.AbstractMapBasedMultimap$KeySet this$1 -> c
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap -> com.google.common.collect.c7:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> h
    1:1:java.util.NavigableSet createKeySet():0:0 -> c
    1:1:java.util.SortedSet createKeySet():0 -> c
    1:1:java.util.NavigableSet createKeySet():0:0 -> createKeySet
    1:1:java.util.Set createKeySet():0 -> createKeySet
    java.util.SortedMap sortedMap() -> d
    java.util.Map$Entry pollAsMapEntry(java.util.Iterator) -> e
    1:1:java.util.SortedMap com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.sortedMap():0:0 -> f
    1:1:java.util.NavigableMap sortedMap():0 -> f
    2:2:java.util.NavigableMap sortedMap():0:0 -> f
    1:1:java.util.NavigableMap headMap(java.lang.Object):0:0 -> headMap
    1:1:java.util.SortedMap headMap(java.lang.Object):0 -> headMap
    1:1:java.util.SortedSet com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.keySet():0:0 -> keySet
    1:1:java.util.NavigableSet keySet():0 -> keySet
    2:2:java.util.NavigableSet keySet():0:0 -> keySet
    1:1:java.util.NavigableMap subMap(java.lang.Object,java.lang.Object):0:0 -> subMap
    1:1:java.util.SortedMap subMap(java.lang.Object,java.lang.Object):0 -> subMap
    1:1:java.util.NavigableMap tailMap(java.lang.Object):0:0 -> tailMap
    1:1:java.util.SortedMap tailMap(java.lang.Object):0 -> tailMap
com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet -> com.google.common.collect.d7:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> d
    java.util.SortedMap sortedMap() -> b
    1:1:java.util.Map com.google.common.collect.Maps$KeySet.map():0:0 -> c
    1:1:java.util.SortedMap com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet.sortedMap():0 -> c
    1:1:java.util.NavigableMap sortedMap():0 -> c
    2:2:java.util.SortedMap com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet.sortedMap():0:0 -> c
    2:2:java.util.NavigableMap sortedMap():0 -> c
    3:3:java.util.NavigableMap sortedMap():0:0 -> c
    1:1:java.util.NavigableSet headSet(java.lang.Object):0:0 -> headSet
    1:1:java.util.SortedSet headSet(java.lang.Object):0 -> headSet
    1:1:java.util.NavigableSet subSet(java.lang.Object,java.lang.Object):0:0 -> subSet
    1:1:java.util.SortedSet subSet(java.lang.Object,java.lang.Object):0 -> subSet
    1:1:java.util.NavigableSet tailSet(java.lang.Object):0:0 -> tailSet
    1:1:java.util.SortedSet tailSet(java.lang.Object):0 -> tailSet
com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList -> com.google.common.collect.e7:
com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap -> com.google.common.collect.f7:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> g
    java.util.SortedSet sortedKeySet -> f
    java.util.SortedSet createKeySet() -> c
    java.util.SortedMap sortedMap() -> d
com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet -> com.google.common.collect.g7:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> c
    1:1:java.util.Map com.google.common.collect.Maps$KeySet.map():0:0 -> b
    1:1:java.util.SortedMap sortedMap():0 -> b
    2:2:java.util.SortedMap sortedMap():0:0 -> b
com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection -> com.google.common.collect.i7:
    com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection ancestor -> c
    java.util.Collection ancestorDelegate -> d
    java.util.Collection delegate -> b
    java.lang.Object key -> a
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> e
    1:1:java.util.Collection getDelegate():0:0 -> <init>
    1:1:void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection):0 -> <init>
    2:2:void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection):0:0 -> <init>
    void addToMap() -> a
    1:1:java.util.Collection getDelegate():0:0 -> b
    1:1:void refreshIfEmpty():0 -> b
    2:2:void refreshIfEmpty():0:0 -> b
    void removeIfEmpty() -> c
com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator -> com.google.common.collect.h7:
    com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection this$1 -> c
    java.util.Collection originalDelegate -> b
    java.util.Iterator delegateIterator -> a
    1:1:java.util.Iterator com.google.common.collect.AbstractMapBasedMultimap.iteratorOrListIterator(java.util.Collection):0:0 -> <init>
    1:1:java.util.Iterator com.google.common.collect.AbstractMapBasedMultimap.access$100(java.util.Collection):0 -> <init>
    1:1:void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection):0 -> <init>
    2:2:void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection):0:0 -> <init>
    void validateIterator() -> a
com.google.common.collect.AbstractMapBasedMultimap$WrappedList -> com.google.common.collect.k7:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> f
    1:1:java.util.Collection com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getDelegate():0:0 -> add
    1:1:void add(int,java.lang.Object):0 -> add
    2:2:void add(int,java.lang.Object):0:0 -> add
    3:3:java.util.Collection com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getDelegate():0:0 -> add
    3:3:java.util.List getListDelegate():0 -> add
    3:3:void add(int,java.lang.Object):0 -> add
    4:4:java.util.List getListDelegate():0:0 -> add
    4:4:void add(int,java.lang.Object):0 -> add
    5:5:void add(int,java.lang.Object):0:0 -> add
    1:1:java.util.Collection com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getDelegate():0:0 -> addAll
    1:1:java.util.List getListDelegate():0 -> addAll
    1:1:boolean addAll(int,java.util.Collection):0 -> addAll
    2:2:java.util.List getListDelegate():0:0 -> addAll
    2:2:boolean addAll(int,java.util.Collection):0 -> addAll
    3:3:boolean addAll(int,java.util.Collection):0:0 -> addAll
    4:4:java.util.Collection com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getDelegate():0:0 -> addAll
    4:4:boolean addAll(int,java.util.Collection):0 -> addAll
    5:5:boolean addAll(int,java.util.Collection):0:0 -> addAll
    1:1:java.util.Collection com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getDelegate():0:0 -> get
    1:1:java.util.List getListDelegate():0 -> get
    1:1:java.lang.Object get(int):0 -> get
    2:2:java.util.List getListDelegate():0:0 -> get
    2:2:java.lang.Object get(int):0 -> get
    3:3:java.lang.Object get(int):0:0 -> get
    1:1:java.util.Collection com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getDelegate():0:0 -> indexOf
    1:1:java.util.List getListDelegate():0 -> indexOf
    1:1:int indexOf(java.lang.Object):0 -> indexOf
    2:2:java.util.List getListDelegate():0:0 -> indexOf
    2:2:int indexOf(java.lang.Object):0 -> indexOf
    3:3:int indexOf(java.lang.Object):0:0 -> indexOf
    1:1:java.util.Collection com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getDelegate():0:0 -> lastIndexOf
    1:1:java.util.List getListDelegate():0 -> lastIndexOf
    1:1:int lastIndexOf(java.lang.Object):0 -> lastIndexOf
    2:2:java.util.List getListDelegate():0:0 -> lastIndexOf
    2:2:int lastIndexOf(java.lang.Object):0 -> lastIndexOf
    3:3:int lastIndexOf(java.lang.Object):0:0 -> lastIndexOf
    1:1:java.util.Collection com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getDelegate():0:0 -> remove
    1:1:java.util.List getListDelegate():0 -> remove
    1:1:java.lang.Object remove(int):0 -> remove
    2:2:java.util.List getListDelegate():0:0 -> remove
    2:2:java.lang.Object remove(int):0 -> remove
    3:3:java.lang.Object remove(int):0:0 -> remove
    1:1:java.util.Collection com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getDelegate():0:0 -> set
    1:1:java.util.List getListDelegate():0 -> set
    1:1:java.lang.Object set(int,java.lang.Object):0 -> set
    2:2:java.util.List getListDelegate():0:0 -> set
    2:2:java.lang.Object set(int,java.lang.Object):0 -> set
    3:3:java.lang.Object set(int,java.lang.Object):0:0 -> set
    1:1:java.lang.Object com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getKey():0:0 -> subList
    1:1:java.util.List subList(int,int):0 -> subList
    2:2:java.util.Collection com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getDelegate():0:0 -> subList
    2:2:java.util.List getListDelegate():0 -> subList
    2:2:java.util.List subList(int,int):0 -> subList
    3:3:java.util.List getListDelegate():0:0 -> subList
    3:3:java.util.List subList(int,int):0 -> subList
    4:4:java.util.List subList(int,int):0:0 -> subList
    5:5:com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getAncestor():0:0 -> subList
    5:5:java.util.List subList(int,int):0 -> subList
    6:6:java.util.List subList(int,int):0:0 -> subList
com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator -> com.google.common.collect.j7:
    com.google.common.collect.AbstractMapBasedMultimap$WrappedList this$1 -> d
    1:1:java.util.Collection com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getDelegate():0:0 -> <init>
    1:1:java.util.List com.google.common.collect.AbstractMapBasedMultimap$WrappedList.getListDelegate():0 -> <init>
    1:1:void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedList,int):0 -> <init>
    2:2:java.util.List com.google.common.collect.AbstractMapBasedMultimap$WrappedList.getListDelegate():0:0 -> <init>
    2:2:void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedList,int):0 -> <init>
    3:3:void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedList,int):0:0 -> <init>
    1:1:java.util.Iterator com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator.getDelegateIterator():0:0 -> b
    1:1:java.util.ListIterator getDelegateListIterator():0 -> b
    2:2:java.util.ListIterator getDelegateListIterator():0:0 -> b
com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet -> com.google.common.collect.l7:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> g
    java.util.SortedSet getSortedSetDelegate() -> d
    1:1:java.util.Collection com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getDelegate():0:0 -> e
    1:1:java.util.SortedSet com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet.getSortedSetDelegate():0 -> e
    1:1:java.util.NavigableSet getSortedSetDelegate():0 -> e
    2:2:java.util.SortedSet com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet.getSortedSetDelegate():0:0 -> e
    2:2:java.util.NavigableSet getSortedSetDelegate():0 -> e
    3:3:java.util.NavigableSet getSortedSetDelegate():0:0 -> e
    1:1:com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getAncestor():0:0 -> f
    1:1:java.util.NavigableSet wrap(java.util.NavigableSet):0 -> f
    2:2:java.util.NavigableSet wrap(java.util.NavigableSet):0:0 -> f
com.google.common.collect.AbstractMapBasedMultimap$WrappedSet -> com.google.common.collect.m7:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> f
com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet -> com.google.common.collect.n7:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> f
    1:1:java.util.Collection com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getDelegate():0:0 -> d
    1:1:java.util.SortedSet getSortedSetDelegate():0 -> d
    2:2:java.util.SortedSet getSortedSetDelegate():0:0 -> d
    1:1:java.lang.Object com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getKey():0:0 -> headSet
    1:1:java.util.SortedSet headSet(java.lang.Object):0 -> headSet
    2:2:java.util.SortedSet headSet(java.lang.Object):0:0 -> headSet
    3:3:com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getAncestor():0:0 -> headSet
    3:3:java.util.SortedSet headSet(java.lang.Object):0 -> headSet
    4:4:java.util.SortedSet headSet(java.lang.Object):0:0 -> headSet
    1:1:java.lang.Object com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getKey():0:0 -> subSet
    1:1:java.util.SortedSet subSet(java.lang.Object,java.lang.Object):0 -> subSet
    2:2:java.util.SortedSet subSet(java.lang.Object,java.lang.Object):0:0 -> subSet
    3:3:com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getAncestor():0:0 -> subSet
    3:3:java.util.SortedSet subSet(java.lang.Object,java.lang.Object):0 -> subSet
    4:4:java.util.SortedSet subSet(java.lang.Object,java.lang.Object):0:0 -> subSet
    1:1:java.lang.Object com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getKey():0:0 -> tailSet
    1:1:java.util.SortedSet tailSet(java.lang.Object):0 -> tailSet
    2:2:java.util.SortedSet tailSet(java.lang.Object):0:0 -> tailSet
    3:3:com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.getAncestor():0:0 -> tailSet
    3:3:java.util.SortedSet tailSet(java.lang.Object):0 -> tailSet
    4:4:java.util.SortedSet tailSet(java.lang.Object):0:0 -> tailSet
com.google.common.collect.AbstractMapBasedMultiset -> com.google.common.collect.t7:
    java.util.Map backingMap -> c
    long size -> d
    int distinctElements() -> b
    java.util.Iterator elementIterator() -> c
    java.util.Iterator entryIterator() -> d
    long access$010(com.google.common.collect.AbstractMapBasedMultiset) -> e
    long access$022(com.google.common.collect.AbstractMapBasedMultiset,long) -> f
    java.util.Map access$100(com.google.common.collect.AbstractMapBasedMultiset) -> g
    1:1:int getAndSet(com.google.common.collect.Count,int):0:0 -> setCount
    1:1:int setCount(java.lang.Object,int):0 -> setCount
    2:2:int setCount(java.lang.Object,int):0:0 -> setCount
    3:3:int getAndSet(com.google.common.collect.Count,int):0:0 -> setCount
    3:3:int setCount(java.lang.Object,int):0 -> setCount
    4:4:int setCount(java.lang.Object,int):0:0 -> setCount
com.google.common.collect.AbstractMapBasedMultiset$1 -> com.google.common.collect.p7:
    java.util.Map$Entry toRemove -> a
    java.util.Iterator val$backingEntries -> b
    com.google.common.collect.AbstractMapBasedMultiset this$0 -> c
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
com.google.common.collect.AbstractMapBasedMultiset$2 -> com.google.common.collect.r7:
    java.util.Map$Entry toRemove -> a
    java.util.Iterator val$backingEntries -> b
    com.google.common.collect.AbstractMapBasedMultiset this$0 -> c
    1:1:com.google.common.collect.Multiset$Entry next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
com.google.common.collect.AbstractMapBasedMultiset$2$1 -> com.google.common.collect.q7:
    java.util.Map$Entry val$mapEntry -> a
    com.google.common.collect.AbstractMapBasedMultiset$2 this$1 -> b
com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator -> com.google.common.collect.s7:
    java.util.Map$Entry currentEntry -> b
    com.google.common.collect.AbstractMapBasedMultiset this$0 -> e
    java.util.Iterator entryIterator -> a
    int occurrencesLeft -> c
    boolean canRemove -> d
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
com.google.common.collect.AbstractMapEntry -> com.google.common.collect.u7:
com.google.common.collect.AbstractMultimap -> com.google.common.collect.y7:
    java.util.Collection values -> d
    java.util.Collection entries -> a
    java.util.Set keySet -> b
    com.google.common.collect.Multiset keys -> c
    java.util.Map asMap -> e
    java.util.Map createAsMap() -> a
    java.util.Collection createEntries() -> b
    java.util.Set createKeySet() -> c
    com.google.common.collect.Multiset createKeys() -> d
    java.util.Collection createValues() -> e
    1:1:boolean com.google.common.collect.Multimaps.equalsImpl(com.google.common.collect.Multimap,java.lang.Object):0:0 -> equals
    1:1:boolean equals(java.lang.Object):0 -> equals
    java.util.Iterator entryIterator() -> f
    java.util.Spliterator entrySpliterator() -> g
    1:1:java.util.Iterator com.google.common.collect.Maps.valueIterator(java.util.Iterator):0:0 -> h
    1:1:java.util.Iterator valueIterator():0 -> h
    java.util.Spliterator valueSpliterator() -> i
com.google.common.collect.AbstractMultimap$Entries -> com.google.common.collect.v7:
    com.google.common.collect.AbstractMultimap this$0 -> a
    1:1:void com.google.common.collect.Multimaps$Entries.<init>():0:0 -> <init>
    1:1:void <init>(com.google.common.collect.AbstractMultimap):0 -> <init>
    1:1:com.google.common.collect.Multimap multimap():0:0 -> clear
    1:1:void com.google.common.collect.Multimaps$Entries.clear():0 -> clear
    1:1:void com.google.common.collect.Multimaps$Entries.clear():0 -> clear
    2:2:void com.google.common.collect.Multimaps$Entries.clear():0:0 -> clear
    2:2:void com.google.common.collect.Multimaps$Entries.clear():0 -> clear
    1:1:boolean com.google.common.collect.Multimaps$Entries.contains(java.lang.Object):0:0 -> contains
    1:1:boolean com.google.common.collect.Multimaps$Entries.contains(java.lang.Object):0 -> contains
    2:2:com.google.common.collect.Multimap multimap():0:0 -> contains
    2:2:boolean com.google.common.collect.Multimaps$Entries.contains(java.lang.Object):0 -> contains
    2:2:boolean com.google.common.collect.Multimaps$Entries.contains(java.lang.Object):0 -> contains
    3:3:boolean com.google.common.collect.Multimaps$Entries.contains(java.lang.Object):0:0 -> contains
    3:3:boolean com.google.common.collect.Multimaps$Entries.contains(java.lang.Object):0 -> contains
    1:1:boolean com.google.common.collect.Multimaps$Entries.remove(java.lang.Object):0:0 -> remove
    1:1:boolean com.google.common.collect.Multimaps$Entries.remove(java.lang.Object):0 -> remove
    2:2:com.google.common.collect.Multimap multimap():0:0 -> remove
    2:2:boolean com.google.common.collect.Multimaps$Entries.remove(java.lang.Object):0 -> remove
    2:2:boolean com.google.common.collect.Multimaps$Entries.remove(java.lang.Object):0 -> remove
    3:3:boolean com.google.common.collect.Multimaps$Entries.remove(java.lang.Object):0:0 -> remove
    3:3:boolean com.google.common.collect.Multimaps$Entries.remove(java.lang.Object):0 -> remove
    1:1:com.google.common.collect.Multimap multimap():0:0 -> size
    1:1:int com.google.common.collect.Multimaps$Entries.size():0 -> size
    1:1:int com.google.common.collect.Multimaps$Entries.size():0 -> size
    2:2:int com.google.common.collect.Multimaps$Entries.size():0:0 -> size
    2:2:int com.google.common.collect.Multimaps$Entries.size():0 -> size
com.google.common.collect.AbstractMultimap$EntrySet -> com.google.common.collect.w7:
com.google.common.collect.AbstractMultimap$Values -> com.google.common.collect.x7:
    com.google.common.collect.AbstractMultimap this$0 -> a
com.google.common.collect.AbstractMultiset -> com.google.common.collect.b8:
    java.util.Set elementSet -> a
    java.util.Set entrySet -> b
    java.util.Set createElementSet() -> a
    int distinctElements() -> b
    java.util.Iterator elementIterator() -> c
    java.util.Iterator entryIterator() -> d
    1:1:boolean com.google.common.collect.Multisets.removeAllImpl(com.google.common.collect.Multiset,java.util.Collection):0:0 -> removeAll
    1:1:boolean removeAll(java.util.Collection):0 -> removeAll
com.google.common.collect.AbstractMultiset$ElementSet -> com.google.common.collect.z7:
    com.google.common.collect.AbstractMultiset this$0 -> a
    com.google.common.collect.Multiset multiset() -> a
com.google.common.collect.AbstractMultiset$EntrySet -> com.google.common.collect.a8:
    com.google.common.collect.AbstractMultiset this$0 -> a
    com.google.common.collect.Multiset multiset() -> a
com.google.common.collect.AbstractNavigableMap -> com.google.common.collect.e8:
    java.util.Iterator descendingEntryIterator() -> c
    1:1:java.util.Map$Entry ceilingEntry(java.lang.Object):0:0 -> ceilingKey
    1:1:java.lang.Object ceilingKey(java.lang.Object):0 -> ceilingKey
    2:2:java.lang.Object ceilingKey(java.lang.Object):0:0 -> ceilingKey
    1:1:java.util.Map$Entry floorEntry(java.lang.Object):0:0 -> floorKey
    1:1:java.lang.Object floorKey(java.lang.Object):0 -> floorKey
    2:2:java.lang.Object floorKey(java.lang.Object):0:0 -> floorKey
    1:1:java.util.Map$Entry higherEntry(java.lang.Object):0:0 -> higherKey
    1:1:java.lang.Object higherKey(java.lang.Object):0 -> higherKey
    2:2:java.lang.Object higherKey(java.lang.Object):0:0 -> higherKey
    1:1:java.util.Map$Entry lowerEntry(java.lang.Object):0:0 -> lowerKey
    1:1:java.lang.Object lowerKey(java.lang.Object):0 -> lowerKey
    2:2:java.lang.Object lowerKey(java.lang.Object):0:0 -> lowerKey
com.google.common.collect.AbstractNavigableMap$1 -> com.google.common.collect.c8:
com.google.common.collect.AbstractNavigableMap$DescendingMap -> com.google.common.collect.d8:
    com.google.common.collect.AbstractNavigableMap this$0 -> d
    1:1:void <init>(com.google.common.collect.AbstractNavigableMap):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.AbstractNavigableMap,com.google.common.collect.AbstractNavigableMap$1):0 -> <init>
    java.util.NavigableMap forward() -> a
com.google.common.collect.AbstractRangeSet -> com.google.common.collect.f8:
com.google.common.collect.AbstractSequentialIterator -> com.google.common.collect.AbstractSequentialIterator:
    java.lang.Object nextOrNull -> a
com.google.common.collect.AbstractSetMultimap -> com.google.common.collect.g8:
    java.util.Collection createUnmodifiableEmptyCollection() -> t
    java.util.Collection unmodifiableCollectionSubclass(java.util.Collection) -> u
    java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> v
    java.util.Set createUnmodifiableEmptyCollection() -> x
com.google.common.collect.AbstractSortedKeySortedSetMultimap -> com.google.common.collect.h8:
    java.util.Set createKeySet() -> c
com.google.common.collect.AbstractSortedMultiset -> com.google.common.collect.j8:
    com.google.common.collect.SortedMultiset descendingMultiset -> d
    java.util.Comparator comparator -> c
    1:1:java.util.NavigableSet createElementSet():0:0 -> a
    1:1:java.util.Set createElementSet():0 -> a
    1:1:com.google.common.collect.SortedMultiset createDescendingMultiset():0:0 -> descendingMultiset
    1:1:com.google.common.collect.SortedMultiset descendingMultiset():0 -> descendingMultiset
    2:2:com.google.common.collect.SortedMultiset descendingMultiset():0:0 -> descendingMultiset
    1:1:java.util.Iterator com.google.common.collect.TreeMultiset.entryIterator():0:0 -> firstEntry
    1:1:com.google.common.collect.Multiset$Entry firstEntry():0 -> firstEntry
    2:2:com.google.common.collect.Multiset$Entry firstEntry():0:0 -> firstEntry
    1:1:java.util.Iterator com.google.common.collect.TreeMultiset.descendingEntryIterator():0:0 -> lastEntry
    1:1:com.google.common.collect.Multiset$Entry lastEntry():0 -> lastEntry
    2:2:com.google.common.collect.Multiset$Entry lastEntry():0:0 -> lastEntry
    1:1:java.util.Iterator com.google.common.collect.TreeMultiset.entryIterator():0:0 -> pollFirstEntry
    1:1:com.google.common.collect.Multiset$Entry pollFirstEntry():0 -> pollFirstEntry
    2:2:com.google.common.collect.Multiset$Entry pollFirstEntry():0:0 -> pollFirstEntry
    1:1:java.util.Iterator com.google.common.collect.TreeMultiset.descendingEntryIterator():0:0 -> pollLastEntry
    1:1:com.google.common.collect.Multiset$Entry pollLastEntry():0 -> pollLastEntry
    2:2:com.google.common.collect.Multiset$Entry pollLastEntry():0:0 -> pollLastEntry
com.google.common.collect.AbstractSortedMultiset$1DescendingMultisetImpl -> com.google.common.collect.i8:
    com.google.common.collect.AbstractSortedMultiset this$0 -> d
    com.google.common.collect.SortedMultiset forwardMultiset() -> a
    1:1:java.util.Iterator com.google.common.collect.TreeMultiset.descendingEntryIterator():0:0 -> entryIterator
    1:1:java.util.Iterator entryIterator():0 -> entryIterator
    1:1:java.util.Iterator com.google.common.collect.AbstractSortedMultiset.descendingIterator():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.collect.AbstractSortedSetMultimap -> com.google.common.collect.k8:
    java.util.Collection createUnmodifiableEmptyCollection() -> t
    1:1:java.util.SortedSet unmodifiableCollectionSubclass(java.util.Collection):0:0 -> u
    1:1:java.util.Collection unmodifiableCollectionSubclass(java.util.Collection):0 -> u
    java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> v
    java.util.Set createUnmodifiableEmptyCollection() -> x
    1:1:java.util.SortedSet unmodifiableCollectionSubclass(java.util.Collection):0:0 -> y
    1:1:java.util.SortedSet createUnmodifiableEmptyCollection():0 -> y
com.google.common.collect.AbstractTable -> com.google.common.collect.o8:
    java.util.Collection values -> b
    java.util.Set cellSet -> a
    java.util.Iterator cellIterator() -> a
    java.util.Spliterator cellSpliterator() -> b
    java.util.Set createCellSet() -> c
    java.util.Collection createValues() -> d
    java.util.Iterator valuesIterator() -> e
    1:1:boolean com.google.common.collect.Tables.equalsImpl(com.google.common.collect.Table,java.lang.Object):0:0 -> equals
    1:1:boolean equals(java.lang.Object):0 -> equals
    java.util.Spliterator valuesSpliterator() -> f
com.google.common.collect.AbstractTable$1 -> com.google.common.collect.l8:
    1:1:java.lang.Object transform(com.google.common.collect.Table$Cell):0:0 -> a
    1:1:java.lang.Object transform(java.lang.Object):0 -> a
com.google.common.collect.AbstractTable$CellSet -> com.google.common.collect.m8:
    com.google.common.collect.AbstractTable this$0 -> a
    1:1:boolean com.google.common.collect.Collections2.safeRemove(java.util.Collection,java.lang.Object):0:0 -> remove
    1:1:boolean remove(java.lang.Object):0 -> remove
com.google.common.collect.AbstractTable$Values -> com.google.common.collect.n8:
    com.google.common.collect.AbstractTable this$0 -> a
com.google.common.collect.AllEqualOrdering -> com.google.common.collect.p8:
    com.google.common.collect.AllEqualOrdering INSTANCE -> a
com.google.common.collect.ArrayListMultimap -> com.google.common.collect.ArrayListMultimap:
    int expectedValuesPerKey -> h
    1:1:java.util.Map com.google.common.collect.Platform.newHashMapWithExpectedSize(int):0:0 -> <init>
    1:1:void <init>(int,int):0 -> <init>
    2:2:void com.google.common.collect.ArrayListMultimapGwtSerializationDependencies.<init>(java.util.Map):0:0 -> <init>
    2:2:void <init>(int,int):0 -> <init>
    3:3:void <init>(int,int):0:0 -> <init>
    1:1:void <init>():0:0 -> create
    1:1:com.google.common.collect.ArrayListMultimap create():0 -> create
    2:2:void <init>(com.google.common.collect.Multimap):0:0 -> create
    2:2:com.google.common.collect.ArrayListMultimap create(com.google.common.collect.Multimap):0 -> create
    1:1:java.util.List createCollection():0:0 -> createCollection
    1:1:java.util.Collection createCollection():0 -> createCollection
com.google.common.collect.ArrayTable -> com.google.common.collect.ArrayTable:
    com.google.common.collect.ArrayTable$ColumnMap columnMap -> h
    java.lang.Object[][] array -> g
    com.google.common.collect.ImmutableList columnList -> d
    com.google.common.collect.ImmutableMap rowKeyToIndex -> e
    com.google.common.collect.ImmutableList rowList -> c
    com.google.common.collect.ArrayTable$RowMap rowMap -> i
    com.google.common.collect.ImmutableMap columnKeyToIndex -> f
    java.util.Iterator cellIterator() -> a
    java.util.Spliterator cellSpliterator() -> b
    1:1:void <init>(com.google.common.collect.Table):0:0 -> create
    1:1:com.google.common.collect.ArrayTable create(com.google.common.collect.Table):0 -> create
    java.util.Iterator valuesIterator() -> e
    java.util.Spliterator valuesSpliterator() -> f
    com.google.common.collect.ImmutableList access$100(com.google.common.collect.ArrayTable) -> g
    com.google.common.collect.ImmutableList access$200(com.google.common.collect.ArrayTable) -> h
    com.google.common.collect.ImmutableMap access$300(com.google.common.collect.ArrayTable) -> i
    com.google.common.collect.ImmutableMap access$600(com.google.common.collect.ArrayTable) -> j
    java.lang.Object access$800(com.google.common.collect.ArrayTable,int) -> k
    java.lang.Object getValue(int) -> l
    java.lang.Object lambda$yqJBEUhtD7sOM-8hNQp9h3Mi57Y(com.google.common.collect.ArrayTable,int) -> m
com.google.common.collect.ArrayTable$1 -> com.google.common.collect.q8:
    com.google.common.collect.ArrayTable this$0 -> c
    1:1:com.google.common.collect.Table$Cell get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
    2:2:com.google.common.collect.Table$Cell com.google.common.collect.ArrayTable.getCell(int):0:0 -> get
    2:2:com.google.common.collect.Table$Cell com.google.common.collect.ArrayTable.access$000(com.google.common.collect.ArrayTable,int):0 -> get
    2:2:com.google.common.collect.Table$Cell get(int):0 -> get
    2:2:java.lang.Object get(int):0 -> get
com.google.common.collect.ArrayTable$2 -> com.google.common.collect.r8:
    com.google.common.collect.ArrayTable this$0 -> d
    int columnIndex -> b
    int val$index -> c
    int rowIndex -> a
com.google.common.collect.ArrayTable$3 -> com.google.common.collect.s8:
    com.google.common.collect.ArrayTable this$0 -> c
com.google.common.collect.ArrayTable$ArrayMap -> com.google.common.collect.v8:
    com.google.common.collect.ImmutableMap keyIndex -> a
    1:1:void <init>(com.google.common.collect.ImmutableMap):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.ImmutableMap,com.google.common.collect.ArrayTable$1):0 -> <init>
    java.util.Iterator entryIterator() -> a
    java.util.Spliterator entrySpliterator() -> b
    java.lang.Object getKey(int) -> c
    java.lang.String getKeyRole() -> d
    java.lang.Object getValue(int) -> e
    java.lang.Object setValue(int,java.lang.Object) -> f
com.google.common.collect.ArrayTable$ArrayMap$1 -> com.google.common.collect.t8:
    com.google.common.collect.ArrayTable$ArrayMap this$0 -> b
    int val$index -> a
com.google.common.collect.ArrayTable$ArrayMap$2 -> com.google.common.collect.u8:
    com.google.common.collect.ArrayTable$ArrayMap this$0 -> c
    1:1:java.util.Map$Entry get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
    2:2:java.util.Map$Entry com.google.common.collect.ArrayTable$ArrayMap.getEntry(int):0:0 -> get
    2:2:java.util.Map$Entry get(int):0 -> get
    2:2:java.lang.Object get(int):0 -> get
com.google.common.collect.ArrayTable$Column -> com.google.common.collect.w8:
    com.google.common.collect.ArrayTable this$0 -> c
    int columnIndex -> b
    java.lang.String getKeyRole() -> d
    java.lang.Object getValue(int) -> e
    java.lang.Object setValue(int,java.lang.Object) -> f
com.google.common.collect.ArrayTable$ColumnMap -> com.google.common.collect.x8:
    com.google.common.collect.ArrayTable this$0 -> b
    1:1:void <init>(com.google.common.collect.ArrayTable):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.ArrayTable,com.google.common.collect.ArrayTable$1):0 -> <init>
    java.lang.String getKeyRole() -> d
    1:1:java.util.Map getValue(int):0:0 -> e
    1:1:java.lang.Object getValue(int):0 -> e
    1:1:java.util.Map setValue(int,java.util.Map):0:0 -> f
    1:1:java.lang.Object setValue(int,java.lang.Object):0 -> f
    1:1:java.util.Map put(java.lang.Object,java.util.Map):0:0 -> put
    1:1:java.lang.Object put(java.lang.Object,java.lang.Object):0 -> put
com.google.common.collect.ArrayTable$Row -> com.google.common.collect.y8:
    com.google.common.collect.ArrayTable this$0 -> c
    int rowIndex -> b
    java.lang.String getKeyRole() -> d
    java.lang.Object getValue(int) -> e
    java.lang.Object setValue(int,java.lang.Object) -> f
com.google.common.collect.ArrayTable$RowMap -> com.google.common.collect.z8:
    com.google.common.collect.ArrayTable this$0 -> b
    1:1:void <init>(com.google.common.collect.ArrayTable):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.ArrayTable,com.google.common.collect.ArrayTable$1):0 -> <init>
    java.lang.String getKeyRole() -> d
    1:1:java.util.Map getValue(int):0:0 -> e
    1:1:java.lang.Object getValue(int):0 -> e
    1:1:java.util.Map setValue(int,java.util.Map):0:0 -> f
    1:1:java.lang.Object setValue(int,java.lang.Object):0 -> f
    1:1:java.util.Map put(java.lang.Object,java.util.Map):0:0 -> put
    1:1:java.lang.Object put(java.lang.Object,java.lang.Object):0 -> put
com.google.common.collect.BaseImmutableMultimap -> com.google.common.collect.a9:
com.google.common.collect.BoundType -> com.google.common.collect.BoundType:
    com.google.common.collect.BoundType[] $VALUES -> a
    com.google.common.collect.BoundType forBoolean(boolean) -> a
com.google.common.collect.ByFunctionOrdering -> com.google.common.collect.b9:
    com.google.common.base.Function function -> a
    com.google.common.collect.Ordering ordering -> b
com.google.common.collect.CartesianList -> com.google.common.collect.d9:
    int[] axesSizeProduct -> b
    com.google.common.collect.ImmutableList axes -> a
    int $r8$clinit -> c
    com.google.common.collect.ImmutableList access$000(com.google.common.collect.CartesianList) -> a
    1:1:int getAxisIndexForProductIndex(int,int):0:0 -> b
    1:1:int access$100(com.google.common.collect.CartesianList,int,int):0 -> b
    1:1:com.google.common.collect.ImmutableList get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
com.google.common.collect.CartesianList$1 -> com.google.common.collect.c9:
    com.google.common.collect.CartesianList this$0 -> c
    int val$index -> b
    boolean isPartialView() -> e
com.google.common.collect.CollectCollectors -> com.google.common.collect.g9:
    java.util.stream.Collector TO_IMMUTABLE_SET -> b
    java.util.stream.Collector TO_IMMUTABLE_RANGE_SET -> c
    int $r8$clinit -> d
    java.util.stream.Collector TO_IMMUTABLE_LIST -> a
    java.util.stream.Collector flatteningToMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier) -> a
    java.util.stream.Collector toImmutableList() -> b
    java.util.stream.Collector toImmutableMultiset(java.util.function.Function,java.util.function.ToIntFunction) -> c
    java.util.stream.Collector toImmutableRangeSet() -> d
    java.util.stream.Collector toImmutableSet() -> e
com.google.common.collect.CollectCollectors$EnumMapAccumulator -> com.google.common.collect.e9:
    java.util.EnumMap map -> b
    java.util.function.BinaryOperator mergeFunction -> a
    com.google.common.collect.CollectCollectors$EnumMapAccumulator combine(com.google.common.collect.CollectCollectors$EnumMapAccumulator) -> a
    void put(java.lang.Enum,java.lang.Object) -> b
    com.google.common.collect.ImmutableMap toImmutableMap() -> c
com.google.common.collect.CollectCollectors$EnumSetAccumulator -> com.google.common.collect.f9:
    java.util.stream.Collector TO_IMMUTABLE_ENUM_SET -> b
    java.util.EnumSet set -> a
    void add(java.lang.Enum) -> a
    com.google.common.collect.CollectCollectors$EnumSetAccumulator combine(com.google.common.collect.CollectCollectors$EnumSetAccumulator) -> b
    com.google.common.collect.CollectCollectors$EnumSetAccumulator lambda$DXK1D4ohk3Ds4wC3bR4Gyv_uoNM() -> c
    com.google.common.collect.ImmutableSet toImmutableSet() -> d
com.google.common.collect.CollectPreconditions -> com.google.common.collect.h9:
    1:1:java.lang.Object com.google.common.collect.SortedMultisets.getElementOrNull(com.google.common.collect.Multiset$Entry):0:0 -> a
    1:1:java.lang.Object com.google.common.collect.SortedMultisets.access$100(com.google.common.collect.Multiset$Entry):0 -> a
    1:1:java.util.Set com.google.common.collect.Synchronized.typePreservingSet(java.util.Set,java.lang.Object):0:0 -> b
    1:1:java.util.Set com.google.common.collect.Synchronized.access$300(java.util.Set,java.lang.Object):0 -> b
    2:2:java.util.SortedSet com.google.common.collect.Synchronized.sortedSet(java.util.SortedSet,java.lang.Object):0:0 -> b
    2:2:java.util.Set com.google.common.collect.Synchronized.typePreservingSet(java.util.Set,java.lang.Object):0 -> b
    2:2:java.util.Set com.google.common.collect.Synchronized.access$300(java.util.Set,java.lang.Object):0 -> b
    3:3:java.util.Set com.google.common.collect.Synchronized.set(java.util.Set,java.lang.Object):0:0 -> b
    3:3:java.util.Set com.google.common.collect.Synchronized.typePreservingSet(java.util.Set,java.lang.Object):0 -> b
    3:3:java.util.Set com.google.common.collect.Synchronized.access$300(java.util.Set,java.lang.Object):0 -> b
    int com.google.common.collect.SortedLists.binarySearch(java.util.List,com.google.common.base.Function,java.lang.Comparable,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior) -> binarySearch
    1:1:int com.google.common.collect.SortedLists.binarySearch(java.util.List,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior):0:0 -> binarySearch
    1:1:int com.google.common.collect.SortedLists.binarySearch(java.util.List,com.google.common.base.Function,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior):0 -> binarySearch
    1:1:java.util.Collection com.google.common.collect.Synchronized.typePreservingCollection(java.util.Collection,java.lang.Object):0:0 -> c
    1:1:java.util.Collection com.google.common.collect.Synchronized.access$400(java.util.Collection,java.lang.Object):0 -> c
    2:2:java.util.SortedSet com.google.common.collect.Synchronized.sortedSet(java.util.SortedSet,java.lang.Object):0:0 -> c
    2:2:java.util.Collection com.google.common.collect.Synchronized.typePreservingCollection(java.util.Collection,java.lang.Object):0 -> c
    2:2:java.util.Collection com.google.common.collect.Synchronized.access$400(java.util.Collection,java.lang.Object):0 -> c
    3:3:java.util.Collection com.google.common.collect.Synchronized.typePreservingCollection(java.util.Collection,java.lang.Object):0:0 -> c
    3:3:java.util.Collection com.google.common.collect.Synchronized.access$400(java.util.Collection,java.lang.Object):0 -> c
    4:4:java.util.Set com.google.common.collect.Synchronized.set(java.util.Set,java.lang.Object):0:0 -> c
    4:4:java.util.Collection com.google.common.collect.Synchronized.typePreservingCollection(java.util.Collection,java.lang.Object):0 -> c
    4:4:java.util.Collection com.google.common.collect.Synchronized.access$400(java.util.Collection,java.lang.Object):0 -> c
    5:5:java.util.Collection com.google.common.collect.Synchronized.typePreservingCollection(java.util.Collection,java.lang.Object):0:0 -> c
    5:5:java.util.Collection com.google.common.collect.Synchronized.access$400(java.util.Collection,java.lang.Object):0 -> c
    6:6:java.util.List com.google.common.collect.Synchronized.list(java.util.List,java.lang.Object):0:0 -> c
    6:6:java.util.Collection com.google.common.collect.Synchronized.typePreservingCollection(java.util.Collection,java.lang.Object):0 -> c
    6:6:java.util.Collection com.google.common.collect.Synchronized.access$400(java.util.Collection,java.lang.Object):0 -> c
    7:7:java.util.Collection com.google.common.collect.Synchronized.collection(java.util.Collection,java.lang.Object):0:0 -> c
    7:7:java.util.Collection com.google.common.collect.Synchronized.typePreservingCollection(java.util.Collection,java.lang.Object):0 -> c
    7:7:java.util.Collection com.google.common.collect.Synchronized.access$400(java.util.Collection,java.lang.Object):0 -> c
    1:1:java.util.Collection com.google.common.collect.Synchronized.collection(java.util.Collection,java.lang.Object):0:0 -> d
    1:1:java.util.Collection com.google.common.collect.Synchronized.access$500(java.util.Collection,java.lang.Object):0 -> d
    1:1:java.util.Map$Entry com.google.common.collect.Synchronized.nullableSynchronizedEntry(java.util.Map$Entry,java.lang.Object):0:0 -> e
    1:1:java.util.Map$Entry com.google.common.collect.Synchronized.access$700(java.util.Map$Entry,java.lang.Object):0 -> e
    void checkEntryNotNull(java.lang.Object,java.lang.Object) -> f
    int checkNonnegative(int,java.lang.String) -> g
    long checkNonnegative(long,java.lang.String) -> h
    1:1:java.util.Comparator com.google.common.collect.SortedIterables.comparator(java.util.SortedSet):0:0 -> hasSameComparator
    1:1:boolean com.google.common.collect.SortedIterables.hasSameComparator(java.util.Comparator,java.lang.Iterable):0 -> hasSameComparator
    2:2:boolean com.google.common.collect.SortedIterables.hasSameComparator(java.util.Comparator,java.lang.Iterable):0:0 -> hasSameComparator
    void checkPositive(int,java.lang.String) -> i
    int com.google.common.collect.Hashing.closedTableSize(int,double) -> j
    java.util.Spliterator com.google.common.collect.CollectSpliterators.filter(java.util.Spliterator,java.util.function.Predicate) -> k
    java.util.Spliterator com.google.common.collect.CollectSpliterators.flatMap(java.util.Spliterator,java.util.function.Function,int,long) -> l
    java.util.Spliterator com.google.common.collect.CollectSpliterators.indexed(int,int,java.util.function.IntFunction) -> m
    java.util.Spliterator com.google.common.collect.CollectSpliterators.indexed(int,int,java.util.function.IntFunction,java.util.Comparator) -> n
    void com.google.common.collect.TableCollectors.lambda$toTable$6(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,com.google.common.collect.Table,java.lang.Object) -> o
    com.google.common.collect.Table com.google.common.collect.TableCollectors.lambda$toTable$7(java.util.function.BinaryOperator,com.google.common.collect.Table,com.google.common.collect.Table) -> p
    java.util.Spliterator com.google.common.collect.CollectSpliterators.map(java.util.Spliterator,java.util.function.Function) -> q
    void com.google.common.collect.TableCollectors.mergeTables(com.google.common.collect.Table,java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator) -> r
    boolean com.google.common.collect.Hashing.needsResizing(int,int,double) -> s
    int com.google.common.collect.Hashing.smear(int) -> t
    int com.google.common.collect.Hashing.smearedHash(java.lang.Object) -> u
    java.util.stream.Collector com.google.common.collect.TableCollectors.toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier) -> v
com.google.common.collect.CollectSpliterators$1 -> com.google.common.collect.i9:
    java.util.Spliterator val$fromSpliterator -> a
    java.util.function.Function val$function -> b
com.google.common.collect.CollectSpliterators$1Splitr -> com.google.common.collect.j9:
    java.util.function.Predicate val$predicate -> c
    java.lang.Object holder -> a
    java.util.Spliterator val$fromSpliterator -> b
com.google.common.collect.CollectSpliterators$1WithCharacteristics -> com.google.common.collect.k9:
    java.util.function.IntFunction val$function -> b
    java.util.Spliterator$OfInt delegate -> a
    java.util.Comparator val$comparator -> d
    int val$extraCharacteristics -> c
com.google.common.collect.CollectSpliterators$FlatMapSpliterator -> com.google.common.collect.m9:
    long estimatedSize -> f
    com.google.common.collect.CollectSpliterators$FlatMapSpliterator$Factory factory -> d
    java.util.function.Function function -> c
    java.util.Spliterator from -> b
    int characteristics -> e
    java.util.Spliterator prefix -> a
    java.util.Spliterator$OfDouble com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfDouble.trySplit() -> trySplit
    java.util.Spliterator$OfInt com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfInt.trySplit() -> trySplit
    java.util.Spliterator$OfLong com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfLong.trySplit() -> trySplit
    java.util.Spliterator$OfPrimitive com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfPrimitive.trySplit() -> trySplit
com.google.common.collect.CollectSpliterators$FlatMapSpliterator$Factory -> com.google.common.collect.l9:
com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfDouble -> com.google.common.collect.n9:
com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfInt -> com.google.common.collect.o9:
com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfLong -> com.google.common.collect.p9:
com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfObject -> com.google.common.collect.q9:
com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfPrimitive -> com.google.common.collect.r9:
    void com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfDouble.forEachRemaining(java.util.function.DoubleConsumer) -> forEachRemaining
    void com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfInt.forEachRemaining(java.util.function.IntConsumer) -> forEachRemaining
    void com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfLong.forEachRemaining(java.util.function.LongConsumer) -> forEachRemaining
    boolean com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfDouble.tryAdvance(java.util.function.DoubleConsumer) -> tryAdvance
    boolean com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfInt.tryAdvance(java.util.function.IntConsumer) -> tryAdvance
    boolean com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfLong.tryAdvance(java.util.function.LongConsumer) -> tryAdvance
com.google.common.collect.Collections2 -> com.google.common.collect.Collections2:
    1:1:boolean isPermutation(java.util.List,java.util.List):0:0 -> a
    1:1:boolean access$000(java.util.List,java.util.List):0 -> a
    boolean containsAllImpl(java.util.Collection,java.util.Collection) -> b
    java.lang.StringBuilder newStringBuilderForCollection(int) -> c
    boolean safeContains(java.util.Collection,java.lang.Object) -> d
    1:1:com.google.common.collect.Collections2$FilteredCollection com.google.common.collect.Collections2$FilteredCollection.createCombined(com.google.common.base.Predicate):0:0 -> filter
    1:1:java.util.Collection filter(java.util.Collection,com.google.common.base.Predicate):0 -> filter
    2:2:java.util.Collection filter(java.util.Collection,com.google.common.base.Predicate):0:0 -> filter
com.google.common.collect.Collections2$FilteredCollection -> com.google.common.collect.s9:
    com.google.common.base.Predicate predicate -> b
    java.util.Collection unfiltered -> a
com.google.common.collect.Collections2$OrderedPermutationCollection -> com.google.common.collect.t9:
    com.google.common.collect.ImmutableList inputList -> a
    int size -> c
    java.util.Comparator comparator -> b
    1:1:int calculateSize(java.util.List,java.util.Comparator):0:0 -> <init>
    1:1:void <init>(java.lang.Iterable,java.util.Comparator):0 -> <init>
    2:2:void <init>(java.lang.Iterable,java.util.Comparator):0:0 -> <init>
com.google.common.collect.Collections2$OrderedPermutationIterator -> com.google.common.collect.u9:
    java.util.List nextPermutation -> c
    java.util.Comparator comparator -> d
    1:1:java.util.List computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
    2:2:int findNextJ():0:0 -> computeNext
    2:2:void calculateNextPermutation():0 -> computeNext
    2:2:java.util.List computeNext():0 -> computeNext
    2:2:java.lang.Object computeNext():0 -> computeNext
    3:3:void calculateNextPermutation():0:0 -> computeNext
    3:3:java.util.List computeNext():0 -> computeNext
    3:3:java.lang.Object computeNext():0 -> computeNext
    4:4:int findNextL(int):0:0 -> computeNext
    4:4:void calculateNextPermutation():0 -> computeNext
    4:4:java.util.List computeNext():0 -> computeNext
    4:4:java.lang.Object computeNext():0 -> computeNext
    5:5:void calculateNextPermutation():0:0 -> computeNext
    5:5:java.util.List computeNext():0 -> computeNext
    5:5:java.lang.Object computeNext():0 -> computeNext
    6:6:int findNextL(int):0:0 -> computeNext
    6:6:void calculateNextPermutation():0 -> computeNext
    6:6:java.util.List computeNext():0 -> computeNext
    6:6:java.lang.Object computeNext():0 -> computeNext
com.google.common.collect.Collections2$PermutationCollection -> com.google.common.collect.v9:
    com.google.common.collect.ImmutableList inputList -> a
com.google.common.collect.Collections2$PermutationIterator -> com.google.common.collect.w9:
    int[] c -> d
    java.util.List list -> c
    int[] o -> e
    int j -> f
    1:1:java.util.List computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
    2:2:void calculateNextPermutation():0:0 -> computeNext
    2:2:java.util.List computeNext():0 -> computeNext
    2:2:java.lang.Object computeNext():0 -> computeNext
    3:3:void switchDirection():0:0 -> computeNext
    3:3:void calculateNextPermutation():0 -> computeNext
    3:3:java.util.List computeNext():0 -> computeNext
    3:3:java.lang.Object computeNext():0 -> computeNext
    4:4:void calculateNextPermutation():0:0 -> computeNext
    4:4:java.util.List computeNext():0 -> computeNext
    4:4:java.lang.Object computeNext():0 -> computeNext
com.google.common.collect.Collections2$TransformedCollection -> com.google.common.collect.x9:
    com.google.common.base.Function function -> b
    java.util.Collection fromCollection -> a
com.google.common.collect.ComparatorOrdering -> com.google.common.collect.y9:
    java.util.Comparator comparator -> a
com.google.common.collect.ComparisonChain -> com.google.common.collect.ComparisonChain:
    com.google.common.collect.ComparisonChain GREATER -> c
    com.google.common.collect.ComparisonChain LESS -> b
    com.google.common.collect.ComparisonChain ACTIVE -> a
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.collect.ComparisonChain$1):0 -> <init>
    com.google.common.collect.ComparisonChain access$100() -> a
    com.google.common.collect.ComparisonChain access$200() -> b
    com.google.common.collect.ComparisonChain access$300() -> c
com.google.common.collect.ComparisonChain$1 -> com.google.common.collect.z9:
    com.google.common.collect.ComparisonChain classify(int) -> d
com.google.common.collect.ComparisonChain$InactiveComparisonChain -> com.google.common.collect.aa:
    int result -> d
com.google.common.collect.CompoundOrdering -> com.google.common.collect.ba:
    java.util.Comparator[] comparators -> a
com.google.common.collect.ConcurrentHashMultiset -> com.google.common.collect.ConcurrentHashMultiset:
    java.util.concurrent.ConcurrentMap countMap -> c
    java.util.Set createElementSet() -> a
    int distinctElements() -> b
    java.util.Iterator elementIterator() -> c
    java.util.Iterator entryIterator() -> d
    java.util.concurrent.ConcurrentMap access$100(com.google.common.collect.ConcurrentHashMultiset) -> e
    java.util.List snapshot() -> f
    1:1:java.util.Iterator com.google.common.collect.Multisets.iteratorImpl(com.google.common.collect.Multiset):0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.collect.ConcurrentHashMultiset$1 -> com.google.common.collect.ca:
    java.util.Set val$delegate -> a
    1:1:java.util.Set delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
    2:2:java.util.Set delegate():0:0 -> delegate
    2:2:java.util.Collection delegate():0 -> delegate
    1:1:boolean com.google.common.collect.Collections2.safeRemove(java.util.Collection,java.lang.Object):0:0 -> remove
    1:1:boolean remove(java.lang.Object):0 -> remove
com.google.common.collect.ConcurrentHashMultiset$2 -> com.google.common.collect.da:
    com.google.common.collect.ConcurrentHashMultiset this$0 -> d
    java.util.Iterator mapEntries -> c
    1:1:com.google.common.collect.Multiset$Entry computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
com.google.common.collect.ConcurrentHashMultiset$3 -> com.google.common.collect.ea:
    com.google.common.collect.ConcurrentHashMultiset this$0 -> c
    java.util.Iterator val$readOnlyIterator -> b
    com.google.common.collect.Multiset$Entry last -> a
    1:1:java.util.Iterator delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
    1:1:com.google.common.collect.Multiset$Entry next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
com.google.common.collect.ConcurrentHashMultiset$EntrySet -> com.google.common.collect.fa:
    com.google.common.collect.ConcurrentHashMultiset this$0 -> b
    1:1:void <init>(com.google.common.collect.ConcurrentHashMultiset):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.ConcurrentHashMultiset,com.google.common.collect.ConcurrentHashMultiset$1):0 -> <init>
    1:1:com.google.common.collect.ConcurrentHashMultiset multiset():0:0 -> a
    1:1:com.google.common.collect.Multiset multiset():0 -> a
    1:1:java.util.List snapshot():0:0 -> toArray
    1:1:java.lang.Object[] toArray():0 -> toArray
    2:2:java.lang.Object[] toArray():0:0 -> toArray
    3:3:java.util.List snapshot():0:0 -> toArray
    3:3:java.lang.Object[] toArray(java.lang.Object[]):0 -> toArray
    4:4:java.lang.Object[] toArray(java.lang.Object[]):0:0 -> toArray
com.google.common.collect.ConsumingQueueIterator -> com.google.common.collect.ga:
    java.util.Queue queue -> c
com.google.common.collect.ContiguousSet -> com.google.common.collect.ContiguousSet:
    com.google.common.collect.DiscreteDomain domain -> e
    1:1:int com.google.common.collect.Range.compareOrThrow(java.lang.Comparable,java.lang.Comparable):0:0 -> create
    1:1:com.google.common.collect.ContiguousSet create(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain):0 -> create
    2:2:com.google.common.collect.ContiguousSet create(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain):0:0 -> create
    java.util.Iterator com.google.common.collect.RegularContiguousSet.descendingIterator() -> descendingIterator
    java.util.Iterator com.google.common.collect.RegularContiguousSet.iterator() -> iterator
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> m
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> o
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> p
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> q
    com.google.common.collect.ContiguousSet headSetImpl(java.lang.Comparable,boolean) -> r
    com.google.common.collect.ContiguousSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean) -> s
    com.google.common.collect.ContiguousSet tailSetImpl(java.lang.Comparable,boolean) -> t
com.google.common.collect.Count -> com.google.common.collect.ha:
    int value -> a
com.google.common.collect.Cut -> com.google.common.collect.ma:
    java.lang.Comparable endpoint -> a
    com.google.common.collect.Cut canonical(com.google.common.collect.DiscreteDomain) -> a
    void describeAsLowerBound(java.lang.StringBuilder) -> b
    void describeAsUpperBound(java.lang.StringBuilder) -> c
    1:1:com.google.common.collect.Cut belowAll():0:0 -> compareTo
    1:1:int compareTo(com.google.common.collect.Cut):0 -> compareTo
    2:2:com.google.common.collect.Cut aboveAll():0:0 -> compareTo
    2:2:int compareTo(com.google.common.collect.Cut):0 -> compareTo
    3:3:int compareTo(com.google.common.collect.Cut):0:0 -> compareTo
    4:4:int com.google.common.collect.Range.compareOrThrow(java.lang.Comparable,java.lang.Comparable):0:0 -> compareTo
    4:4:int compareTo(com.google.common.collect.Cut):0 -> compareTo
    5:5:int compareTo(com.google.common.collect.Cut):0:0 -> compareTo
    java.lang.Comparable endpoint() -> d
    java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain) -> e
    boolean isLessThan(java.lang.Comparable) -> f
    java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain) -> g
    com.google.common.collect.BoundType typeAsLowerBound() -> h
    com.google.common.collect.BoundType typeAsUpperBound() -> i
    com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> j
    com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> k
com.google.common.collect.Cut$AboveAll -> com.google.common.collect.ia:
    com.google.common.collect.Cut$AboveAll INSTANCE -> b
    void describeAsLowerBound(java.lang.StringBuilder) -> b
    void describeAsUpperBound(java.lang.StringBuilder) -> c
    java.lang.Comparable endpoint() -> d
    java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain) -> e
    boolean isLessThan(java.lang.Comparable) -> f
    java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain) -> g
    com.google.common.collect.BoundType typeAsLowerBound() -> h
    com.google.common.collect.BoundType typeAsUpperBound() -> i
    com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> j
    com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> k
    com.google.common.collect.Cut$AboveAll access$100() -> l
com.google.common.collect.Cut$AboveValue -> com.google.common.collect.ja:
    1:1:java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain):0:0 -> a
    1:1:com.google.common.collect.Cut canonical(com.google.common.collect.DiscreteDomain):0 -> a
    2:2:com.google.common.collect.Cut com.google.common.collect.Cut.belowValue(java.lang.Comparable):0:0 -> a
    2:2:com.google.common.collect.Cut canonical(com.google.common.collect.DiscreteDomain):0 -> a
    3:3:com.google.common.collect.Cut com.google.common.collect.Cut.aboveAll():0:0 -> a
    3:3:com.google.common.collect.Cut canonical(com.google.common.collect.DiscreteDomain):0 -> a
    void describeAsLowerBound(java.lang.StringBuilder) -> b
    void describeAsUpperBound(java.lang.StringBuilder) -> c
    java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain) -> e
    1:1:int com.google.common.collect.Range.compareOrThrow(java.lang.Comparable,java.lang.Comparable):0:0 -> f
    1:1:boolean isLessThan(java.lang.Comparable):0 -> f
    java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain) -> g
    com.google.common.collect.BoundType typeAsLowerBound() -> h
    com.google.common.collect.BoundType typeAsUpperBound() -> i
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.belowAll():0:0 -> j
    1:1:com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain):0 -> j
    2:2:com.google.common.collect.Cut com.google.common.collect.Cut.belowValue(java.lang.Comparable):0:0 -> j
    2:2:com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain):0 -> j
    3:3:com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain):0:0 -> j
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.aboveAll():0:0 -> k
    1:1:com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain):0 -> k
    2:2:com.google.common.collect.Cut com.google.common.collect.Cut.belowValue(java.lang.Comparable):0:0 -> k
    2:2:com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain):0 -> k
com.google.common.collect.Cut$BelowAll -> com.google.common.collect.ka:
    com.google.common.collect.Cut$BelowAll INSTANCE -> b
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.belowValue(java.lang.Comparable):0:0 -> a
    1:1:com.google.common.collect.Cut canonical(com.google.common.collect.DiscreteDomain):0 -> a
    void describeAsLowerBound(java.lang.StringBuilder) -> b
    void describeAsUpperBound(java.lang.StringBuilder) -> c
    java.lang.Comparable endpoint() -> d
    java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain) -> e
    boolean isLessThan(java.lang.Comparable) -> f
    java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain) -> g
    com.google.common.collect.BoundType typeAsLowerBound() -> h
    com.google.common.collect.BoundType typeAsUpperBound() -> i
    com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> j
    com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> k
    com.google.common.collect.Cut$BelowAll access$000() -> l
com.google.common.collect.Cut$BelowValue -> com.google.common.collect.la:
    void describeAsLowerBound(java.lang.StringBuilder) -> b
    void describeAsUpperBound(java.lang.StringBuilder) -> c
    java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain) -> e
    1:1:int com.google.common.collect.Range.compareOrThrow(java.lang.Comparable,java.lang.Comparable):0:0 -> f
    1:1:boolean isLessThan(java.lang.Comparable):0 -> f
    java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain) -> g
    com.google.common.collect.BoundType typeAsLowerBound() -> h
    com.google.common.collect.BoundType typeAsUpperBound() -> i
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.belowAll():0:0 -> j
    1:1:com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain):0 -> j
    2:2:com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain):0:0 -> j
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.aboveAll():0:0 -> k
    1:1:com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain):0 -> k
    2:2:com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain):0:0 -> k
com.google.common.collect.DenseImmutableTable -> com.google.common.collect.ua:
    int[] rowCounts -> g
    int[] columnCounts -> h
    com.google.common.collect.ImmutableMap rowMap -> e
    com.google.common.collect.ImmutableMap columnKeyToIndex -> d
    java.lang.Object[][] values -> i
    com.google.common.collect.ImmutableMap rowKeyToIndex -> c
    int[] cellRowIndices -> j
    int[] cellColumnIndices -> k
    com.google.common.collect.ImmutableMap columnMap -> f
    com.google.common.collect.Table$Cell getCell(int) -> l
    java.lang.Object getValue(int) -> m
    int[] access$200(com.google.common.collect.DenseImmutableTable) -> n
    com.google.common.collect.ImmutableMap access$300(com.google.common.collect.DenseImmutableTable) -> o
    java.lang.Object[][] access$400(com.google.common.collect.DenseImmutableTable) -> p
    int[] access$500(com.google.common.collect.DenseImmutableTable) -> q
    com.google.common.collect.ImmutableMap access$600(com.google.common.collect.DenseImmutableTable) -> r
com.google.common.collect.DenseImmutableTable$1 -> com.google.common.collect.na:
com.google.common.collect.DenseImmutableTable$Column -> com.google.common.collect.oa:
    com.google.common.collect.DenseImmutableTable this$0 -> h
    int columnIndex -> g
    boolean isPartialView() -> h
    java.lang.Object getValue(int) -> l
    com.google.common.collect.ImmutableMap keyToIndex() -> m
com.google.common.collect.DenseImmutableTable$ColumnMap -> com.google.common.collect.pa:
    com.google.common.collect.DenseImmutableTable this$0 -> g
    1:1:void <init>(com.google.common.collect.DenseImmutableTable):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.DenseImmutableTable,com.google.common.collect.DenseImmutableTable$1):0 -> <init>
    boolean isPartialView() -> h
    1:1:com.google.common.collect.ImmutableMap getValue(int):0:0 -> l
    1:1:java.lang.Object getValue(int):0 -> l
    com.google.common.collect.ImmutableMap keyToIndex() -> m
com.google.common.collect.DenseImmutableTable$ImmutableArrayMap -> com.google.common.collect.ra:
    int size -> f
    1:1:boolean isFull():0:0 -> d
    1:1:com.google.common.collect.ImmutableSet createKeySet():0 -> d
    2:2:com.google.common.collect.ImmutableSet createKeySet():0:0 -> d
    3:3:com.google.common.collect.ImmutableSet com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap.createKeySet():0:0 -> d
    3:3:com.google.common.collect.ImmutableSet createKeySet():0 -> d
    com.google.common.collect.UnmodifiableIterator entryIterator() -> k
    java.lang.Object getValue(int) -> l
    com.google.common.collect.ImmutableMap keyToIndex() -> m
com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1 -> com.google.common.collect.qa:
    com.google.common.collect.DenseImmutableTable$ImmutableArrayMap this$0 -> e
    int maxIndex -> d
    int index -> c
    1:1:java.util.Map$Entry computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
    2:2:java.lang.Object com.google.common.collect.DenseImmutableTable$ImmutableArrayMap.getKey(int):0:0 -> computeNext
    2:2:java.util.Map$Entry computeNext():0 -> computeNext
    2:2:java.lang.Object computeNext():0 -> computeNext
    3:3:java.util.Map$Entry computeNext():0:0 -> computeNext
    3:3:java.lang.Object computeNext():0 -> computeNext
com.google.common.collect.DenseImmutableTable$Row -> com.google.common.collect.sa:
    com.google.common.collect.DenseImmutableTable this$0 -> h
    int rowIndex -> g
    boolean isPartialView() -> h
    java.lang.Object getValue(int) -> l
    com.google.common.collect.ImmutableMap keyToIndex() -> m
com.google.common.collect.DenseImmutableTable$RowMap -> com.google.common.collect.ta:
    com.google.common.collect.DenseImmutableTable this$0 -> g
    1:1:void <init>(com.google.common.collect.DenseImmutableTable):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.DenseImmutableTable,com.google.common.collect.DenseImmutableTable$1):0 -> <init>
    boolean isPartialView() -> h
    1:1:com.google.common.collect.ImmutableMap getValue(int):0:0 -> l
    1:1:java.lang.Object getValue(int):0 -> l
    com.google.common.collect.ImmutableMap keyToIndex() -> m
com.google.common.collect.DescendingImmutableSortedMultiset -> com.google.common.collect.va:
    com.google.common.collect.ImmutableSortedMultiset forward -> g
    1:1:com.google.common.collect.ImmutableSortedMultiset descendingMultiset():0:0 -> descendingMultiset
    1:1:com.google.common.collect.SortedMultiset descendingMultiset():0 -> descendingMultiset
    boolean isPartialView() -> e
    com.google.common.collect.Multiset$Entry getEntry(int) -> h
    1:1:com.google.common.collect.ImmutableSortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType):0:0 -> headMultiset
    1:1:com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType):0 -> headMultiset
    1:1:com.google.common.collect.ImmutableSortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType):0:0 -> tailMultiset
    1:1:com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType):0 -> tailMultiset
com.google.common.collect.DescendingImmutableSortedSet -> com.google.common.collect.wa:
    com.google.common.collect.ImmutableSortedSet forward -> e
    1:1:com.google.common.collect.ImmutableSortedSet descendingSet():0:0 -> descendingSet
    1:1:java.util.NavigableSet descendingSet():0 -> descendingSet
    boolean isPartialView() -> e
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> m
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> o
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> p
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> q
com.google.common.collect.DescendingMultiset -> com.google.common.collect.ya:
    java.util.Set entrySet -> c
    java.util.NavigableSet elementSet -> b
    java.util.Comparator comparator -> a
    com.google.common.collect.SortedMultiset forwardMultiset() -> a
    1:1:java.util.Set createEntrySet():0:0 -> entrySet
    1:1:java.util.Set entrySet():0 -> entrySet
    2:2:java.util.Set entrySet():0:0 -> entrySet
    1:1:java.util.Iterator com.google.common.collect.Multisets.iteratorImpl(com.google.common.collect.Multiset):0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.collect.DescendingMultiset$1EntrySetImpl -> com.google.common.collect.xa:
    com.google.common.collect.DescendingMultiset this$0 -> a
    com.google.common.collect.Multiset multiset() -> a
com.google.common.collect.DiscreteDomain -> com.google.common.collect.DiscreteDomain:
    boolean supportsFastOffset -> a
    1:1:void <init>(boolean):0:0 -> <init>
    1:1:void <init>():0 -> <init>
    2:2:void <init>(boolean):0:0 -> <init>
    2:2:void <init>(boolean,com.google.common.collect.DiscreteDomain$1):0 -> <init>
    java.lang.Comparable offset(java.lang.Comparable,long) -> a
com.google.common.collect.DiscreteDomain$1 -> com.google.common.collect.za:
com.google.common.collect.DiscreteDomain$BigIntegerDomain -> com.google.common.collect.ab:
    com.google.common.collect.DiscreteDomain$BigIntegerDomain INSTANCE -> b
    java.math.BigInteger MAX_LONG -> d
    java.math.BigInteger MIN_LONG -> c
    1:1:java.math.BigInteger offset(java.math.BigInteger,long):0:0 -> a
    1:1:java.lang.Comparable offset(java.lang.Comparable,long):0 -> a
    com.google.common.collect.DiscreteDomain$BigIntegerDomain access$300() -> b
    1:1:long distance(java.math.BigInteger,java.math.BigInteger):0:0 -> distance
    1:1:long distance(java.lang.Comparable,java.lang.Comparable):0 -> distance
    1:1:java.math.BigInteger next(java.math.BigInteger):0:0 -> next
    1:1:java.lang.Comparable next(java.lang.Comparable):0 -> next
    1:1:java.math.BigInteger previous(java.math.BigInteger):0:0 -> previous
    1:1:java.lang.Comparable previous(java.lang.Comparable):0 -> previous
com.google.common.collect.DiscreteDomain$IntegerDomain -> com.google.common.collect.bb:
    com.google.common.collect.DiscreteDomain$IntegerDomain INSTANCE -> b
    1:1:java.lang.Integer offset(java.lang.Integer,long):0:0 -> a
    1:1:java.lang.Comparable offset(java.lang.Comparable,long):0 -> a
    com.google.common.collect.DiscreteDomain$IntegerDomain access$000() -> b
    1:1:long distance(java.lang.Integer,java.lang.Integer):0:0 -> distance
    1:1:long distance(java.lang.Comparable,java.lang.Comparable):0 -> distance
    1:1:java.lang.Integer maxValue():0:0 -> maxValue
    1:1:java.lang.Comparable maxValue():0 -> maxValue
    1:1:java.lang.Integer minValue():0:0 -> minValue
    1:1:java.lang.Comparable minValue():0 -> minValue
    1:1:java.lang.Integer next(java.lang.Integer):0:0 -> next
    1:1:java.lang.Comparable next(java.lang.Comparable):0 -> next
    1:1:java.lang.Integer previous(java.lang.Integer):0:0 -> previous
    1:1:java.lang.Comparable previous(java.lang.Comparable):0 -> previous
com.google.common.collect.DiscreteDomain$LongDomain -> com.google.common.collect.cb:
    com.google.common.collect.DiscreteDomain$LongDomain INSTANCE -> b
    1:1:java.lang.Long offset(java.lang.Long,long):0:0 -> a
    1:1:java.lang.Comparable offset(java.lang.Comparable,long):0 -> a
    com.google.common.collect.DiscreteDomain$LongDomain access$200() -> b
    1:1:long distance(java.lang.Long,java.lang.Long):0:0 -> distance
    1:1:long distance(java.lang.Comparable,java.lang.Comparable):0 -> distance
    1:1:java.lang.Long maxValue():0:0 -> maxValue
    1:1:java.lang.Comparable maxValue():0 -> maxValue
    1:1:java.lang.Long minValue():0:0 -> minValue
    1:1:java.lang.Comparable minValue():0 -> minValue
    1:1:java.lang.Long next(java.lang.Long):0:0 -> next
    1:1:java.lang.Comparable next(java.lang.Comparable):0 -> next
    1:1:java.lang.Long previous(java.lang.Long):0:0 -> previous
    1:1:java.lang.Comparable previous(java.lang.Comparable):0 -> previous
com.google.common.collect.EmptyContiguousSet -> com.google.common.collect.db:
    1:1:com.google.common.collect.UnmodifiableListIterator com.google.common.collect.Iterators.emptyListIterator():0:0 -> descendingIterator
    1:1:com.google.common.collect.UnmodifiableIterator com.google.common.collect.Iterators.emptyIterator():0 -> descendingIterator
    1:1:com.google.common.collect.UnmodifiableIterator descendingIterator():0 -> descendingIterator
    2:2:com.google.common.collect.UnmodifiableListIterator com.google.common.collect.Iterators.emptyListIterator():0:0 -> descendingIterator
    2:2:com.google.common.collect.UnmodifiableIterator com.google.common.collect.Iterators.emptyIterator():0 -> descendingIterator
    2:2:com.google.common.collect.UnmodifiableIterator descendingIterator():0 -> descendingIterator
    2:2:java.util.Iterator descendingIterator():0 -> descendingIterator
    boolean isPartialView() -> e
    1:1:java.lang.Comparable first():0:0 -> first
    1:1:java.lang.Object first():0 -> first
    1:1:com.google.common.collect.UnmodifiableListIterator com.google.common.collect.Iterators.emptyListIterator():0:0 -> iterator
    1:1:com.google.common.collect.UnmodifiableIterator com.google.common.collect.Iterators.emptyIterator():0 -> iterator
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0 -> iterator
    2:2:com.google.common.collect.UnmodifiableListIterator com.google.common.collect.Iterators.emptyListIterator():0:0 -> iterator
    2:2:com.google.common.collect.UnmodifiableIterator com.google.common.collect.Iterators.emptyIterator():0 -> iterator
    2:2:com.google.common.collect.UnmodifiableIterator iterator():0 -> iterator
    2:2:java.util.Iterator iterator():0 -> iterator
    boolean isHashCodeFast() -> j
    1:1:java.lang.Comparable last():0:0 -> last
    1:1:java.lang.Object last():0 -> last
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> m
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> o
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> p
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> q
    com.google.common.collect.ContiguousSet headSetImpl(java.lang.Comparable,boolean) -> r
    com.google.common.collect.ContiguousSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean) -> s
    com.google.common.collect.ContiguousSet tailSetImpl(java.lang.Comparable,boolean) -> t
com.google.common.collect.EmptyImmutableListMultimap -> com.google.common.collect.eb:
    com.google.common.collect.EmptyImmutableListMultimap INSTANCE -> i
com.google.common.collect.EmptyImmutableSetMultimap -> com.google.common.collect.fb:
    com.google.common.collect.EmptyImmutableSetMultimap INSTANCE -> k
com.google.common.collect.EnumBiMap -> com.google.common.collect.EnumBiMap:
    java.lang.Class keyType -> f
    java.lang.Class valueType -> g
    1:1:java.lang.Class inferValueType(java.util.Map):0:0 -> create
    1:1:com.google.common.collect.EnumBiMap create(java.util.Map):0 -> create
    2:2:com.google.common.collect.EnumBiMap create(java.util.Map):0:0 -> create
    1:1:java.lang.Enum checkKey(java.lang.Enum):0:0 -> e
    1:1:java.lang.Object checkKey(java.lang.Object):0 -> e
    1:1:java.lang.Enum checkValue(java.lang.Enum):0:0 -> f
    1:1:java.lang.Object checkValue(java.lang.Object):0 -> f
    java.lang.Class inferKeyType(java.util.Map) -> j
com.google.common.collect.EnumHashBiMap -> com.google.common.collect.EnumHashBiMap:
    java.lang.Class keyType -> f
    1:1:java.lang.Enum checkKey(java.lang.Enum):0:0 -> e
    1:1:java.lang.Object checkKey(java.lang.Object):0 -> e
com.google.common.collect.EnumMultiset -> com.google.common.collect.EnumMultiset:
    java.lang.Enum[] enumConstants -> d
    int[] counts -> e
    long size -> g
    int distinctElements -> f
    java.lang.Class type -> c
    int distinctElements() -> b
    java.util.Iterator elementIterator() -> c
    java.util.Iterator entryIterator() -> d
    java.lang.Enum[] access$000(com.google.common.collect.EnumMultiset) -> e
    int[] access$100(com.google.common.collect.EnumMultiset) -> f
    int access$210(com.google.common.collect.EnumMultiset) -> g
    long access$322(com.google.common.collect.EnumMultiset,long) -> h
    void checkIsE(java.lang.Object) -> i
    1:1:java.util.Iterator com.google.common.collect.Multisets.iteratorImpl(com.google.common.collect.Multiset):0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
    boolean isActuallyE(java.lang.Object) -> j
com.google.common.collect.EnumMultiset$1 -> com.google.common.collect.gb:
    com.google.common.collect.EnumMultiset this$0 -> d
    1:1:java.lang.Enum output(int):0:0 -> a
    1:1:java.lang.Object output(int):0 -> a
com.google.common.collect.EnumMultiset$2 -> com.google.common.collect.ib:
    com.google.common.collect.EnumMultiset this$0 -> d
    1:1:com.google.common.collect.Multiset$Entry output(int):0:0 -> a
    1:1:java.lang.Object output(int):0 -> a
com.google.common.collect.EnumMultiset$2$1 -> com.google.common.collect.hb:
    com.google.common.collect.EnumMultiset$2 this$1 -> b
    int val$index -> a
    1:1:java.lang.Enum getElement():0:0 -> getElement
    1:1:java.lang.Object getElement():0 -> getElement
com.google.common.collect.EnumMultiset$Itr -> com.google.common.collect.jb:
    com.google.common.collect.EnumMultiset this$0 -> c
    int toRemove -> b
    int index -> a
    java.lang.Object output(int) -> a
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
com.google.common.collect.EvictingQueue -> com.google.common.collect.EvictingQueue:
    java.util.Queue delegate -> a
    int maxSize -> b
com.google.common.collect.ExplicitOrdering -> com.google.common.collect.kb:
    com.google.common.collect.ImmutableMap rankMap -> a
    1:1:void <init>(com.google.common.collect.ImmutableMap):0:0 -> <init>
    1:1:void <init>(java.util.List):0 -> <init>
    int rank(java.lang.Object) -> b
com.google.common.collect.FilteredEntryMultimap -> com.google.common.collect.ub:
    com.google.common.collect.Multimap unfiltered -> f
    com.google.common.base.Predicate predicate -> g
    java.util.Map createAsMap() -> a
    java.util.Collection createEntries() -> b
    java.util.Set createKeySet() -> c
    com.google.common.collect.Multiset createKeys() -> d
    java.util.Collection createValues() -> e
    java.util.Iterator entryIterator() -> f
    1:1:boolean satisfies(java.lang.Object,java.lang.Object):0:0 -> j
    1:1:boolean access$000(com.google.common.collect.FilteredEntryMultimap,java.lang.Object,java.lang.Object):0 -> j
    java.util.Collection filterCollection(java.util.Collection,com.google.common.base.Predicate) -> k
    boolean removeEntriesIf(com.google.common.base.Predicate) -> l
    1:1:java.util.Collection unmodifiableEmptyCollection():0:0 -> removeAll
    1:1:java.util.Collection removeAll(java.lang.Object):0 -> removeAll
    2:2:java.util.Collection removeAll(java.lang.Object):0:0 -> removeAll
com.google.common.collect.FilteredEntryMultimap$AsMap -> com.google.common.collect.pb:
    com.google.common.collect.FilteredEntryMultimap this$0 -> d
    java.util.Collection createValues() -> a
com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl -> com.google.common.collect.mb:
    com.google.common.collect.FilteredEntryMultimap$AsMap this$1 -> a
    java.util.Map map() -> a
    1:1:java.util.Iterator iterator():0:0 -> size
    1:1:int size():0 -> size
    2:2:int size():0:0 -> size
com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl$1 -> com.google.common.collect.lb:
    java.util.Iterator backingIterator -> c
    com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl this$2 -> d
    1:1:java.util.Map$Entry computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
com.google.common.collect.FilteredEntryMultimap$AsMap$1KeySetImpl -> com.google.common.collect.nb:
    com.google.common.collect.FilteredEntryMultimap$AsMap this$1 -> b
com.google.common.collect.FilteredEntryMultimap$AsMap$1ValuesImpl -> com.google.common.collect.ob:
    com.google.common.collect.FilteredEntryMultimap$AsMap this$1 -> b
com.google.common.collect.FilteredEntryMultimap$Keys -> com.google.common.collect.sb:
    com.google.common.collect.FilteredEntryMultimap this$0 -> d
com.google.common.collect.FilteredEntryMultimap$Keys$1 -> com.google.common.collect.rb:
    com.google.common.collect.FilteredEntryMultimap$Keys this$1 -> a
    com.google.common.collect.Multiset multiset() -> a
    1:1:boolean removeEntriesIf(com.google.common.base.Predicate):0:0 -> removeAll
    1:1:boolean removeAll(java.util.Collection):0 -> removeAll
    1:1:boolean removeEntriesIf(com.google.common.base.Predicate):0:0 -> retainAll
    1:1:boolean retainAll(java.util.Collection):0 -> retainAll
com.google.common.collect.FilteredEntryMultimap$Keys$1$1 -> com.google.common.collect.qb:
    com.google.common.base.Predicate val$predicate -> a
    1:1:boolean apply(java.util.Map$Entry):0:0 -> apply
    1:1:boolean apply(java.lang.Object):0 -> apply
com.google.common.collect.FilteredEntryMultimap$ValuePredicate -> com.google.common.collect.tb:
    com.google.common.collect.FilteredEntryMultimap this$0 -> b
    java.lang.Object key -> a
com.google.common.collect.FilteredEntrySetMultimap -> com.google.common.collect.vb:
    1:1:com.google.common.collect.SetMultimap unfiltered():0:0 -> b
    1:1:java.util.Set createEntries():0 -> b
    1:1:java.util.Collection createEntries():0 -> b
    2:2:java.util.Set createEntries():0:0 -> b
    2:2:java.util.Collection createEntries():0 -> b
    3:3:com.google.common.base.Predicate com.google.common.collect.FilteredEntryMultimap.entryPredicate():0:0 -> b
    3:3:java.util.Set createEntries():0 -> b
    3:3:java.util.Collection createEntries():0 -> b
    4:4:java.util.Set createEntries():0:0 -> b
    4:4:java.util.Collection createEntries():0 -> b
    1:1:java.util.Set get(java.lang.Object):0:0 -> get
    1:1:java.util.Collection get(java.lang.Object):0 -> get
    1:1:java.util.Set removeAll(java.lang.Object):0:0 -> removeAll
    1:1:java.util.Collection removeAll(java.lang.Object):0 -> removeAll
    1:1:java.util.Set replaceValues(java.lang.Object,java.lang.Iterable):0:0 -> replaceValues
    1:1:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable):0 -> replaceValues
    1:1:com.google.common.collect.SetMultimap unfiltered():0:0 -> unfiltered
    1:1:com.google.common.collect.Multimap unfiltered():0 -> unfiltered
com.google.common.collect.FilteredKeyListMultimap -> com.google.common.collect.wb:
    1:1:java.util.List get(java.lang.Object):0:0 -> get
    1:1:java.util.Collection get(java.lang.Object):0 -> get
    1:1:java.util.List removeAll(java.lang.Object):0:0 -> removeAll
    1:1:java.util.Collection removeAll(java.lang.Object):0 -> removeAll
    1:1:java.util.List replaceValues(java.lang.Object,java.lang.Iterable):0:0 -> replaceValues
    1:1:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable):0 -> replaceValues
    1:1:com.google.common.collect.Multimap com.google.common.collect.FilteredKeyMultimap.unfiltered():0:0 -> unfiltered
    1:1:com.google.common.collect.ListMultimap unfiltered():0 -> unfiltered
    1:1:com.google.common.collect.Multimap unfiltered():0 -> unfiltered
    2:2:com.google.common.collect.ListMultimap unfiltered():0:0 -> unfiltered
    2:2:com.google.common.collect.Multimap unfiltered():0 -> unfiltered
com.google.common.collect.FilteredKeyMultimap -> com.google.common.collect.ac:
    com.google.common.collect.Multimap unfiltered -> f
    com.google.common.base.Predicate keyPredicate -> g
    java.util.Map createAsMap() -> a
    java.util.Collection createEntries() -> b
    java.util.Set createKeySet() -> c
    com.google.common.collect.Multiset createKeys() -> d
    java.util.Collection createValues() -> e
    java.util.Iterator entryIterator() -> f
    1:1:java.util.Collection unmodifiableEmptyCollection():0:0 -> removeAll
    1:1:java.util.Collection removeAll(java.lang.Object):0 -> removeAll
com.google.common.collect.FilteredKeyMultimap$AddRejectingList -> com.google.common.collect.xb:
    java.lang.Object key -> a
    1:1:java.util.List delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
    2:2:java.util.List delegate():0:0 -> delegate
    2:2:java.util.Collection delegate():0 -> delegate
com.google.common.collect.FilteredKeyMultimap$AddRejectingSet -> com.google.common.collect.yb:
    java.lang.Object key -> a
    1:1:java.util.Set delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
    2:2:java.util.Set delegate():0:0 -> delegate
    2:2:java.util.Collection delegate():0 -> delegate
com.google.common.collect.FilteredKeyMultimap$Entries -> com.google.common.collect.zb:
    com.google.common.collect.FilteredKeyMultimap this$0 -> a
com.google.common.collect.FilteredKeySetMultimap -> com.google.common.collect.cc:
    1:1:java.util.Set createEntries():0:0 -> b
    1:1:java.util.Collection createEntries():0 -> b
    1:1:java.util.Set get(java.lang.Object):0:0 -> get
    1:1:java.util.Collection get(java.lang.Object):0 -> get
    1:1:java.util.Set removeAll(java.lang.Object):0:0 -> removeAll
    1:1:java.util.Collection removeAll(java.lang.Object):0 -> removeAll
    1:1:java.util.Set replaceValues(java.lang.Object,java.lang.Iterable):0:0 -> replaceValues
    1:1:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable):0 -> replaceValues
    1:1:com.google.common.collect.SetMultimap unfiltered():0:0 -> unfiltered
    1:1:com.google.common.collect.Multimap unfiltered():0 -> unfiltered
com.google.common.collect.FilteredKeySetMultimap$EntrySet -> com.google.common.collect.bc:
com.google.common.collect.FilteredMultimap -> com.google.common.collect.dc:
com.google.common.collect.FilteredMultimapValues -> com.google.common.collect.ec:
    com.google.common.collect.FilteredMultimap multimap -> a
    1:1:java.util.Iterator com.google.common.collect.Maps.valueIterator(java.util.Iterator):0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.collect.FilteredSetMultimap -> com.google.common.collect.fc:
com.google.common.collect.FluentIterable -> com.google.common.collect.FluentIterable:
    com.google.common.base.Optional iterableDelegate -> a
    com.google.common.collect.FluentIterable concatNoDefensiveCopy(java.lang.Iterable[]) -> a
    java.lang.Iterable getDelegate() -> b
com.google.common.collect.FluentIterable$1 -> com.google.common.collect.gc:
    java.lang.Iterable val$iterable -> b
com.google.common.collect.FluentIterable$2 -> com.google.common.collect.hc:
    java.lang.Iterable val$inputs -> b
    1:1:com.google.common.base.Function com.google.common.collect.Iterables.toIterator():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
    2:2:java.util.Iterator iterator():0:0 -> iterator
com.google.common.collect.FluentIterable$3 -> com.google.common.collect.jc:
    java.lang.Iterable[] val$inputs -> b
com.google.common.collect.FluentIterable$3$1 -> com.google.common.collect.ic:
    com.google.common.collect.FluentIterable$3 this$0 -> c
    1:1:java.util.Iterator get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
com.google.common.collect.ForwardingCollection -> com.google.common.collect.ForwardingCollection:
    1:1:java.lang.String com.google.common.collect.Collections2.toStringImpl(java.util.Collection):0:0 -> standardToString
    1:1:java.lang.String standardToString():0 -> standardToString
com.google.common.collect.ForwardingList -> com.google.common.collect.ForwardingList:
    1:1:boolean com.google.common.collect.Lists.addAllImpl(java.util.List,int,java.lang.Iterable):0:0 -> standardAddAll
    1:1:boolean standardAddAll(int,java.lang.Iterable):0 -> standardAddAll
    1:1:int com.google.common.collect.Lists.hashCodeImpl(java.util.List):0:0 -> standardHashCode
    1:1:int standardHashCode():0 -> standardHashCode
    1:1:java.util.ListIterator com.google.common.collect.Lists.listIteratorImpl(java.util.List,int):0:0 -> standardListIterator
    1:1:java.util.ListIterator standardListIterator(int):0 -> standardListIterator
    1:1:java.util.List com.google.common.collect.Lists.subListImpl(java.util.List,int,int):0:0 -> standardSubList
    1:1:java.util.List standardSubList(int,int):0 -> standardSubList
com.google.common.collect.ForwardingMap -> com.google.common.collect.ForwardingMap:
    1:1:boolean com.google.common.collect.Maps.containsKeyImpl(java.util.Map,java.lang.Object):0:0 -> standardContainsKey
    1:1:boolean standardContainsKey(java.lang.Object):0 -> standardContainsKey
    2:2:java.util.Iterator com.google.common.collect.Maps.keyIterator(java.util.Iterator):0:0 -> standardContainsKey
    2:2:boolean com.google.common.collect.Maps.containsKeyImpl(java.util.Map,java.lang.Object):0 -> standardContainsKey
    2:2:boolean standardContainsKey(java.lang.Object):0 -> standardContainsKey
    3:3:boolean com.google.common.collect.Maps.containsKeyImpl(java.util.Map,java.lang.Object):0:0 -> standardContainsKey
    3:3:boolean standardContainsKey(java.lang.Object):0 -> standardContainsKey
    1:1:boolean com.google.common.collect.Maps.containsValueImpl(java.util.Map,java.lang.Object):0:0 -> standardContainsValue
    1:1:boolean standardContainsValue(java.lang.Object):0 -> standardContainsValue
    2:2:java.util.Iterator com.google.common.collect.Maps.valueIterator(java.util.Iterator):0:0 -> standardContainsValue
    2:2:boolean com.google.common.collect.Maps.containsValueImpl(java.util.Map,java.lang.Object):0 -> standardContainsValue
    2:2:boolean standardContainsValue(java.lang.Object):0 -> standardContainsValue
    3:3:boolean com.google.common.collect.Maps.containsValueImpl(java.util.Map,java.lang.Object):0:0 -> standardContainsValue
    3:3:boolean standardContainsValue(java.lang.Object):0 -> standardContainsValue
    1:1:void com.google.common.collect.Maps.putAllImpl(java.util.Map,java.util.Map):0:0 -> standardPutAll
    1:1:void standardPutAll(java.util.Map):0 -> standardPutAll
com.google.common.collect.ForwardingMap$StandardEntrySet -> com.google.common.collect.ForwardingMap$StandardEntrySet:
    com.google.common.collect.ForwardingMap this$0 -> a
    java.util.Map map() -> a
com.google.common.collect.ForwardingMultiset -> com.google.common.collect.ForwardingMultiset:
    1:1:java.util.Iterator com.google.common.collect.Multisets.iteratorImpl(com.google.common.collect.Multiset):0:0 -> standardIterator
    1:1:java.util.Iterator standardIterator():0 -> standardIterator
    1:1:boolean com.google.common.collect.Multisets.removeAllImpl(com.google.common.collect.Multiset,java.util.Collection):0:0 -> standardRemoveAll
    1:1:boolean standardRemoveAll(java.util.Collection):0 -> standardRemoveAll
com.google.common.collect.ForwardingMultiset$StandardElementSet -> com.google.common.collect.ForwardingMultiset$StandardElementSet:
    com.google.common.collect.ForwardingMultiset this$0 -> a
    com.google.common.collect.Multiset multiset() -> a
    1:1:com.google.common.collect.Multiset multiset():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
    2:2:java.util.Iterator iterator():0:0 -> iterator
    3:3:java.util.Iterator com.google.common.collect.Multisets.elementIterator(java.util.Iterator):0:0 -> iterator
    3:3:java.util.Iterator iterator():0 -> iterator
com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap -> com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap:
    com.google.common.collect.ForwardingNavigableMap this$0 -> d
    java.util.NavigableMap forward() -> a
    1:1:java.util.NavigableMap forward():0:0 -> replaceAll
    1:1:void replaceAll(java.util.function.BiFunction):0 -> replaceAll
    2:2:void replaceAll(java.util.function.BiFunction):0:0 -> replaceAll
com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1 -> com.google.common.collect.kc:
    java.util.Map$Entry nextOrNull -> b
    java.util.Map$Entry toRemove -> a
    com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap this$1 -> c
    1:1:java.util.NavigableMap com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap.forward():0:0 -> <init>
    1:1:void <init>(com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap):0 -> <init>
    2:2:void <init>(com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap):0:0 -> <init>
    1:1:java.util.Map$Entry next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
    2:2:java.util.NavigableMap com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap.forward():0:0 -> next
    2:2:java.util.Map$Entry next():0 -> next
    2:2:java.lang.Object next():0 -> next
    3:3:java.util.Map$Entry next():0:0 -> next
    3:3:java.lang.Object next():0 -> next
    4:4:java.util.NavigableMap com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap.forward():0:0 -> next
    4:4:java.util.Map$Entry next():0 -> next
    4:4:java.lang.Object next():0 -> next
    5:5:java.util.Map$Entry next():0:0 -> next
    5:5:java.lang.Object next():0 -> next
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
    3:3:java.util.NavigableMap com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap.forward():0:0 -> remove
    3:3:void remove():0 -> remove
    4:4:void remove():0:0 -> remove
com.google.common.collect.ForwardingSortedMap -> com.google.common.collect.ForwardingSortedMap:
    1:1:int unsafeCompare(java.lang.Object,java.lang.Object):0:0 -> standardContainsKey
    1:1:boolean standardContainsKey(java.lang.Object):0 -> standardContainsKey
    1:1:int unsafeCompare(java.lang.Object,java.lang.Object):0:0 -> standardSubMap
    1:1:java.util.SortedMap standardSubMap(java.lang.Object,java.lang.Object):0 -> standardSubMap
    2:2:java.util.SortedMap standardSubMap(java.lang.Object,java.lang.Object):0:0 -> standardSubMap
com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset -> com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset:
    com.google.common.collect.ForwardingSortedMultiset this$0 -> d
    com.google.common.collect.SortedMultiset forwardMultiset() -> a
com.google.common.collect.ForwardingSortedSet -> com.google.common.collect.ForwardingSortedSet:
    1:1:int unsafeCompare(java.lang.Object,java.lang.Object):0:0 -> standardContains
    1:1:boolean standardContains(java.lang.Object):0 -> standardContains
    1:1:int unsafeCompare(java.lang.Object,java.lang.Object):0:0 -> standardRemove
    1:1:boolean standardRemove(java.lang.Object):0 -> standardRemove
    2:2:boolean standardRemove(java.lang.Object):0:0 -> standardRemove
com.google.common.collect.GeneralRange -> com.google.common.collect.lc:
    java.lang.Object upperEndpoint -> f
    boolean hasUpperBound -> e
    java.lang.Object lowerEndpoint -> c
    com.google.common.collect.BoundType lowerBoundType -> d
    boolean hasLowerBound -> b
    com.google.common.collect.BoundType upperBoundType -> g
    java.util.Comparator comparator -> a
    com.google.common.collect.GeneralRange all(java.util.Comparator) -> a
    java.util.Comparator comparator() -> b
    boolean contains(java.lang.Object) -> c
    com.google.common.collect.GeneralRange downTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType) -> d
    com.google.common.collect.BoundType getLowerBoundType() -> e
    1:1:com.google.common.collect.BoundType getLowerBoundType():0:0 -> equals
    1:1:boolean equals(java.lang.Object):0 -> equals
    2:2:boolean equals(java.lang.Object):0:0 -> equals
    3:3:com.google.common.collect.BoundType getUpperBoundType():0:0 -> equals
    3:3:boolean equals(java.lang.Object):0 -> equals
    4:4:boolean equals(java.lang.Object):0:0 -> equals
    5:5:java.lang.Object getLowerEndpoint():0:0 -> equals
    5:5:boolean equals(java.lang.Object):0 -> equals
    6:6:boolean equals(java.lang.Object):0:0 -> equals
    7:7:java.lang.Object getUpperEndpoint():0:0 -> equals
    7:7:boolean equals(java.lang.Object):0 -> equals
    8:8:boolean equals(java.lang.Object):0:0 -> equals
    java.lang.Object getLowerEndpoint() -> f
    com.google.common.collect.BoundType getUpperBoundType() -> g
    java.lang.Object getUpperEndpoint() -> h
    1:1:java.lang.Object getLowerEndpoint():0:0 -> hashCode
    1:1:int hashCode():0 -> hashCode
    2:2:com.google.common.collect.BoundType getLowerBoundType():0:0 -> hashCode
    2:2:int hashCode():0 -> hashCode
    3:3:java.lang.Object getUpperEndpoint():0:0 -> hashCode
    3:3:int hashCode():0 -> hashCode
    4:4:com.google.common.collect.BoundType getUpperBoundType():0:0 -> hashCode
    4:4:int hashCode():0 -> hashCode
    5:5:int hashCode():0:0 -> hashCode
    boolean hasLowerBound() -> i
    boolean hasUpperBound() -> j
    1:1:java.lang.Object getLowerEndpoint():0:0 -> k
    1:1:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0 -> k
    2:2:com.google.common.collect.BoundType getLowerBoundType():0:0 -> k
    2:2:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0 -> k
    3:3:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0:0 -> k
    4:4:java.lang.Object getLowerEndpoint():0:0 -> k
    4:4:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0 -> k
    5:5:boolean hasLowerBound():0:0 -> k
    5:5:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0 -> k
    6:6:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0:0 -> k
    7:7:java.lang.Object getLowerEndpoint():0:0 -> k
    7:7:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0 -> k
    8:8:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0:0 -> k
    9:9:com.google.common.collect.BoundType getLowerBoundType():0:0 -> k
    9:9:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0 -> k
    10:10:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0:0 -> k
    11:11:com.google.common.collect.BoundType getLowerBoundType():0:0 -> k
    11:11:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0 -> k
    12:12:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0:0 -> k
    13:13:java.lang.Object getUpperEndpoint():0:0 -> k
    13:13:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0 -> k
    14:14:com.google.common.collect.BoundType getUpperBoundType():0:0 -> k
    14:14:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0 -> k
    15:15:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0:0 -> k
    16:16:java.lang.Object getUpperEndpoint():0:0 -> k
    16:16:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0 -> k
    17:17:boolean hasUpperBound():0:0 -> k
    17:17:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0 -> k
    18:18:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0:0 -> k
    19:19:java.lang.Object getUpperEndpoint():0:0 -> k
    19:19:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0 -> k
    20:20:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0:0 -> k
    21:21:com.google.common.collect.BoundType getUpperBoundType():0:0 -> k
    21:21:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0 -> k
    22:22:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0:0 -> k
    23:23:com.google.common.collect.BoundType getUpperBoundType():0:0 -> k
    23:23:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0 -> k
    24:24:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange):0:0 -> k
    1:1:boolean hasUpperBound():0:0 -> l
    1:1:boolean tooHigh(java.lang.Object):0 -> l
    2:2:java.lang.Object getUpperEndpoint():0:0 -> l
    2:2:boolean tooHigh(java.lang.Object):0 -> l
    3:3:boolean tooHigh(java.lang.Object):0:0 -> l
    4:4:com.google.common.collect.BoundType getUpperBoundType():0:0 -> l
    4:4:boolean tooHigh(java.lang.Object):0 -> l
    5:5:boolean tooHigh(java.lang.Object):0:0 -> l
    1:1:boolean hasLowerBound():0:0 -> m
    1:1:boolean tooLow(java.lang.Object):0 -> m
    2:2:java.lang.Object getLowerEndpoint():0:0 -> m
    2:2:boolean tooLow(java.lang.Object):0 -> m
    3:3:boolean tooLow(java.lang.Object):0:0 -> m
    4:4:com.google.common.collect.BoundType getLowerBoundType():0:0 -> m
    4:4:boolean tooLow(java.lang.Object):0 -> m
    5:5:boolean tooLow(java.lang.Object):0:0 -> m
    com.google.common.collect.GeneralRange upTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType) -> n
com.google.common.collect.HashBasedTable$Factory -> com.google.common.collect.mc:
    int expectedSize -> a
    1:1:java.util.Map get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.collect.HashBiMap -> com.google.common.collect.HashBiMap:
    com.google.common.collect.HashBiMap$BiEntry[] hashTableVToK -> b
    com.google.common.collect.HashBiMap$BiEntry[] hashTableKToV -> a
    int mask -> f
    int modCount -> g
    com.google.common.collect.BiMap inverse -> h
    com.google.common.collect.HashBiMap$BiEntry firstInKeyInsertionOrder -> c
    int size -> e
    com.google.common.collect.HashBiMap$BiEntry lastInKeyInsertionOrder -> d
    1:1:void init(int):0:0 -> <init>
    1:1:void <init>(int):0 -> <init>
    2:2:com.google.common.collect.HashBiMap$BiEntry[] createTable(int):0:0 -> <init>
    2:2:void init(int):0 -> <init>
    2:2:void <init>(int):0 -> <init>
    3:3:void init(int):0:0 -> <init>
    3:3:void <init>(int):0 -> <init>
    4:4:com.google.common.collect.HashBiMap$BiEntry[] createTable(int):0:0 -> <init>
    4:4:void init(int):0 -> <init>
    4:4:void <init>(int):0 -> <init>
    5:5:void init(int):0:0 -> <init>
    5:5:void <init>(int):0 -> <init>
    java.util.Iterator entryIterator() -> a
    com.google.common.collect.HashBiMap$BiEntry access$000(com.google.common.collect.HashBiMap) -> c
    int access$100(com.google.common.collect.HashBiMap) -> d
    void access$200(com.google.common.collect.HashBiMap,com.google.common.collect.HashBiMap$BiEntry) -> e
    com.google.common.collect.HashBiMap$BiEntry access$300(com.google.common.collect.HashBiMap,java.lang.Object,int) -> f
    com.google.common.collect.HashBiMap$BiEntry access$400(com.google.common.collect.HashBiMap,java.lang.Object,int) -> g
    1:1:java.lang.Object com.google.common.collect.ImmutableEntry.getValue():0:0 -> get
    1:1:java.lang.Object com.google.common.collect.Maps.valueOrNull(java.util.Map$Entry):0 -> get
    1:1:java.lang.Object get(java.lang.Object):0 -> get
    void access$500(com.google.common.collect.HashBiMap,com.google.common.collect.HashBiMap$BiEntry,com.google.common.collect.HashBiMap$BiEntry) -> h
    int access$700(com.google.common.collect.HashBiMap) -> i
    1:1:java.lang.Object putInverse(java.lang.Object,java.lang.Object,boolean):0:0 -> j
    1:1:java.lang.Object access$800(com.google.common.collect.HashBiMap,java.lang.Object,java.lang.Object,boolean):0 -> j
    void delete(com.google.common.collect.HashBiMap$BiEntry) -> k
    void insert(com.google.common.collect.HashBiMap$BiEntry,com.google.common.collect.HashBiMap$BiEntry) -> l
    java.lang.Object put(java.lang.Object,java.lang.Object,boolean) -> m
    1:1:com.google.common.collect.HashBiMap$BiEntry[] createTable(int):0:0 -> n
    1:1:void rehashIfNecessary():0 -> n
    2:2:void rehashIfNecessary():0:0 -> n
    3:3:com.google.common.collect.HashBiMap$BiEntry[] createTable(int):0:0 -> n
    3:3:void rehashIfNecessary():0 -> n
    4:4:void rehashIfNecessary():0:0 -> n
    com.google.common.collect.HashBiMap$BiEntry seekByKey(java.lang.Object,int) -> o
    com.google.common.collect.HashBiMap$BiEntry seekByValue(java.lang.Object,int) -> p
com.google.common.collect.HashBiMap$1 -> com.google.common.collect.oc:
    com.google.common.collect.HashBiMap this$0 -> f
    1:1:java.util.Map$Entry output(com.google.common.collect.HashBiMap$BiEntry):0:0 -> a
    1:1:java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry):0 -> a
com.google.common.collect.HashBiMap$1$MapEntry -> com.google.common.collect.nc:
    com.google.common.collect.HashBiMap$1 this$1 -> b
    com.google.common.collect.HashBiMap$BiEntry delegate -> a
com.google.common.collect.HashBiMap$BiEntry -> com.google.common.collect.pc:
    com.google.common.collect.HashBiMap$BiEntry prevInKeyInsertionOrder -> h
    int valueHash -> d
    com.google.common.collect.HashBiMap$BiEntry nextInKToVBucket -> e
    int keyHash -> c
    com.google.common.collect.HashBiMap$BiEntry nextInKeyInsertionOrder -> g
    com.google.common.collect.HashBiMap$BiEntry nextInVToKBucket -> f
com.google.common.collect.HashBiMap$Inverse -> com.google.common.collect.uc:
    com.google.common.collect.HashBiMap this$0 -> a
    1:1:void <init>(com.google.common.collect.HashBiMap):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.HashBiMap,com.google.common.collect.HashBiMap$1):0 -> <init>
    java.util.Iterator entryIterator() -> a
    1:1:com.google.common.collect.BiMap forward():0:0 -> clear
    1:1:void clear():0 -> clear
    2:2:void clear():0:0 -> clear
    1:1:com.google.common.collect.BiMap forward():0:0 -> containsKey
    1:1:boolean containsKey(java.lang.Object):0 -> containsKey
    2:2:boolean containsKey(java.lang.Object):0:0 -> containsKey
    1:1:com.google.common.collect.BiMap forward():0:0 -> inverse
    1:1:com.google.common.collect.BiMap inverse():0 -> inverse
    1:1:com.google.common.collect.BiMap forward():0:0 -> replaceAll
    1:1:void clear():0 -> replaceAll
    1:1:void replaceAll(java.util.function.BiFunction):0 -> replaceAll
    2:2:void clear():0:0 -> replaceAll
    2:2:void replaceAll(java.util.function.BiFunction):0 -> replaceAll
    3:3:void replaceAll(java.util.function.BiFunction):0:0 -> replaceAll
    1:1:com.google.common.collect.BiMap forward():0:0 -> values
    1:1:java.util.Set values():0 -> values
    2:2:java.util.Set values():0:0 -> values
com.google.common.collect.HashBiMap$Inverse$1 -> com.google.common.collect.rc:
    com.google.common.collect.HashBiMap$Inverse this$1 -> f
    1:1:java.util.Map$Entry output(com.google.common.collect.HashBiMap$BiEntry):0:0 -> a
    1:1:java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry):0 -> a
com.google.common.collect.HashBiMap$Inverse$1$InverseEntry -> com.google.common.collect.qc:
    com.google.common.collect.HashBiMap$BiEntry delegate -> a
    com.google.common.collect.HashBiMap$Inverse$1 this$2 -> b
com.google.common.collect.HashBiMap$Inverse$InverseKeySet -> com.google.common.collect.tc:
    com.google.common.collect.HashBiMap$Inverse this$1 -> b
com.google.common.collect.HashBiMap$Inverse$InverseKeySet$1 -> com.google.common.collect.sc:
    java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry) -> a
com.google.common.collect.HashBiMap$Itr -> com.google.common.collect.vc:
    com.google.common.collect.HashBiMap$BiEntry next -> a
    com.google.common.collect.HashBiMap this$0 -> e
    int remaining -> d
    com.google.common.collect.HashBiMap$BiEntry toRemove -> b
    int expectedModCount -> c
    java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry) -> a
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
com.google.common.collect.HashBiMap$KeySet -> com.google.common.collect.xc:
    com.google.common.collect.HashBiMap this$0 -> b
com.google.common.collect.HashBiMap$KeySet$1 -> com.google.common.collect.wc:
    java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry) -> a
com.google.common.collect.HashMultimap -> com.google.common.collect.HashMultimap:
    int expectedValuesPerKey -> h
    1:1:java.util.Map com.google.common.collect.Platform.newHashMapWithExpectedSize(int):0:0 -> <init>
    1:1:void <init>(int,int):0 -> <init>
    2:2:void com.google.common.collect.HashMultimapGwtSerializationDependencies.<init>(java.util.Map):0:0 -> <init>
    2:2:void <init>(int,int):0 -> <init>
    3:3:void <init>(int,int):0:0 -> <init>
    4:4:java.util.Map com.google.common.collect.Platform.newHashMapWithExpectedSize(int):0:0 -> <init>
    4:4:void <init>(com.google.common.collect.Multimap):0 -> <init>
    5:5:void com.google.common.collect.HashMultimapGwtSerializationDependencies.<init>(java.util.Map):0:0 -> <init>
    5:5:void <init>(com.google.common.collect.Multimap):0 -> <init>
    6:6:void <init>(com.google.common.collect.Multimap):0:0 -> <init>
    1:1:void <init>():0:0 -> create
    1:1:com.google.common.collect.HashMultimap create():0 -> create
    1:1:java.util.Set createCollection():0:0 -> createCollection
    1:1:java.util.Collection createCollection():0 -> createCollection
    2:2:java.util.Set com.google.common.collect.Platform.newHashSetWithExpectedSize(int):0:0 -> createCollection
    2:2:java.util.Set createCollection():0 -> createCollection
    2:2:java.util.Collection createCollection():0 -> createCollection
com.google.common.collect.HashMultiset -> com.google.common.collect.HashMultiset:
    1:1:int com.google.common.collect.Multisets.inferDistinctElements(java.lang.Iterable):0:0 -> create
    1:1:com.google.common.collect.HashMultiset create(java.lang.Iterable):0 -> create
    2:2:com.google.common.collect.HashMultiset create(java.lang.Iterable):0:0 -> create
com.google.common.collect.ImmutableAsList -> com.google.common.collect.yc:
    boolean isPartialView() -> e
    com.google.common.collect.ImmutableCollection delegateCollection() -> j
com.google.common.collect.ImmutableBiMap -> com.google.common.collect.ImmutableBiMap:
    1:1:com.google.common.collect.ImmutableBiMap com.google.common.collect.RegularImmutableBiMap.fromEntries(java.util.Map$Entry[]):0:0 -> copyOf
    1:1:com.google.common.collect.ImmutableBiMap copyOf(java.lang.Iterable):0 -> copyOf
    2:2:com.google.common.collect.ImmutableBiMap copyOf(java.lang.Iterable):0:0 -> copyOf
    1:1:com.google.common.collect.ImmutableSet createValues():0:0 -> e
    1:1:com.google.common.collect.ImmutableCollection createValues():0 -> e
    1:1:com.google.common.collect.ImmutableBiMap com.google.common.collect.RegularImmutableBiMap.fromEntries(java.util.Map$Entry[]):0:0 -> of
    1:1:com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    2:2:com.google.common.collect.ImmutableBiMap com.google.common.collect.RegularImmutableBiMap.fromEntries(java.util.Map$Entry[]):0:0 -> of
    2:2:com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    3:3:com.google.common.collect.ImmutableBiMap com.google.common.collect.RegularImmutableBiMap.fromEntries(java.util.Map$Entry[]):0:0 -> of
    3:3:com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    4:4:com.google.common.collect.ImmutableBiMap com.google.common.collect.RegularImmutableBiMap.fromEntries(java.util.Map$Entry[]):0:0 -> of
    4:4:com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    1:1:java.util.stream.Collector com.google.common.collect.CollectCollectors.toImmutableBiMap(java.util.function.Function,java.util.function.Function):0:0 -> toImmutableBiMap
    1:1:java.util.stream.Collector toImmutableBiMap(java.util.function.Function,java.util.function.Function):0 -> toImmutableBiMap
com.google.common.collect.ImmutableBiMap$Builder -> com.google.common.collect.ImmutableBiMap$Builder:
    1:1:com.google.common.collect.ImmutableBiMap$Builder combine(com.google.common.collect.ImmutableMap$Builder):0:0 -> a
    1:1:com.google.common.collect.ImmutableMap$Builder combine(com.google.common.collect.ImmutableMap$Builder):0 -> a
    com.google.common.collect.ImmutableBiMap$Builder combine(com.google.common.collect.ImmutableMap$Builder) -> c
com.google.common.collect.ImmutableBiMapFauxverideShim -> com.google.common.collect.zc:
com.google.common.collect.ImmutableClassToInstanceMap -> com.google.common.collect.ImmutableClassToInstanceMap:
    com.google.common.collect.ImmutableMap delegate -> a
    com.google.common.collect.ImmutableClassToInstanceMap EMPTY -> b
    1:1:void <init>(com.google.common.collect.ImmutableMap):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.ImmutableMap,com.google.common.collect.ImmutableClassToInstanceMap$1):0 -> <init>
com.google.common.collect.ImmutableClassToInstanceMap$1 -> com.google.common.collect.ad:
com.google.common.collect.ImmutableClassToInstanceMap$Builder -> com.google.common.collect.ImmutableClassToInstanceMap$Builder:
    com.google.common.collect.ImmutableMap$Builder mapBuilder -> a
    1:1:java.lang.Object cast(java.lang.Class,java.lang.Object):0:0 -> putAll
    1:1:com.google.common.collect.ImmutableClassToInstanceMap$Builder putAll(java.util.Map):0 -> putAll
    2:2:com.google.common.collect.ImmutableClassToInstanceMap$Builder putAll(java.util.Map):0:0 -> putAll
com.google.common.collect.ImmutableCollection -> com.google.common.collect.ImmutableCollection:
    java.lang.Object[] EMPTY_ARRAY -> a
    int copyIntoArray(java.lang.Object[],int) -> a
    java.lang.Object[] internalArray() -> b
    int internalArrayEnd() -> c
    int internalArrayStart() -> d
    boolean isPartialView() -> e
    1:1:java.lang.Object[] com.google.common.collect.Platform.copy(java.lang.Object[],int,int,java.lang.Object[]):0:0 -> toArray
    1:1:java.lang.Object[] toArray(java.lang.Object[]):0 -> toArray
    2:2:java.lang.Object[] toArray(java.lang.Object[]):0:0 -> toArray
com.google.common.collect.ImmutableCollection$Builder -> com.google.common.collect.ImmutableCollection$Builder:
    int expandedCapacity(int,int) -> a
com.google.common.collect.ImmutableEntry -> com.google.common.collect.bd:
    java.lang.Object value -> b
    java.lang.Object key -> a
com.google.common.collect.ImmutableEnumMap -> com.google.common.collect.cd:
    java.util.EnumMap delegate -> f
    boolean isPartialView() -> h
    com.google.common.collect.UnmodifiableIterator keyIterator() -> i
    java.util.Spliterator keySpliterator() -> j
    1:1:com.google.common.collect.UnmodifiableIterator com.google.common.collect.Maps.unmodifiableEntryIterator(java.util.Iterator):0:0 -> k
    1:1:com.google.common.collect.UnmodifiableIterator entryIterator():0 -> k
    com.google.common.collect.ImmutableMap asImmutable(java.util.EnumMap) -> l
com.google.common.collect.ImmutableEnumSet -> com.google.common.collect.dd:
    java.util.EnumSet delegate -> c
    int hashCode -> d
    boolean isPartialView() -> e
    boolean isHashCodeFast() -> j
    com.google.common.collect.ImmutableSet asImmutable(java.util.EnumSet) -> l
com.google.common.collect.ImmutableList -> com.google.common.collect.ImmutableList:
    int copyIntoArray(java.lang.Object[],int) -> a
    com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[]) -> f
    com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[],int) -> g
    1:1:java.lang.Object[] com.google.common.collect.ObjectArrays.checkElementsNotNull(java.lang.Object[]):0:0 -> h
    1:1:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> h
    2:2:com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[]):0:0 -> h
    2:2:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> h
    com.google.common.collect.ImmutableList subListUnchecked(int,int) -> i
    1:1:java.lang.Object[] com.google.common.collect.ObjectArrays.checkElementsNotNull(java.lang.Object[]):0:0 -> of
    1:1:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    1:1:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object):0 -> of
    2:2:com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[]):0:0 -> of
    2:2:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    2:2:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object):0 -> of
    3:3:java.lang.Object[] com.google.common.collect.ObjectArrays.checkElementsNotNull(java.lang.Object[]):0:0 -> of
    3:3:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    3:3:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    4:4:com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[]):0:0 -> of
    4:4:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    4:4:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    5:5:java.lang.Object[] com.google.common.collect.ObjectArrays.checkElementsNotNull(java.lang.Object[]):0:0 -> of
    5:5:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    5:5:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    6:6:com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[]):0:0 -> of
    6:6:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    6:6:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    7:7:java.lang.Object[] com.google.common.collect.ObjectArrays.checkElementsNotNull(java.lang.Object[]):0:0 -> of
    7:7:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    7:7:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    8:8:com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[]):0:0 -> of
    8:8:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    8:8:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    9:9:java.lang.Object[] com.google.common.collect.ObjectArrays.checkElementsNotNull(java.lang.Object[]):0:0 -> of
    9:9:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    9:9:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    10:10:com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[]):0:0 -> of
    10:10:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    10:10:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    11:11:java.lang.Object[] com.google.common.collect.ObjectArrays.checkElementsNotNull(java.lang.Object[]):0:0 -> of
    11:11:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    11:11:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    12:12:com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[]):0:0 -> of
    12:12:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    12:12:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    13:13:java.lang.Object[] com.google.common.collect.ObjectArrays.checkElementsNotNull(java.lang.Object[]):0:0 -> of
    13:13:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    13:13:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    14:14:com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[]):0:0 -> of
    14:14:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    14:14:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    15:15:java.lang.Object[] com.google.common.collect.ObjectArrays.checkElementsNotNull(java.lang.Object[]):0:0 -> of
    15:15:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    15:15:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    16:16:com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[]):0:0 -> of
    16:16:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    16:16:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    17:17:java.lang.Object[] com.google.common.collect.ObjectArrays.checkElementsNotNull(java.lang.Object[]):0:0 -> of
    17:17:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    17:17:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    18:18:com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[]):0:0 -> of
    18:18:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    18:18:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    19:19:java.lang.Object[] com.google.common.collect.ObjectArrays.checkElementsNotNull(java.lang.Object[]):0:0 -> of
    19:19:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    19:19:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    20:20:com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[]):0:0 -> of
    20:20:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    20:20:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    21:21:java.lang.Object[] com.google.common.collect.ObjectArrays.checkElementsNotNull(java.lang.Object[]):0:0 -> of
    21:21:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    21:21:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]):0 -> of
    22:22:com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[]):0:0 -> of
    22:22:com.google.common.collect.ImmutableList construct(java.lang.Object[]):0 -> of
    22:22:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]):0 -> of
    1:1:java.lang.Object[] com.google.common.collect.ObjectArrays.checkElementsNotNull(java.lang.Object[]):0:0 -> sortedCopyOf
    1:1:com.google.common.collect.ImmutableList sortedCopyOf(java.lang.Iterable):0 -> sortedCopyOf
    2:2:com.google.common.collect.ImmutableList sortedCopyOf(java.lang.Iterable):0:0 -> sortedCopyOf
    3:3:java.lang.Object[] com.google.common.collect.ObjectArrays.checkElementsNotNull(java.lang.Object[]):0:0 -> sortedCopyOf
    3:3:com.google.common.collect.ImmutableList sortedCopyOf(java.util.Comparator,java.lang.Iterable):0 -> sortedCopyOf
    4:4:com.google.common.collect.ImmutableList sortedCopyOf(java.util.Comparator,java.lang.Iterable):0:0 -> sortedCopyOf
    5:5:com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[]):0:0 -> sortedCopyOf
    5:5:com.google.common.collect.ImmutableList sortedCopyOf(java.util.Comparator,java.lang.Iterable):0 -> sortedCopyOf
com.google.common.collect.ImmutableList$1 -> com.google.common.collect.ed:
    com.google.common.collect.ImmutableList this$0 -> c
com.google.common.collect.ImmutableList$Builder -> com.google.common.collect.ImmutableList$Builder:
    java.lang.Object[] contents -> a
    int size -> b
    boolean forceCopy -> c
    1:1:java.lang.Object[] com.google.common.collect.ObjectArrays.checkElementsNotNull(java.lang.Object[]):0:0 -> add
    1:1:com.google.common.collect.ImmutableList$Builder add(java.lang.Object[]):0 -> add
    2:2:com.google.common.collect.ImmutableList$Builder add(java.lang.Object[]):0:0 -> add
    void add(java.lang.Object[],int) -> b
    com.google.common.collect.ImmutableList$Builder combine(com.google.common.collect.ImmutableList$Builder) -> c
    void getReadyToExpandTo(int) -> d
com.google.common.collect.ImmutableList$ReverseImmutableList -> com.google.common.collect.fd:
    com.google.common.collect.ImmutableList forwardList -> b
    boolean isPartialView() -> e
    1:1:int reverseIndex(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
    2:2:java.lang.Object get(int):0:0 -> get
    int reverseIndex(int) -> j
    1:1:int reversePosition(int):0:0 -> subList
    1:1:com.google.common.collect.ImmutableList subList(int,int):0 -> subList
    2:2:com.google.common.collect.ImmutableList subList(int,int):0:0 -> subList
com.google.common.collect.ImmutableList$SubList -> com.google.common.collect.gd:
    com.google.common.collect.ImmutableList this$0 -> d
    int offset -> b
    int length -> c
    boolean isPartialView() -> e
com.google.common.collect.ImmutableListMultimap -> com.google.common.collect.ImmutableListMultimap:
    com.google.common.collect.ImmutableListMultimap inverse -> h
    1:1:java.util.stream.Collector com.google.common.collect.CollectCollectors.flatteningToImmutableListMultimap(java.util.function.Function,java.util.function.Function):0:0 -> flatteningToImmutableListMultimap
    1:1:java.util.stream.Collector flatteningToImmutableListMultimap(java.util.function.Function,java.util.function.Function):0 -> flatteningToImmutableListMultimap
    1:1:com.google.common.collect.ImmutableListMultimap invert():0:0 -> inverse
    1:1:com.google.common.collect.ImmutableListMultimap inverse():0 -> inverse
    2:2:com.google.common.collect.ImmutableListMultimap inverse():0:0 -> inverse
    com.google.common.collect.ImmutableListMultimap fromMapEntries(java.util.Collection,java.util.Comparator) -> l
    1:1:java.util.stream.Collector com.google.common.collect.CollectCollectors.toImmutableListMultimap(java.util.function.Function,java.util.function.Function):0:0 -> toImmutableListMultimap
    1:1:java.util.stream.Collector toImmutableListMultimap(java.util.function.Function,java.util.function.Function):0 -> toImmutableListMultimap
com.google.common.collect.ImmutableMap -> com.google.common.collect.ImmutableMap:
    com.google.common.collect.ImmutableSet keySet -> b
    com.google.common.collect.ImmutableSet entrySet -> a
    com.google.common.collect.ImmutableSetMultimap multimapView -> d
    java.util.Map$Entry[] EMPTY_ENTRY_ARRAY -> e
    com.google.common.collect.ImmutableCollection values -> c
    void checkNoConflict(boolean,java.lang.String,java.util.Map$Entry,java.util.Map$Entry) -> a
    java.lang.IllegalArgumentException conflictException(java.lang.String,java.lang.Object,java.lang.Object) -> b
    com.google.common.collect.ImmutableSet createEntrySet() -> c
    1:1:com.google.common.collect.ImmutableMap com.google.common.collect.RegularImmutableMap.fromEntries(java.util.Map$Entry[]):0:0 -> copyOf
    1:1:com.google.common.collect.ImmutableMap copyOf(java.lang.Iterable):0 -> copyOf
    2:2:com.google.common.collect.ImmutableMap copyOf(java.lang.Iterable):0:0 -> copyOf
    3:3:com.google.common.collect.ImmutableMap copyOfEnumMap(java.util.EnumMap):0:0 -> copyOf
    3:3:com.google.common.collect.ImmutableMap copyOf(java.util.Map):0 -> copyOf
    4:4:com.google.common.collect.ImmutableMap copyOf(java.util.Map):0:0 -> copyOf
    com.google.common.collect.ImmutableSet createKeySet() -> d
    com.google.common.collect.ImmutableCollection createValues() -> e
    java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object) -> f
    boolean isHashCodeFast() -> g
    boolean isPartialView() -> h
    com.google.common.collect.UnmodifiableIterator keyIterator() -> i
    java.util.Spliterator keySpliterator() -> j
    1:1:com.google.common.collect.ImmutableMap com.google.common.collect.RegularImmutableMap.fromEntries(java.util.Map$Entry[]):0:0 -> of
    1:1:com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    2:2:com.google.common.collect.ImmutableMap com.google.common.collect.RegularImmutableMap.fromEntries(java.util.Map$Entry[]):0:0 -> of
    2:2:com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    3:3:com.google.common.collect.ImmutableMap com.google.common.collect.RegularImmutableMap.fromEntries(java.util.Map$Entry[]):0:0 -> of
    3:3:com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    4:4:com.google.common.collect.ImmutableMap com.google.common.collect.RegularImmutableMap.fromEntries(java.util.Map$Entry[]):0:0 -> of
    4:4:com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object):0 -> of
    1:1:java.util.stream.Collector com.google.common.collect.CollectCollectors.toImmutableMap(java.util.function.Function,java.util.function.Function):0:0 -> toImmutableMap
    1:1:java.util.stream.Collector toImmutableMap(java.util.function.Function,java.util.function.Function):0 -> toImmutableMap
    2:2:java.util.stream.Collector com.google.common.collect.CollectCollectors.toImmutableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator):0:0 -> toImmutableMap
    2:2:java.util.stream.Collector toImmutableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator):0 -> toImmutableMap
com.google.common.collect.ImmutableMap$1 -> com.google.common.collect.hd:
    com.google.common.collect.UnmodifiableIterator val$entryIterator -> a
com.google.common.collect.ImmutableMap$Builder -> com.google.common.collect.ImmutableMap$Builder:
    java.util.Map$Entry[] entries -> b
    int size -> c
    java.util.Comparator valueComparator -> a
    boolean entriesUsed -> d
    com.google.common.collect.ImmutableMap$Builder combine(com.google.common.collect.ImmutableMap$Builder) -> a
    void ensureCapacity(int) -> b
com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap -> com.google.common.collect.jd:
    com.google.common.collect.ImmutableSet createEntrySet() -> c
    com.google.common.collect.ImmutableSet createKeySet() -> d
    com.google.common.collect.ImmutableCollection createValues() -> e
    com.google.common.collect.UnmodifiableIterator entryIterator() -> k
com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap$1EntrySetImpl -> com.google.common.collect.id:
    com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap this$0 -> c
    com.google.common.collect.ImmutableMap map() -> l
com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets -> com.google.common.collect.md:
    com.google.common.collect.ImmutableMap this$0 -> f
    1:1:void <init>(com.google.common.collect.ImmutableMap):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.ImmutableMap,com.google.common.collect.ImmutableMap$1):0 -> <init>
    com.google.common.collect.ImmutableSet createKeySet() -> d
    boolean isHashCodeFast() -> g
    1:1:com.google.common.collect.ImmutableSet get(java.lang.Object):0:0 -> get
    1:1:java.lang.Object get(java.lang.Object):0 -> get
    boolean isPartialView() -> h
    com.google.common.collect.UnmodifiableIterator entryIterator() -> k
com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1 -> com.google.common.collect.ld:
    java.util.Iterator val$backingIterator -> a
    1:1:java.util.Map$Entry next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1 -> com.google.common.collect.kd:
    java.util.Map$Entry val$backingEntry -> a
    1:1:com.google.common.collect.ImmutableSet getValue():0:0 -> getValue
    1:1:java.lang.Object getValue():0 -> getValue
com.google.common.collect.ImmutableMapEntry -> com.google.common.collect.pd:
    com.google.common.collect.ImmutableMapEntry getNextInKeyBucket() -> a
    com.google.common.collect.ImmutableMapEntry getNextInValueBucket() -> b
    boolean isReusable() -> c
com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableBiMapEntry -> com.google.common.collect.nd:
    com.google.common.collect.ImmutableMapEntry nextInValueBucket -> d
    com.google.common.collect.ImmutableMapEntry getNextInValueBucket() -> b
com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry -> com.google.common.collect.od:
    com.google.common.collect.ImmutableMapEntry nextInKeyBucket -> c
    com.google.common.collect.ImmutableMapEntry getNextInKeyBucket() -> a
    boolean isReusable() -> c
com.google.common.collect.ImmutableMapEntrySet -> com.google.common.collect.rd:
    boolean isPartialView() -> e
    java.util.Iterator com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap$1EntrySetImpl.iterator() -> iterator
    boolean isHashCodeFast() -> j
    com.google.common.collect.ImmutableMap map() -> l
com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet -> com.google.common.collect.qd:
    com.google.common.collect.ImmutableList entries -> d
    com.google.common.collect.ImmutableMap map -> c
    1:1:com.google.common.collect.ImmutableList com.google.common.collect.ImmutableList.asImmutableList(java.lang.Object[]):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.ImmutableMap,java.util.Map$Entry[]):0 -> <init>
    2:2:void <init>(com.google.common.collect.ImmutableMap,com.google.common.collect.ImmutableList):0:0 -> <init>
    2:2:void <init>(com.google.common.collect.ImmutableMap,java.util.Map$Entry[]):0 -> <init>
    int copyIntoArray(java.lang.Object[],int) -> a
    com.google.common.collect.ImmutableList createAsList() -> i
    com.google.common.collect.ImmutableMap map() -> l
com.google.common.collect.ImmutableMapKeySet -> com.google.common.collect.sd:
    com.google.common.collect.ImmutableMap map -> c
    boolean isPartialView() -> e
com.google.common.collect.ImmutableMapValues -> com.google.common.collect.vd:
    com.google.common.collect.ImmutableMap map -> b
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0:0 -> contains
    1:1:boolean contains(java.lang.Object):0 -> contains
    2:2:boolean contains(java.lang.Object):0:0 -> contains
    boolean isPartialView() -> e
    com.google.common.collect.ImmutableMap access$000(com.google.common.collect.ImmutableMapValues) -> f
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.collect.ImmutableMapValues$1 -> com.google.common.collect.td:
    com.google.common.collect.UnmodifiableIterator entryItr -> a
    com.google.common.collect.ImmutableMapValues this$0 -> b
com.google.common.collect.ImmutableMapValues$2 -> com.google.common.collect.ud:
    com.google.common.collect.ImmutableList val$entryList -> b
    com.google.common.collect.ImmutableMapValues this$0 -> c
    com.google.common.collect.ImmutableCollection delegateCollection() -> j
com.google.common.collect.ImmutableMultimap -> com.google.common.collect.ImmutableMultimap:
    int size -> g
    com.google.common.collect.ImmutableMap map -> f
    java.util.Map createAsMap() -> a
    1:1:com.google.common.collect.ImmutableCollection createEntries():0:0 -> b
    1:1:java.util.Collection createEntries():0 -> b
    java.util.Set createKeySet() -> c
    1:1:com.google.common.collect.ImmutableMultiset createKeys():0:0 -> d
    1:1:com.google.common.collect.Multiset createKeys():0 -> d
    1:1:com.google.common.collect.ImmutableCollection createValues():0:0 -> e
    1:1:java.util.Collection createValues():0 -> e
    1:1:com.google.common.collect.UnmodifiableIterator entryIterator():0:0 -> f
    1:1:java.util.Iterator entryIterator():0 -> f
    java.util.Spliterator entrySpliterator() -> g
    1:1:com.google.common.collect.UnmodifiableIterator valueIterator():0:0 -> h
    1:1:java.util.Iterator valueIterator():0 -> h
    boolean isPartialView() -> j
    com.google.common.collect.UnmodifiableIterator valueIterator() -> k
com.google.common.collect.ImmutableMultimap$1 -> com.google.common.collect.wd:
    java.util.Iterator valueItr -> c
    java.util.Iterator asMapItr -> a
    java.lang.Object currentKey -> b
    com.google.common.collect.ImmutableMultimap this$0 -> d
    1:1:com.google.common.collect.UnmodifiableListIterator com.google.common.collect.Iterators.emptyListIterator():0:0 -> <init>
    1:1:com.google.common.collect.UnmodifiableIterator com.google.common.collect.Iterators.emptyIterator():0 -> <init>
    1:1:void <init>(com.google.common.collect.ImmutableMultimap):0 -> <init>
    2:2:void <init>(com.google.common.collect.ImmutableMultimap):0:0 -> <init>
    1:1:java.util.Map$Entry next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
com.google.common.collect.ImmutableMultimap$2 -> com.google.common.collect.xd:
    java.util.Iterator valueItr -> b
    java.util.Iterator valueCollectionItr -> a
    com.google.common.collect.ImmutableMultimap this$0 -> c
    1:1:com.google.common.collect.UnmodifiableListIterator com.google.common.collect.Iterators.emptyListIterator():0:0 -> <init>
    1:1:com.google.common.collect.UnmodifiableIterator com.google.common.collect.Iterators.emptyIterator():0 -> <init>
    1:1:void <init>(com.google.common.collect.ImmutableMultimap):0 -> <init>
    2:2:void <init>(com.google.common.collect.ImmutableMultimap):0:0 -> <init>
com.google.common.collect.ImmutableMultimap$Builder -> com.google.common.collect.ImmutableMultimap$Builder:
    java.util.Map builderMap -> a
    java.util.Comparator valueComparator -> c
    java.util.Comparator keyComparator -> b
    1:1:java.util.Map com.google.common.collect.Platform.preservesInsertionOrderOnPutsMap():0:0 -> <init>
    1:1:void <init>():0 -> <init>
    2:2:void <init>():0:0 -> <init>
    com.google.common.collect.ImmutableMultimap$Builder combine(com.google.common.collect.ImmutableMultimap$Builder) -> a
    java.util.Collection newMutableValueCollection() -> b
com.google.common.collect.ImmutableMultimap$EntryCollection -> com.google.common.collect.yd:
    com.google.common.collect.ImmutableMultimap multimap -> b
    boolean isPartialView() -> e
    1:1:com.google.common.collect.UnmodifiableIterator com.google.common.collect.ImmutableMultimap.entryIterator():0:0 -> iterator
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0 -> iterator
com.google.common.collect.ImmutableMultimap$Keys -> com.google.common.collect.zd:
    com.google.common.collect.ImmutableMultimap this$0 -> e
    boolean isPartialView() -> e
    com.google.common.collect.Multiset$Entry getEntry(int) -> h
com.google.common.collect.ImmutableMultimap$Values -> com.google.common.collect.ae:
    com.google.common.collect.ImmutableMultimap multimap -> b
    int copyIntoArray(java.lang.Object[],int) -> a
    boolean isPartialView() -> e
com.google.common.collect.ImmutableMultiset -> com.google.common.collect.ImmutableMultiset:
    com.google.common.collect.ImmutableSet entrySet -> c
    int $r8$clinit -> d
    com.google.common.collect.ImmutableList asList -> b
    1:1:void com.google.common.collect.ImmutableMultisetGwtSerializationDependencies.<init>():0:0 -> <init>
    1:1:void <init>():0 -> <init>
    int copyIntoArray(java.lang.Object[],int) -> a
    1:1:com.google.common.collect.Multiset com.google.common.collect.Multisets.cast(java.lang.Iterable):0:0 -> copyOf
    1:1:com.google.common.collect.ImmutableMultiset copyOf(java.lang.Iterable):0 -> copyOf
    2:2:com.google.common.collect.ImmutableMultiset copyOf(java.lang.Iterable):0:0 -> copyOf
    1:1:com.google.common.collect.ImmutableSet createEntrySet():0:0 -> entrySet
    1:1:com.google.common.collect.ImmutableSet entrySet():0 -> entrySet
    2:2:com.google.common.collect.ImmutableSet entrySet():0:0 -> entrySet
    com.google.common.collect.ImmutableMultiset copyFromElements(java.lang.Object[]) -> f
    com.google.common.collect.ImmutableMultiset copyFromEntries(java.util.Collection) -> g
    com.google.common.collect.Multiset$Entry getEntry(int) -> h
com.google.common.collect.ImmutableMultiset$1 -> com.google.common.collect.be:
    java.util.Iterator val$entryIterator -> c
    java.lang.Object element -> b
    int remaining -> a
com.google.common.collect.ImmutableMultiset$Builder -> com.google.common.collect.ImmutableMultiset$Builder:
    com.google.common.collect.Multiset contents -> a
    1:1:void <init>(com.google.common.collect.Multiset):0:0 -> <init>
    1:1:void <init>():0 -> <init>
    1:1:com.google.common.collect.Multiset com.google.common.collect.Multisets.cast(java.lang.Iterable):0:0 -> addAll
    1:1:com.google.common.collect.ImmutableMultiset$Builder addAll(java.lang.Iterable):0 -> addAll
    2:2:com.google.common.collect.ImmutableMultiset$Builder addAll(java.lang.Iterable):0:0 -> addAll
com.google.common.collect.ImmutableMultiset$ElementSet -> com.google.common.collect.ce:
    java.util.List entries -> c
    com.google.common.collect.Multiset delegate -> d
    1:1:void com.google.common.collect.ImmutableSet$Indexed.<init>():0:0 -> <init>
    1:1:void <init>(java.util.List,com.google.common.collect.Multiset):0 -> <init>
    2:2:void <init>(java.util.List,com.google.common.collect.Multiset):0:0 -> <init>
    1:1:int com.google.common.collect.ImmutableSet$Indexed.copyIntoArray(java.lang.Object[],int):0:0 -> a
    1:1:int com.google.common.collect.ImmutableSet$Indexed.copyIntoArray(java.lang.Object[],int):0 -> a
    boolean isPartialView() -> e
    1:1:void com.google.common.collect.ImmutableSet$Indexed.forEach(java.util.function.Consumer):0:0 -> forEach
    1:1:void com.google.common.collect.ImmutableSet$Indexed.forEach(java.util.function.Consumer):0 -> forEach
    1:1:com.google.common.collect.ImmutableList com.google.common.collect.ImmutableSet$Indexed.createAsList():0:0 -> i
    1:1:com.google.common.collect.ImmutableList com.google.common.collect.ImmutableSet$Indexed.createAsList():0 -> i
    com.google.common.collect.UnmodifiableIterator com.google.common.collect.ImmutableSet$Indexed.iterator() -> iterator
    java.util.Iterator com.google.common.collect.ImmutableSet$Indexed.iterator() -> iterator
    com.google.common.collect.UnmodifiableIterator com.google.common.collect.ImmutableSet$Indexed.iterator() -> iterator$com$google$common$collect$ImmutableSet$Indexed
    1:1:com.google.common.collect.UnmodifiableIterator com.google.common.collect.ImmutableSet$Indexed.iterator():0:0 -> iterator$com$google$common$collect$ImmutableSet$Indexed
    1:1:java.util.Iterator com.google.common.collect.ImmutableSet$Indexed.iterator():0 -> iterator$com$google$common$collect$ImmutableSet$Indexed
    java.util.Spliterator com.google.common.collect.ImmutableSet$Indexed.spliterator() -> spliterator
    java.util.Spliterator com.google.common.collect.ImmutableSet$Indexed.spliterator() -> spliterator$com$google$common$collect$ImmutableSet$Indexed
com.google.common.collect.ImmutableMultiset$EntrySet -> com.google.common.collect.de:
    com.google.common.collect.ImmutableMultiset this$0 -> c
    1:1:void <init>(com.google.common.collect.ImmutableMultiset):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.ImmutableMultiset,com.google.common.collect.ImmutableMultiset$1):0 -> <init>
    boolean isPartialView() -> e
    1:1:com.google.common.collect.Multiset$Entry get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
com.google.common.collect.ImmutableRangeMap -> com.google.common.collect.ImmutableRangeMap:
    com.google.common.collect.ImmutableList ranges -> a
    com.google.common.collect.ImmutableList values -> b
    com.google.common.collect.ImmutableRangeMap EMPTY -> c
    com.google.common.collect.ImmutableList access$000(com.google.common.collect.ImmutableRangeMap) -> a
    1:1:com.google.common.collect.Ordering com.google.common.collect.Range.rangeLexOrdering():0:0 -> asDescendingMapOfRanges
    1:1:com.google.common.collect.ImmutableMap asDescendingMapOfRanges():0 -> asDescendingMapOfRanges
    2:2:com.google.common.collect.ImmutableMap asDescendingMapOfRanges():0:0 -> asDescendingMapOfRanges
    1:1:com.google.common.collect.Ordering com.google.common.collect.Range.rangeLexOrdering():0:0 -> asMapOfRanges
    1:1:com.google.common.collect.ImmutableMap asMapOfRanges():0 -> asMapOfRanges
    2:2:com.google.common.collect.ImmutableMap asMapOfRanges():0:0 -> asMapOfRanges
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.belowValue(java.lang.Comparable):0:0 -> get
    1:1:java.lang.Object get(java.lang.Comparable):0 -> get
    2:2:java.lang.Object get(java.lang.Comparable):0:0 -> get
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.belowValue(java.lang.Comparable):0:0 -> getEntry
    1:1:java.util.Map$Entry getEntry(java.lang.Comparable):0 -> getEntry
    2:2:java.util.Map$Entry getEntry(java.lang.Comparable):0:0 -> getEntry
    1:1:java.util.stream.Collector com.google.common.collect.CollectCollectors.toImmutableRangeMap(java.util.function.Function,java.util.function.Function):0:0 -> toImmutableRangeMap
    1:1:java.util.stream.Collector toImmutableRangeMap(java.util.function.Function,java.util.function.Function):0 -> toImmutableRangeMap
com.google.common.collect.ImmutableRangeMap$1 -> com.google.common.collect.ee:
    int val$len -> b
    com.google.common.collect.Range val$range -> d
    int val$off -> c
    com.google.common.collect.ImmutableRangeMap this$0 -> e
    boolean isPartialView() -> e
    1:1:com.google.common.collect.Range get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
com.google.common.collect.ImmutableRangeMap$2 -> com.google.common.collect.fe:
    com.google.common.collect.Range val$range -> d
    com.google.common.collect.ImmutableRangeMap val$outer -> e
com.google.common.collect.ImmutableRangeMap$Builder -> com.google.common.collect.ImmutableRangeMap$Builder:
    java.util.List entries -> a
    com.google.common.collect.ImmutableRangeMap$Builder combine(com.google.common.collect.ImmutableRangeMap$Builder) -> a
    1:1:com.google.common.collect.Ordering com.google.common.collect.Range.rangeLexOrdering():0:0 -> build
    1:1:com.google.common.collect.ImmutableRangeMap build():0 -> build
    2:2:com.google.common.collect.ImmutableRangeMap build():0:0 -> build
com.google.common.collect.ImmutableRangeSet -> com.google.common.collect.ImmutableRangeSet:
    com.google.common.collect.ImmutableList ranges -> a
    com.google.common.collect.ImmutableRangeSet complement -> b
    com.google.common.collect.ImmutableRangeSet EMPTY -> c
    com.google.common.collect.ImmutableRangeSet ALL -> d
    com.google.common.collect.ImmutableList access$000(com.google.common.collect.ImmutableRangeSet) -> a
    1:1:com.google.common.collect.Ordering com.google.common.collect.Range.rangeLexOrdering():0:0 -> asDescendingSetOfRanges
    1:1:com.google.common.collect.ImmutableSet asDescendingSetOfRanges():0 -> asDescendingSetOfRanges
    2:2:com.google.common.collect.ImmutableSet asDescendingSetOfRanges():0:0 -> asDescendingSetOfRanges
    1:1:com.google.common.collect.Ordering com.google.common.collect.Range.rangeLexOrdering():0:0 -> asRanges
    1:1:com.google.common.collect.ImmutableSet asRanges():0 -> asRanges
    2:2:com.google.common.collect.ImmutableSet asRanges():0:0 -> asRanges
    com.google.common.collect.ImmutableRangeSet all() -> b
    1:1:com.google.common.collect.ImmutableRangeSet all():0:0 -> complement
    1:1:com.google.common.collect.ImmutableRangeSet complement():0 -> complement
    2:2:com.google.common.collect.ImmutableRangeSet complement():0:0 -> complement
    1:1:com.google.common.collect.ImmutableRangeSet all():0:0 -> copyOf
    1:1:com.google.common.collect.ImmutableRangeSet copyOf(com.google.common.collect.RangeSet):0 -> copyOf
    2:2:com.google.common.collect.ImmutableRangeSet copyOf(com.google.common.collect.RangeSet):0:0 -> copyOf
    3:3:boolean isPartialView():0:0 -> copyOf
    3:3:com.google.common.collect.ImmutableRangeSet copyOf(com.google.common.collect.RangeSet):0 -> copyOf
    4:4:com.google.common.collect.ImmutableRangeSet copyOf(com.google.common.collect.RangeSet):0:0 -> copyOf
    1:1:com.google.common.collect.ImmutableRangeSet all():0:0 -> of
    1:1:com.google.common.collect.ImmutableRangeSet of(com.google.common.collect.Range):0 -> of
    2:2:com.google.common.collect.ImmutableRangeSet of(com.google.common.collect.Range):0:0 -> of
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.belowValue(java.lang.Comparable):0:0 -> rangeContaining
    1:1:com.google.common.collect.Range rangeContaining(java.lang.Comparable):0 -> rangeContaining
    2:2:com.google.common.collect.Range rangeContaining(java.lang.Comparable):0:0 -> rangeContaining
    1:1:com.google.common.collect.ImmutableList intersectRanges(com.google.common.collect.Range):0:0 -> subRangeSet
    1:1:com.google.common.collect.ImmutableRangeSet subRangeSet(com.google.common.collect.Range):0 -> subRangeSet
    2:2:com.google.common.collect.ImmutableRangeSet subRangeSet(com.google.common.collect.Range):0:0 -> subRangeSet
com.google.common.collect.ImmutableRangeSet$1 -> com.google.common.collect.ge:
    com.google.common.collect.ImmutableRangeSet this$0 -> e
    int val$length -> b
    com.google.common.collect.Range val$range -> d
    int val$fromIndex -> c
    boolean isPartialView() -> e
    1:1:com.google.common.collect.Range get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
com.google.common.collect.ImmutableRangeSet$AsSet -> com.google.common.collect.je:
    com.google.common.collect.ImmutableRangeSet this$0 -> g
    java.lang.Integer size -> f
    com.google.common.collect.DiscreteDomain domain -> e
    1:1:com.google.common.collect.UnmodifiableIterator descendingIterator():0:0 -> descendingIterator
    1:1:java.util.Iterator descendingIterator():0 -> descendingIterator
    boolean isPartialView() -> e
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> m
    1:1:com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Comparable,boolean):0:0 -> o
    1:1:com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean):0 -> o
    1:1:int com.google.common.collect.Range.compareOrThrow(java.lang.Comparable,java.lang.Comparable):0:0 -> p
    1:1:com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean):0 -> p
    1:1:com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean):0 -> p
    2:2:com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean):0:0 -> p
    2:2:com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean):0 -> p
    1:1:com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Comparable,boolean):0:0 -> q
    1:1:com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean):0 -> q
    com.google.common.collect.DiscreteDomain access$100(com.google.common.collect.ImmutableRangeSet$AsSet) -> r
    com.google.common.collect.ImmutableSortedSet subSet(com.google.common.collect.Range) -> s
com.google.common.collect.ImmutableRangeSet$AsSet$1 -> com.google.common.collect.he:
    java.util.Iterator elemItr -> d
    java.util.Iterator rangeItr -> c
    com.google.common.collect.ImmutableRangeSet$AsSet this$1 -> e
    1:1:com.google.common.collect.UnmodifiableListIterator com.google.common.collect.Iterators.emptyListIterator():0:0 -> <init>
    1:1:com.google.common.collect.UnmodifiableIterator com.google.common.collect.Iterators.emptyIterator():0 -> <init>
    1:1:void <init>(com.google.common.collect.ImmutableRangeSet$AsSet):0 -> <init>
    2:2:void <init>(com.google.common.collect.ImmutableRangeSet$AsSet):0:0 -> <init>
    1:1:java.lang.Comparable computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
com.google.common.collect.ImmutableRangeSet$AsSet$2 -> com.google.common.collect.ie:
    java.util.Iterator elemItr -> d
    java.util.Iterator rangeItr -> c
    com.google.common.collect.ImmutableRangeSet$AsSet this$1 -> e
    1:1:com.google.common.collect.UnmodifiableListIterator com.google.common.collect.Iterators.emptyListIterator():0:0 -> <init>
    1:1:com.google.common.collect.UnmodifiableIterator com.google.common.collect.Iterators.emptyIterator():0 -> <init>
    1:1:void <init>(com.google.common.collect.ImmutableRangeSet$AsSet):0 -> <init>
    2:2:void <init>(com.google.common.collect.ImmutableRangeSet$AsSet):0:0 -> <init>
    1:1:java.lang.Comparable computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
com.google.common.collect.ImmutableRangeSet$Builder -> com.google.common.collect.ImmutableRangeSet$Builder:
    java.util.List ranges -> a
    com.google.common.collect.ImmutableRangeSet$Builder combine(com.google.common.collect.ImmutableRangeSet$Builder) -> a
    1:1:com.google.common.collect.Ordering com.google.common.collect.Range.rangeLexOrdering():0:0 -> build
    1:1:com.google.common.collect.ImmutableRangeSet build():0 -> build
    2:2:com.google.common.collect.ImmutableRangeSet build():0:0 -> build
com.google.common.collect.ImmutableRangeSet$ComplementRanges -> com.google.common.collect.ke:
    com.google.common.collect.ImmutableRangeSet this$0 -> e
    int size -> d
    boolean positiveBoundedBelow -> b
    boolean positiveBoundedAbove -> c
    boolean isPartialView() -> e
    1:1:com.google.common.collect.Range get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
    2:2:com.google.common.collect.Cut com.google.common.collect.Cut.belowAll():0:0 -> get
    2:2:com.google.common.collect.Range get(int):0 -> get
    2:2:java.lang.Object get(int):0 -> get
    3:3:com.google.common.collect.Range get(int):0:0 -> get
    3:3:java.lang.Object get(int):0 -> get
    4:4:com.google.common.collect.Cut com.google.common.collect.Cut.aboveAll():0:0 -> get
    4:4:com.google.common.collect.Range get(int):0 -> get
    4:4:java.lang.Object get(int):0 -> get
    5:5:com.google.common.collect.Range get(int):0:0 -> get
    5:5:java.lang.Object get(int):0 -> get
com.google.common.collect.ImmutableSet -> com.google.common.collect.ImmutableSet:
    com.google.common.collect.ImmutableList asList -> b
    1:1:com.google.common.collect.ImmutableSet copyOfEnumSet(java.util.EnumSet):0:0 -> copyOf
    1:1:com.google.common.collect.ImmutableSet copyOf(java.util.Collection):0 -> copyOf
    2:2:com.google.common.collect.ImmutableSet copyOf(java.util.Collection):0:0 -> copyOf
    3:3:com.google.common.collect.ImmutableSet constructUnknownDuplication(int,java.lang.Object[]):0:0 -> copyOf
    3:3:com.google.common.collect.ImmutableSet copyOf(java.util.Collection):0 -> copyOf
    4:4:com.google.common.collect.ImmutableSet constructUnknownDuplication(int,java.lang.Object[]):0:0 -> copyOf
    4:4:com.google.common.collect.ImmutableSet copyOf(java.lang.Object[]):0 -> copyOf
    5:5:com.google.common.collect.ImmutableSet copyOf(java.lang.Object[]):0:0 -> copyOf
    1:1:int maxRunBeforeFallback(int):0:0 -> f
    1:1:int access$000(int):0 -> f
    int chooseTableSize(int) -> g
    com.google.common.collect.ImmutableSet construct(int,int,java.lang.Object[]) -> h
    com.google.common.collect.ImmutableList createAsList() -> i
    boolean isHashCodeFast() -> j
    java.lang.Object[] rebuildHashTable(int,java.lang.Object[],int) -> k
com.google.common.collect.ImmutableSet$Builder -> com.google.common.collect.ImmutableSet$Builder:
    com.google.common.collect.ImmutableSet$SetBuilderImpl impl -> a
    boolean forceCopy -> b
    1:1:void <init>(int):0:0 -> <init>
    1:1:void <init>():0 -> <init>
    1:1:com.google.common.collect.ImmutableSet$SetBuilderImpl com.google.common.collect.ImmutableSet$SetBuilderImpl.combine(com.google.common.collect.ImmutableSet$SetBuilderImpl):0:0 -> b
    1:1:com.google.common.collect.ImmutableSet$Builder combine(com.google.common.collect.ImmutableSet$Builder):0 -> b
    2:2:com.google.common.collect.ImmutableSet$Builder combine(com.google.common.collect.ImmutableSet$Builder):0:0 -> b
    void copy() -> c
    void copyIfNecessary() -> d
com.google.common.collect.ImmutableSet$Indexed$1 -> com.google.common.collect.le:
    com.google.common.collect.ImmutableSet$Indexed this$0 -> b
    1:1:com.google.common.collect.ImmutableSet$Indexed delegateCollection():0:0 -> j
    1:1:com.google.common.collect.ImmutableCollection delegateCollection():0 -> j
com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl -> com.google.common.collect.me:
    java.util.Set delegate -> c
    com.google.common.collect.ImmutableSet$SetBuilderImpl add(java.lang.Object) -> a
    com.google.common.collect.ImmutableSet build() -> c
    com.google.common.collect.ImmutableSet$SetBuilderImpl copy() -> d
com.google.common.collect.ImmutableSet$RegularSetBuilderImpl -> com.google.common.collect.ne:
    java.lang.Object[] hashTable -> c
    int hashCode -> f
    int maxRunBeforeFallback -> d
    int expandTableThreshold -> e
    1:1:void ensureTableCapacity(int):0:0 -> a
    1:1:com.google.common.collect.ImmutableSet$SetBuilderImpl add(java.lang.Object):0 -> a
    2:2:com.google.common.collect.ImmutableSet$SetBuilderImpl add(java.lang.Object):0:0 -> a
    com.google.common.collect.ImmutableSet build() -> c
    com.google.common.collect.ImmutableSet$SetBuilderImpl copy() -> d
    1:1:boolean com.google.common.collect.ImmutableSet.hashFloodingDetected(java.lang.Object[]):0:0 -> e
    1:1:com.google.common.collect.ImmutableSet$SetBuilderImpl review():0 -> e
    2:2:int com.google.common.collect.ImmutableSet.maxRunBeforeFallback(int):0:0 -> e
    2:2:boolean com.google.common.collect.ImmutableSet.hashFloodingDetected(java.lang.Object[]):0 -> e
    2:2:com.google.common.collect.ImmutableSet$SetBuilderImpl review():0 -> e
    3:3:boolean com.google.common.collect.ImmutableSet.hashFloodingDetected(java.lang.Object[]):0:0 -> e
    3:3:com.google.common.collect.ImmutableSet$SetBuilderImpl review():0 -> e
    4:4:com.google.common.collect.ImmutableSet$SetBuilderImpl review():0:0 -> e
com.google.common.collect.ImmutableSet$SetBuilderImpl -> com.google.common.collect.oe:
    java.lang.Object[] dedupedElements -> a
    int distinct -> b
    com.google.common.collect.ImmutableSet$SetBuilderImpl add(java.lang.Object) -> a
    1:1:void ensureCapacity(int):0:0 -> b
    1:1:void addDedupedElement(java.lang.Object):0 -> b
    2:2:void addDedupedElement(java.lang.Object):0:0 -> b
    com.google.common.collect.ImmutableSet build() -> c
    com.google.common.collect.ImmutableSet$SetBuilderImpl copy() -> d
    com.google.common.collect.ImmutableSet$SetBuilderImpl review() -> e
com.google.common.collect.ImmutableSetMultimap -> com.google.common.collect.ImmutableSetMultimap:
    com.google.common.collect.ImmutableSetMultimap inverse -> i
    com.google.common.collect.ImmutableSet entries -> j
    com.google.common.collect.ImmutableSet emptySet -> h
    1:1:com.google.common.collect.ImmutableSet emptySet(java.util.Comparator):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.ImmutableMap,int,java.util.Comparator):0 -> <init>
    2:2:void <init>(com.google.common.collect.ImmutableMap,int,java.util.Comparator):0:0 -> <init>
    1:1:com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator):0:0 -> copyOf
    1:1:com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap):0 -> copyOf
    1:1:java.util.stream.Collector com.google.common.collect.CollectCollectors.flatteningToImmutableSetMultimap(java.util.function.Function,java.util.function.Function):0:0 -> flatteningToImmutableSetMultimap
    1:1:java.util.stream.Collector flatteningToImmutableSetMultimap(java.util.function.Function,java.util.function.Function):0 -> flatteningToImmutableSetMultimap
    1:1:com.google.common.collect.ImmutableSetMultimap invert():0:0 -> inverse
    1:1:com.google.common.collect.ImmutableSetMultimap inverse():0 -> inverse
    2:2:com.google.common.collect.ImmutableSetMultimap inverse():0:0 -> inverse
    1:1:com.google.common.collect.ImmutableSet valueSet(java.util.Comparator,java.util.Collection):0:0 -> l
    1:1:com.google.common.collect.ImmutableSetMultimap fromMapEntries(java.util.Collection,java.util.Comparator):0 -> l
    2:2:com.google.common.collect.ImmutableSetMultimap fromMapEntries(java.util.Collection,java.util.Comparator):0:0 -> l
    1:1:java.util.stream.Collector com.google.common.collect.CollectCollectors.toImmutableSetMultimap(java.util.function.Function,java.util.function.Function):0:0 -> toImmutableSetMultimap
    1:1:java.util.stream.Collector toImmutableSetMultimap(java.util.function.Function,java.util.function.Function):0 -> toImmutableSetMultimap
com.google.common.collect.ImmutableSetMultimap$Builder -> com.google.common.collect.ImmutableSetMultimap$Builder:
    1:1:java.util.Set com.google.common.collect.Platform.preservesInsertionOrderOnAddsSet():0:0 -> b
    1:1:java.util.Collection newMutableValueCollection():0 -> b
com.google.common.collect.ImmutableSetMultimap$EntrySet -> com.google.common.collect.pe:
    com.google.common.collect.ImmutableSetMultimap multimap -> c
    boolean isPartialView() -> e
    1:1:com.google.common.collect.UnmodifiableIterator com.google.common.collect.ImmutableMultimap.entryIterator():0:0 -> iterator
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0 -> iterator
com.google.common.collect.ImmutableSortedAsList -> com.google.common.collect.qe:
    1:1:com.google.common.collect.ImmutableList com.google.common.collect.ImmutableList.subListUnchecked(int,int):0:0 -> i
    1:1:com.google.common.collect.ImmutableList subListUnchecked(int,int):0 -> i
    2:2:com.google.common.collect.ImmutableList subListUnchecked(int,int):0:0 -> i
    com.google.common.collect.ImmutableCollection delegateCollection() -> j
    com.google.common.collect.ImmutableSortedSet delegateCollection() -> l
com.google.common.collect.ImmutableSortedMap -> com.google.common.collect.ImmutableSortedMap:
    com.google.common.collect.ImmutableSortedMap NATURAL_EMPTY_MAP -> j
    com.google.common.collect.RegularImmutableSortedSet keySet -> f
    com.google.common.collect.ImmutableSortedMap descendingMap -> h
    java.util.Comparator NATURAL_ORDER -> i
    com.google.common.collect.ImmutableList valueList -> g
    1:1:void <init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSortedMap):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList):0 -> <init>
    com.google.common.collect.ImmutableSet createEntrySet() -> c
    com.google.common.collect.ImmutableSet createKeySet() -> d
    com.google.common.collect.ImmutableCollection createValues() -> e
    boolean isPartialView() -> h
    com.google.common.collect.ImmutableSortedMap access$000(java.util.Comparator,java.lang.Object,java.lang.Object) -> k
    com.google.common.collect.ImmutableSortedMap access$100(java.util.Comparator,boolean,java.util.Map$Entry[],int) -> l
    com.google.common.collect.RegularImmutableSortedSet access$200(com.google.common.collect.ImmutableSortedMap) -> m
    com.google.common.collect.ImmutableList access$300(com.google.common.collect.ImmutableSortedMap) -> n
    com.google.common.collect.ImmutableSortedMap copyOfInternal(java.util.Map,java.util.Comparator) -> o
    com.google.common.collect.ImmutableSortedMap emptyMap(java.util.Comparator) -> p
    com.google.common.collect.ImmutableSortedMap fromEntries(java.util.Comparator,boolean,java.lang.Iterable) -> q
    com.google.common.collect.ImmutableSortedMap fromEntries(java.util.Comparator,boolean,java.util.Map$Entry[],int) -> r
    com.google.common.collect.ImmutableSortedMap getSubMap(int,int) -> s
    com.google.common.collect.ImmutableSortedMap of(java.util.Comparator,java.lang.Object,java.lang.Object) -> t
    1:1:java.util.stream.Collector com.google.common.collect.CollectCollectors.toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function):0:0 -> toImmutableSortedMap
    1:1:java.util.stream.Collector toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function):0 -> toImmutableSortedMap
    2:2:java.util.stream.Collector com.google.common.collect.CollectCollectors.toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator):0:0 -> toImmutableSortedMap
    2:2:java.util.stream.Collector toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator):0 -> toImmutableSortedMap
    com.google.common.collect.ImmutableSortedMap ofEntries(java.util.Map$Entry[]) -> u
com.google.common.collect.ImmutableSortedMap$1 -> com.google.common.collect.re:
    java.util.Comparator val$comparator -> a
    1:1:int compare(java.util.Map$Entry,java.util.Map$Entry):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
com.google.common.collect.ImmutableSortedMap$1EntrySet -> com.google.common.collect.te:
    com.google.common.collect.ImmutableSortedMap this$0 -> c
    com.google.common.collect.ImmutableList createAsList() -> i
    com.google.common.collect.ImmutableMap map() -> l
com.google.common.collect.ImmutableSortedMap$1EntrySet$1 -> com.google.common.collect.se:
    com.google.common.collect.ImmutableSortedMap$1EntrySet this$1 -> b
    com.google.common.collect.ImmutableCollection delegateCollection() -> j
com.google.common.collect.ImmutableSortedMap$Builder -> com.google.common.collect.ImmutableSortedMap$Builder:
    java.util.Comparator comparator -> e
    1:1:com.google.common.collect.ImmutableSortedMap$Builder combine(com.google.common.collect.ImmutableMap$Builder):0:0 -> a
    1:1:com.google.common.collect.ImmutableMap$Builder combine(com.google.common.collect.ImmutableMap$Builder):0 -> a
    com.google.common.collect.ImmutableSortedMap$Builder combine(com.google.common.collect.ImmutableMap$Builder) -> c
com.google.common.collect.ImmutableSortedMapFauxverideShim -> com.google.common.collect.ue:
com.google.common.collect.ImmutableSortedMultiset -> com.google.common.collect.ImmutableSortedMultiset:
    com.google.common.collect.ImmutableSortedMultiset descendingMultiset -> e
    int $r8$clinit -> f
    com.google.common.collect.ImmutableSortedMultiset copyOfSortedEntries(java.util.Comparator,java.util.Collection) -> i
    com.google.common.collect.ImmutableSortedMultiset emptyMultiset(java.util.Comparator) -> j
    com.google.common.collect.ImmutableSortedMultiset lambda$toImmutableSortedMultiset$4(java.util.Comparator,com.google.common.collect.Multiset) -> k
com.google.common.collect.ImmutableSortedMultisetFauxverideShim -> com.google.common.collect.ve:
com.google.common.collect.ImmutableSortedSet -> com.google.common.collect.ImmutableSortedSet:
    java.util.Comparator comparator -> c
    com.google.common.collect.ImmutableSortedSet descendingSet -> d
    1:1:java.util.Comparator com.google.common.collect.SortedIterables.comparator(java.util.SortedSet):0:0 -> copyOfSorted
    1:1:com.google.common.collect.ImmutableSortedSet copyOfSorted(java.util.SortedSet):0 -> copyOfSorted
    2:2:com.google.common.collect.ImmutableSortedSet copyOfSorted(java.util.SortedSet):0:0 -> copyOfSorted
    com.google.common.collect.ImmutableSortedSet construct(java.util.Comparator,int,java.lang.Object[]) -> l
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> m
    com.google.common.collect.RegularImmutableSortedSet emptySet(java.util.Comparator) -> n
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> o
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> p
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> q
    1:1:java.util.stream.Collector com.google.common.collect.CollectCollectors.toImmutableSortedSet(java.util.Comparator):0:0 -> toImmutableSortedSet
    1:1:java.util.stream.Collector toImmutableSortedSet(java.util.Comparator):0 -> toImmutableSortedSet
com.google.common.collect.ImmutableSortedSet$1 -> com.google.common.collect.we:
    com.google.common.collect.ImmutableSortedSet this$0 -> b
    com.google.common.collect.UnmodifiableIterator iterator -> a
com.google.common.collect.ImmutableSortedSet$Builder -> com.google.common.collect.ImmutableSortedSet$Builder:
    java.lang.Object[] elements -> d
    java.util.Comparator comparator -> c
    int n -> e
    1:1:java.lang.Object[] com.google.common.collect.ObjectArrays.checkElementsNotNull(java.lang.Object[]):0:0 -> add
    1:1:com.google.common.collect.ImmutableSortedSet$Builder add(java.lang.Object[]):0 -> add
    2:2:com.google.common.collect.ImmutableSortedSet$Builder add(java.lang.Object[]):0:0 -> add
    com.google.common.collect.ImmutableSet$Builder combine(com.google.common.collect.ImmutableSet$Builder) -> b
    void copy() -> c
    com.google.common.collect.ImmutableSortedSet$Builder combine(com.google.common.collect.ImmutableSet$Builder) -> e
    void sortAndDedup() -> f
com.google.common.collect.ImmutableSortedSetFauxverideShim -> com.google.common.collect.xe:
com.google.common.collect.ImmutableTable -> com.google.common.collect.ImmutableTable:
    1:1:com.google.common.collect.UnmodifiableIterator cellIterator():0:0 -> a
    1:1:java.util.Iterator cellIterator():0 -> a
    java.util.Spliterator cellSpliterator() -> b
    java.util.Set createCellSet() -> c
    java.util.Collection createValues() -> d
    java.util.Iterator valuesIterator() -> e
    com.google.common.collect.Table$Cell cellOf(java.lang.Object,java.lang.Object,java.lang.Object) -> g
    com.google.common.collect.ImmutableTable copyOf(java.lang.Iterable) -> h
    com.google.common.collect.ImmutableSet createCellSet() -> i
    com.google.common.collect.ImmutableCollection createValues() -> j
    1:1:java.util.stream.Collector com.google.common.collect.TableCollectors.toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function):0:0 -> toImmutableTable
    1:1:java.util.stream.Collector toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function):0 -> toImmutableTable
    2:2:java.util.stream.Collector com.google.common.collect.TableCollectors.toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator):0:0 -> toImmutableTable
    2:2:java.util.stream.Collector toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator):0 -> toImmutableTable
com.google.common.collect.ImmutableTable$Builder -> com.google.common.collect.ImmutableTable$Builder:
    java.util.List cells -> a
    java.util.Comparator columnComparator -> c
    java.util.Comparator rowComparator -> b
    com.google.common.collect.ImmutableTable$Builder combine(com.google.common.collect.ImmutableTable$Builder) -> a
    1:1:com.google.common.collect.RegularImmutableTable com.google.common.collect.RegularImmutableTable.forCells(java.util.List,java.util.Comparator,java.util.Comparator):0:0 -> build
    1:1:com.google.common.collect.ImmutableTable build():0 -> build
    2:2:com.google.common.collect.RegularImmutableTable com.google.common.collect.RegularImmutableTable.forCellsInternal(java.lang.Iterable,java.util.Comparator,java.util.Comparator):0:0 -> build
    2:2:com.google.common.collect.RegularImmutableTable com.google.common.collect.RegularImmutableTable.forCells(java.util.List,java.util.Comparator,java.util.Comparator):0 -> build
    2:2:com.google.common.collect.ImmutableTable build():0 -> build
    3:3:com.google.common.collect.RegularImmutableTable com.google.common.collect.RegularImmutableTable.forOrderedComponents(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet):0:0 -> build
    3:3:com.google.common.collect.RegularImmutableTable com.google.common.collect.RegularImmutableTable.forCellsInternal(java.lang.Iterable,java.util.Comparator,java.util.Comparator):0 -> build
    3:3:com.google.common.collect.RegularImmutableTable com.google.common.collect.RegularImmutableTable.forCells(java.util.List,java.util.Comparator,java.util.Comparator):0 -> build
    3:3:com.google.common.collect.ImmutableTable build():0 -> build
    4:4:com.google.common.collect.ImmutableTable build():0:0 -> build
    5:5:void com.google.common.collect.SingletonImmutableTable.<init>(com.google.common.collect.Table$Cell):0:0 -> build
    5:5:com.google.common.collect.ImmutableTable build():0 -> build
    6:6:com.google.common.collect.ImmutableTable build():0:0 -> build
com.google.common.collect.IndexedImmutableSet -> com.google.common.collect.ze:
    int copyIntoArray(java.lang.Object[],int) -> a
    com.google.common.collect.ImmutableList createAsList() -> i
com.google.common.collect.IndexedImmutableSet$1 -> com.google.common.collect.ye:
    com.google.common.collect.IndexedImmutableSet this$0 -> b
    boolean isPartialView() -> e
    com.google.common.collect.ImmutableCollection delegateCollection() -> j
com.google.common.collect.Interners$1 -> com.google.common.collect.af:
com.google.common.collect.Interners$InternerBuilder -> com.google.common.collect.Interners$InternerBuilder:
    com.google.common.collect.MapMaker mapMaker -> a
    boolean strong -> b
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.collect.Interners$1):0 -> <init>
com.google.common.collect.Interners$InternerFunction -> com.google.common.collect.bf:
    com.google.common.collect.Interner interner -> a
com.google.common.collect.Interners$InternerImpl -> com.google.common.collect.cf:
    com.google.common.collect.MapMakerInternalMap map -> a
    1:1:void <init>(com.google.common.collect.MapMaker):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.MapMaker,com.google.common.collect.Interners$1):0 -> <init>
    2:2:com.google.common.collect.MapMaker com.google.common.collect.MapMaker.keyEquivalence(com.google.common.base.Equivalence):0:0 -> <init>
    2:2:void <init>(com.google.common.collect.MapMaker):0 -> <init>
    2:2:void <init>(com.google.common.collect.MapMaker,com.google.common.collect.Interners$1):0 -> <init>
    3:3:void <init>(com.google.common.collect.MapMaker):0:0 -> <init>
    3:3:void <init>(com.google.common.collect.MapMaker,com.google.common.collect.Interners$1):0 -> <init>
    1:1:com.google.common.collect.MapMakerInternalMap$InternalEntry com.google.common.collect.MapMakerInternalMap.getEntry(java.lang.Object):0:0 -> intern
    1:1:java.lang.Object intern(java.lang.Object):0 -> intern
    2:2:java.lang.Object intern(java.lang.Object):0:0 -> intern
com.google.common.collect.Iterables -> com.google.common.collect.Iterables:
    java.lang.Object removeFirstMatching(java.lang.Iterable,com.google.common.base.Predicate) -> a
    1:1:java.util.Collection castOrCopyToCollection(java.lang.Iterable):0:0 -> b
    1:1:java.lang.Object[] toArray(java.lang.Iterable):0 -> b
    2:2:java.lang.Object[] toArray(java.lang.Iterable):0:0 -> b
    1:1:java.util.Collection castOrCopyToCollection(java.lang.Iterable):0:0 -> c
    1:1:java.lang.Object[] toArray(java.lang.Iterable,java.lang.Object[]):0 -> c
    2:2:java.lang.Object[] toArray(java.lang.Iterable,java.lang.Object[]):0:0 -> c
    1:1:java.util.List com.google.common.collect.Lists.cast(java.lang.Iterable):0:0 -> get
    1:1:java.lang.Object get(java.lang.Iterable,int,java.lang.Object):0 -> get
    2:2:java.lang.Object get(java.lang.Iterable,int,java.lang.Object):0:0 -> get
    1:1:java.lang.Object getLastInNonemptyList(java.util.List):0:0 -> getLast
    1:1:java.lang.Object getLast(java.lang.Iterable):0 -> getLast
    2:2:java.lang.Object getLast(java.lang.Iterable):0:0 -> getLast
    3:3:java.util.List com.google.common.collect.Lists.cast(java.lang.Iterable):0:0 -> getLast
    3:3:java.lang.Object getLast(java.lang.Iterable,java.lang.Object):0 -> getLast
    4:4:java.lang.Object getLastInNonemptyList(java.util.List):0:0 -> getLast
    4:4:java.lang.Object getLast(java.lang.Iterable,java.lang.Object):0 -> getLast
    5:5:java.lang.Object getLast(java.lang.Iterable,java.lang.Object):0:0 -> getLast
com.google.common.collect.Iterables$1 -> com.google.common.collect.ef:
    java.lang.Iterable val$iterable -> b
com.google.common.collect.Iterables$10 -> com.google.common.collect.df:
    1:1:java.util.Iterator apply(java.lang.Iterable):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.Iterables$2 -> com.google.common.collect.ff:
    java.lang.Iterable val$iterable -> b
    int val$size -> c
com.google.common.collect.Iterables$3 -> com.google.common.collect.gf:
    java.lang.Iterable val$iterable -> b
    int val$size -> c
com.google.common.collect.Iterables$4 -> com.google.common.collect.hf:
    com.google.common.base.Predicate val$retainIfTrue -> c
    java.lang.Iterable val$unfiltered -> b
com.google.common.collect.Iterables$5 -> com.google.common.collect.if:
    java.lang.Iterable val$fromIterable -> b
    com.google.common.base.Function val$function -> c
com.google.common.collect.Iterables$6 -> com.google.common.collect.kf:
    java.lang.Iterable val$iterable -> b
    int val$numberToSkip -> c
com.google.common.collect.Iterables$6$1 -> com.google.common.collect.jf:
    java.util.Iterator val$iterator -> b
    boolean atStart -> a
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
com.google.common.collect.Iterables$7 -> com.google.common.collect.lf:
    java.lang.Iterable val$iterable -> b
    int val$limitSize -> c
com.google.common.collect.Iterables$8 -> com.google.common.collect.mf:
    java.lang.Iterable val$iterable -> b
com.google.common.collect.Iterables$9 -> com.google.common.collect.nf:
    java.util.Comparator val$comparator -> c
    java.lang.Iterable val$iterables -> b
    1:1:com.google.common.base.Function com.google.common.collect.Iterables.toIterator():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
    2:2:java.util.Iterator iterator():0:0 -> iterator
com.google.common.collect.Iterables$UnmodifiableIterable -> com.google.common.collect.of:
    java.lang.Iterable iterable -> b
    1:1:void <init>(java.lang.Iterable):0:0 -> <init>
    1:1:void <init>(java.lang.Iterable,com.google.common.collect.Iterables$1):0 -> <init>
com.google.common.collect.Iterators -> com.google.common.collect.Iterators:
    void checkNonnegative(int) -> a
    void clear(java.util.Iterator) -> b
    1:1:com.google.common.collect.UnmodifiableListIterator emptyListIterator():0:0 -> c
    1:1:com.google.common.collect.UnmodifiableListIterator forArray(java.lang.Object[],int,int,int):0 -> c
    2:2:com.google.common.collect.UnmodifiableListIterator forArray(java.lang.Object[],int,int,int):0:0 -> c
    1:1:java.util.Iterator consumingForArray(java.lang.Object[]):0:0 -> concat
    1:1:java.util.Iterator concat(java.util.Iterator,java.util.Iterator):0 -> concat
    2:2:java.util.Iterator concat(java.util.Iterator,java.util.Iterator):0:0 -> concat
    3:3:java.util.Iterator consumingForArray(java.lang.Object[]):0:0 -> concat
    3:3:java.util.Iterator concat(java.util.Iterator,java.util.Iterator,java.util.Iterator):0 -> concat
    4:4:java.util.Iterator concat(java.util.Iterator,java.util.Iterator,java.util.Iterator):0:0 -> concat
    5:5:java.util.Iterator consumingForArray(java.lang.Object[]):0:0 -> concat
    5:5:java.util.Iterator concat(java.util.Iterator,java.util.Iterator,java.util.Iterator,java.util.Iterator):0 -> concat
    6:6:java.util.Iterator concat(java.util.Iterator,java.util.Iterator,java.util.Iterator,java.util.Iterator):0:0 -> concat
    7:7:java.util.Iterator concatNoDefensiveCopy(java.util.Iterator[]):0:0 -> concat
    7:7:java.util.Iterator concat(java.util.Iterator[]):0 -> concat
    8:8:java.util.Iterator consumingForArray(java.lang.Object[]):0:0 -> concat
    8:8:java.util.Iterator concatNoDefensiveCopy(java.util.Iterator[]):0 -> concat
    8:8:java.util.Iterator concat(java.util.Iterator[]):0 -> concat
    9:9:java.util.Iterator concatNoDefensiveCopy(java.util.Iterator[]):0:0 -> concat
    9:9:java.util.Iterator concat(java.util.Iterator[]):0 -> concat
    java.lang.Object pollNext(java.util.Iterator) -> d
    1:1:com.google.common.collect.UnmodifiableIterator partitionImpl(java.util.Iterator,int,boolean):0:0 -> paddedPartition
    1:1:com.google.common.collect.UnmodifiableIterator paddedPartition(java.util.Iterator,int):0 -> paddedPartition
    1:1:com.google.common.collect.UnmodifiableIterator partitionImpl(java.util.Iterator,int,boolean):0:0 -> partition
    1:1:com.google.common.collect.UnmodifiableIterator partition(java.util.Iterator,int):0 -> partition
com.google.common.collect.Iterators$1 -> com.google.common.collect.rf:
    java.util.Iterator val$iterator -> a
com.google.common.collect.Iterators$10 -> com.google.common.collect.pf:
    java.util.Enumeration val$enumeration -> a
com.google.common.collect.Iterators$11 -> com.google.common.collect.qf:
    java.util.Iterator val$iterator -> a
com.google.common.collect.Iterators$2 -> com.google.common.collect.sf:
    java.util.Iterator iterator -> a
    java.lang.Iterable val$iterable -> b
com.google.common.collect.Iterators$3 -> com.google.common.collect.tf:
    java.lang.Object[] val$elements -> b
    int index -> a
com.google.common.collect.Iterators$4 -> com.google.common.collect.uf:
    java.util.Iterator val$iterator -> a
    int val$size -> b
    boolean val$pad -> c
    1:1:java.util.List next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
com.google.common.collect.Iterators$5 -> com.google.common.collect.vf:
    java.util.Iterator val$unfiltered -> c
    com.google.common.base.Predicate val$retainIfTrue -> d
com.google.common.collect.Iterators$6 -> com.google.common.collect.wf:
    com.google.common.base.Function val$function -> b
    java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.Iterators$7 -> com.google.common.collect.xf:
    java.util.Iterator val$iterator -> c
    int val$limitSize -> b
    int count -> a
com.google.common.collect.Iterators$8 -> com.google.common.collect.yf:
    java.util.Iterator val$iterator -> a
com.google.common.collect.Iterators$9 -> com.google.common.collect.zf:
    java.lang.Object val$value -> b
    boolean done -> a
com.google.common.collect.Iterators$ArrayItr -> com.google.common.collect.ag:
    java.lang.Object[] array -> c
    int offset -> d
    com.google.common.collect.UnmodifiableListIterator EMPTY -> e
com.google.common.collect.Iterators$ConcatenatedIterator -> com.google.common.collect.bg:
    java.util.Deque metaIterators -> d
    java.util.Iterator topMetaIterator -> c
    java.util.Iterator iterator -> b
    java.util.Iterator toRemove -> a
    1:1:com.google.common.collect.UnmodifiableListIterator com.google.common.collect.Iterators.emptyListIterator():0:0 -> <init>
    1:1:com.google.common.collect.UnmodifiableIterator com.google.common.collect.Iterators.emptyIterator():0 -> <init>
    1:1:void <init>(java.util.Iterator):0 -> <init>
    2:2:void <init>(java.util.Iterator):0:0 -> <init>
    1:1:java.util.Iterator getTopMetaIterator():0:0 -> hasNext
    1:1:boolean hasNext():0 -> hasNext
    2:2:boolean hasNext():0:0 -> hasNext
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
com.google.common.collect.Iterators$EmptyModifiableIterator -> com.google.common.collect.cg:
    com.google.common.collect.Iterators$EmptyModifiableIterator[] $VALUES -> b
    com.google.common.collect.Iterators$EmptyModifiableIterator INSTANCE -> a
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
com.google.common.collect.Iterators$MergingIterator -> com.google.common.collect.eg:
    java.util.Queue queue -> a
com.google.common.collect.Iterators$MergingIterator$1 -> com.google.common.collect.dg:
    java.util.Comparator val$itemComparator -> a
    1:1:int compare(com.google.common.collect.PeekingIterator,com.google.common.collect.PeekingIterator):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
com.google.common.collect.Iterators$PeekingImpl -> com.google.common.collect.fg:
    java.util.Iterator iterator -> a
    java.lang.Object peekedElement -> c
    boolean hasPeeked -> b
com.google.common.collect.JdkBackedImmutableBiMap -> com.google.common.collect.ig:
    com.google.common.collect.ImmutableList entries -> f
    java.util.Map forwardDelegate -> g
    java.util.Map backwardDelegate -> h
    com.google.common.collect.JdkBackedImmutableBiMap inverse -> i
    com.google.common.collect.ImmutableSet createEntrySet() -> c
    com.google.common.collect.ImmutableSet createKeySet() -> d
    boolean isPartialView() -> h
    com.google.common.collect.ImmutableList access$100(com.google.common.collect.JdkBackedImmutableBiMap) -> k
    1:1:com.google.common.collect.ImmutableMapEntry com.google.common.collect.RegularImmutableMap.makeImmutable(java.util.Map$Entry):0:0 -> l
    1:1:com.google.common.collect.ImmutableBiMap create(int,java.util.Map$Entry[]):0 -> l
    2:2:com.google.common.collect.ImmutableBiMap create(int,java.util.Map$Entry[]):0:0 -> l
    3:3:java.lang.Object com.google.common.collect.ImmutableEntry.getKey():0:0 -> l
    3:3:com.google.common.collect.ImmutableBiMap create(int,java.util.Map$Entry[]):0 -> l
    4:4:java.lang.Object com.google.common.collect.ImmutableEntry.getValue():0:0 -> l
    4:4:com.google.common.collect.ImmutableBiMap create(int,java.util.Map$Entry[]):0 -> l
    5:5:com.google.common.collect.ImmutableBiMap create(int,java.util.Map$Entry[]):0:0 -> l
    6:6:java.lang.Object com.google.common.collect.ImmutableEntry.getValue():0:0 -> l
    6:6:com.google.common.collect.ImmutableBiMap create(int,java.util.Map$Entry[]):0 -> l
    7:7:java.lang.Object com.google.common.collect.ImmutableEntry.getKey():0:0 -> l
    7:7:com.google.common.collect.ImmutableBiMap create(int,java.util.Map$Entry[]):0 -> l
    8:8:com.google.common.collect.ImmutableBiMap create(int,java.util.Map$Entry[]):0:0 -> l
    9:9:java.lang.Object com.google.common.collect.ImmutableEntry.getValue():0:0 -> l
    9:9:com.google.common.collect.ImmutableBiMap create(int,java.util.Map$Entry[]):0 -> l
    10:10:com.google.common.collect.ImmutableBiMap create(int,java.util.Map$Entry[]):0:0 -> l
    11:11:java.lang.Object com.google.common.collect.ImmutableEntry.getKey():0:0 -> l
    11:11:com.google.common.collect.ImmutableBiMap create(int,java.util.Map$Entry[]):0 -> l
    12:12:com.google.common.collect.ImmutableBiMap create(int,java.util.Map$Entry[]):0:0 -> l
com.google.common.collect.JdkBackedImmutableBiMap$1 -> com.google.common.collect.gg:
com.google.common.collect.JdkBackedImmutableBiMap$InverseEntries -> com.google.common.collect.hg:
    com.google.common.collect.JdkBackedImmutableBiMap this$0 -> b
    1:1:void <init>(com.google.common.collect.JdkBackedImmutableBiMap):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.JdkBackedImmutableBiMap,com.google.common.collect.JdkBackedImmutableBiMap$1):0 -> <init>
    boolean isPartialView() -> e
    1:1:java.util.Map$Entry get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
com.google.common.collect.JdkBackedImmutableMap -> com.google.common.collect.jg:
    java.util.Map delegateMap -> f
    com.google.common.collect.ImmutableList entries -> g
    com.google.common.collect.ImmutableSet createEntrySet() -> c
    com.google.common.collect.ImmutableSet createKeySet() -> d
    com.google.common.collect.ImmutableCollection createValues() -> e
    boolean isPartialView() -> h
com.google.common.collect.JdkBackedImmutableMultiset -> com.google.common.collect.kg:
    long size -> g
    com.google.common.collect.ImmutableSet elementSet -> h
    java.util.Map delegateMap -> e
    com.google.common.collect.ImmutableList entries -> f
    boolean isPartialView() -> e
    com.google.common.collect.Multiset$Entry getEntry(int) -> h
    1:1:com.google.common.collect.ImmutableList com.google.common.collect.ImmutableList.asImmutableList(java.lang.Object[]):0:0 -> i
    1:1:com.google.common.collect.ImmutableMultiset create(java.util.Collection):0 -> i
    2:2:com.google.common.collect.ImmutableMultiset create(java.util.Collection):0:0 -> i
com.google.common.collect.JdkBackedImmutableSet -> com.google.common.collect.lg:
    java.util.Set delegate -> c
    com.google.common.collect.ImmutableList delegateList -> d
    boolean isPartialView() -> e
com.google.common.collect.LexicographicalOrdering -> com.google.common.collect.mg:
    java.util.Comparator elementOrder -> a
    1:1:int compare(java.lang.Iterable,java.lang.Iterable):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
com.google.common.collect.LinkedHashMultimap -> com.google.common.collect.LinkedHashMultimap:
    int valueSetCapacity -> h
    com.google.common.collect.LinkedHashMultimap$ValueEntry multimapHeaderEntry -> i
    1:1:java.util.Map com.google.common.collect.Platform.newLinkedHashMapWithExpectedSize(int):0:0 -> <init>
    1:1:void <init>(int,int):0 -> <init>
    2:2:void com.google.common.collect.LinkedHashMultimapGwtSerializationDependencies.<init>(java.util.Map):0:0 -> <init>
    2:2:void <init>(int,int):0 -> <init>
    3:3:void <init>(int,int):0:0 -> <init>
    4:4:void com.google.common.collect.LinkedHashMultimap$ValueEntry.setSuccessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry):0:0 -> <init>
    4:4:void succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> <init>
    4:4:void <init>(int,int):0 -> <init>
    5:5:void com.google.common.collect.LinkedHashMultimap$ValueEntry.setPredecessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry):0:0 -> <init>
    5:5:void succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> <init>
    5:5:void <init>(int,int):0 -> <init>
    1:1:void com.google.common.collect.LinkedHashMultimap$ValueEntry.setSuccessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry):0:0 -> clear
    1:1:void succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> clear
    1:1:void clear():0 -> clear
    2:2:void com.google.common.collect.LinkedHashMultimap$ValueEntry.setPredecessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry):0:0 -> clear
    2:2:void succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> clear
    2:2:void clear():0 -> clear
    1:1:java.util.Set createCollection():0:0 -> createCollection
    1:1:java.util.Collection createCollection():0 -> createCollection
    2:2:java.util.Set com.google.common.collect.Platform.newLinkedHashSetWithExpectedSize(int):0:0 -> createCollection
    2:2:java.util.Set createCollection():0 -> createCollection
    2:2:java.util.Collection createCollection():0 -> createCollection
    java.util.Iterator entryIterator() -> f
    java.util.Spliterator entrySpliterator() -> g
    1:1:java.util.Iterator entryIterator():0:0 -> h
    1:1:java.util.Iterator valueIterator():0 -> h
    2:2:java.util.Iterator com.google.common.collect.Maps.valueIterator(java.util.Iterator):0:0 -> h
    2:2:java.util.Iterator valueIterator():0 -> h
    1:1:java.util.Spliterator entrySpliterator():0:0 -> i
    1:1:java.util.Spliterator valueSpliterator():0 -> i
    2:2:java.util.Spliterator valueSpliterator():0:0 -> i
    java.util.Collection createCollection(java.lang.Object) -> q
    com.google.common.collect.LinkedHashMultimap$ValueEntry access$300(com.google.common.collect.LinkedHashMultimap) -> y
com.google.common.collect.LinkedHashMultimap$1 -> com.google.common.collect.ng:
    com.google.common.collect.LinkedHashMultimap this$0 -> c
    com.google.common.collect.LinkedHashMultimap$ValueEntry nextEntry -> a
    com.google.common.collect.LinkedHashMultimap$ValueEntry toRemove -> b
    1:1:java.util.Map$Entry next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
    3:3:java.lang.Object com.google.common.collect.ImmutableEntry.getKey():0:0 -> remove
    3:3:void remove():0 -> remove
    4:4:java.lang.Object com.google.common.collect.ImmutableEntry.getValue():0:0 -> remove
    4:4:void remove():0 -> remove
    5:5:void remove():0:0 -> remove
com.google.common.collect.LinkedHashMultimap$ValueEntry -> com.google.common.collect.og:
    com.google.common.collect.LinkedHashMultimap$ValueSetLink predecessorInValueSet -> e
    com.google.common.collect.LinkedHashMultimap$ValueSetLink successorInValueSet -> f
    com.google.common.collect.LinkedHashMultimap$ValueEntry nextInValueBucket -> d
    com.google.common.collect.LinkedHashMultimap$ValueEntry predecessorInMultimap -> g
    com.google.common.collect.LinkedHashMultimap$ValueEntry successorInMultimap -> h
    int smearedValueHash -> c
    1:1:java.lang.Object com.google.common.collect.ImmutableEntry.getValue():0:0 -> a
    1:1:boolean matchesValue(java.lang.Object,int):0 -> a
    2:2:boolean matchesValue(java.lang.Object,int):0:0 -> a
com.google.common.collect.LinkedHashMultimap$ValueSet -> com.google.common.collect.qg:
    com.google.common.collect.LinkedHashMultimap$ValueSetLink firstEntry -> e
    com.google.common.collect.LinkedHashMultimap$ValueSetLink lastEntry -> f
    com.google.common.collect.LinkedHashMultimap$ValueEntry[] hashTable -> b
    com.google.common.collect.LinkedHashMultimap this$0 -> g
    int modCount -> d
    java.lang.Object key -> a
    int size -> c
    com.google.common.collect.LinkedHashMultimap$ValueSetLink access$000(com.google.common.collect.LinkedHashMultimap$ValueSet) -> a
    1:1:void com.google.common.collect.LinkedHashMultimap.succeedsInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink,com.google.common.collect.LinkedHashMultimap$ValueSetLink):0:0 -> add
    1:1:void com.google.common.collect.LinkedHashMultimap.access$200(com.google.common.collect.LinkedHashMultimap$ValueSetLink,com.google.common.collect.LinkedHashMultimap$ValueSetLink):0 -> add
    1:1:boolean add(java.lang.Object):0 -> add
    2:2:void com.google.common.collect.LinkedHashMultimap$ValueEntry.setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink):0:0 -> add
    2:2:void com.google.common.collect.LinkedHashMultimap.succeedsInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink,com.google.common.collect.LinkedHashMultimap$ValueSetLink):0 -> add
    2:2:void com.google.common.collect.LinkedHashMultimap.access$200(com.google.common.collect.LinkedHashMultimap$ValueSetLink,com.google.common.collect.LinkedHashMultimap$ValueSetLink):0 -> add
    2:2:boolean add(java.lang.Object):0 -> add
    3:3:void com.google.common.collect.LinkedHashMultimap$ValueEntry.setSuccessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink):0:0 -> add
    3:3:void com.google.common.collect.LinkedHashMultimap.succeedsInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink,com.google.common.collect.LinkedHashMultimap$ValueSetLink):0 -> add
    3:3:void com.google.common.collect.LinkedHashMultimap.access$200(com.google.common.collect.LinkedHashMultimap$ValueSetLink,com.google.common.collect.LinkedHashMultimap$ValueSetLink):0 -> add
    3:3:boolean add(java.lang.Object):0 -> add
    4:4:void setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink):0:0 -> add
    4:4:void com.google.common.collect.LinkedHashMultimap.succeedsInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink,com.google.common.collect.LinkedHashMultimap$ValueSetLink):0 -> add
    4:4:void com.google.common.collect.LinkedHashMultimap.access$200(com.google.common.collect.LinkedHashMultimap$ValueSetLink,com.google.common.collect.LinkedHashMultimap$ValueSetLink):0 -> add
    4:4:boolean add(java.lang.Object):0 -> add
    5:5:boolean add(java.lang.Object):0:0 -> add
    6:6:com.google.common.collect.LinkedHashMultimap$ValueEntry com.google.common.collect.LinkedHashMultimap$ValueEntry.getPredecessorInMultimap():0:0 -> add
    6:6:boolean add(java.lang.Object):0 -> add
    7:7:void com.google.common.collect.LinkedHashMultimap$ValueEntry.setSuccessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry):0:0 -> add
    7:7:void com.google.common.collect.LinkedHashMultimap.succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> add
    7:7:void com.google.common.collect.LinkedHashMultimap.access$400(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> add
    7:7:boolean add(java.lang.Object):0 -> add
    8:8:void com.google.common.collect.LinkedHashMultimap$ValueEntry.setPredecessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry):0:0 -> add
    8:8:void com.google.common.collect.LinkedHashMultimap.succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> add
    8:8:void com.google.common.collect.LinkedHashMultimap.access$400(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> add
    8:8:boolean add(java.lang.Object):0 -> add
    9:9:boolean add(java.lang.Object):0:0 -> add
    10:10:void com.google.common.collect.LinkedHashMultimap$ValueEntry.setSuccessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry):0:0 -> add
    10:10:void com.google.common.collect.LinkedHashMultimap.succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> add
    10:10:void com.google.common.collect.LinkedHashMultimap.access$400(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> add
    10:10:boolean add(java.lang.Object):0 -> add
    11:11:void com.google.common.collect.LinkedHashMultimap$ValueEntry.setPredecessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry):0:0 -> add
    11:11:void com.google.common.collect.LinkedHashMultimap.succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> add
    11:11:void com.google.common.collect.LinkedHashMultimap.access$400(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> add
    11:11:boolean add(java.lang.Object):0 -> add
    12:12:boolean add(java.lang.Object):0:0 -> add
    13:13:void rehashIfNecessary():0:0 -> add
    13:13:boolean add(java.lang.Object):0 -> add
    int access$100(com.google.common.collect.LinkedHashMultimap$ValueSet) -> b
    int mask() -> c
    1:1:com.google.common.collect.LinkedHashMultimap$ValueEntry com.google.common.collect.LinkedHashMultimap$ValueEntry.getPredecessorInMultimap():0:0 -> clear
    1:1:void com.google.common.collect.LinkedHashMultimap.deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> clear
    1:1:void com.google.common.collect.LinkedHashMultimap.access$600(com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> clear
    1:1:void clear():0 -> clear
    2:2:com.google.common.collect.LinkedHashMultimap$ValueEntry com.google.common.collect.LinkedHashMultimap$ValueEntry.getSuccessorInMultimap():0:0 -> clear
    2:2:void com.google.common.collect.LinkedHashMultimap.deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> clear
    2:2:void com.google.common.collect.LinkedHashMultimap.access$600(com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> clear
    2:2:void clear():0 -> clear
    3:3:void com.google.common.collect.LinkedHashMultimap$ValueEntry.setSuccessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry):0:0 -> clear
    3:3:void com.google.common.collect.LinkedHashMultimap.succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> clear
    3:3:void com.google.common.collect.LinkedHashMultimap.deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> clear
    3:3:void com.google.common.collect.LinkedHashMultimap.access$600(com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> clear
    3:3:void clear():0 -> clear
    4:4:void com.google.common.collect.LinkedHashMultimap$ValueEntry.setPredecessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry):0:0 -> clear
    4:4:void com.google.common.collect.LinkedHashMultimap.succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> clear
    4:4:void com.google.common.collect.LinkedHashMultimap.deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> clear
    4:4:void com.google.common.collect.LinkedHashMultimap.access$600(com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> clear
    4:4:void clear():0 -> clear
    5:5:void clear():0:0 -> clear
    6:6:void setSuccessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink):0:0 -> clear
    6:6:void com.google.common.collect.LinkedHashMultimap.succeedsInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink,com.google.common.collect.LinkedHashMultimap$ValueSetLink):0 -> clear
    6:6:void com.google.common.collect.LinkedHashMultimap.access$200(com.google.common.collect.LinkedHashMultimap$ValueSetLink,com.google.common.collect.LinkedHashMultimap$ValueSetLink):0 -> clear
    6:6:void clear():0 -> clear
    7:7:void setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink):0:0 -> clear
    7:7:void com.google.common.collect.LinkedHashMultimap.succeedsInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink,com.google.common.collect.LinkedHashMultimap$ValueSetLink):0 -> clear
    7:7:void com.google.common.collect.LinkedHashMultimap.access$200(com.google.common.collect.LinkedHashMultimap$ValueSetLink,com.google.common.collect.LinkedHashMultimap$ValueSetLink):0 -> clear
    7:7:void clear():0 -> clear
    8:8:void clear():0:0 -> clear
    1:1:java.lang.Object com.google.common.collect.ImmutableEntry.getValue():0:0 -> forEach
    1:1:void forEach(java.util.function.Consumer):0 -> forEach
    2:2:void forEach(java.util.function.Consumer):0:0 -> forEach
    1:1:com.google.common.collect.LinkedHashMultimap$ValueSetLink com.google.common.collect.LinkedHashMultimap$ValueEntry.getPredecessorInValueSet():0:0 -> remove
    1:1:void com.google.common.collect.LinkedHashMultimap.deleteFromValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink):0 -> remove
    1:1:void com.google.common.collect.LinkedHashMultimap.access$500(com.google.common.collect.LinkedHashMultimap$ValueSetLink):0 -> remove
    1:1:boolean remove(java.lang.Object):0 -> remove
    2:2:com.google.common.collect.LinkedHashMultimap$ValueSetLink com.google.common.collect.LinkedHashMultimap$ValueEntry.getSuccessorInValueSet():0:0 -> remove
    2:2:void com.google.common.collect.LinkedHashMultimap.deleteFromValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink):0 -> remove
    2:2:void com.google.common.collect.LinkedHashMultimap.access$500(com.google.common.collect.LinkedHashMultimap$ValueSetLink):0 -> remove
    2:2:boolean remove(java.lang.Object):0 -> remove
    3:3:void com.google.common.collect.LinkedHashMultimap.succeedsInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink,com.google.common.collect.LinkedHashMultimap$ValueSetLink):0:0 -> remove
    3:3:void com.google.common.collect.LinkedHashMultimap.deleteFromValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink):0 -> remove
    3:3:void com.google.common.collect.LinkedHashMultimap.access$500(com.google.common.collect.LinkedHashMultimap$ValueSetLink):0 -> remove
    3:3:boolean remove(java.lang.Object):0 -> remove
    4:4:com.google.common.collect.LinkedHashMultimap$ValueEntry com.google.common.collect.LinkedHashMultimap$ValueEntry.getPredecessorInMultimap():0:0 -> remove
    4:4:void com.google.common.collect.LinkedHashMultimap.deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> remove
    4:4:void com.google.common.collect.LinkedHashMultimap.access$600(com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> remove
    4:4:boolean remove(java.lang.Object):0 -> remove
    5:5:com.google.common.collect.LinkedHashMultimap$ValueEntry com.google.common.collect.LinkedHashMultimap$ValueEntry.getSuccessorInMultimap():0:0 -> remove
    5:5:void com.google.common.collect.LinkedHashMultimap.deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> remove
    5:5:void com.google.common.collect.LinkedHashMultimap.access$600(com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> remove
    5:5:boolean remove(java.lang.Object):0 -> remove
    6:6:void com.google.common.collect.LinkedHashMultimap$ValueEntry.setSuccessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry):0:0 -> remove
    6:6:void com.google.common.collect.LinkedHashMultimap.succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> remove
    6:6:void com.google.common.collect.LinkedHashMultimap.deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> remove
    6:6:void com.google.common.collect.LinkedHashMultimap.access$600(com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> remove
    6:6:boolean remove(java.lang.Object):0 -> remove
    7:7:void com.google.common.collect.LinkedHashMultimap$ValueEntry.setPredecessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry):0:0 -> remove
    7:7:void com.google.common.collect.LinkedHashMultimap.succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> remove
    7:7:void com.google.common.collect.LinkedHashMultimap.deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> remove
    7:7:void com.google.common.collect.LinkedHashMultimap.access$600(com.google.common.collect.LinkedHashMultimap$ValueEntry):0 -> remove
    7:7:boolean remove(java.lang.Object):0 -> remove
    8:8:boolean remove(java.lang.Object):0:0 -> remove
com.google.common.collect.LinkedHashMultimap$ValueSet$1 -> com.google.common.collect.pg:
    com.google.common.collect.LinkedHashMultimap$ValueEntry toRemove -> b
    com.google.common.collect.LinkedHashMultimap$ValueSetLink nextEntry -> a
    com.google.common.collect.LinkedHashMultimap$ValueSet this$1 -> d
    int expectedModCount -> c
    1:1:void checkForComodification():0:0 -> hasNext
    1:1:boolean hasNext():0 -> hasNext
    2:2:boolean hasNext():0:0 -> hasNext
    3:3:void checkForComodification():0:0 -> hasNext
    3:3:boolean hasNext():0 -> hasNext
    1:1:java.lang.Object com.google.common.collect.ImmutableEntry.getValue():0:0 -> next
    1:1:java.lang.Object next():0 -> next
    2:2:java.lang.Object next():0:0 -> next
    3:3:com.google.common.collect.LinkedHashMultimap$ValueSetLink com.google.common.collect.LinkedHashMultimap$ValueEntry.getSuccessorInValueSet():0:0 -> next
    3:3:java.lang.Object next():0 -> next
    4:4:java.lang.Object next():0:0 -> next
    1:1:void checkForComodification():0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
    3:3:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    3:3:void remove():0 -> remove
    4:4:void remove():0:0 -> remove
    5:5:java.lang.Object com.google.common.collect.ImmutableEntry.getValue():0:0 -> remove
    5:5:void remove():0 -> remove
    6:6:void remove():0:0 -> remove
    7:7:void checkForComodification():0:0 -> remove
    7:7:void remove():0 -> remove
com.google.common.collect.LinkedHashMultimap$ValueSetLink -> com.google.common.collect.rg:
com.google.common.collect.LinkedHashMultiset -> com.google.common.collect.LinkedHashMultiset:
    1:1:int com.google.common.collect.Multisets.inferDistinctElements(java.lang.Iterable):0:0 -> create
    1:1:com.google.common.collect.LinkedHashMultiset create(java.lang.Iterable):0 -> create
    2:2:com.google.common.collect.LinkedHashMultiset create(java.lang.Iterable):0:0 -> create
com.google.common.collect.LinkedListMultimap -> com.google.common.collect.LinkedListMultimap:
    int modCount -> j
    com.google.common.collect.LinkedListMultimap$Node tail -> g
    com.google.common.collect.LinkedListMultimap$Node head -> f
    int size -> i
    java.util.Map keyToKeyList -> h
    1:1:java.util.Map com.google.common.collect.Platform.newHashMapWithExpectedSize(int):0:0 -> <init>
    1:1:void <init>(int):0 -> <init>
    2:2:void <init>(int):0:0 -> <init>
    java.util.Map createAsMap() -> a
    1:1:java.util.List createEntries():0:0 -> b
    1:1:java.util.Collection createEntries():0 -> b
    java.util.Set createKeySet() -> c
    1:1:void <init>():0:0 -> create
    1:1:com.google.common.collect.LinkedListMultimap create():0 -> create
    2:2:void <init>(com.google.common.collect.Multimap):0:0 -> create
    2:2:com.google.common.collect.LinkedListMultimap create(com.google.common.collect.Multimap):0 -> create
    com.google.common.collect.Multiset createKeys() -> d
    1:1:java.util.List createValues():0:0 -> e
    1:1:java.util.Collection createValues():0 -> e
    java.util.Iterator entryIterator() -> f
    int access$000(com.google.common.collect.LinkedListMultimap) -> j
    com.google.common.collect.LinkedListMultimap$Node access$100(com.google.common.collect.LinkedListMultimap) -> k
    com.google.common.collect.LinkedListMultimap$Node access$200(com.google.common.collect.LinkedListMultimap) -> l
    1:1:void checkElement(java.lang.Object):0:0 -> m
    1:1:void access$300(java.lang.Object):0 -> m
    1:1:void removeNode(com.google.common.collect.LinkedListMultimap$Node):0:0 -> n
    1:1:void access$400(com.google.common.collect.LinkedListMultimap,com.google.common.collect.LinkedListMultimap$Node):0 -> n
    java.util.Map access$600(com.google.common.collect.LinkedListMultimap) -> o
    com.google.common.collect.LinkedListMultimap$Node access$700(com.google.common.collect.LinkedListMultimap,java.lang.Object,java.lang.Object,com.google.common.collect.LinkedListMultimap$Node) -> p
    int access$900(com.google.common.collect.LinkedListMultimap) -> q
    com.google.common.collect.LinkedListMultimap$Node addNode(java.lang.Object,java.lang.Object,com.google.common.collect.LinkedListMultimap$Node) -> r
    1:1:java.util.List getCopy(java.lang.Object):0:0 -> removeAll
    1:1:java.util.List removeAll(java.lang.Object):0 -> removeAll
    2:2:void removeAllNodes(java.lang.Object):0:0 -> removeAll
    2:2:java.util.List removeAll(java.lang.Object):0 -> removeAll
    1:1:java.util.List getCopy(java.lang.Object):0:0 -> replaceValues
    1:1:java.util.List replaceValues(java.lang.Object,java.lang.Iterable):0 -> replaceValues
    2:2:java.util.List replaceValues(java.lang.Object,java.lang.Iterable):0:0 -> replaceValues
com.google.common.collect.LinkedListMultimap$1 -> com.google.common.collect.sg:
    java.lang.Object val$key -> a
    com.google.common.collect.LinkedListMultimap this$0 -> b
com.google.common.collect.LinkedListMultimap$1EntriesImpl -> com.google.common.collect.tg:
    com.google.common.collect.LinkedListMultimap this$0 -> a
com.google.common.collect.LinkedListMultimap$1KeySetImpl -> com.google.common.collect.ug:
    com.google.common.collect.LinkedListMultimap this$0 -> a
com.google.common.collect.LinkedListMultimap$1ValuesImpl -> com.google.common.collect.wg:
    com.google.common.collect.LinkedListMultimap this$0 -> a
com.google.common.collect.LinkedListMultimap$1ValuesImpl$1 -> com.google.common.collect.vg:
    com.google.common.collect.LinkedListMultimap$NodeIterator val$nodeItr -> b
    1:1:java.lang.Object transform(java.util.Map$Entry):0:0 -> a
    1:1:java.lang.Object transform(java.lang.Object):0 -> a
    1:1:void com.google.common.collect.LinkedListMultimap$NodeIterator.setValue(java.lang.Object):0:0 -> set
    1:1:void set(java.lang.Object):0 -> set
com.google.common.collect.LinkedListMultimap$DistinctKeyIterator -> com.google.common.collect.xg:
    java.util.Set seenKeys -> a
    com.google.common.collect.LinkedListMultimap$Node current -> c
    int expectedModCount -> d
    com.google.common.collect.LinkedListMultimap$Node next -> b
    com.google.common.collect.LinkedListMultimap this$0 -> e
    1:1:void <init>(com.google.common.collect.LinkedListMultimap):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.LinkedListMultimap,com.google.common.collect.LinkedListMultimap$1):0 -> <init>
    void checkForConcurrentModification() -> a
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
    3:3:void com.google.common.collect.LinkedListMultimap.removeAllNodes(java.lang.Object):0:0 -> remove
    3:3:void com.google.common.collect.LinkedListMultimap.access$500(com.google.common.collect.LinkedListMultimap,java.lang.Object):0 -> remove
    3:3:void remove():0 -> remove
    4:4:void remove():0:0 -> remove
com.google.common.collect.LinkedListMultimap$KeyList -> com.google.common.collect.yg:
    com.google.common.collect.LinkedListMultimap$Node tail -> b
    com.google.common.collect.LinkedListMultimap$Node head -> a
    int count -> c
com.google.common.collect.LinkedListMultimap$Node -> com.google.common.collect.zg:
    com.google.common.collect.LinkedListMultimap$Node previousSibling -> f
    java.lang.Object value -> b
    com.google.common.collect.LinkedListMultimap$Node nextSibling -> e
    com.google.common.collect.LinkedListMultimap$Node previous -> d
    com.google.common.collect.LinkedListMultimap$Node next -> c
    java.lang.Object key -> a
com.google.common.collect.LinkedListMultimap$NodeIterator -> com.google.common.collect.ah:
    com.google.common.collect.LinkedListMultimap$Node previous -> d
    com.google.common.collect.LinkedListMultimap$Node current -> c
    com.google.common.collect.LinkedListMultimap this$0 -> f
    com.google.common.collect.LinkedListMultimap$Node next -> b
    int expectedModCount -> e
    int nextIndex -> a
    void checkForConcurrentModification() -> a
    1:1:void add(java.util.Map$Entry):0:0 -> add
    1:1:void add(java.lang.Object):0 -> add
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
    1:1:void set(java.util.Map$Entry):0:0 -> set
    1:1:void set(java.lang.Object):0 -> set
com.google.common.collect.LinkedListMultimap$ValueForKeyIterator -> com.google.common.collect.bh:
    com.google.common.collect.LinkedListMultimap$Node previous -> e
    com.google.common.collect.LinkedListMultimap$Node current -> d
    com.google.common.collect.LinkedListMultimap$Node next -> c
    com.google.common.collect.LinkedListMultimap this$0 -> f
    java.lang.Object key -> a
    int nextIndex -> b
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
com.google.common.collect.Lists -> com.google.common.collect.Lists:
    int computeArrayListCapacity(int) -> a
    boolean equalsImpl(java.util.List,java.lang.Object) -> b
    1:1:int indexOfRandomAccess(java.util.List,java.lang.Object):0:0 -> c
    1:1:int indexOfImpl(java.util.List,java.lang.Object):0 -> c
    2:2:int indexOfImpl(java.util.List,java.lang.Object):0:0 -> c
    1:1:java.util.List com.google.common.collect.CartesianList.create(java.util.List):0:0 -> cartesianProduct
    1:1:java.util.List cartesianProduct(java.util.List):0 -> cartesianProduct
    1:1:int lastIndexOfRandomAccess(java.util.List,java.lang.Object):0:0 -> d
    1:1:int lastIndexOfImpl(java.util.List,java.lang.Object):0 -> d
    2:2:int lastIndexOfImpl(java.util.List,java.lang.Object):0:0 -> d
com.google.common.collect.Lists$1 -> com.google.common.collect.ch:
    1:1:void com.google.common.collect.Lists$RandomAccessListWrapper.<init>(java.util.List):0:0 -> <init>
    1:1:void <init>(java.util.List):0 -> <init>
com.google.common.collect.Lists$2 -> com.google.common.collect.dh:
com.google.common.collect.Lists$AbstractListWrapper -> com.google.common.collect.eh:
    java.util.List backingList -> a
com.google.common.collect.Lists$CharSequenceAsList -> com.google.common.collect.fh:
    java.lang.CharSequence sequence -> a
    1:1:java.lang.Character get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
com.google.common.collect.Lists$OnePlusArrayList -> com.google.common.collect.gh:
    java.lang.Object[] rest -> b
    java.lang.Object first -> a
com.google.common.collect.Lists$Partition -> com.google.common.collect.hh:
    java.util.List list -> a
    int size -> b
    1:1:java.util.List get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
com.google.common.collect.Lists$RandomAccessPartition -> com.google.common.collect.ih:
com.google.common.collect.Lists$RandomAccessReverseList -> com.google.common.collect.jh:
com.google.common.collect.Lists$ReverseList -> com.google.common.collect.lh:
    java.util.List forwardList -> a
    java.util.List getForwardList() -> a
    1:1:int reversePosition(int):0:0 -> add
    1:1:void add(int,java.lang.Object):0 -> add
    2:2:void add(int,java.lang.Object):0:0 -> add
    1:1:int reverseIndex(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
    2:2:java.lang.Object get(int):0:0 -> get
    1:1:int reversePosition(int):0:0 -> listIterator
    1:1:java.util.ListIterator listIterator(int):0 -> listIterator
    2:2:java.util.ListIterator listIterator(int):0:0 -> listIterator
    1:1:int reverseIndex(int):0:0 -> remove
    1:1:java.lang.Object remove(int):0 -> remove
    2:2:java.lang.Object remove(int):0:0 -> remove
    1:1:int reverseIndex(int):0:0 -> set
    1:1:java.lang.Object set(int,java.lang.Object):0 -> set
    2:2:java.lang.Object set(int,java.lang.Object):0:0 -> set
    1:1:int reversePosition(int):0:0 -> subList
    1:1:java.util.List subList(int,int):0 -> subList
    2:2:java.util.List subList(int,int):0:0 -> subList
com.google.common.collect.Lists$ReverseList$1 -> com.google.common.collect.kh:
    java.util.ListIterator val$forwardIterator -> b
    com.google.common.collect.Lists$ReverseList this$0 -> c
    boolean canRemoveOrSet -> a
    1:1:int com.google.common.collect.Lists$ReverseList.reversePosition(int):0:0 -> nextIndex
    1:1:int com.google.common.collect.Lists$ReverseList.access$000(com.google.common.collect.Lists$ReverseList,int):0 -> nextIndex
    1:1:int nextIndex():0 -> nextIndex
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
com.google.common.collect.Lists$StringAsImmutableList -> com.google.common.collect.mh:
    java.lang.String string -> b
    boolean isPartialView() -> e
    1:1:java.lang.Character get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
com.google.common.collect.Lists$TransformingRandomAccessList -> com.google.common.collect.oh:
    java.util.List fromList -> a
    com.google.common.base.Function function -> b
com.google.common.collect.Lists$TransformingRandomAccessList$1 -> com.google.common.collect.nh:
    com.google.common.collect.Lists$TransformingRandomAccessList this$0 -> b
    java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.Lists$TransformingSequentialList -> com.google.common.collect.qh:
    java.util.List fromList -> a
    com.google.common.base.Function function -> b
com.google.common.collect.Lists$TransformingSequentialList$1 -> com.google.common.collect.ph:
    com.google.common.collect.Lists$TransformingSequentialList this$0 -> b
    java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.Lists$TwoPlusArrayList -> com.google.common.collect.rh:
    java.lang.Object[] rest -> c
    java.lang.Object second -> b
    java.lang.Object first -> a
com.google.common.collect.MapMaker -> com.google.common.collect.MapMaker:
    com.google.common.collect.MapMakerInternalMap$Strength keyStrength -> d
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength -> e
    com.google.common.base.Equivalence keyEquivalence -> f
    boolean useCustomMap -> a
    int initialCapacity -> b
    int concurrencyLevel -> c
    com.google.common.collect.MapMakerInternalMap$Strength getKeyStrength() -> a
    com.google.common.collect.MapMakerInternalMap$Strength getValueStrength() -> b
    1:1:int getInitialCapacity():0:0 -> makeMap
    1:1:java.util.concurrent.ConcurrentMap makeMap():0 -> makeMap
    2:2:int getConcurrencyLevel():0:0 -> makeMap
    2:2:java.util.concurrent.ConcurrentMap makeMap():0 -> makeMap
    3:3:java.util.concurrent.ConcurrentMap makeMap():0:0 -> makeMap
    1:1:com.google.common.collect.MapMaker setKeyStrength(com.google.common.collect.MapMakerInternalMap$Strength):0:0 -> weakKeys
    1:1:com.google.common.collect.MapMaker weakKeys():0 -> weakKeys
    1:1:com.google.common.collect.MapMaker setValueStrength(com.google.common.collect.MapMakerInternalMap$Strength):0:0 -> weakValues
    1:1:com.google.common.collect.MapMaker weakValues():0 -> weakValues
com.google.common.collect.MapMaker$Dummy -> com.google.common.collect.sh:
    com.google.common.collect.MapMaker$Dummy VALUE -> a
    com.google.common.collect.MapMaker$Dummy[] $VALUES -> b
com.google.common.collect.MapMakerInternalMap -> com.google.common.collect.hj:
    java.util.Set keySet -> g
    com.google.common.collect.MapMakerInternalMap$InternalEntryHelper entryHelper -> f
    java.util.Set entrySet -> i
    com.google.common.collect.MapMakerInternalMap$WeakValueReference UNSET_WEAK_VALUE_REFERENCE -> j
    com.google.common.collect.MapMakerInternalMap$Segment[] segments -> c
    int concurrencyLevel -> d
    com.google.common.base.Equivalence keyEquivalence -> e
    int segmentShift -> b
    int segmentMask -> a
    java.util.Collection values -> h
    1:1:int com.google.common.collect.MapMaker.getConcurrencyLevel():0:0 -> <init>
    1:1:void <init>(com.google.common.collect.MapMaker,com.google.common.collect.MapMakerInternalMap$InternalEntryHelper):0 -> <init>
    2:2:void <init>(com.google.common.collect.MapMaker,com.google.common.collect.MapMakerInternalMap$InternalEntryHelper):0:0 -> <init>
    3:3:com.google.common.base.Equivalence com.google.common.collect.MapMaker.getKeyEquivalence():0:0 -> <init>
    3:3:void <init>(com.google.common.collect.MapMaker,com.google.common.collect.MapMakerInternalMap$InternalEntryHelper):0 -> <init>
    4:4:void <init>(com.google.common.collect.MapMaker,com.google.common.collect.MapMakerInternalMap$InternalEntryHelper):0:0 -> <init>
    5:5:int com.google.common.collect.MapMaker.getInitialCapacity():0:0 -> <init>
    5:5:void <init>(com.google.common.collect.MapMaker,com.google.common.collect.MapMakerInternalMap$InternalEntryHelper):0 -> <init>
    6:6:void <init>(com.google.common.collect.MapMaker,com.google.common.collect.MapMakerInternalMap$InternalEntryHelper):0:0 -> <init>
    7:7:com.google.common.collect.MapMakerInternalMap$Segment[] newSegmentArray(int):0:0 -> <init>
    7:7:void <init>(com.google.common.collect.MapMaker,com.google.common.collect.MapMakerInternalMap$InternalEntryHelper):0 -> <init>
    8:8:void <init>(com.google.common.collect.MapMaker,com.google.common.collect.MapMakerInternalMap$InternalEntryHelper):0:0 -> <init>
    9:9:com.google.common.collect.MapMakerInternalMap$Segment createSegment(int,int):0:0 -> <init>
    9:9:void <init>(com.google.common.collect.MapMaker,com.google.common.collect.MapMakerInternalMap$InternalEntryHelper):0 -> <init>
    10:10:void <init>(com.google.common.collect.MapMaker,com.google.common.collect.MapMakerInternalMap$InternalEntryHelper):0:0 -> <init>
    1:1:java.util.ArrayList toArrayList(java.util.Collection):0:0 -> a
    1:1:java.util.ArrayList access$900(java.util.Collection):0 -> a
    com.google.common.collect.MapMakerInternalMap create(com.google.common.collect.MapMaker) -> b
    com.google.common.collect.MapMakerInternalMap createWithDummyValues(com.google.common.collect.MapMaker) -> c
    1:1:void com.google.common.collect.MapMakerInternalMap$Segment.clear():0:0 -> clear
    1:1:void clear():0 -> clear
    1:1:boolean com.google.common.collect.MapMakerInternalMap$Segment.containsKey(java.lang.Object,int):0:0 -> containsKey
    1:1:boolean containsKey(java.lang.Object):0 -> containsKey
    2:2:com.google.common.collect.MapMakerInternalMap$InternalEntry com.google.common.collect.MapMakerInternalMap$Segment.getLiveEntry(java.lang.Object,int):0:0 -> containsKey
    2:2:boolean com.google.common.collect.MapMakerInternalMap$Segment.containsKey(java.lang.Object,int):0 -> containsKey
    2:2:boolean containsKey(java.lang.Object):0 -> containsKey
    3:3:boolean com.google.common.collect.MapMakerInternalMap$Segment.containsKey(java.lang.Object,int):0:0 -> containsKey
    3:3:boolean containsKey(java.lang.Object):0 -> containsKey
    1:1:java.lang.Object com.google.common.collect.MapMakerInternalMap$Segment.getLiveValue(com.google.common.collect.MapMakerInternalMap$InternalEntry):0:0 -> containsValue
    1:1:boolean containsValue(java.lang.Object):0 -> containsValue
    2:2:boolean containsValue(java.lang.Object):0:0 -> containsValue
    int hash(java.lang.Object) -> d
    com.google.common.collect.MapMakerInternalMap$Segment segmentFor(int) -> e
    com.google.common.base.Equivalence valueEquivalence() -> f
    1:1:java.lang.Object com.google.common.collect.MapMakerInternalMap$Segment.get(java.lang.Object,int):0:0 -> get
    1:1:java.lang.Object get(java.lang.Object):0 -> get
    2:2:com.google.common.collect.MapMakerInternalMap$InternalEntry com.google.common.collect.MapMakerInternalMap$Segment.getLiveEntry(java.lang.Object,int):0:0 -> get
    2:2:java.lang.Object com.google.common.collect.MapMakerInternalMap$Segment.get(java.lang.Object,int):0 -> get
    2:2:java.lang.Object get(java.lang.Object):0 -> get
    3:3:java.lang.Object com.google.common.collect.MapMakerInternalMap$Segment.get(java.lang.Object,int):0:0 -> get
    3:3:java.lang.Object get(java.lang.Object):0 -> get
    1:1:java.lang.Object com.google.common.collect.MapMakerInternalMap$Segment.remove(java.lang.Object,int):0:0 -> remove
    1:1:java.lang.Object remove(java.lang.Object):0 -> remove
    2:2:void com.google.common.collect.MapMakerInternalMap$Segment.preWriteCleanup():0:0 -> remove
    2:2:java.lang.Object com.google.common.collect.MapMakerInternalMap$Segment.remove(java.lang.Object,int):0 -> remove
    2:2:java.lang.Object remove(java.lang.Object):0 -> remove
    3:3:java.lang.Object com.google.common.collect.MapMakerInternalMap$Segment.remove(java.lang.Object,int):0:0 -> remove
    3:3:java.lang.Object remove(java.lang.Object):0 -> remove
    4:4:boolean com.google.common.collect.MapMakerInternalMap$Segment.isCollected(com.google.common.collect.MapMakerInternalMap$InternalEntry):0:0 -> remove
    4:4:java.lang.Object com.google.common.collect.MapMakerInternalMap$Segment.remove(java.lang.Object,int):0 -> remove
    4:4:java.lang.Object remove(java.lang.Object):0 -> remove
    5:5:java.lang.Object com.google.common.collect.MapMakerInternalMap$Segment.remove(java.lang.Object,int):0:0 -> remove
    5:5:java.lang.Object remove(java.lang.Object):0 -> remove
    6:6:boolean com.google.common.collect.MapMakerInternalMap$Segment.remove(java.lang.Object,int,java.lang.Object):0:0 -> remove
    6:6:boolean remove(java.lang.Object,java.lang.Object):0 -> remove
    7:7:void com.google.common.collect.MapMakerInternalMap$Segment.preWriteCleanup():0:0 -> remove
    7:7:boolean com.google.common.collect.MapMakerInternalMap$Segment.remove(java.lang.Object,int,java.lang.Object):0 -> remove
    7:7:boolean remove(java.lang.Object,java.lang.Object):0 -> remove
    8:8:boolean com.google.common.collect.MapMakerInternalMap$Segment.remove(java.lang.Object,int,java.lang.Object):0:0 -> remove
    8:8:boolean remove(java.lang.Object,java.lang.Object):0 -> remove
    9:9:boolean com.google.common.collect.MapMakerInternalMap$Segment.isCollected(com.google.common.collect.MapMakerInternalMap$InternalEntry):0:0 -> remove
    9:9:boolean com.google.common.collect.MapMakerInternalMap$Segment.remove(java.lang.Object,int,java.lang.Object):0 -> remove
    9:9:boolean remove(java.lang.Object,java.lang.Object):0 -> remove
    10:10:boolean com.google.common.collect.MapMakerInternalMap$Segment.remove(java.lang.Object,int,java.lang.Object):0:0 -> remove
    10:10:boolean remove(java.lang.Object,java.lang.Object):0 -> remove
    1:1:java.lang.Object com.google.common.collect.MapMakerInternalMap$Segment.replace(java.lang.Object,int,java.lang.Object):0:0 -> replace
    1:1:java.lang.Object replace(java.lang.Object,java.lang.Object):0 -> replace
    2:2:void com.google.common.collect.MapMakerInternalMap$Segment.preWriteCleanup():0:0 -> replace
    2:2:java.lang.Object com.google.common.collect.MapMakerInternalMap$Segment.replace(java.lang.Object,int,java.lang.Object):0 -> replace
    2:2:java.lang.Object replace(java.lang.Object,java.lang.Object):0 -> replace
    3:3:java.lang.Object com.google.common.collect.MapMakerInternalMap$Segment.replace(java.lang.Object,int,java.lang.Object):0:0 -> replace
    3:3:java.lang.Object replace(java.lang.Object,java.lang.Object):0 -> replace
    4:4:boolean com.google.common.collect.MapMakerInternalMap$Segment.isCollected(com.google.common.collect.MapMakerInternalMap$InternalEntry):0:0 -> replace
    4:4:java.lang.Object com.google.common.collect.MapMakerInternalMap$Segment.replace(java.lang.Object,int,java.lang.Object):0 -> replace
    4:4:java.lang.Object replace(java.lang.Object,java.lang.Object):0 -> replace
    5:5:java.lang.Object com.google.common.collect.MapMakerInternalMap$Segment.replace(java.lang.Object,int,java.lang.Object):0:0 -> replace
    5:5:java.lang.Object replace(java.lang.Object,java.lang.Object):0 -> replace
    6:6:void com.google.common.collect.MapMakerInternalMap$Segment.setValue(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object):0:0 -> replace
    6:6:java.lang.Object com.google.common.collect.MapMakerInternalMap$Segment.replace(java.lang.Object,int,java.lang.Object):0 -> replace
    6:6:java.lang.Object replace(java.lang.Object,java.lang.Object):0 -> replace
    7:7:java.lang.Object com.google.common.collect.MapMakerInternalMap$Segment.replace(java.lang.Object,int,java.lang.Object):0:0 -> replace
    7:7:java.lang.Object replace(java.lang.Object,java.lang.Object):0 -> replace
    8:8:boolean com.google.common.collect.MapMakerInternalMap$Segment.replace(java.lang.Object,int,java.lang.Object,java.lang.Object):0:0 -> replace
    8:8:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object):0 -> replace
    9:9:void com.google.common.collect.MapMakerInternalMap$Segment.preWriteCleanup():0:0 -> replace
    9:9:boolean com.google.common.collect.MapMakerInternalMap$Segment.replace(java.lang.Object,int,java.lang.Object,java.lang.Object):0 -> replace
    9:9:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object):0 -> replace
    10:10:boolean com.google.common.collect.MapMakerInternalMap$Segment.replace(java.lang.Object,int,java.lang.Object,java.lang.Object):0:0 -> replace
    10:10:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object):0 -> replace
    11:11:boolean com.google.common.collect.MapMakerInternalMap$Segment.isCollected(com.google.common.collect.MapMakerInternalMap$InternalEntry):0:0 -> replace
    11:11:boolean com.google.common.collect.MapMakerInternalMap$Segment.replace(java.lang.Object,int,java.lang.Object,java.lang.Object):0 -> replace
    11:11:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object):0 -> replace
    12:12:boolean com.google.common.collect.MapMakerInternalMap$Segment.replace(java.lang.Object,int,java.lang.Object,java.lang.Object):0:0 -> replace
    12:12:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object):0 -> replace
    13:13:void com.google.common.collect.MapMakerInternalMap$Segment.setValue(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object):0:0 -> replace
    13:13:boolean com.google.common.collect.MapMakerInternalMap$Segment.replace(java.lang.Object,int,java.lang.Object,java.lang.Object):0 -> replace
    13:13:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object):0 -> replace
    14:14:boolean com.google.common.collect.MapMakerInternalMap$Segment.replace(java.lang.Object,int,java.lang.Object,java.lang.Object):0:0 -> replace
    14:14:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object):0 -> replace
com.google.common.collect.MapMakerInternalMap$1 -> com.google.common.collect.th:
com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry -> com.google.common.collect.uh:
    com.google.common.collect.MapMakerInternalMap$InternalEntry next -> c
    java.lang.Object key -> a
    int hash -> b
com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry -> com.google.common.collect.vh:
    com.google.common.collect.MapMakerInternalMap$InternalEntry next -> b
    int hash -> a
com.google.common.collect.MapMakerInternalMap$DummyInternalEntry -> com.google.common.collect.wh:
    1:1:com.google.common.collect.MapMakerInternalMap$DummyInternalEntry getNext():0:0 -> getNext
    1:1:com.google.common.collect.MapMakerInternalMap$InternalEntry getNext():0 -> getNext
com.google.common.collect.MapMakerInternalMap$EntryIterator -> com.google.common.collect.xh:
    1:1:java.util.Map$Entry next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
com.google.common.collect.MapMakerInternalMap$EntrySet -> com.google.common.collect.yh:
    com.google.common.collect.MapMakerInternalMap this$0 -> a
com.google.common.collect.MapMakerInternalMap$HashIterator -> com.google.common.collect.zh:
    com.google.common.collect.MapMakerInternalMap$InternalEntry nextEntry -> e
    com.google.common.collect.MapMakerInternalMap this$0 -> h
    com.google.common.collect.MapMakerInternalMap$Segment currentSegment -> c
    com.google.common.collect.MapMakerInternalMap$WriteThroughEntry nextExternal -> f
    com.google.common.collect.MapMakerInternalMap$WriteThroughEntry lastReturned -> g
    java.util.concurrent.atomic.AtomicReferenceArray currentTable -> d
    int nextTableIndex -> b
    int nextSegmentIndex -> a
    void advance() -> a
    1:1:java.lang.Object com.google.common.collect.MapMakerInternalMap.getLiveValue(com.google.common.collect.MapMakerInternalMap$InternalEntry):0:0 -> b
    1:1:boolean advanceTo(com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> b
    2:2:boolean advanceTo(com.google.common.collect.MapMakerInternalMap$InternalEntry):0:0 -> b
    com.google.common.collect.MapMakerInternalMap$WriteThroughEntry nextEntry() -> c
    boolean nextInChain() -> d
    boolean nextInTable() -> e
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
    3:3:java.lang.Object com.google.common.collect.MapMakerInternalMap$WriteThroughEntry.getKey():0:0 -> remove
    3:3:void remove():0 -> remove
    4:4:void remove():0:0 -> remove
com.google.common.collect.MapMakerInternalMap$InternalEntry -> com.google.common.collect.ai:
com.google.common.collect.MapMakerInternalMap$InternalEntryHelper -> com.google.common.collect.bi:
com.google.common.collect.MapMakerInternalMap$KeyIterator -> com.google.common.collect.ci:
    1:1:java.lang.Object com.google.common.collect.MapMakerInternalMap$WriteThroughEntry.getKey():0:0 -> next
    1:1:java.lang.Object next():0 -> next
com.google.common.collect.MapMakerInternalMap$KeySet -> com.google.common.collect.di:
    com.google.common.collect.MapMakerInternalMap this$0 -> a
com.google.common.collect.MapMakerInternalMap$SafeToArraySet -> com.google.common.collect.ei:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.collect.MapMakerInternalMap$1):0 -> <init>
com.google.common.collect.MapMakerInternalMap$Segment -> com.google.common.collect.fi:
    java.util.concurrent.atomic.AtomicInteger readCount -> g
    com.google.common.collect.MapMakerInternalMap map -> a
    int $r8$clinit -> h
    int maxSegmentSize -> f
    int threshold -> d
    java.util.concurrent.atomic.AtomicReferenceArray table -> e
    int count -> b
    int modCount -> c
    1:1:java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.MapMakerInternalMap,int,int):0 -> <init>
    2:2:void initTable(java.util.concurrent.atomic.AtomicReferenceArray):0:0 -> <init>
    2:2:void <init>(com.google.common.collect.MapMakerInternalMap,int,int):0 -> <init>
    void clearReferenceQueue(java.lang.ref.ReferenceQueue) -> a
    1:1:void com.google.common.collect.MapMakerInternalMap.reclaimKey(com.google.common.collect.MapMakerInternalMap$InternalEntry):0:0 -> b
    1:1:void drainKeyReferenceQueue(java.lang.ref.ReferenceQueue):0 -> b
    2:2:boolean reclaimKey(com.google.common.collect.MapMakerInternalMap$InternalEntry,int):0:0 -> b
    2:2:void com.google.common.collect.MapMakerInternalMap.reclaimKey(com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> b
    2:2:void drainKeyReferenceQueue(java.lang.ref.ReferenceQueue):0 -> b
    1:1:void com.google.common.collect.MapMakerInternalMap.reclaimValue(com.google.common.collect.MapMakerInternalMap$WeakValueReference):0:0 -> c
    1:1:void drainValueReferenceQueue(java.lang.ref.ReferenceQueue):0 -> c
    2:2:boolean reclaimValue(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakValueReference):0:0 -> c
    2:2:void com.google.common.collect.MapMakerInternalMap.reclaimValue(com.google.common.collect.MapMakerInternalMap$WeakValueReference):0 -> c
    2:2:void drainValueReferenceQueue(java.lang.ref.ReferenceQueue):0 -> c
    1:1:java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int):0:0 -> d
    1:1:void expand():0 -> d
    2:2:void expand():0:0 -> d
    3:3:com.google.common.collect.MapMakerInternalMap$InternalEntry copyEntry(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry):0:0 -> d
    3:3:void expand():0 -> d
    4:4:void expand():0:0 -> d
    1:1:com.google.common.collect.MapMakerInternalMap$InternalEntry getFirst(int):0:0 -> e
    1:1:com.google.common.collect.MapMakerInternalMap$InternalEntry getEntry(java.lang.Object,int):0 -> e
    2:2:com.google.common.collect.MapMakerInternalMap$InternalEntry getEntry(java.lang.Object,int):0:0 -> e
    void maybeClearReferenceQueues() -> f
    void maybeDrainReferenceQueues() -> g
    1:1:void runCleanup():0:0 -> h
    1:1:void postReadCleanup():0 -> h
    1:1:void preWriteCleanup():0:0 -> i
    1:1:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean):0 -> i
    2:2:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean):0:0 -> i
    3:3:void setValue(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object):0:0 -> i
    3:3:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean):0 -> i
    4:4:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean):0:0 -> i
    5:5:void setValue(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object):0:0 -> i
    5:5:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean):0 -> i
    6:6:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean):0:0 -> i
    1:1:com.google.common.collect.MapMakerInternalMap$InternalEntry copyEntry(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry):0:0 -> j
    1:1:com.google.common.collect.MapMakerInternalMap$InternalEntry removeFromChain(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> j
    2:2:com.google.common.collect.MapMakerInternalMap$InternalEntry removeFromChain(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry):0:0 -> j
    void runLockedCleanup() -> k
    com.google.common.collect.MapMakerInternalMap$Segment self() -> l
    void setValue(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> m
    void tryDrainReferenceQueues() -> n
com.google.common.collect.MapMakerInternalMap$Strength -> com.google.common.collect.ii:
    com.google.common.collect.MapMakerInternalMap$Strength WEAK -> b
    com.google.common.collect.MapMakerInternalMap$Strength STRONG -> a
    com.google.common.collect.MapMakerInternalMap$Strength[] $VALUES -> c
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:void <init>(java.lang.String,int,com.google.common.collect.MapMakerInternalMap$1):0 -> <init>
    com.google.common.base.Equivalence defaultEquivalence() -> a
com.google.common.collect.MapMakerInternalMap$Strength$1 -> com.google.common.collect.gi:
    com.google.common.base.Equivalence defaultEquivalence() -> a
com.google.common.collect.MapMakerInternalMap$Strength$2 -> com.google.common.collect.hi:
    com.google.common.base.Equivalence defaultEquivalence() -> a
com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry -> com.google.common.collect.ki:
com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper -> com.google.common.collect.ji:
    com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper INSTANCE -> a
    com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper instance() -> a
    1:1:com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry.copy(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry):0:0 -> copy
    1:1:com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry copy(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry):0 -> copy
    1:1:com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> copy
    1:1:com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry):0:0 -> newEntry
    1:1:com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> newEntry
    1:1:com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int):0:0 -> newSegment
    1:1:com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int):0 -> newSegment
com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment -> com.google.common.collect.li:
    com.google.common.collect.MapMakerInternalMap$Segment self() -> l
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry -> com.google.common.collect.ni:
    java.lang.Object value -> d
    com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry copy(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry) -> a
    void setValue(java.lang.Object) -> b
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper -> com.google.common.collect.mi:
    com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper INSTANCE -> a
    com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper instance() -> a
    1:1:com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry copy(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry):0:0 -> copy
    1:1:com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> copy
    1:1:com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry):0:0 -> newEntry
    1:1:com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> newEntry
    1:1:com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int):0:0 -> newSegment
    1:1:com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int):0 -> newSegment
    1:1:void setValue(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry,java.lang.Object):0:0 -> setValue
    1:1:void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object):0 -> setValue
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment -> com.google.common.collect.oi:
    com.google.common.collect.MapMakerInternalMap$Segment self() -> l
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry -> com.google.common.collect.qi:
    com.google.common.collect.MapMakerInternalMap$WeakValueReference valueReference -> d
    com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry copy(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry) -> a
    void setValue(java.lang.Object,java.lang.ref.ReferenceQueue) -> b
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper -> com.google.common.collect.pi:
    com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper INSTANCE -> a
    com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper instance() -> a
    1:1:boolean com.google.common.collect.MapMakerInternalMap$Segment.isCollected(com.google.common.collect.MapMakerInternalMap$InternalEntry):0:0 -> copy
    1:1:com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry copy(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry):0 -> copy
    1:1:com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> copy
    2:2:com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry copy(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry):0:0 -> copy
    2:2:com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> copy
    1:1:com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry):0:0 -> newEntry
    1:1:com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> newEntry
    1:1:com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int):0:0 -> newSegment
    1:1:com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int):0 -> newSegment
    1:1:void setValue(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry,java.lang.Object):0:0 -> setValue
    1:1:void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object):0 -> setValue
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment -> com.google.common.collect.ri:
    java.lang.ref.ReferenceQueue queueForValues -> i
    void maybeClearReferenceQueues() -> f
    void maybeDrainReferenceQueues() -> g
    com.google.common.collect.MapMakerInternalMap$Segment self() -> l
    java.lang.ref.ReferenceQueue access$100(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment) -> o
com.google.common.collect.MapMakerInternalMap$ValueIterator -> com.google.common.collect.si:
    1:1:java.lang.Object com.google.common.collect.MapMakerInternalMap$WriteThroughEntry.getValue():0:0 -> next
    1:1:java.lang.Object next():0 -> next
com.google.common.collect.MapMakerInternalMap$Values -> com.google.common.collect.ti:
    com.google.common.collect.MapMakerInternalMap this$0 -> a
com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry -> com.google.common.collect.vi:
com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper -> com.google.common.collect.ui:
    com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper INSTANCE -> a
    com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper instance() -> a
    1:1:java.lang.Object com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry.getKey():0:0 -> copy
    1:1:com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry copy(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry):0 -> copy
    1:1:com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> copy
    2:2:com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry copy(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry):0:0 -> copy
    2:2:com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> copy
    3:3:com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry.copy(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry):0:0 -> copy
    3:3:com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry copy(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry):0 -> copy
    3:3:com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> copy
    4:4:java.lang.Object com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry.getKey():0:0 -> copy
    4:4:com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry.copy(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry):0 -> copy
    4:4:com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry copy(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry):0 -> copy
    4:4:com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> copy
    5:5:com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry.copy(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry):0:0 -> copy
    5:5:com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry copy(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry):0 -> copy
    5:5:com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> copy
    1:1:com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry):0:0 -> newEntry
    1:1:com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> newEntry
    1:1:com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int):0:0 -> newSegment
    1:1:com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int):0 -> newSegment
com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment -> com.google.common.collect.wi:
    java.lang.ref.ReferenceQueue queueForKeys -> i
    void maybeClearReferenceQueues() -> f
    void maybeDrainReferenceQueues() -> g
    com.google.common.collect.MapMakerInternalMap$Segment self() -> l
    java.lang.ref.ReferenceQueue access$200(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment) -> o
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry -> com.google.common.collect.yi:
    java.lang.Object value -> c
    1:1:java.lang.Object com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry.getKey():0:0 -> a
    1:1:com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry copy(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry):0 -> a
    2:2:com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry copy(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry):0:0 -> a
    3:3:void setValue(java.lang.Object):0:0 -> a
    3:3:com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry copy(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry):0 -> a
    void setValue(java.lang.Object) -> b
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper -> com.google.common.collect.xi:
    com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper INSTANCE -> a
    com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper instance() -> a
    1:1:java.lang.Object com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry.getKey():0:0 -> copy
    1:1:com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry copy(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry):0 -> copy
    1:1:com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> copy
    2:2:com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry copy(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry):0:0 -> copy
    2:2:com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> copy
    1:1:com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry):0:0 -> newEntry
    1:1:com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> newEntry
    1:1:com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int):0:0 -> newSegment
    1:1:com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int):0 -> newSegment
    1:1:void setValue(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry,java.lang.Object):0:0 -> setValue
    1:1:void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object):0 -> setValue
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment -> com.google.common.collect.zi:
    java.lang.ref.ReferenceQueue queueForKeys -> i
    void maybeClearReferenceQueues() -> f
    void maybeDrainReferenceQueues() -> g
    com.google.common.collect.MapMakerInternalMap$Segment self() -> l
    java.lang.ref.ReferenceQueue access$300(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment) -> o
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry -> com.google.common.collect.bj:
    com.google.common.collect.MapMakerInternalMap$WeakValueReference valueReference -> c
    1:1:java.lang.Object com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry.getKey():0:0 -> a
    1:1:com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry copy(java.lang.ref.ReferenceQueue,java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry):0 -> a
    2:2:com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry copy(java.lang.ref.ReferenceQueue,java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry):0:0 -> a
    void setValue(java.lang.Object,java.lang.ref.ReferenceQueue) -> b
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper -> com.google.common.collect.aj:
    com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper INSTANCE -> a
    com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper instance() -> a
    1:1:java.lang.Object com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry.getKey():0:0 -> copy
    1:1:com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry copy(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry):0 -> copy
    1:1:com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> copy
    2:2:boolean com.google.common.collect.MapMakerInternalMap$Segment.isCollected(com.google.common.collect.MapMakerInternalMap$InternalEntry):0:0 -> copy
    2:2:com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry copy(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry):0 -> copy
    2:2:com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> copy
    3:3:com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry copy(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry):0:0 -> copy
    3:3:com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> copy
    1:1:com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry):0:0 -> newEntry
    1:1:com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry):0 -> newEntry
    1:1:com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int):0:0 -> newSegment
    1:1:com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int):0 -> newSegment
    1:1:void setValue(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry,java.lang.Object):0:0 -> setValue
    1:1:void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object):0 -> setValue
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment -> com.google.common.collect.cj:
    java.lang.ref.ReferenceQueue queueForValues -> j
    java.lang.ref.ReferenceQueue queueForKeys -> i
    void maybeClearReferenceQueues() -> f
    void maybeDrainReferenceQueues() -> g
    com.google.common.collect.MapMakerInternalMap$Segment self() -> l
    java.lang.ref.ReferenceQueue access$400(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment) -> o
    java.lang.ref.ReferenceQueue access$500(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment) -> p
com.google.common.collect.MapMakerInternalMap$WeakValueEntry -> com.google.common.collect.dj:
com.google.common.collect.MapMakerInternalMap$WeakValueReference -> com.google.common.collect.ej:
com.google.common.collect.MapMakerInternalMap$WeakValueReferenceImpl -> com.google.common.collect.fj:
    com.google.common.collect.MapMakerInternalMap$InternalEntry entry -> a
com.google.common.collect.MapMakerInternalMap$WriteThroughEntry -> com.google.common.collect.gj:
    com.google.common.collect.MapMakerInternalMap this$0 -> c
    java.lang.Object value -> b
    java.lang.Object key -> a
com.google.common.collect.Maps -> com.google.common.collect.Maps:
    1:1:java.util.Map unmodifiableMap(java.util.Map):0:0 -> a
    1:1:java.util.Map access$100(java.util.Map):0 -> a
    1:1:java.util.Map$Entry unmodifiableOrNull(java.util.Map$Entry):0:0 -> b
    1:1:java.util.Map$Entry access$800(java.util.Map$Entry):0 -> b
    com.google.common.base.Function asEntryToEntryFunction(com.google.common.collect.Maps$EntryTransformer) -> c
    com.google.common.collect.Maps$EntryTransformer asEntryTransformer(com.google.common.base.Function) -> d
    1:1:java.util.Comparator orNaturalOrder(java.util.Comparator):0:0 -> difference
    1:1:com.google.common.collect.SortedMapDifference difference(java.util.SortedMap,java.util.Map):0 -> difference
    2:2:com.google.common.collect.SortedMapDifference difference(java.util.SortedMap,java.util.Map):0:0 -> difference
    java.util.Iterator asMapEntryIterator(java.util.Set,com.google.common.base.Function) -> e
    int capacity(int) -> f
    1:1:com.google.common.collect.BiMap filterFiltered(com.google.common.collect.Maps$FilteredEntryBiMap,com.google.common.base.Predicate):0:0 -> filterEntries
    1:1:com.google.common.collect.BiMap filterEntries(com.google.common.collect.BiMap,com.google.common.base.Predicate):0 -> filterEntries
    2:2:com.google.common.collect.BiMap com.google.common.collect.Maps$FilteredEntryBiMap.unfiltered():0:0 -> filterEntries
    2:2:com.google.common.collect.BiMap filterFiltered(com.google.common.collect.Maps$FilteredEntryBiMap,com.google.common.base.Predicate):0 -> filterEntries
    2:2:com.google.common.collect.BiMap filterEntries(com.google.common.collect.BiMap,com.google.common.base.Predicate):0 -> filterEntries
    3:3:com.google.common.collect.BiMap filterFiltered(com.google.common.collect.Maps$FilteredEntryBiMap,com.google.common.base.Predicate):0:0 -> filterEntries
    3:3:com.google.common.collect.BiMap filterEntries(com.google.common.collect.BiMap,com.google.common.base.Predicate):0 -> filterEntries
    4:4:com.google.common.collect.BiMap filterEntries(com.google.common.collect.BiMap,com.google.common.base.Predicate):0:0 -> filterEntries
    5:5:java.util.Map filterFiltered(com.google.common.collect.Maps$AbstractFilteredMap,com.google.common.base.Predicate):0:0 -> filterEntries
    5:5:java.util.Map filterEntries(java.util.Map,com.google.common.base.Predicate):0 -> filterEntries
    6:6:java.util.Map filterEntries(java.util.Map,com.google.common.base.Predicate):0:0 -> filterEntries
    7:7:java.util.NavigableMap filterFiltered(com.google.common.collect.Maps$FilteredEntryNavigableMap,com.google.common.base.Predicate):0:0 -> filterEntries
    7:7:java.util.NavigableMap filterEntries(java.util.NavigableMap,com.google.common.base.Predicate):0 -> filterEntries
    8:8:java.util.NavigableMap filterEntries(java.util.NavigableMap,com.google.common.base.Predicate):0:0 -> filterEntries
    9:9:java.util.SortedMap filterFiltered(com.google.common.collect.Maps$FilteredEntrySortedMap,com.google.common.base.Predicate):0:0 -> filterEntries
    9:9:java.util.SortedMap filterEntries(java.util.SortedMap,com.google.common.base.Predicate):0 -> filterEntries
    10:10:java.util.SortedMap com.google.common.collect.Maps$FilteredEntrySortedMap.sortedMap():0:0 -> filterEntries
    10:10:java.util.SortedMap filterFiltered(com.google.common.collect.Maps$FilteredEntrySortedMap,com.google.common.base.Predicate):0 -> filterEntries
    10:10:java.util.SortedMap filterEntries(java.util.SortedMap,com.google.common.base.Predicate):0 -> filterEntries
    11:11:java.util.SortedMap filterFiltered(com.google.common.collect.Maps$FilteredEntrySortedMap,com.google.common.base.Predicate):0:0 -> filterEntries
    11:11:java.util.SortedMap filterEntries(java.util.SortedMap,com.google.common.base.Predicate):0 -> filterEntries
    12:12:java.util.SortedMap filterEntries(java.util.SortedMap,com.google.common.base.Predicate):0:0 -> filterEntries
    1:1:java.util.Map filterFiltered(com.google.common.collect.Maps$AbstractFilteredMap,com.google.common.base.Predicate):0:0 -> filterKeys
    1:1:java.util.Map filterKeys(java.util.Map,com.google.common.base.Predicate):0 -> filterKeys
    2:2:java.util.Map filterKeys(java.util.Map,com.google.common.base.Predicate):0:0 -> filterKeys
    void doDifference(java.util.Map,java.util.Map,com.google.common.base.Equivalence,java.util.Map,java.util.Map,java.util.Map,java.util.Map) -> g
    boolean equalsImpl(java.util.Map,java.lang.Object) -> h
    com.google.common.collect.ImmutableMap indexMap(java.util.Collection) -> i
    java.lang.Object keyOrNull(java.util.Map$Entry) -> j
    com.google.common.base.Predicate keyPredicateOnEntries(com.google.common.base.Predicate) -> k
    boolean safeContainsKey(java.util.Map,java.lang.Object) -> l
    java.lang.Object safeGet(java.util.Map,java.lang.Object) -> m
    java.lang.String toStringImpl(java.util.Map) -> n
    java.util.Map$Entry unmodifiableEntry(java.util.Map$Entry) -> o
    com.google.common.base.Predicate valuePredicateOnEntries(com.google.common.base.Predicate) -> p
    1:1:com.google.common.collect.BiMap com.google.common.collect.Synchronized.biMap(com.google.common.collect.BiMap,java.lang.Object):0:0 -> synchronizedBiMap
    1:1:com.google.common.collect.BiMap synchronizedBiMap(com.google.common.collect.BiMap):0 -> synchronizedBiMap
    1:1:java.util.NavigableMap com.google.common.collect.Synchronized.navigableMap(java.util.NavigableMap,java.lang.Object):0:0 -> synchronizedNavigableMap
    1:1:java.util.NavigableMap com.google.common.collect.Synchronized.navigableMap(java.util.NavigableMap):0 -> synchronizedNavigableMap
    1:1:java.util.NavigableMap synchronizedNavigableMap(java.util.NavigableMap):0 -> synchronizedNavigableMap
    1:1:java.util.stream.Collector com.google.common.collect.CollectCollectors.toImmutableEnumMap(java.util.function.Function,java.util.function.Function):0:0 -> toImmutableEnumMap
    1:1:java.util.stream.Collector toImmutableEnumMap(java.util.function.Function,java.util.function.Function):0 -> toImmutableEnumMap
    2:2:java.util.stream.Collector com.google.common.collect.CollectCollectors.toImmutableEnumMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator):0:0 -> toImmutableEnumMap
    2:2:java.util.stream.Collector toImmutableEnumMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator):0 -> toImmutableEnumMap
com.google.common.collect.Maps$1 -> com.google.common.collect.mj:
    1:1:java.lang.Object transform(java.util.Map$Entry):0:0 -> a
    1:1:java.lang.Object transform(java.lang.Object):0 -> a
com.google.common.collect.Maps$10 -> com.google.common.collect.ij:
    com.google.common.collect.Maps$EntryTransformer val$transformer -> a
    java.lang.Object val$key -> b
com.google.common.collect.Maps$11 -> com.google.common.collect.jj:
    com.google.common.collect.Maps$EntryTransformer val$transformer -> a
    1:1:java.lang.Object apply(java.util.Map$Entry):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.Maps$12 -> com.google.common.collect.kj:
    java.util.Map$Entry val$entry -> a
    com.google.common.collect.Maps$EntryTransformer val$transformer -> b
com.google.common.collect.Maps$13 -> com.google.common.collect.lj:
    com.google.common.collect.Maps$EntryTransformer val$transformer -> a
    1:1:java.util.Map$Entry apply(java.util.Map$Entry):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
    2:2:java.util.Map$Entry com.google.common.collect.Maps.transformEntry(com.google.common.collect.Maps$EntryTransformer,java.util.Map$Entry):0:0 -> apply
    2:2:java.util.Map$Entry apply(java.util.Map$Entry):0 -> apply
    2:2:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.Maps$2 -> com.google.common.collect.nj:
    1:1:java.lang.Object transform(java.util.Map$Entry):0:0 -> a
    1:1:java.lang.Object transform(java.lang.Object):0 -> a
com.google.common.collect.Maps$3 -> com.google.common.collect.oj:
    com.google.common.base.Function val$function -> b
    1:1:java.util.Map$Entry transform(java.lang.Object):0:0 -> a
    1:1:java.lang.Object transform(java.lang.Object):0 -> a
com.google.common.collect.Maps$4 -> com.google.common.collect.pj:
    java.util.Set val$set -> a
    1:1:java.util.Set delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
    2:2:java.util.Set delegate():0:0 -> delegate
    2:2:java.util.Collection delegate():0 -> delegate
com.google.common.collect.Maps$5 -> com.google.common.collect.qj:
    java.util.SortedSet val$set -> a
    1:1:java.util.SortedSet delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
    2:2:java.util.SortedSet delegate():0:0 -> delegate
    2:2:java.util.Collection delegate():0 -> delegate
    3:3:java.util.SortedSet delegate():0:0 -> delegate
    3:3:java.util.Set delegate():0 -> delegate
    1:1:java.util.SortedSet com.google.common.collect.Maps.removeOnlySortedSet(java.util.SortedSet):0:0 -> headSet
    1:1:java.util.SortedSet com.google.common.collect.Maps.access$300(java.util.SortedSet):0 -> headSet
    1:1:java.util.SortedSet headSet(java.lang.Object):0 -> headSet
    1:1:java.util.SortedSet com.google.common.collect.Maps.removeOnlySortedSet(java.util.SortedSet):0:0 -> subSet
    1:1:java.util.SortedSet com.google.common.collect.Maps.access$300(java.util.SortedSet):0 -> subSet
    1:1:java.util.SortedSet subSet(java.lang.Object,java.lang.Object):0 -> subSet
    1:1:java.util.SortedSet com.google.common.collect.Maps.removeOnlySortedSet(java.util.SortedSet):0:0 -> tailSet
    1:1:java.util.SortedSet com.google.common.collect.Maps.access$300(java.util.SortedSet):0 -> tailSet
    1:1:java.util.SortedSet tailSet(java.lang.Object):0 -> tailSet
com.google.common.collect.Maps$6 -> com.google.common.collect.rj:
    java.util.NavigableSet val$set -> a
    1:1:java.util.NavigableSet delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
    2:2:java.util.NavigableSet delegate():0:0 -> delegate
    2:2:java.util.Collection delegate():0 -> delegate
    3:3:java.util.NavigableSet delegate():0:0 -> delegate
    3:3:java.util.Set delegate():0 -> delegate
    4:4:java.util.NavigableSet delegate():0:0 -> delegate
    4:4:java.util.SortedSet delegate():0 -> delegate
    1:1:java.util.NavigableSet com.google.common.collect.Maps.removeOnlyNavigableSet(java.util.NavigableSet):0:0 -> descendingSet
    1:1:java.util.NavigableSet com.google.common.collect.Maps.access$400(java.util.NavigableSet):0 -> descendingSet
    1:1:java.util.NavigableSet descendingSet():0 -> descendingSet
    1:1:java.util.NavigableSet com.google.common.collect.Maps.removeOnlyNavigableSet(java.util.NavigableSet):0:0 -> headSet
    1:1:java.util.NavigableSet com.google.common.collect.Maps.access$400(java.util.NavigableSet):0 -> headSet
    1:1:java.util.NavigableSet headSet(java.lang.Object,boolean):0 -> headSet
    2:2:java.util.SortedSet com.google.common.collect.Maps.removeOnlySortedSet(java.util.SortedSet):0:0 -> headSet
    2:2:java.util.SortedSet com.google.common.collect.Maps.access$300(java.util.SortedSet):0 -> headSet
    2:2:java.util.SortedSet headSet(java.lang.Object):0 -> headSet
    1:1:java.util.NavigableSet com.google.common.collect.Maps.removeOnlyNavigableSet(java.util.NavigableSet):0:0 -> subSet
    1:1:java.util.NavigableSet com.google.common.collect.Maps.access$400(java.util.NavigableSet):0 -> subSet
    1:1:java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean):0 -> subSet
    2:2:java.util.SortedSet com.google.common.collect.Maps.removeOnlySortedSet(java.util.SortedSet):0:0 -> subSet
    2:2:java.util.SortedSet com.google.common.collect.Maps.access$300(java.util.SortedSet):0 -> subSet
    2:2:java.util.SortedSet subSet(java.lang.Object,java.lang.Object):0 -> subSet
    1:1:java.util.NavigableSet com.google.common.collect.Maps.removeOnlyNavigableSet(java.util.NavigableSet):0:0 -> tailSet
    1:1:java.util.NavigableSet com.google.common.collect.Maps.access$400(java.util.NavigableSet):0 -> tailSet
    1:1:java.util.NavigableSet tailSet(java.lang.Object,boolean):0 -> tailSet
    2:2:java.util.SortedSet com.google.common.collect.Maps.removeOnlySortedSet(java.util.SortedSet):0:0 -> tailSet
    2:2:java.util.SortedSet com.google.common.collect.Maps.access$300(java.util.SortedSet):0 -> tailSet
    2:2:java.util.SortedSet tailSet(java.lang.Object):0 -> tailSet
com.google.common.collect.Maps$7 -> com.google.common.collect.sj:
    java.util.Map$Entry val$entry -> a
com.google.common.collect.Maps$8 -> com.google.common.collect.tj:
    java.util.Iterator val$entryIterator -> a
    1:1:java.util.Map$Entry next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
com.google.common.collect.Maps$9 -> com.google.common.collect.uj:
    com.google.common.base.Function val$function -> a
com.google.common.collect.Maps$AbstractFilteredMap -> com.google.common.collect.vj:
    com.google.common.base.Predicate predicate -> e
    java.util.Map unfiltered -> d
    java.util.Collection createValues() -> a
    boolean apply(java.lang.Object,java.lang.Object) -> b
    1:1:boolean apply(java.lang.Object,java.lang.Object):0:0 -> containsKey
    1:1:boolean containsKey(java.lang.Object):0 -> containsKey
    1:1:boolean apply(java.lang.Object,java.lang.Object):0:0 -> get
    1:1:java.lang.Object get(java.lang.Object):0 -> get
    1:1:boolean apply(java.lang.Object,java.lang.Object):0:0 -> put
    1:1:java.lang.Object put(java.lang.Object,java.lang.Object):0 -> put
    2:2:java.lang.Object put(java.lang.Object,java.lang.Object):0:0 -> put
com.google.common.collect.Maps$AsMapView -> com.google.common.collect.xj:
    java.util.Set set -> d
    com.google.common.base.Function function -> e
    java.util.Collection createValues() -> a
    java.util.Set backingSet() -> b
    1:1:java.util.Set com.google.common.collect.Maps.removeOnlySet(java.util.Set):0:0 -> createKeySet
    1:1:java.util.Set com.google.common.collect.Maps.access$200(java.util.Set):0 -> createKeySet
    1:1:java.util.Set createKeySet():0 -> createKeySet
com.google.common.collect.Maps$AsMapView$1EntrySetImpl -> com.google.common.collect.wj:
    com.google.common.collect.Maps$AsMapView this$0 -> a
    java.util.Map map() -> a
com.google.common.collect.Maps$BiMapConverter -> com.google.common.collect.yj:
    com.google.common.collect.BiMap bimap -> c
    1:1:java.lang.Object convert(com.google.common.collect.BiMap,java.lang.Object):0:0 -> doBackward
    1:1:java.lang.Object doBackward(java.lang.Object):0 -> doBackward
    1:1:java.lang.Object convert(com.google.common.collect.BiMap,java.lang.Object):0:0 -> doForward
    1:1:java.lang.Object doForward(java.lang.Object):0 -> doForward
com.google.common.collect.Maps$DescendingMap -> com.google.common.collect.ak:
    java.util.NavigableSet navigableKeySet -> c
    java.util.Set entrySet -> b
    java.util.Comparator comparator -> a
    java.util.NavigableMap forward() -> a
    1:1:com.google.common.collect.Ordering reverse(java.util.Comparator):0:0 -> comparator
    1:1:java.util.Comparator comparator():0 -> comparator
    2:2:java.util.Comparator comparator():0:0 -> comparator
    1:1:java.util.Set createEntrySet():0:0 -> entrySet
    1:1:java.util.Set entrySet():0 -> entrySet
    2:2:java.util.Set entrySet():0:0 -> entrySet
com.google.common.collect.Maps$DescendingMap$1EntrySetImpl -> com.google.common.collect.zj:
    com.google.common.collect.Maps$DescendingMap this$0 -> a
    java.util.Map map() -> a
com.google.common.collect.Maps$EntryFunction -> com.google.common.collect.dk:
    com.google.common.collect.Maps$EntryFunction VALUE -> b
    com.google.common.collect.Maps$EntryFunction KEY -> a
    com.google.common.collect.Maps$EntryFunction[] $VALUES -> c
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:void <init>(java.lang.String,int,com.google.common.collect.Maps$1):0 -> <init>
com.google.common.collect.Maps$EntryFunction$1 -> com.google.common.collect.bk:
    1:1:java.lang.Object apply(java.util.Map$Entry):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.Maps$EntryFunction$2 -> com.google.common.collect.ck:
    1:1:java.lang.Object apply(java.util.Map$Entry):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.Maps$EntrySet -> com.google.common.collect.ek:
    java.util.Map map() -> a
com.google.common.collect.Maps$FilteredEntryBiMap -> com.google.common.collect.gk:
    com.google.common.collect.BiMap inverse -> g
    1:1:com.google.common.base.Predicate inversePredicate(com.google.common.base.Predicate):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.BiMap,com.google.common.base.Predicate):0 -> <init>
    2:2:void <init>(com.google.common.collect.BiMap,com.google.common.base.Predicate,com.google.common.collect.BiMap):0:0 -> <init>
    2:2:void <init>(com.google.common.collect.BiMap,com.google.common.base.Predicate):0 -> <init>
    3:3:void <init>(com.google.common.collect.BiMap,com.google.common.base.Predicate):0:0 -> <init>
    1:1:boolean com.google.common.collect.Maps$AbstractFilteredMap.apply(java.lang.Object,java.lang.Object):0:0 -> forcePut
    1:1:java.lang.Object forcePut(java.lang.Object,java.lang.Object):0 -> forcePut
    2:2:java.lang.Object forcePut(java.lang.Object,java.lang.Object):0:0 -> forcePut
    3:3:com.google.common.collect.BiMap unfiltered():0:0 -> forcePut
    3:3:java.lang.Object forcePut(java.lang.Object,java.lang.Object):0 -> forcePut
    4:4:java.lang.Object forcePut(java.lang.Object,java.lang.Object):0:0 -> forcePut
    1:1:com.google.common.collect.BiMap unfiltered():0:0 -> replaceAll
    1:1:void replaceAll(java.util.function.BiFunction):0 -> replaceAll
    2:2:void replaceAll(java.util.function.BiFunction):0:0 -> replaceAll
com.google.common.collect.Maps$FilteredEntryBiMap$1 -> com.google.common.collect.fk:
    com.google.common.base.Predicate val$forwardPredicate -> a
    1:1:boolean apply(java.util.Map$Entry):0:0 -> apply
    1:1:boolean apply(java.lang.Object):0 -> apply
com.google.common.collect.Maps$FilteredEntryMap -> com.google.common.collect.lk:
    java.util.Set filteredEntrySet -> f
    boolean removeAllKeys(java.util.Map,com.google.common.base.Predicate,java.util.Collection) -> c
    boolean retainAllKeys(java.util.Map,com.google.common.base.Predicate,java.util.Collection) -> d
com.google.common.collect.Maps$FilteredEntryMap$EntrySet -> com.google.common.collect.jk:
    com.google.common.collect.Maps$FilteredEntryMap this$0 -> a
    1:1:void <init>(com.google.common.collect.Maps$FilteredEntryMap):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.Maps$FilteredEntryMap,com.google.common.collect.Maps$1):0 -> <init>
    1:1:java.util.Set delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
    2:2:java.util.Set delegate():0:0 -> delegate
    2:2:java.util.Collection delegate():0 -> delegate
com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1 -> com.google.common.collect.ik:
    com.google.common.collect.Maps$FilteredEntryMap$EntrySet this$1 -> b
    1:1:java.util.Map$Entry transform(java.util.Map$Entry):0:0 -> a
    1:1:java.lang.Object transform(java.lang.Object):0 -> a
com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1 -> com.google.common.collect.hk:
    java.util.Map$Entry val$entry -> a
    com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1 this$2 -> b
    1:1:java.util.Map$Entry delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
com.google.common.collect.Maps$FilteredEntryMap$KeySet -> com.google.common.collect.kk:
    com.google.common.collect.Maps$FilteredEntryMap this$0 -> b
com.google.common.collect.Maps$FilteredEntryNavigableMap -> com.google.common.collect.nk:
    java.util.Map filteredDelegate -> c
    com.google.common.base.Predicate entryPredicate -> b
    java.util.NavigableMap unfiltered -> a
    java.util.Iterator entryIterator() -> a
    java.util.Iterator descendingEntryIterator() -> c
    com.google.common.base.Predicate access$500(com.google.common.collect.Maps$FilteredEntryNavigableMap) -> d
    java.util.NavigableMap access$600(com.google.common.collect.Maps$FilteredEntryNavigableMap) -> e
com.google.common.collect.Maps$FilteredEntryNavigableMap$1 -> com.google.common.collect.mk:
    com.google.common.collect.Maps$FilteredEntryNavigableMap this$0 -> b
com.google.common.collect.Maps$FilteredEntrySortedMap -> com.google.common.collect.pk:
    1:1:java.util.SortedMap sortedMap():0:0 -> comparator
    1:1:java.util.Comparator comparator():0 -> comparator
    2:2:java.util.Comparator comparator():0:0 -> comparator
    1:1:java.util.SortedSet createKeySet():0:0 -> createKeySet
    1:1:java.util.Set createKeySet():0 -> createKeySet
    1:1:java.util.SortedSet keySet():0:0 -> firstKey
    1:1:java.lang.Object firstKey():0 -> firstKey
    2:2:java.lang.Object firstKey():0:0 -> firstKey
    1:1:java.util.SortedMap sortedMap():0:0 -> headMap
    1:1:java.util.SortedMap headMap(java.lang.Object):0 -> headMap
    2:2:java.util.SortedMap headMap(java.lang.Object):0:0 -> headMap
    1:1:java.util.SortedSet keySet():0:0 -> keySet
    1:1:java.util.Set keySet():0 -> keySet
    1:1:java.util.SortedMap sortedMap():0:0 -> lastKey
    1:1:java.lang.Object lastKey():0 -> lastKey
    2:2:java.lang.Object lastKey():0:0 -> lastKey
    3:3:java.util.SortedMap sortedMap():0:0 -> lastKey
    3:3:java.lang.Object lastKey():0 -> lastKey
    4:4:java.lang.Object lastKey():0:0 -> lastKey
    1:1:java.util.SortedMap sortedMap():0:0 -> subMap
    1:1:java.util.SortedMap subMap(java.lang.Object,java.lang.Object):0 -> subMap
    2:2:java.util.SortedMap subMap(java.lang.Object,java.lang.Object):0:0 -> subMap
    1:1:java.util.SortedMap sortedMap():0:0 -> tailMap
    1:1:java.util.SortedMap tailMap(java.lang.Object):0 -> tailMap
    2:2:java.util.SortedMap tailMap(java.lang.Object):0:0 -> tailMap
com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet -> com.google.common.collect.ok:
    com.google.common.collect.Maps$FilteredEntrySortedMap this$0 -> c
    1:1:java.util.SortedMap com.google.common.collect.Maps$FilteredEntrySortedMap.sortedMap():0:0 -> comparator
    1:1:java.util.Comparator comparator():0 -> comparator
    2:2:java.util.Comparator comparator():0:0 -> comparator
com.google.common.collect.Maps$FilteredKeyMap -> com.google.common.collect.qk:
    com.google.common.base.Predicate keyPredicate -> f
com.google.common.collect.Maps$FilteredMapValues -> com.google.common.collect.rk:
    java.util.Map unfiltered -> b
    com.google.common.base.Predicate predicate -> c
com.google.common.collect.Maps$IteratorBasedAbstractMap -> com.google.common.collect.tk:
    java.util.Iterator entryIterator() -> a
    java.util.Spliterator entrySpliterator() -> b
com.google.common.collect.Maps$IteratorBasedAbstractMap$1 -> com.google.common.collect.sk:
    com.google.common.collect.Maps$IteratorBasedAbstractMap this$0 -> a
    java.util.Map map() -> a
    1:1:void com.google.common.collect.Maps$IteratorBasedAbstractMap.forEachEntry(java.util.function.Consumer):0:0 -> forEach
    1:1:void forEach(java.util.function.Consumer):0 -> forEach
com.google.common.collect.Maps$KeySet -> com.google.common.collect.uk:
    java.util.Map map -> a
    java.util.Map map() -> a
    1:1:java.util.Iterator com.google.common.collect.Maps.keyIterator(java.util.Iterator):0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.collect.Maps$MapDifferenceImpl -> com.google.common.collect.vk:
    java.util.Map onlyOnLeft -> a
    java.util.Map onlyOnRight -> b
    java.util.Map onBoth -> c
    java.util.Map differences -> d
    1:1:boolean areEqual():0:0 -> toString
    1:1:java.lang.String toString():0 -> toString
    2:2:java.lang.String toString():0:0 -> toString
com.google.common.collect.Maps$NavigableAsMapView -> com.google.common.collect.wk:
    com.google.common.base.Function function -> b
    java.util.NavigableSet set -> a
    java.util.Iterator entryIterator() -> a
    java.util.Spliterator entrySpliterator() -> b
    java.util.Iterator descendingEntryIterator() -> c
    1:1:java.util.Map$Entry lambda$entrySpliterator$0(java.lang.Object):0:0 -> d
    1:1:java.util.Map$Entry lambda$entrySpliterator$0$Maps$NavigableAsMapView(java.lang.Object):0 -> d
    1:1:void lambda$forEach$1(java.util.function.BiConsumer,java.lang.Object):0:0 -> e
    1:1:void lambda$forEach$1$Maps$NavigableAsMapView(java.util.function.BiConsumer,java.lang.Object):0 -> e
    1:1:java.util.NavigableSet com.google.common.collect.Maps.removeOnlyNavigableSet(java.util.NavigableSet):0:0 -> navigableKeySet
    1:1:java.util.NavigableSet com.google.common.collect.Maps.access$400(java.util.NavigableSet):0 -> navigableKeySet
    1:1:java.util.NavigableSet navigableKeySet():0 -> navigableKeySet
com.google.common.collect.Maps$NavigableKeySet -> com.google.common.collect.xk:
    1:1:java.util.NavigableMap map():0:0 -> a
    1:1:java.util.Map map():0 -> a
    1:1:java.util.NavigableMap map():0:0 -> b
    1:1:java.util.SortedMap map():0 -> b
    1:1:java.util.NavigableMap map():0:0 -> ceiling
    1:1:java.lang.Object ceiling(java.lang.Object):0 -> ceiling
    2:2:java.lang.Object ceiling(java.lang.Object):0:0 -> ceiling
    1:1:java.util.NavigableMap map():0:0 -> descendingSet
    1:1:java.util.NavigableSet descendingSet():0 -> descendingSet
    2:2:java.util.NavigableSet descendingSet():0:0 -> descendingSet
    1:1:java.util.NavigableMap map():0:0 -> floor
    1:1:java.lang.Object floor(java.lang.Object):0 -> floor
    2:2:java.lang.Object floor(java.lang.Object):0:0 -> floor
    1:1:java.util.NavigableMap map():0:0 -> headSet
    1:1:java.util.NavigableSet headSet(java.lang.Object,boolean):0 -> headSet
    2:2:java.util.NavigableSet headSet(java.lang.Object,boolean):0:0 -> headSet
    1:1:java.util.NavigableMap map():0:0 -> higher
    1:1:java.lang.Object higher(java.lang.Object):0 -> higher
    2:2:java.lang.Object higher(java.lang.Object):0:0 -> higher
    1:1:java.util.NavigableMap map():0:0 -> lower
    1:1:java.lang.Object lower(java.lang.Object):0 -> lower
    2:2:java.lang.Object lower(java.lang.Object):0:0 -> lower
    1:1:java.util.NavigableMap map():0:0 -> pollFirst
    1:1:java.lang.Object pollFirst():0 -> pollFirst
    2:2:java.lang.Object pollFirst():0:0 -> pollFirst
    1:1:java.util.NavigableMap map():0:0 -> pollLast
    1:1:java.lang.Object pollLast():0 -> pollLast
    2:2:java.lang.Object pollLast():0:0 -> pollLast
    1:1:java.util.NavigableMap map():0:0 -> subSet
    1:1:java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean):0 -> subSet
    2:2:java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean):0:0 -> subSet
    1:1:java.util.NavigableMap map():0:0 -> tailSet
    1:1:java.util.NavigableSet tailSet(java.lang.Object,boolean):0 -> tailSet
    2:2:java.util.NavigableSet tailSet(java.lang.Object,boolean):0:0 -> tailSet
com.google.common.collect.Maps$SortedAsMapView -> com.google.common.collect.yk:
    java.util.Set backingSet() -> b
    java.util.SortedSet backingSet() -> c
    1:1:java.util.SortedSet com.google.common.collect.Maps.removeOnlySortedSet(java.util.SortedSet):0:0 -> keySet
    1:1:java.util.SortedSet com.google.common.collect.Maps.access$300(java.util.SortedSet):0 -> keySet
    1:1:java.util.Set keySet():0 -> keySet
com.google.common.collect.Maps$SortedKeySet -> com.google.common.collect.zk:
    java.util.Map map() -> a
    1:1:java.util.Map com.google.common.collect.Maps$KeySet.map():0:0 -> b
    1:1:java.util.SortedMap map():0 -> b
    2:2:java.util.SortedMap map():0:0 -> b
com.google.common.collect.Maps$SortedMapDifferenceImpl -> com.google.common.collect.al:
    1:1:java.util.Map com.google.common.collect.Maps$MapDifferenceImpl.entriesDiffering():0:0 -> entriesDiffering
    1:1:java.util.SortedMap entriesDiffering():0 -> entriesDiffering
    1:1:java.util.Map entriesDiffering():0 -> entriesDiffering
    2:2:java.util.SortedMap entriesDiffering():0:0 -> entriesDiffering
    2:2:java.util.Map entriesDiffering():0 -> entriesDiffering
    3:3:java.util.Map com.google.common.collect.Maps$MapDifferenceImpl.entriesDiffering():0:0 -> entriesDiffering
    3:3:java.util.SortedMap entriesDiffering():0 -> entriesDiffering
    4:4:java.util.SortedMap entriesDiffering():0:0 -> entriesDiffering
    1:1:java.util.Map com.google.common.collect.Maps$MapDifferenceImpl.entriesInCommon():0:0 -> entriesInCommon
    1:1:java.util.SortedMap entriesInCommon():0 -> entriesInCommon
    1:1:java.util.Map entriesInCommon():0 -> entriesInCommon
    2:2:java.util.SortedMap entriesInCommon():0:0 -> entriesInCommon
    2:2:java.util.Map entriesInCommon():0 -> entriesInCommon
    3:3:java.util.Map com.google.common.collect.Maps$MapDifferenceImpl.entriesInCommon():0:0 -> entriesInCommon
    3:3:java.util.SortedMap entriesInCommon():0 -> entriesInCommon
    4:4:java.util.SortedMap entriesInCommon():0:0 -> entriesInCommon
    1:1:java.util.Map com.google.common.collect.Maps$MapDifferenceImpl.entriesOnlyOnLeft():0:0 -> entriesOnlyOnLeft
    1:1:java.util.SortedMap entriesOnlyOnLeft():0 -> entriesOnlyOnLeft
    1:1:java.util.Map entriesOnlyOnLeft():0 -> entriesOnlyOnLeft
    2:2:java.util.SortedMap entriesOnlyOnLeft():0:0 -> entriesOnlyOnLeft
    2:2:java.util.Map entriesOnlyOnLeft():0 -> entriesOnlyOnLeft
    3:3:java.util.Map com.google.common.collect.Maps$MapDifferenceImpl.entriesOnlyOnLeft():0:0 -> entriesOnlyOnLeft
    3:3:java.util.SortedMap entriesOnlyOnLeft():0 -> entriesOnlyOnLeft
    4:4:java.util.SortedMap entriesOnlyOnLeft():0:0 -> entriesOnlyOnLeft
    1:1:java.util.Map com.google.common.collect.Maps$MapDifferenceImpl.entriesOnlyOnRight():0:0 -> entriesOnlyOnRight
    1:1:java.util.SortedMap entriesOnlyOnRight():0 -> entriesOnlyOnRight
    1:1:java.util.Map entriesOnlyOnRight():0 -> entriesOnlyOnRight
    2:2:java.util.SortedMap entriesOnlyOnRight():0:0 -> entriesOnlyOnRight
    2:2:java.util.Map entriesOnlyOnRight():0 -> entriesOnlyOnRight
    3:3:java.util.Map com.google.common.collect.Maps$MapDifferenceImpl.entriesOnlyOnRight():0:0 -> entriesOnlyOnRight
    3:3:java.util.SortedMap entriesOnlyOnRight():0 -> entriesOnlyOnRight
    4:4:java.util.SortedMap entriesOnlyOnRight():0:0 -> entriesOnlyOnRight
com.google.common.collect.Maps$TransformedEntriesMap -> com.google.common.collect.bl:
    java.util.Map fromMap -> a
    com.google.common.collect.Maps$EntryTransformer transformer -> b
    java.util.Iterator entryIterator() -> a
    java.util.Spliterator entrySpliterator() -> b
com.google.common.collect.Maps$TransformedEntriesNavigableMap -> com.google.common.collect.cl:
    1:1:java.util.Map$Entry com.google.common.collect.Maps.transformEntry(com.google.common.collect.Maps$EntryTransformer,java.util.Map$Entry):0:0 -> c
    1:1:java.util.Map$Entry transformEntry(java.util.Map$Entry):0 -> c
    1:1:java.util.SortedMap com.google.common.collect.Maps$TransformedEntriesSortedMap.fromMap():0:0 -> fromMap
    1:1:java.util.NavigableMap fromMap():0 -> fromMap
    2:2:java.util.NavigableMap fromMap():0:0 -> fromMap
    1:1:java.util.NavigableMap headMap(java.lang.Object):0:0 -> headMap
    1:1:java.util.SortedMap headMap(java.lang.Object):0 -> headMap
    1:1:java.util.NavigableMap subMap(java.lang.Object,java.lang.Object):0:0 -> subMap
    1:1:java.util.SortedMap subMap(java.lang.Object,java.lang.Object):0 -> subMap
    1:1:java.util.NavigableMap tailMap(java.lang.Object):0:0 -> tailMap
    1:1:java.util.SortedMap tailMap(java.lang.Object):0 -> tailMap
com.google.common.collect.Maps$TransformedEntriesSortedMap -> com.google.common.collect.dl:
com.google.common.collect.Maps$UnmodifiableBiMap -> com.google.common.collect.el:
    java.util.Map unmodifiableMap -> a
    com.google.common.collect.BiMap delegate -> b
    com.google.common.collect.BiMap inverse -> c
    java.util.Set values -> d
    1:1:java.util.Map delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
com.google.common.collect.Maps$UnmodifiableEntries -> com.google.common.collect.fl:
    java.util.Collection entries -> a
    1:1:java.util.Collection delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
    1:1:com.google.common.collect.UnmodifiableIterator com.google.common.collect.Maps.unmodifiableEntryIterator(java.util.Iterator):0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.collect.Maps$UnmodifiableEntrySet -> com.google.common.collect.gl:
com.google.common.collect.Maps$UnmodifiableNavigableMap -> com.google.common.collect.hl:
    com.google.common.collect.Maps$UnmodifiableNavigableMap descendingMap -> b
    java.util.NavigableMap delegate -> a
    1:1:java.util.NavigableMap headMap(java.lang.Object,boolean):0:0 -> headMap
    1:1:java.util.SortedMap headMap(java.lang.Object):0 -> headMap
    1:1:java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean):0:0 -> subMap
    1:1:java.util.SortedMap subMap(java.lang.Object,java.lang.Object):0 -> subMap
    1:1:java.util.NavigableMap tailMap(java.lang.Object,boolean):0:0 -> tailMap
    1:1:java.util.SortedMap tailMap(java.lang.Object):0 -> tailMap
com.google.common.collect.Maps$ValueDifferenceImpl -> com.google.common.collect.il:
    java.lang.Object right -> b
    java.lang.Object left -> a
    com.google.common.collect.MapDifference$ValueDifference create(java.lang.Object,java.lang.Object) -> a
com.google.common.collect.Maps$Values -> com.google.common.collect.jl:
    java.util.Map map -> a
    1:1:java.util.Map map():0:0 -> clear
    1:1:void clear():0 -> clear
    2:2:void clear():0:0 -> clear
    1:1:java.util.Map map():0:0 -> contains
    1:1:boolean contains(java.lang.Object):0 -> contains
    2:2:boolean contains(java.lang.Object):0:0 -> contains
    1:1:java.util.Map map():0:0 -> isEmpty
    1:1:boolean isEmpty():0 -> isEmpty
    2:2:boolean isEmpty():0:0 -> isEmpty
    1:1:java.util.Map map():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
    2:2:java.util.Iterator iterator():0:0 -> iterator
    3:3:java.util.Iterator com.google.common.collect.Maps.valueIterator(java.util.Iterator):0:0 -> iterator
    3:3:java.util.Iterator iterator():0 -> iterator
    1:1:java.util.Map map():0:0 -> remove
    1:1:boolean remove(java.lang.Object):0 -> remove
    2:2:boolean remove(java.lang.Object):0:0 -> remove
    3:3:java.util.Map map():0:0 -> remove
    3:3:boolean remove(java.lang.Object):0 -> remove
    4:4:boolean remove(java.lang.Object):0:0 -> remove
    1:1:java.util.Map map():0:0 -> removeAll
    1:1:boolean removeAll(java.util.Collection):0 -> removeAll
    2:2:boolean removeAll(java.util.Collection):0:0 -> removeAll
    3:3:java.util.Map map():0:0 -> removeAll
    3:3:boolean removeAll(java.util.Collection):0 -> removeAll
    4:4:boolean removeAll(java.util.Collection):0:0 -> removeAll
    1:1:java.util.Map map():0:0 -> retainAll
    1:1:boolean retainAll(java.util.Collection):0 -> retainAll
    2:2:boolean retainAll(java.util.Collection):0:0 -> retainAll
    3:3:java.util.Map map():0:0 -> retainAll
    3:3:boolean retainAll(java.util.Collection):0 -> retainAll
    4:4:boolean retainAll(java.util.Collection):0:0 -> retainAll
    1:1:java.util.Map map():0:0 -> size
    1:1:int size():0 -> size
    2:2:int size():0:0 -> size
com.google.common.collect.Maps$ViewCachingAbstractMap -> com.google.common.collect.kl:
    java.util.Collection values -> c
    java.util.Set entrySet -> a
    java.util.Set keySet -> b
    java.util.Collection createValues() -> a
com.google.common.collect.MinMaxPriorityQueue -> com.google.common.collect.MinMaxPriorityQueue:
    java.lang.Object[] queue -> d
    int modCount -> f
    com.google.common.collect.MinMaxPriorityQueue$Heap maxHeap -> b
    com.google.common.collect.MinMaxPriorityQueue$Heap minHeap -> a
    int size -> e
    int maximumSize -> c
    java.lang.Object[] access$500(com.google.common.collect.MinMaxPriorityQueue) -> a
    int access$600(com.google.common.collect.MinMaxPriorityQueue) -> b
    int access$700(com.google.common.collect.MinMaxPriorityQueue) -> c
    java.lang.Object elementData(int) -> d
    1:1:int com.google.common.collect.MinMaxPriorityQueue$Heap.compareElements(int,int):0:0 -> e
    1:1:int getMaxElementIndex():0 -> e
    2:2:java.lang.Object elementData(int):0:0 -> e
    2:2:int com.google.common.collect.MinMaxPriorityQueue$Heap.compareElements(int,int):0 -> e
    2:2:int getMaxElementIndex():0 -> e
    3:3:int com.google.common.collect.MinMaxPriorityQueue$Heap.compareElements(int,int):0:0 -> e
    3:3:int getMaxElementIndex():0 -> e
    1:1:boolean isEvenLevel(int):0:0 -> f
    1:1:com.google.common.collect.MinMaxPriorityQueue$Heap heapForIndex(int):0 -> f
    2:2:com.google.common.collect.MinMaxPriorityQueue$Heap heapForIndex(int):0:0 -> f
    1:1:java.lang.Object elementData(int):0:0 -> g
    1:1:java.lang.Object removeAndGet(int):0 -> g
    2:2:java.lang.Object removeAndGet(int):0:0 -> g
    1:1:java.lang.Object elementData(int):0:0 -> h
    1:1:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0 -> h
    2:2:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0:0 -> h
    3:3:int com.google.common.collect.MinMaxPriorityQueue$Heap.swapWithConceptuallyLastElement(java.lang.Object):0:0 -> h
    3:3:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0 -> h
    4:4:int com.google.common.collect.MinMaxPriorityQueue$Heap.getParentIndex(int):0:0 -> h
    4:4:int com.google.common.collect.MinMaxPriorityQueue$Heap.swapWithConceptuallyLastElement(java.lang.Object):0 -> h
    4:4:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0 -> h
    5:5:int com.google.common.collect.MinMaxPriorityQueue$Heap.swapWithConceptuallyLastElement(java.lang.Object):0:0 -> h
    5:5:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0 -> h
    6:6:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0:0 -> h
    7:7:java.lang.Object elementData(int):0:0 -> h
    7:7:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0 -> h
    8:8:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0:0 -> h
    9:9:com.google.common.collect.MinMaxPriorityQueue$MoveDesc fillHole(int,java.lang.Object):0:0 -> h
    9:9:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0 -> h
    10:10:int com.google.common.collect.MinMaxPriorityQueue$Heap.fillHoleAt(int):0:0 -> h
    10:10:com.google.common.collect.MinMaxPriorityQueue$MoveDesc fillHole(int,java.lang.Object):0 -> h
    10:10:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0 -> h
    11:11:int com.google.common.collect.MinMaxPriorityQueue$Heap.findMinGrandChild(int):0:0 -> h
    11:11:int com.google.common.collect.MinMaxPriorityQueue$Heap.fillHoleAt(int):0 -> h
    11:11:com.google.common.collect.MinMaxPriorityQueue$MoveDesc fillHole(int,java.lang.Object):0 -> h
    11:11:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0 -> h
    12:12:int com.google.common.collect.MinMaxPriorityQueue$Heap.fillHoleAt(int):0:0 -> h
    12:12:com.google.common.collect.MinMaxPriorityQueue$MoveDesc fillHole(int,java.lang.Object):0 -> h
    12:12:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0 -> h
    13:13:com.google.common.collect.MinMaxPriorityQueue$MoveDesc fillHole(int,java.lang.Object):0:0 -> h
    13:13:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0 -> h
    14:14:int com.google.common.collect.MinMaxPriorityQueue$Heap.findMinChild(int):0:0 -> h
    14:14:int com.google.common.collect.MinMaxPriorityQueue$Heap.crossOver(int,java.lang.Object):0 -> h
    14:14:com.google.common.collect.MinMaxPriorityQueue$MoveDesc com.google.common.collect.MinMaxPriorityQueue$Heap.tryCrossOverAndBubbleUp(int,int,java.lang.Object):0 -> h
    14:14:com.google.common.collect.MinMaxPriorityQueue$MoveDesc fillHole(int,java.lang.Object):0 -> h
    14:14:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0 -> h
    15:15:int com.google.common.collect.MinMaxPriorityQueue$Heap.crossOver(int,java.lang.Object):0:0 -> h
    15:15:com.google.common.collect.MinMaxPriorityQueue$MoveDesc com.google.common.collect.MinMaxPriorityQueue$Heap.tryCrossOverAndBubbleUp(int,int,java.lang.Object):0 -> h
    15:15:com.google.common.collect.MinMaxPriorityQueue$MoveDesc fillHole(int,java.lang.Object):0 -> h
    15:15:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0 -> h
    16:16:com.google.common.collect.MinMaxPriorityQueue$MoveDesc com.google.common.collect.MinMaxPriorityQueue$Heap.tryCrossOverAndBubbleUp(int,int,java.lang.Object):0:0 -> h
    16:16:com.google.common.collect.MinMaxPriorityQueue$MoveDesc fillHole(int,java.lang.Object):0 -> h
    16:16:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0 -> h
    17:17:int com.google.common.collect.MinMaxPriorityQueue$Heap.getParentIndex(int):0:0 -> h
    17:17:com.google.common.collect.MinMaxPriorityQueue$MoveDesc com.google.common.collect.MinMaxPriorityQueue$Heap.tryCrossOverAndBubbleUp(int,int,java.lang.Object):0 -> h
    17:17:com.google.common.collect.MinMaxPriorityQueue$MoveDesc fillHole(int,java.lang.Object):0 -> h
    17:17:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0 -> h
    18:18:com.google.common.collect.MinMaxPriorityQueue$MoveDesc com.google.common.collect.MinMaxPriorityQueue$Heap.tryCrossOverAndBubbleUp(int,int,java.lang.Object):0:0 -> h
    18:18:com.google.common.collect.MinMaxPriorityQueue$MoveDesc fillHole(int,java.lang.Object):0 -> h
    18:18:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0 -> h
    19:19:com.google.common.collect.MinMaxPriorityQueue$MoveDesc fillHole(int,java.lang.Object):0:0 -> h
    19:19:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0 -> h
    20:20:java.lang.Object elementData(int):0:0 -> h
    20:20:com.google.common.collect.MinMaxPriorityQueue$MoveDesc fillHole(int,java.lang.Object):0 -> h
    20:20:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0 -> h
    21:21:com.google.common.collect.MinMaxPriorityQueue$MoveDesc fillHole(int,java.lang.Object):0:0 -> h
    21:21:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0 -> h
    22:22:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int):0:0 -> h
    1:1:void growIfNeeded():0:0 -> offer
    1:1:boolean offer(java.lang.Object):0 -> offer
    2:2:int calculateNewCapacity():0:0 -> offer
    2:2:void growIfNeeded():0 -> offer
    2:2:boolean offer(java.lang.Object):0 -> offer
    3:3:int capAtMaximumSize(int,int):0:0 -> offer
    3:3:int calculateNewCapacity():0 -> offer
    3:3:void growIfNeeded():0 -> offer
    3:3:boolean offer(java.lang.Object):0 -> offer
    4:4:void growIfNeeded():0:0 -> offer
    4:4:boolean offer(java.lang.Object):0 -> offer
    5:5:boolean offer(java.lang.Object):0:0 -> offer
    6:6:void com.google.common.collect.MinMaxPriorityQueue$Heap.bubbleUp(int,java.lang.Object):0:0 -> offer
    6:6:boolean offer(java.lang.Object):0 -> offer
    7:7:boolean offer(java.lang.Object):0:0 -> offer
    1:1:java.lang.Object elementData(int):0:0 -> peek
    1:1:java.lang.Object peek():0 -> peek
    1:1:java.lang.Object elementData(int):0:0 -> peekLast
    1:1:java.lang.Object peekLast():0 -> peekLast
com.google.common.collect.MinMaxPriorityQueue$1 -> com.google.common.collect.ll:
com.google.common.collect.MinMaxPriorityQueue$Builder -> com.google.common.collect.MinMaxPriorityQueue$Builder:
    int expectedSize -> b
    int maximumSize -> c
    java.util.Comparator comparator -> a
    1:1:void <init>(java.util.Comparator):0:0 -> <init>
    1:1:void <init>(java.util.Comparator,com.google.common.collect.MinMaxPriorityQueue$1):0 -> <init>
    1:1:com.google.common.collect.Ordering ordering():0:0 -> a
    1:1:com.google.common.collect.Ordering access$200(com.google.common.collect.MinMaxPriorityQueue$Builder):0 -> a
    int access$300(com.google.common.collect.MinMaxPriorityQueue$Builder) -> b
    1:1:int com.google.common.collect.MinMaxPriorityQueue.initialQueueSize(int,int,java.lang.Iterable):0:0 -> create
    1:1:com.google.common.collect.MinMaxPriorityQueue create(java.lang.Iterable):0 -> create
    2:2:int com.google.common.collect.MinMaxPriorityQueue.capAtMaximumSize(int,int):0:0 -> create
    2:2:int com.google.common.collect.MinMaxPriorityQueue.initialQueueSize(int,int,java.lang.Iterable):0 -> create
    2:2:com.google.common.collect.MinMaxPriorityQueue create(java.lang.Iterable):0 -> create
    3:3:com.google.common.collect.MinMaxPriorityQueue create(java.lang.Iterable):0:0 -> create
com.google.common.collect.MinMaxPriorityQueue$Heap -> com.google.common.collect.ml:
    com.google.common.collect.Ordering ordering -> a
    com.google.common.collect.MinMaxPriorityQueue$Heap otherHeap -> b
    com.google.common.collect.MinMaxPriorityQueue this$0 -> c
    1:1:int getParentIndex(int):0:0 -> a
    1:1:int getGrandparentIndex(int):0 -> a
    1:1:int bubbleUpAlternatingLevels(int,java.lang.Object):0 -> a
    2:2:int bubbleUpAlternatingLevels(int,java.lang.Object):0:0 -> a
    1:1:int getParentIndex(int):0:0 -> b
    1:1:int crossOverUp(int,java.lang.Object):0 -> b
    2:2:int crossOverUp(int,java.lang.Object):0:0 -> b
    3:3:int getParentIndex(int):0:0 -> b
    3:3:int crossOverUp(int,java.lang.Object):0 -> b
    4:4:int crossOverUp(int,java.lang.Object):0:0 -> b
    1:1:int compareElements(int,int):0:0 -> c
    1:1:int findMin(int,int):0 -> c
com.google.common.collect.MinMaxPriorityQueue$MoveDesc -> com.google.common.collect.nl:
    java.lang.Object replaced -> b
    java.lang.Object toTrickle -> a
com.google.common.collect.MinMaxPriorityQueue$QueueIterator -> com.google.common.collect.ol:
    java.lang.Object lastFromForgetMeNot -> f
    java.util.List skipMe -> e
    java.util.Queue forgetMeNot -> d
    com.google.common.collect.MinMaxPriorityQueue this$0 -> h
    boolean canRemove -> g
    int nextCursor -> b
    int expectedModCount -> c
    int cursor -> a
    1:1:void <init>(com.google.common.collect.MinMaxPriorityQueue):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.MinMaxPriorityQueue,com.google.common.collect.MinMaxPriorityQueue$1):0 -> <init>
    void checkModCount() -> a
    boolean foundAndRemovedExactReference(java.lang.Iterable,java.lang.Object) -> b
    void nextNotInSkipMe(int) -> c
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
    3:3:boolean removeExact(java.lang.Object):0:0 -> remove
    3:3:void remove():0 -> remove
    4:4:void remove():0:0 -> remove
com.google.common.collect.MoreCollectors -> com.google.common.collect.MoreCollectors:
    java.lang.Object NULL_PLACEHOLDER -> b
    java.util.stream.Collector ONLY_ELEMENT -> c
    java.util.stream.Collector TO_OPTIONAL -> a
    void lambda$static$0(com.google.common.collect.MoreCollectors$ToOptionalState,java.lang.Object) -> a
    1:1:java.lang.Object com.google.common.collect.MoreCollectors$ToOptionalState.getElement():0:0 -> b
    1:1:java.lang.Object lambda$static$1(com.google.common.collect.MoreCollectors$ToOptionalState):0 -> b
    2:2:java.lang.Object lambda$static$1(com.google.common.collect.MoreCollectors$ToOptionalState):0:0 -> b
    3:3:java.lang.Object com.google.common.collect.MoreCollectors$ToOptionalState.getElement():0:0 -> b
    3:3:java.lang.Object lambda$static$1(com.google.common.collect.MoreCollectors$ToOptionalState):0 -> b
com.google.common.collect.MoreCollectors$ToOptionalState -> com.google.common.collect.pl:
    java.util.List extras -> b
    java.lang.Object element -> a
    void add(java.lang.Object) -> a
    java.lang.IllegalArgumentException multiples(boolean) -> b
com.google.common.collect.MultimapBuilder -> com.google.common.collect.MultimapBuilder:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.collect.MultimapBuilder$1):0 -> <init>
com.google.common.collect.MultimapBuilder$1 -> com.google.common.collect.ql:
    int val$expectedKeys -> a
    1:1:java.util.Map com.google.common.collect.Platform.newHashMapWithExpectedSize(int):0:0 -> a
    1:1:java.util.Map createMap():0 -> a
com.google.common.collect.MultimapBuilder$2 -> com.google.common.collect.rl:
    int val$expectedKeys -> a
    1:1:java.util.Map com.google.common.collect.Platform.newLinkedHashMapWithExpectedSize(int):0:0 -> a
    1:1:java.util.Map createMap():0 -> a
com.google.common.collect.MultimapBuilder$3 -> com.google.common.collect.sl:
    java.util.Comparator val$comparator -> a
    java.util.Map createMap() -> a
com.google.common.collect.MultimapBuilder$4 -> com.google.common.collect.tl:
    java.lang.Class val$keyClass -> a
    java.util.Map createMap() -> a
com.google.common.collect.MultimapBuilder$ArrayListSupplier -> com.google.common.collect.ul:
    int expectedValuesPerKey -> a
    1:1:java.util.List get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.collect.MultimapBuilder$EnumSetSupplier -> com.google.common.collect.vl:
    java.lang.Class clazz -> a
    1:1:java.util.Set get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.collect.MultimapBuilder$HashSetSupplier -> com.google.common.collect.wl:
    int expectedValuesPerKey -> a
    1:1:java.util.Set get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
    2:2:java.util.Set com.google.common.collect.Platform.newHashSetWithExpectedSize(int):0:0 -> get
    2:2:java.util.Set get():0 -> get
    2:2:java.lang.Object get():0 -> get
com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier -> com.google.common.collect.xl:
    int expectedValuesPerKey -> a
    1:1:java.util.Set get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
    2:2:java.util.Set com.google.common.collect.Platform.newLinkedHashSetWithExpectedSize(int):0:0 -> get
    2:2:java.util.Set get():0 -> get
    2:2:java.lang.Object get():0 -> get
com.google.common.collect.MultimapBuilder$LinkedListSupplier -> com.google.common.collect.yl:
    com.google.common.collect.MultimapBuilder$LinkedListSupplier INSTANCE -> a
    com.google.common.collect.MultimapBuilder$LinkedListSupplier[] $VALUES -> b
    1:1:java.util.List get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys -> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:
    java.util.Map createMap() -> a
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$1 -> com.google.common.collect.zl:
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> b
    int val$expectedValuesPerKey -> a
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$2 -> com.google.common.collect.am:
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> a
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$3 -> com.google.common.collect.bm:
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> b
    int val$expectedValuesPerKey -> a
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$4 -> com.google.common.collect.cm:
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> b
    int val$expectedValuesPerKey -> a
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5 -> com.google.common.collect.dm:
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> b
    java.util.Comparator val$comparator -> a
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$6 -> com.google.common.collect.em:
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> b
    java.lang.Class val$valueClass -> a
com.google.common.collect.MultimapBuilder$TreeSetSupplier -> com.google.common.collect.fm:
    java.util.Comparator comparator -> a
    1:1:java.util.SortedSet get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.collect.Multimaps -> com.google.common.collect.Multimaps:
    1:1:java.util.Collection unmodifiableValueCollection(java.util.Collection):0:0 -> a
    1:1:java.util.Collection access$000(java.util.Collection):0 -> a
    1:1:com.google.common.collect.Multimap filterFiltered(com.google.common.collect.FilteredMultimap,com.google.common.base.Predicate):0:0 -> filterEntries
    1:1:com.google.common.collect.Multimap filterEntries(com.google.common.collect.Multimap,com.google.common.base.Predicate):0 -> filterEntries
    2:2:com.google.common.collect.Multimap filterEntries(com.google.common.collect.Multimap,com.google.common.base.Predicate):0:0 -> filterEntries
    3:3:com.google.common.collect.SetMultimap filterFiltered(com.google.common.collect.FilteredSetMultimap,com.google.common.base.Predicate):0:0 -> filterEntries
    3:3:com.google.common.collect.SetMultimap filterEntries(com.google.common.collect.SetMultimap,com.google.common.base.Predicate):0 -> filterEntries
    4:4:com.google.common.collect.SetMultimap filterEntries(com.google.common.collect.SetMultimap,com.google.common.base.Predicate):0:0 -> filterEntries
    1:1:com.google.common.collect.Multimap com.google.common.collect.FilteredKeyMultimap.unfiltered():0:0 -> filterKeys
    1:1:com.google.common.collect.ListMultimap com.google.common.collect.FilteredKeyListMultimap.unfiltered():0 -> filterKeys
    1:1:com.google.common.collect.ListMultimap filterKeys(com.google.common.collect.ListMultimap,com.google.common.base.Predicate):0 -> filterKeys
    2:2:com.google.common.collect.ListMultimap com.google.common.collect.FilteredKeyListMultimap.unfiltered():0:0 -> filterKeys
    2:2:com.google.common.collect.ListMultimap filterKeys(com.google.common.collect.ListMultimap,com.google.common.base.Predicate):0 -> filterKeys
    3:3:com.google.common.collect.ListMultimap filterKeys(com.google.common.collect.ListMultimap,com.google.common.base.Predicate):0:0 -> filterKeys
    4:4:com.google.common.collect.Multimap filterFiltered(com.google.common.collect.FilteredMultimap,com.google.common.base.Predicate):0:0 -> filterKeys
    4:4:com.google.common.collect.Multimap filterKeys(com.google.common.collect.Multimap,com.google.common.base.Predicate):0 -> filterKeys
    5:5:com.google.common.collect.Multimap filterKeys(com.google.common.collect.Multimap,com.google.common.base.Predicate):0:0 -> filterKeys
    6:6:com.google.common.collect.SetMultimap com.google.common.collect.FilteredKeySetMultimap.unfiltered():0:0 -> filterKeys
    6:6:com.google.common.collect.SetMultimap filterKeys(com.google.common.collect.SetMultimap,com.google.common.base.Predicate):0 -> filterKeys
    7:7:com.google.common.collect.SetMultimap filterKeys(com.google.common.collect.SetMultimap,com.google.common.base.Predicate):0:0 -> filterKeys
    8:8:com.google.common.collect.SetMultimap filterFiltered(com.google.common.collect.FilteredSetMultimap,com.google.common.base.Predicate):0:0 -> filterKeys
    8:8:com.google.common.collect.SetMultimap filterKeys(com.google.common.collect.SetMultimap,com.google.common.base.Predicate):0 -> filterKeys
    9:9:com.google.common.collect.SetMultimap filterKeys(com.google.common.collect.SetMultimap,com.google.common.base.Predicate):0:0 -> filterKeys
    1:1:com.google.common.collect.ListMultimap com.google.common.collect.Synchronized.listMultimap(com.google.common.collect.ListMultimap,java.lang.Object):0:0 -> synchronizedListMultimap
    1:1:com.google.common.collect.ListMultimap synchronizedListMultimap(com.google.common.collect.ListMultimap):0 -> synchronizedListMultimap
    1:1:com.google.common.collect.Multimap com.google.common.collect.Synchronized.multimap(com.google.common.collect.Multimap,java.lang.Object):0:0 -> synchronizedMultimap
    1:1:com.google.common.collect.Multimap synchronizedMultimap(com.google.common.collect.Multimap):0 -> synchronizedMultimap
    1:1:com.google.common.collect.SetMultimap com.google.common.collect.Synchronized.setMultimap(com.google.common.collect.SetMultimap,java.lang.Object):0:0 -> synchronizedSetMultimap
    1:1:com.google.common.collect.SetMultimap synchronizedSetMultimap(com.google.common.collect.SetMultimap):0 -> synchronizedSetMultimap
    1:1:com.google.common.collect.SortedSetMultimap com.google.common.collect.Synchronized.sortedSetMultimap(com.google.common.collect.SortedSetMultimap,java.lang.Object):0:0 -> synchronizedSortedSetMultimap
    1:1:com.google.common.collect.SortedSetMultimap synchronizedSortedSetMultimap(com.google.common.collect.SortedSetMultimap):0 -> synchronizedSortedSetMultimap
    1:1:java.util.stream.Collector com.google.common.collect.CollectCollectors.toMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier):0:0 -> toMultimap
    1:1:java.util.stream.Collector toMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier):0 -> toMultimap
com.google.common.collect.Multimaps$AsMap -> com.google.common.collect.im:
    com.google.common.collect.Multimap multimap -> d
    com.google.common.collect.Multimap access$200(com.google.common.collect.Multimaps$AsMap) -> b
    void removeValuesForKey(java.lang.Object) -> c
    1:1:boolean containsKey(java.lang.Object):0:0 -> get
    1:1:java.util.Collection get(java.lang.Object):0 -> get
    1:1:java.lang.Object get(java.lang.Object):0 -> get
    2:2:java.util.Collection get(java.lang.Object):0:0 -> get
    2:2:java.lang.Object get(java.lang.Object):0 -> get
    1:1:boolean containsKey(java.lang.Object):0:0 -> remove
    1:1:java.util.Collection remove(java.lang.Object):0 -> remove
    1:1:java.lang.Object remove(java.lang.Object):0 -> remove
    2:2:java.util.Collection remove(java.lang.Object):0:0 -> remove
    2:2:java.lang.Object remove(java.lang.Object):0 -> remove
com.google.common.collect.Multimaps$AsMap$EntrySet -> com.google.common.collect.hm:
    com.google.common.collect.Multimaps$AsMap this$0 -> a
    java.util.Map map() -> a
com.google.common.collect.Multimaps$AsMap$EntrySet$1 -> com.google.common.collect.gm:
    com.google.common.collect.Multimaps$AsMap$EntrySet this$1 -> a
    1:1:java.util.Collection apply(java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.Multimaps$CustomListMultimap -> com.google.common.collect.jm:
    com.google.common.base.Supplier factory -> h
    java.util.Map createAsMap() -> a
    java.util.Set createKeySet() -> c
    1:1:java.util.List createCollection():0:0 -> createCollection
    1:1:java.util.Collection createCollection():0 -> createCollection
com.google.common.collect.Multimaps$CustomMultimap -> com.google.common.collect.km:
    com.google.common.base.Supplier factory -> h
    java.util.Map createAsMap() -> a
    java.util.Set createKeySet() -> c
    java.util.Collection unmodifiableCollectionSubclass(java.util.Collection) -> u
    java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> v
com.google.common.collect.Multimaps$CustomSetMultimap -> com.google.common.collect.lm:
    com.google.common.base.Supplier factory -> h
    java.util.Map createAsMap() -> a
    java.util.Set createKeySet() -> c
    1:1:java.util.Set createCollection():0:0 -> createCollection
    1:1:java.util.Collection createCollection():0 -> createCollection
    java.util.Collection unmodifiableCollectionSubclass(java.util.Collection) -> u
    java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> v
com.google.common.collect.Multimaps$CustomSortedSetMultimap -> com.google.common.collect.mm:
    com.google.common.base.Supplier factory -> h
    java.util.Comparator valueComparator -> i
    java.util.Map createAsMap() -> a
    java.util.Set createKeySet() -> c
    1:1:java.util.SortedSet createCollection():0:0 -> createCollection
    1:1:java.util.Collection createCollection():0 -> createCollection
com.google.common.collect.Multimaps$Keys -> com.google.common.collect.pm:
    com.google.common.collect.Multimap multimap -> c
    int distinctElements() -> b
    java.util.Iterator elementIterator() -> c
    java.util.Iterator entryIterator() -> d
    1:1:java.util.Iterator com.google.common.collect.Maps.keyIterator(java.util.Iterator):0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.collect.Multimaps$Keys$1 -> com.google.common.collect.om:
    1:1:com.google.common.collect.Multiset$Entry transform(java.util.Map$Entry):0:0 -> a
    1:1:java.lang.Object transform(java.lang.Object):0 -> a
com.google.common.collect.Multimaps$Keys$1$1 -> com.google.common.collect.nm:
    java.util.Map$Entry val$backingEntry -> a
com.google.common.collect.Multimaps$MapMultimap -> com.google.common.collect.sm:
    java.util.Map map -> f
    java.util.Map createAsMap() -> a
    java.util.Collection createEntries() -> b
    java.util.Set createKeySet() -> c
    com.google.common.collect.Multiset createKeys() -> d
    java.util.Collection createValues() -> e
    java.util.Iterator entryIterator() -> f
    1:1:java.util.Set get(java.lang.Object):0:0 -> get
    1:1:java.util.Collection get(java.lang.Object):0 -> get
    1:1:java.util.Set replaceValues(java.lang.Object,java.lang.Iterable):0:0 -> replaceValues
    1:1:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable):0 -> replaceValues
com.google.common.collect.Multimaps$MapMultimap$1 -> com.google.common.collect.rm:
    com.google.common.collect.Multimaps$MapMultimap this$0 -> b
    java.lang.Object val$key -> a
com.google.common.collect.Multimaps$MapMultimap$1$1 -> com.google.common.collect.qm:
    com.google.common.collect.Multimaps$MapMultimap$1 this$1 -> b
    int i -> a
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
com.google.common.collect.Multimaps$TransformedEntriesListMultimap -> com.google.common.collect.tm:
    1:1:java.util.List get(java.lang.Object):0:0 -> get
    1:1:java.util.Collection get(java.lang.Object):0 -> get
    java.util.Collection transform(java.lang.Object,java.util.Collection) -> j
    1:1:com.google.common.base.Function com.google.common.collect.Maps.asValueToValueFunction(com.google.common.collect.Maps$EntryTransformer,java.lang.Object):0:0 -> k
    1:1:java.util.List transform(java.lang.Object,java.util.Collection):0 -> k
    2:2:java.util.List transform(java.lang.Object,java.util.Collection):0:0 -> k
    1:1:java.util.List removeAll(java.lang.Object):0:0 -> removeAll
    1:1:java.util.Collection removeAll(java.lang.Object):0 -> removeAll
    1:1:java.util.List replaceValues(java.lang.Object,java.lang.Iterable):0:0 -> replaceValues
    1:1:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable):0 -> replaceValues
com.google.common.collect.Multimaps$TransformedEntriesMultimap -> com.google.common.collect.vm:
    com.google.common.collect.Multimap fromMultimap -> f
    com.google.common.collect.Maps$EntryTransformer transformer -> g
    java.util.Map createAsMap() -> a
    java.util.Collection createEntries() -> b
    java.util.Set createKeySet() -> c
    com.google.common.collect.Multiset createKeys() -> d
    1:1:com.google.common.base.Function com.google.common.collect.Maps.asEntryToValueFunction(com.google.common.collect.Maps$EntryTransformer):0:0 -> e
    1:1:java.util.Collection createValues():0 -> e
    2:2:java.util.Collection createValues():0:0 -> e
    java.util.Iterator entryIterator() -> f
    1:1:com.google.common.base.Function com.google.common.collect.Maps.asValueToValueFunction(com.google.common.collect.Maps$EntryTransformer,java.lang.Object):0:0 -> j
    1:1:java.util.Collection transform(java.lang.Object,java.util.Collection):0 -> j
    2:2:java.util.Collection transform(java.lang.Object,java.util.Collection):0:0 -> j
com.google.common.collect.Multimaps$TransformedEntriesMultimap$1 -> com.google.common.collect.um:
    com.google.common.collect.Multimaps$TransformedEntriesMultimap this$0 -> a
    1:1:java.util.Collection transformEntry(java.lang.Object,java.util.Collection):0:0 -> transformEntry
    1:1:java.lang.Object transformEntry(java.lang.Object,java.lang.Object):0 -> transformEntry
com.google.common.collect.Multimaps$UnmodifiableListMultimap -> com.google.common.collect.wm:
    1:1:com.google.common.collect.Multimap com.google.common.collect.Multimaps$UnmodifiableMultimap.delegate():0:0 -> delegate
    1:1:com.google.common.collect.ListMultimap delegate():0 -> delegate
    1:1:com.google.common.collect.Multimap delegate():0 -> delegate
    2:2:com.google.common.collect.ListMultimap delegate():0:0 -> delegate
    2:2:com.google.common.collect.Multimap delegate():0 -> delegate
    3:3:com.google.common.collect.Multimap com.google.common.collect.Multimaps$UnmodifiableMultimap.delegate():0:0 -> delegate
    3:3:com.google.common.collect.ListMultimap delegate():0 -> delegate
    3:3:java.lang.Object delegate():0 -> delegate
    4:4:com.google.common.collect.ListMultimap delegate():0:0 -> delegate
    4:4:java.lang.Object delegate():0 -> delegate
    1:1:com.google.common.collect.Multimap com.google.common.collect.Multimaps$UnmodifiableMultimap.delegate():0:0 -> get
    1:1:com.google.common.collect.ListMultimap delegate():0 -> get
    1:1:java.util.List get(java.lang.Object):0 -> get
    1:1:java.util.Collection get(java.lang.Object):0 -> get
    2:2:com.google.common.collect.ListMultimap delegate():0:0 -> get
    2:2:java.util.List get(java.lang.Object):0 -> get
    2:2:java.util.Collection get(java.lang.Object):0 -> get
    3:3:java.util.List get(java.lang.Object):0:0 -> get
    3:3:java.util.Collection get(java.lang.Object):0 -> get
    4:4:com.google.common.collect.Multimap com.google.common.collect.Multimaps$UnmodifiableMultimap.delegate():0:0 -> get
    4:4:com.google.common.collect.ListMultimap delegate():0 -> get
    4:4:java.util.List get(java.lang.Object):0 -> get
    5:5:com.google.common.collect.ListMultimap delegate():0:0 -> get
    5:5:java.util.List get(java.lang.Object):0 -> get
    6:6:java.util.List get(java.lang.Object):0:0 -> get
    1:1:java.util.List removeAll(java.lang.Object):0:0 -> removeAll
    1:1:java.util.Collection removeAll(java.lang.Object):0 -> removeAll
    1:1:java.util.List replaceValues(java.lang.Object,java.lang.Iterable):0:0 -> replaceValues
    1:1:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable):0 -> replaceValues
com.google.common.collect.Multimaps$UnmodifiableMultimap -> com.google.common.collect.ym:
    java.util.Collection values -> e
    java.util.Collection entries -> b
    java.util.Set keySet -> d
    com.google.common.collect.Multiset keys -> c
    java.util.Map map -> f
    com.google.common.collect.Multimap delegate -> a
    1:1:java.util.Collection com.google.common.collect.Multimaps.unmodifiableEntries(java.util.Collection):0:0 -> entries
    1:1:java.util.Collection com.google.common.collect.Multimaps.access$100(java.util.Collection):0 -> entries
    1:1:java.util.Collection entries():0 -> entries
    2:2:java.util.Set com.google.common.collect.Maps.unmodifiableEntrySet(java.util.Set):0:0 -> entries
    2:2:java.util.Collection com.google.common.collect.Multimaps.unmodifiableEntries(java.util.Collection):0 -> entries
    2:2:java.util.Collection com.google.common.collect.Multimaps.access$100(java.util.Collection):0 -> entries
    2:2:java.util.Collection entries():0 -> entries
    3:3:java.util.Collection com.google.common.collect.Multimaps.unmodifiableEntries(java.util.Collection):0:0 -> entries
    3:3:java.util.Collection com.google.common.collect.Multimaps.access$100(java.util.Collection):0 -> entries
    3:3:java.util.Collection entries():0 -> entries
    4:4:java.util.Collection entries():0:0 -> entries
com.google.common.collect.Multimaps$UnmodifiableMultimap$1 -> com.google.common.collect.xm:
    1:1:java.util.Collection apply(java.util.Collection):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.Multimaps$UnmodifiableSetMultimap -> com.google.common.collect.zm:
    1:1:com.google.common.collect.Multimap com.google.common.collect.Multimaps$UnmodifiableMultimap.delegate():0:0 -> delegate
    1:1:com.google.common.collect.SetMultimap delegate():0 -> delegate
    2:2:com.google.common.collect.SetMultimap delegate():0:0 -> delegate
    1:1:java.util.Set com.google.common.collect.Maps.unmodifiableEntrySet(java.util.Set):0:0 -> entries
    1:1:java.util.Set entries():0 -> entries
com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap -> com.google.common.collect.an:
    1:1:com.google.common.collect.Multimap com.google.common.collect.Multimaps$UnmodifiableMultimap.delegate():0:0 -> delegate
    1:1:com.google.common.collect.SetMultimap com.google.common.collect.Multimaps$UnmodifiableSetMultimap.delegate():0 -> delegate
    1:1:com.google.common.collect.SortedSetMultimap delegate():0 -> delegate
    2:2:com.google.common.collect.SetMultimap com.google.common.collect.Multimaps$UnmodifiableSetMultimap.delegate():0:0 -> delegate
    2:2:com.google.common.collect.SortedSetMultimap delegate():0 -> delegate
    3:3:com.google.common.collect.SortedSetMultimap delegate():0:0 -> delegate
    1:1:java.util.SortedSet get(java.lang.Object):0:0 -> get
    1:1:java.util.Collection get(java.lang.Object):0 -> get
    2:2:java.util.SortedSet get(java.lang.Object):0:0 -> get
    2:2:java.util.Set get(java.lang.Object):0 -> get
    1:1:java.util.SortedSet removeAll(java.lang.Object):0:0 -> removeAll
    1:1:java.util.Collection removeAll(java.lang.Object):0 -> removeAll
    2:2:java.util.SortedSet removeAll(java.lang.Object):0:0 -> removeAll
    2:2:java.util.Set removeAll(java.lang.Object):0 -> removeAll
    1:1:java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable):0:0 -> replaceValues
    1:1:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable):0 -> replaceValues
    2:2:java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable):0:0 -> replaceValues
    2:2:java.util.Set replaceValues(java.lang.Object,java.lang.Iterable):0 -> replaceValues
com.google.common.collect.Multiset -> com.google.common.collect.Multiset:
    1:1:java.util.Spliterator com.google.common.collect.Multisets.spliteratorImpl(com.google.common.collect.Multiset):0:0 -> spliterator
    1:1:java.util.Spliterator spliterator():0 -> spliterator
com.google.common.collect.Multisets -> com.google.common.collect.Multisets:
    1:1:com.google.common.collect.Multiset cast(java.lang.Iterable):0:0 -> a
    1:1:boolean addAllImpl(com.google.common.collect.Multiset,java.util.Collection):0 -> a
    2:2:boolean addAllImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset):0:0 -> a
    2:2:boolean addAllImpl(com.google.common.collect.Multiset,java.util.Collection):0 -> a
    3:3:boolean addAllImpl(com.google.common.collect.Multiset,java.util.Collection):0:0 -> a
    boolean equalsImpl(com.google.common.collect.Multiset,java.lang.Object) -> b
    java.util.Iterator iteratorImpl(com.google.common.collect.Multiset) -> c
    int linearTimeSizeImpl(com.google.common.collect.Multiset) -> d
    boolean retainAllImpl(com.google.common.collect.Multiset,java.util.Collection) -> e
    int setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int) -> f
    boolean setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int,int) -> g
    1:1:boolean retainOccurrencesImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset):0:0 -> retainOccurrences
    1:1:boolean retainOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset):0 -> retainOccurrences
    1:1:java.util.stream.Collector com.google.common.collect.CollectCollectors.toMultiset(java.util.function.Function,java.util.function.ToIntFunction,java.util.function.Supplier):0:0 -> toMultiset
    1:1:java.util.stream.Collector toMultiset(java.util.function.Function,java.util.function.ToIntFunction,java.util.function.Supplier):0 -> toMultiset
com.google.common.collect.Multisets$1 -> com.google.common.collect.cn:
    com.google.common.collect.Multiset val$multiset2 -> d
    com.google.common.collect.Multiset val$multiset1 -> c
    java.util.Set createElementSet() -> a
    java.util.Iterator elementIterator() -> c
    java.util.Iterator entryIterator() -> d
com.google.common.collect.Multisets$1$1 -> com.google.common.collect.bn:
    java.util.Iterator val$iterator2 -> d
    java.util.Iterator val$iterator1 -> c
    com.google.common.collect.Multisets$1 this$0 -> e
    1:1:com.google.common.collect.Multiset$Entry computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
com.google.common.collect.Multisets$2 -> com.google.common.collect.en:
    com.google.common.collect.Multiset val$multiset2 -> d
    com.google.common.collect.Multiset val$multiset1 -> c
    java.util.Set createElementSet() -> a
    java.util.Iterator elementIterator() -> c
    java.util.Iterator entryIterator() -> d
com.google.common.collect.Multisets$2$1 -> com.google.common.collect.dn:
    java.util.Iterator val$iterator1 -> c
    com.google.common.collect.Multisets$2 this$0 -> d
    1:1:com.google.common.collect.Multiset$Entry computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
com.google.common.collect.Multisets$3 -> com.google.common.collect.gn:
    com.google.common.collect.Multiset val$multiset2 -> d
    com.google.common.collect.Multiset val$multiset1 -> c
    java.util.Set createElementSet() -> a
    java.util.Iterator elementIterator() -> c
    java.util.Iterator entryIterator() -> d
com.google.common.collect.Multisets$3$1 -> com.google.common.collect.fn:
    java.util.Iterator val$iterator2 -> d
    java.util.Iterator val$iterator1 -> c
    com.google.common.collect.Multisets$3 this$0 -> e
    1:1:com.google.common.collect.Multiset$Entry computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
com.google.common.collect.Multisets$4 -> com.google.common.collect.jn:
    com.google.common.collect.Multiset val$multiset2 -> d
    com.google.common.collect.Multiset val$multiset1 -> c
    int distinctElements() -> b
    java.util.Iterator elementIterator() -> c
    java.util.Iterator entryIterator() -> d
com.google.common.collect.Multisets$4$1 -> com.google.common.collect.hn:
    java.util.Iterator val$iterator1 -> c
    com.google.common.collect.Multisets$4 this$0 -> d
com.google.common.collect.Multisets$4$2 -> com.google.common.collect.in:
    java.util.Iterator val$iterator1 -> c
    com.google.common.collect.Multisets$4 this$0 -> d
    1:1:com.google.common.collect.Multiset$Entry computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
com.google.common.collect.Multisets$5 -> com.google.common.collect.kn:
    1:1:java.lang.Object transform(com.google.common.collect.Multiset$Entry):0:0 -> a
    1:1:java.lang.Object transform(java.lang.Object):0 -> a
com.google.common.collect.Multisets$AbstractEntry -> com.google.common.collect.ln:
com.google.common.collect.Multisets$DecreasingCount -> com.google.common.collect.mn:
    com.google.common.collect.Multisets$DecreasingCount INSTANCE -> a
    1:1:int compare(com.google.common.collect.Multiset$Entry,com.google.common.collect.Multiset$Entry):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
com.google.common.collect.Multisets$ElementSet -> com.google.common.collect.nn:
    com.google.common.collect.Multiset multiset() -> a
com.google.common.collect.Multisets$EntrySet -> com.google.common.collect.on:
    com.google.common.collect.Multiset multiset() -> a
com.google.common.collect.Multisets$FilteredMultiset -> com.google.common.collect.qn:
    com.google.common.base.Predicate predicate -> d
    com.google.common.collect.Multiset unfiltered -> c
    java.util.Set createElementSet() -> a
    java.util.Iterator elementIterator() -> c
    java.util.Iterator entryIterator() -> d
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.collect.Multisets$FilteredMultiset$1 -> com.google.common.collect.pn:
    com.google.common.collect.Multisets$FilteredMultiset this$0 -> a
    1:1:boolean apply(com.google.common.collect.Multiset$Entry):0:0 -> apply
    1:1:boolean apply(java.lang.Object):0 -> apply
com.google.common.collect.Multisets$ImmutableEntry -> com.google.common.collect.rn:
    java.lang.Object element -> a
    int count -> b
com.google.common.collect.Multisets$MultisetIteratorImpl -> com.google.common.collect.sn:
    java.util.Iterator entryIterator -> b
    com.google.common.collect.Multiset multiset -> a
    com.google.common.collect.Multiset$Entry currentEntry -> c
    boolean canRemove -> f
    int laterCount -> d
    int totalCount -> e
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
com.google.common.collect.Multisets$UnmodifiableMultiset -> com.google.common.collect.tn:
    java.util.Set entrySet -> c
    com.google.common.collect.Multiset delegate -> a
    java.util.Set elementSet -> b
    java.util.Set createElementSet() -> a
com.google.common.collect.Multisets$ViewMultiset -> com.google.common.collect.un:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.collect.Multisets$1):0 -> <init>
    int distinctElements() -> b
    1:1:java.util.Iterator com.google.common.collect.Multisets.iteratorImpl(com.google.common.collect.Multiset):0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.collect.MutableClassToInstanceMap -> com.google.common.collect.MutableClassToInstanceMap:
    java.util.Map delegate -> a
    java.lang.Object access$000(java.lang.Class,java.lang.Object) -> a
    java.lang.Object cast(java.lang.Class,java.lang.Object) -> b
com.google.common.collect.MutableClassToInstanceMap$1 -> com.google.common.collect.vn:
    java.util.Map$Entry val$entry -> a
    1:1:java.util.Map$Entry delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
com.google.common.collect.MutableClassToInstanceMap$2 -> com.google.common.collect.xn:
    com.google.common.collect.MutableClassToInstanceMap this$0 -> a
com.google.common.collect.MutableClassToInstanceMap$2$1 -> com.google.common.collect.wn:
    1:1:java.util.Map$Entry com.google.common.collect.MutableClassToInstanceMap.checkedEntry(java.util.Map$Entry):0:0 -> a
    1:1:java.util.Map$Entry com.google.common.collect.MutableClassToInstanceMap.access$100(java.util.Map$Entry):0 -> a
    1:1:java.util.Map$Entry transform(java.util.Map$Entry):0 -> a
    1:1:java.lang.Object transform(java.lang.Object):0 -> a
com.google.common.collect.NaturalOrdering -> com.google.common.collect.yn:
    com.google.common.collect.Ordering nullsFirst -> a
    com.google.common.collect.Ordering nullsLast -> b
    com.google.common.collect.NaturalOrdering INSTANCE -> c
    1:1:int compare(java.lang.Comparable,java.lang.Comparable):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
com.google.common.collect.NullsFirstOrdering -> com.google.common.collect.zn:
    com.google.common.collect.Ordering ordering -> a
com.google.common.collect.NullsLastOrdering -> com.google.common.collect.ao:
    com.google.common.collect.Ordering ordering -> a
com.google.common.collect.ObjectArrays -> com.google.common.collect.ObjectArrays:
    1:1:java.lang.Object checkElementNotNull(java.lang.Object,int):0:0 -> a
    1:1:java.lang.Object[] checkElementsNotNull(java.lang.Object[],int):0 -> a
    java.lang.Object[] fillArray(java.lang.Iterable,java.lang.Object[]) -> b
    java.lang.Object[] toArrayImpl(java.util.Collection) -> c
    java.lang.Object[] toArrayImpl(java.util.Collection,java.lang.Object[]) -> d
    1:1:java.lang.Object[] com.google.common.collect.Platform.newArray(java.lang.Object[],int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(java.lang.Object[],int):0 -> newArray
com.google.common.collect.Ordering -> com.google.common.collect.Ordering:
    com.google.common.collect.Ordering onKeys() -> a
    1:1:void com.google.common.collect.TopKSelector.offerAll(java.util.Iterator):0:0 -> leastOf
    1:1:java.util.List leastOf(java.util.Iterator,int):0 -> leastOf
    2:2:java.util.List leastOf(java.util.Iterator,int):0:0 -> leastOf
com.google.common.collect.Ordering$ArbitraryOrdering -> com.google.common.collect.bo:
    java.util.concurrent.atomic.AtomicInteger counter -> a
    java.util.concurrent.ConcurrentMap uids -> b
    1:1:com.google.common.collect.MapMaker com.google.common.collect.Platform.tryWeakKeys(com.google.common.collect.MapMaker):0:0 -> <init>
    1:1:void <init>():0 -> <init>
    2:2:void <init>():0:0 -> <init>
    java.lang.Integer getUid(java.lang.Object) -> b
    1:1:int identityHashCode(java.lang.Object):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
    2:2:int compare(java.lang.Object,java.lang.Object):0:0 -> compare
com.google.common.collect.Ordering$ArbitraryOrderingHolder -> com.google.common.collect.co:
    com.google.common.collect.Ordering ARBITRARY_ORDERING -> a
com.google.common.collect.Ordering$IncomparableValueException -> com.google.common.collect.do:
    java.lang.Object value -> a
com.google.common.collect.Platform -> com.google.common.collect.eo:
    int $r8$clinit -> a
com.google.common.collect.Queues -> com.google.common.collect.Queues:
    1:1:java.util.Deque com.google.common.collect.Synchronized.deque(java.util.Deque,java.lang.Object):0:0 -> synchronizedDeque
    1:1:java.util.Deque synchronizedDeque(java.util.Deque):0 -> synchronizedDeque
    1:1:java.util.Queue com.google.common.collect.Synchronized.queue(java.util.Queue,java.lang.Object):0:0 -> synchronizedQueue
    1:1:java.util.Queue synchronizedQueue(java.util.Queue):0 -> synchronizedQueue
com.google.common.collect.Range -> com.google.common.collect.Range:
    com.google.common.collect.Cut lowerBound -> a
    com.google.common.collect.Cut upperBound -> b
    int $r8$clinit -> d
    com.google.common.collect.Range ALL -> c
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.belowAll():0:0 -> <clinit>
    1:1:void <clinit>():0 -> <clinit>
    2:2:com.google.common.collect.Cut com.google.common.collect.Cut.aboveAll():0:0 -> <clinit>
    2:2:void <clinit>():0 -> <clinit>
    3:3:void <clinit>():0:0 -> <clinit>
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.aboveAll():0:0 -> <init>
    1:1:void <init>(com.google.common.collect.Cut,com.google.common.collect.Cut):0 -> <init>
    2:2:com.google.common.collect.Cut com.google.common.collect.Cut.belowAll():0:0 -> <init>
    2:2:void <init>(com.google.common.collect.Cut,com.google.common.collect.Cut):0 -> <init>
    3:3:void <init>(com.google.common.collect.Cut,com.google.common.collect.Cut):0:0 -> <init>
    4:4:java.lang.String toString(com.google.common.collect.Cut,com.google.common.collect.Cut):0:0 -> <init>
    4:4:void <init>(com.google.common.collect.Cut,com.google.common.collect.Cut):0 -> <init>
    5:5:void <init>(com.google.common.collect.Cut,com.google.common.collect.Cut):0:0 -> <init>
    com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut) -> a
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.belowValue(java.lang.Comparable):0:0 -> atLeast
    1:1:com.google.common.collect.Range atLeast(java.lang.Comparable):0 -> atLeast
    2:2:com.google.common.collect.Cut com.google.common.collect.Cut.aboveAll():0:0 -> atLeast
    2:2:com.google.common.collect.Range atLeast(java.lang.Comparable):0 -> atLeast
    3:3:com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut):0:0 -> atLeast
    3:3:com.google.common.collect.Range atLeast(java.lang.Comparable):0 -> atLeast
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.belowAll():0:0 -> atMost
    1:1:com.google.common.collect.Range atMost(java.lang.Comparable):0 -> atMost
    2:2:com.google.common.collect.Cut com.google.common.collect.Cut.aboveValue(java.lang.Comparable):0:0 -> atMost
    2:2:com.google.common.collect.Range atMost(java.lang.Comparable):0 -> atMost
    3:3:com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut):0:0 -> atMost
    3:3:com.google.common.collect.Range atMost(java.lang.Comparable):0 -> atMost
    1:1:com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut):0:0 -> canonical
    1:1:com.google.common.collect.Range canonical(com.google.common.collect.DiscreteDomain):0 -> canonical
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.belowValue(java.lang.Comparable):0:0 -> closed
    1:1:com.google.common.collect.Range closed(java.lang.Comparable,java.lang.Comparable):0 -> closed
    2:2:com.google.common.collect.Cut com.google.common.collect.Cut.aboveValue(java.lang.Comparable):0:0 -> closed
    2:2:com.google.common.collect.Range closed(java.lang.Comparable,java.lang.Comparable):0 -> closed
    3:3:com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut):0:0 -> closed
    3:3:com.google.common.collect.Range closed(java.lang.Comparable,java.lang.Comparable):0 -> closed
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.belowValue(java.lang.Comparable):0:0 -> closedOpen
    1:1:com.google.common.collect.Range closedOpen(java.lang.Comparable,java.lang.Comparable):0 -> closedOpen
    2:2:com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut):0:0 -> closedOpen
    2:2:com.google.common.collect.Range closedOpen(java.lang.Comparable,java.lang.Comparable):0 -> closedOpen
    1:1:java.util.SortedSet cast(java.lang.Iterable):0:0 -> containsAll
    1:1:boolean containsAll(java.lang.Iterable):0 -> containsAll
    2:2:boolean containsAll(java.lang.Iterable):0:0 -> containsAll
    1:1:java.util.SortedSet cast(java.lang.Iterable):0:0 -> encloseAll
    1:1:com.google.common.collect.Range encloseAll(java.lang.Iterable):0 -> encloseAll
    2:2:com.google.common.collect.Range encloseAll(java.lang.Iterable):0:0 -> encloseAll
    1:1:com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut):0:0 -> gap
    1:1:com.google.common.collect.Range gap(com.google.common.collect.Range):0 -> gap
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.aboveValue(java.lang.Comparable):0:0 -> greaterThan
    1:1:com.google.common.collect.Range greaterThan(java.lang.Comparable):0 -> greaterThan
    2:2:com.google.common.collect.Cut com.google.common.collect.Cut.aboveAll():0:0 -> greaterThan
    2:2:com.google.common.collect.Range greaterThan(java.lang.Comparable):0 -> greaterThan
    3:3:com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut):0:0 -> greaterThan
    3:3:com.google.common.collect.Range greaterThan(java.lang.Comparable):0 -> greaterThan
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.belowAll():0:0 -> hasLowerBound
    1:1:boolean hasLowerBound():0 -> hasLowerBound
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.aboveAll():0:0 -> hasUpperBound
    1:1:boolean hasUpperBound():0 -> hasUpperBound
    1:1:com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut):0:0 -> intersection
    1:1:com.google.common.collect.Range intersection(com.google.common.collect.Range):0 -> intersection
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.belowAll():0:0 -> lessThan
    1:1:com.google.common.collect.Range lessThan(java.lang.Comparable):0 -> lessThan
    2:2:com.google.common.collect.Cut com.google.common.collect.Cut.belowValue(java.lang.Comparable):0:0 -> lessThan
    2:2:com.google.common.collect.Range lessThan(java.lang.Comparable):0 -> lessThan
    3:3:com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut):0:0 -> lessThan
    3:3:com.google.common.collect.Range lessThan(java.lang.Comparable):0 -> lessThan
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.aboveValue(java.lang.Comparable):0:0 -> open
    1:1:com.google.common.collect.Range open(java.lang.Comparable,java.lang.Comparable):0 -> open
    2:2:com.google.common.collect.Cut com.google.common.collect.Cut.belowValue(java.lang.Comparable):0:0 -> open
    2:2:com.google.common.collect.Range open(java.lang.Comparable,java.lang.Comparable):0 -> open
    3:3:com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut):0:0 -> open
    3:3:com.google.common.collect.Range open(java.lang.Comparable,java.lang.Comparable):0 -> open
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.aboveValue(java.lang.Comparable):0:0 -> openClosed
    1:1:com.google.common.collect.Range openClosed(java.lang.Comparable,java.lang.Comparable):0 -> openClosed
    2:2:com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut):0:0 -> openClosed
    2:2:com.google.common.collect.Range openClosed(java.lang.Comparable,java.lang.Comparable):0 -> openClosed
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.aboveValue(java.lang.Comparable):0:0 -> range
    1:1:com.google.common.collect.Range range(java.lang.Comparable,com.google.common.collect.BoundType,java.lang.Comparable,com.google.common.collect.BoundType):0 -> range
    2:2:com.google.common.collect.Cut com.google.common.collect.Cut.belowValue(java.lang.Comparable):0:0 -> range
    2:2:com.google.common.collect.Range range(java.lang.Comparable,com.google.common.collect.BoundType,java.lang.Comparable,com.google.common.collect.BoundType):0 -> range
    3:3:com.google.common.collect.Cut com.google.common.collect.Cut.aboveValue(java.lang.Comparable):0:0 -> range
    3:3:com.google.common.collect.Range range(java.lang.Comparable,com.google.common.collect.BoundType,java.lang.Comparable,com.google.common.collect.BoundType):0 -> range
    4:4:com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut):0:0 -> range
    4:4:com.google.common.collect.Range range(java.lang.Comparable,com.google.common.collect.BoundType,java.lang.Comparable,com.google.common.collect.BoundType):0 -> range
    1:1:com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut):0:0 -> span
    1:1:com.google.common.collect.Range span(com.google.common.collect.Range):0 -> span
    1:1:java.lang.String toString(com.google.common.collect.Cut,com.google.common.collect.Cut):0:0 -> toString
    1:1:java.lang.String toString():0 -> toString
com.google.common.collect.Range$LowerBoundFn -> com.google.common.collect.fo:
    com.google.common.collect.Range$LowerBoundFn INSTANCE -> a
    1:1:com.google.common.collect.Cut apply(com.google.common.collect.Range):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.Range$RangeLexOrdering -> com.google.common.collect.go:
    com.google.common.collect.Ordering INSTANCE -> a
    1:1:int compare(com.google.common.collect.Range,com.google.common.collect.Range):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
com.google.common.collect.Range$UpperBoundFn -> com.google.common.collect.ho:
    com.google.common.collect.Range$UpperBoundFn INSTANCE -> a
    1:1:com.google.common.collect.Cut apply(com.google.common.collect.Range):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.RangeGwtSerializationDependencies -> com.google.common.collect.io:
com.google.common.collect.RegularContiguousSet -> com.google.common.collect.mo:
    com.google.common.collect.Range range -> f
    boolean isPartialView() -> e
    1:1:com.google.common.collect.ImmutableList com.google.common.collect.ImmutableSet.createAsList():0:0 -> i
    1:1:com.google.common.collect.ImmutableList createAsList():0 -> i
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> o
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> p
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> q
    com.google.common.collect.ContiguousSet headSetImpl(java.lang.Comparable,boolean) -> r
    1:1:com.google.common.collect.Range range(com.google.common.collect.BoundType,com.google.common.collect.BoundType):0:0 -> range
    1:1:com.google.common.collect.Range range():0 -> range
    com.google.common.collect.ContiguousSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean) -> s
    com.google.common.collect.ContiguousSet tailSetImpl(java.lang.Comparable,boolean) -> t
    com.google.common.collect.ContiguousSet intersectionInCurrentDomain(com.google.common.collect.Range) -> u
com.google.common.collect.RegularContiguousSet$1 -> com.google.common.collect.jo:
    com.google.common.collect.RegularContiguousSet this$0 -> c
    java.lang.Comparable last -> b
    1:1:java.lang.Comparable computeNext(java.lang.Comparable):0:0 -> computeNext
    1:1:java.lang.Object computeNext(java.lang.Object):0 -> computeNext
    2:2:int com.google.common.collect.Range.compareOrThrow(java.lang.Comparable,java.lang.Comparable):0:0 -> computeNext
    2:2:boolean com.google.common.collect.RegularContiguousSet.equalsOrThrow(java.lang.Comparable,java.lang.Comparable):0 -> computeNext
    2:2:boolean com.google.common.collect.RegularContiguousSet.access$000(java.lang.Comparable,java.lang.Comparable):0 -> computeNext
    2:2:java.lang.Comparable computeNext(java.lang.Comparable):0 -> computeNext
    2:2:java.lang.Object computeNext(java.lang.Object):0 -> computeNext
    3:3:java.lang.Comparable computeNext(java.lang.Comparable):0:0 -> computeNext
    3:3:java.lang.Object computeNext(java.lang.Object):0 -> computeNext
com.google.common.collect.RegularContiguousSet$2 -> com.google.common.collect.ko:
    com.google.common.collect.RegularContiguousSet this$0 -> c
    java.lang.Comparable first -> b
    1:1:java.lang.Comparable computeNext(java.lang.Comparable):0:0 -> computeNext
    1:1:java.lang.Object computeNext(java.lang.Object):0 -> computeNext
    2:2:int com.google.common.collect.Range.compareOrThrow(java.lang.Comparable,java.lang.Comparable):0:0 -> computeNext
    2:2:boolean com.google.common.collect.RegularContiguousSet.equalsOrThrow(java.lang.Comparable,java.lang.Comparable):0 -> computeNext
    2:2:boolean com.google.common.collect.RegularContiguousSet.access$000(java.lang.Comparable,java.lang.Comparable):0 -> computeNext
    2:2:java.lang.Comparable computeNext(java.lang.Comparable):0 -> computeNext
    2:2:java.lang.Object computeNext(java.lang.Object):0 -> computeNext
    3:3:java.lang.Comparable computeNext(java.lang.Comparable):0:0 -> computeNext
    3:3:java.lang.Object computeNext(java.lang.Object):0 -> computeNext
com.google.common.collect.RegularContiguousSet$3 -> com.google.common.collect.lo:
    com.google.common.collect.RegularContiguousSet this$0 -> b
    1:1:java.lang.Comparable get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
    1:1:com.google.common.collect.ImmutableSortedSet delegateCollection():0:0 -> j
    1:1:com.google.common.collect.ImmutableCollection delegateCollection():0 -> j
com.google.common.collect.RegularImmutableAsList -> com.google.common.collect.no:
    com.google.common.collect.ImmutableCollection delegate -> b
    com.google.common.collect.ImmutableList delegateList -> c
    1:1:com.google.common.collect.ImmutableList com.google.common.collect.ImmutableList.asImmutableList(java.lang.Object[]):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.ImmutableCollection,java.lang.Object[]):0 -> <init>
    2:2:void <init>(com.google.common.collect.ImmutableCollection,com.google.common.collect.ImmutableList):0:0 -> <init>
    2:2:void <init>(com.google.common.collect.ImmutableCollection,java.lang.Object[]):0 -> <init>
    int copyIntoArray(java.lang.Object[],int) -> a
    java.lang.Object[] internalArray() -> b
    int internalArrayEnd() -> c
    int internalArrayStart() -> d
    com.google.common.collect.ImmutableCollection delegateCollection() -> j
    com.google.common.collect.ImmutableList delegateList() -> k
    1:1:com.google.common.collect.UnmodifiableListIterator listIterator(int):0:0 -> listIterator
    1:1:java.util.ListIterator listIterator(int):0 -> listIterator
com.google.common.collect.RegularImmutableBiMap -> com.google.common.collect.so:
    com.google.common.collect.ImmutableMapEntry[] keyTable -> f
    com.google.common.collect.RegularImmutableBiMap EMPTY -> l
    com.google.common.collect.ImmutableMapEntry[] valueTable -> g
    int hashCode -> j
    com.google.common.collect.ImmutableBiMap inverse -> k
    java.util.Map$Entry[] entries -> h
    int mask -> i
    com.google.common.collect.ImmutableSet createEntrySet() -> c
    com.google.common.collect.ImmutableSet createKeySet() -> d
    boolean isHashCodeFast() -> g
    boolean isPartialView() -> h
    com.google.common.collect.ImmutableMapEntry[] access$100(com.google.common.collect.RegularImmutableBiMap) -> k
    int access$200(com.google.common.collect.RegularImmutableBiMap) -> l
    int access$300(com.google.common.collect.RegularImmutableBiMap) -> m
    1:1:com.google.common.collect.ImmutableMapEntry[] com.google.common.collect.ImmutableMapEntry.createEntryArray(int):0:0 -> n
    1:1:com.google.common.collect.ImmutableBiMap fromEntryArray(int,java.util.Map$Entry[]):0 -> n
    2:2:com.google.common.collect.ImmutableBiMap fromEntryArray(int,java.util.Map$Entry[]):0:0 -> n
    3:3:com.google.common.collect.ImmutableMapEntry[] com.google.common.collect.ImmutableMapEntry.createEntryArray(int):0:0 -> n
    3:3:com.google.common.collect.ImmutableBiMap fromEntryArray(int,java.util.Map$Entry[]):0 -> n
    4:4:com.google.common.collect.ImmutableBiMap fromEntryArray(int,java.util.Map$Entry[]):0:0 -> n
    5:5:java.lang.Object com.google.common.collect.ImmutableEntry.getValue():0:0 -> n
    5:5:int checkNoConflictInValueBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry):0 -> n
    5:5:com.google.common.collect.ImmutableBiMap fromEntryArray(int,java.util.Map$Entry[]):0 -> n
    6:6:int checkNoConflictInValueBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry):0:0 -> n
    6:6:com.google.common.collect.ImmutableBiMap fromEntryArray(int,java.util.Map$Entry[]):0 -> n
    7:7:com.google.common.collect.ImmutableBiMap fromEntryArray(int,java.util.Map$Entry[]):0:0 -> n
com.google.common.collect.RegularImmutableBiMap$1 -> com.google.common.collect.oo:
com.google.common.collect.RegularImmutableBiMap$Inverse -> com.google.common.collect.ro:
    com.google.common.collect.RegularImmutableBiMap this$0 -> f
    1:1:void <init>(com.google.common.collect.RegularImmutableBiMap):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.RegularImmutableBiMap,com.google.common.collect.RegularImmutableBiMap$1):0 -> <init>
    com.google.common.collect.ImmutableSet createEntrySet() -> c
    com.google.common.collect.ImmutableSet createKeySet() -> d
    1:1:java.lang.Object com.google.common.collect.ImmutableEntry.getValue():0:0 -> get
    1:1:java.lang.Object get(java.lang.Object):0 -> get
    2:2:java.lang.Object get(java.lang.Object):0:0 -> get
    3:3:java.lang.Object com.google.common.collect.ImmutableEntry.getKey():0:0 -> get
    3:3:java.lang.Object get(java.lang.Object):0 -> get
    4:4:java.lang.Object get(java.lang.Object):0:0 -> get
    boolean isPartialView() -> h
    1:1:com.google.common.collect.ImmutableBiMap inverse():0:0 -> inverse
    1:1:com.google.common.collect.BiMap inverse():0 -> inverse
    1:1:com.google.common.collect.ImmutableBiMap inverse():0:0 -> size
    1:1:int size():0 -> size
    2:2:int com.google.common.collect.RegularImmutableBiMap.size():0:0 -> size
    2:2:int size():0 -> size
com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet -> com.google.common.collect.qo:
    com.google.common.collect.RegularImmutableBiMap$Inverse this$1 -> c
    com.google.common.collect.ImmutableList createAsList() -> i
    boolean isHashCodeFast() -> j
    com.google.common.collect.ImmutableMap map() -> l
com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1 -> com.google.common.collect.po:
    com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet this$2 -> b
    1:1:java.util.Map$Entry get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
    com.google.common.collect.ImmutableCollection delegateCollection() -> j
com.google.common.collect.RegularImmutableList -> com.google.common.collect.to:
    java.lang.Object[] array -> b
    com.google.common.collect.ImmutableList EMPTY -> c
    int copyIntoArray(java.lang.Object[],int) -> a
    java.lang.Object[] internalArray() -> b
    int internalArrayEnd() -> c
    int internalArrayStart() -> d
    boolean isPartialView() -> e
    1:1:com.google.common.collect.UnmodifiableListIterator listIterator(int):0:0 -> listIterator
    1:1:java.util.ListIterator listIterator(int):0 -> listIterator
com.google.common.collect.RegularImmutableMap -> com.google.common.collect.wo:
    com.google.common.collect.ImmutableMapEntry[] table -> g
    java.util.Map$Entry[] entries -> f
    int mask -> h
    com.google.common.collect.ImmutableMap EMPTY -> i
    com.google.common.collect.ImmutableSet createEntrySet() -> c
    com.google.common.collect.ImmutableSet createKeySet() -> d
    com.google.common.collect.ImmutableCollection createValues() -> e
    boolean isPartialView() -> h
    1:1:java.lang.Object com.google.common.collect.ImmutableEntry.getKey():0:0 -> k
    1:1:int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry):0 -> k
    2:2:int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry):0:0 -> k
    1:1:com.google.common.collect.ImmutableMapEntry[] com.google.common.collect.ImmutableMapEntry.createEntryArray(int):0:0 -> l
    1:1:com.google.common.collect.ImmutableMap fromEntryArray(int,java.util.Map$Entry[]):0 -> l
    2:2:com.google.common.collect.ImmutableMap fromEntryArray(int,java.util.Map$Entry[]):0:0 -> l
    3:3:com.google.common.collect.ImmutableMapEntry[] com.google.common.collect.ImmutableMapEntry.createEntryArray(int):0:0 -> l
    3:3:com.google.common.collect.ImmutableMap fromEntryArray(int,java.util.Map$Entry[]):0 -> l
    4:4:com.google.common.collect.ImmutableMap fromEntryArray(int,java.util.Map$Entry[]):0:0 -> l
    5:5:com.google.common.collect.ImmutableMap com.google.common.collect.JdkBackedImmutableMap.create(int,java.util.Map$Entry[]):0:0 -> l
    5:5:com.google.common.collect.ImmutableMap fromEntryArray(int,java.util.Map$Entry[]):0 -> l
    6:6:com.google.common.collect.ImmutableMapEntry makeImmutable(java.util.Map$Entry):0:0 -> l
    6:6:com.google.common.collect.ImmutableMap com.google.common.collect.JdkBackedImmutableMap.create(int,java.util.Map$Entry[]):0 -> l
    6:6:com.google.common.collect.ImmutableMap fromEntryArray(int,java.util.Map$Entry[]):0 -> l
    7:7:com.google.common.collect.ImmutableMap com.google.common.collect.JdkBackedImmutableMap.create(int,java.util.Map$Entry[]):0:0 -> l
    7:7:com.google.common.collect.ImmutableMap fromEntryArray(int,java.util.Map$Entry[]):0 -> l
    8:8:com.google.common.collect.ImmutableMap fromEntryArray(int,java.util.Map$Entry[]):0:0 -> l
    1:1:java.lang.Object com.google.common.collect.ImmutableEntry.getKey():0:0 -> m
    1:1:java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int):0 -> m
    2:2:java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int):0:0 -> m
    3:3:java.lang.Object com.google.common.collect.ImmutableEntry.getValue():0:0 -> m
    3:3:java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int):0 -> m
    4:4:java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int):0:0 -> m
    com.google.common.collect.ImmutableMapEntry makeImmutable(java.util.Map$Entry,java.lang.Object,java.lang.Object) -> n
com.google.common.collect.RegularImmutableMap$KeySet -> com.google.common.collect.uo:
    com.google.common.collect.RegularImmutableMap map -> c
    boolean isPartialView() -> e
    1:1:int com.google.common.collect.RegularImmutableMap.size():0:0 -> size
    1:1:int size():0 -> size
com.google.common.collect.RegularImmutableMap$Values -> com.google.common.collect.vo:
    com.google.common.collect.RegularImmutableMap map -> b
    boolean isPartialView() -> e
    1:1:int com.google.common.collect.RegularImmutableMap.size():0:0 -> size
    1:1:int size():0 -> size
com.google.common.collect.RegularImmutableMultiset -> com.google.common.collect.yo:
    com.google.common.collect.Multisets$ImmutableEntry[] hashTable -> f
    com.google.common.collect.Multisets$ImmutableEntry[] entries -> e
    int hashCode -> h
    com.google.common.collect.ImmutableMultiset EMPTY -> j
    int size -> g
    com.google.common.collect.ImmutableSet elementSet -> i
    boolean isPartialView() -> e
    com.google.common.collect.Multiset$Entry getEntry(int) -> h
    1:1:boolean hashFloodingDetected(com.google.common.collect.Multisets$ImmutableEntry[]):0:0 -> i
    1:1:com.google.common.collect.ImmutableMultiset create(java.util.Collection):0 -> i
    2:2:com.google.common.collect.ImmutableList com.google.common.collect.ImmutableList.asImmutableList(java.lang.Object[]):0:0 -> i
    2:2:com.google.common.collect.ImmutableMultiset create(java.util.Collection):0 -> i
    3:3:com.google.common.collect.ImmutableMultiset create(java.util.Collection):0:0 -> i
com.google.common.collect.RegularImmutableMultiset$NonTerminalEntry -> com.google.common.collect.xo:
    com.google.common.collect.Multisets$ImmutableEntry nextInBucket -> c
com.google.common.collect.RegularImmutableSet -> com.google.common.collect.zo:
    java.lang.Object[] table -> d
    java.lang.Object[] elements -> c
    com.google.common.collect.RegularImmutableSet EMPTY -> g
    int hashCode -> f
    int mask -> e
    int copyIntoArray(java.lang.Object[],int) -> a
    java.lang.Object[] internalArray() -> b
    int internalArrayEnd() -> c
    int internalArrayStart() -> d
    boolean isPartialView() -> e
    com.google.common.collect.ImmutableList createAsList() -> i
    boolean isHashCodeFast() -> j
com.google.common.collect.RegularImmutableSortedMultiset -> com.google.common.collect.ap:
    int length -> j
    com.google.common.collect.RegularImmutableSortedSet elementSet -> g
    int offset -> i
    long[] ZERO_CUMULATIVE_COUNTS -> k
    com.google.common.collect.ImmutableSortedMultiset NATURAL_EMPTY_MULTISET -> l
    long[] cumulativeCounts -> h
    boolean isPartialView() -> e
    1:1:com.google.common.collect.ImmutableSortedSet elementSet():0:0 -> elementSet
    1:1:com.google.common.collect.ImmutableSet elementSet():0 -> elementSet
    2:2:com.google.common.collect.ImmutableSortedSet elementSet():0:0 -> elementSet
    2:2:java.util.NavigableSet elementSet():0 -> elementSet
    3:3:com.google.common.collect.ImmutableSortedSet elementSet():0:0 -> elementSet
    3:3:java.util.Set elementSet():0 -> elementSet
    4:4:com.google.common.collect.ImmutableSortedSet elementSet():0:0 -> elementSet
    4:4:java.util.SortedSet elementSet():0 -> elementSet
    com.google.common.collect.Multiset$Entry getEntry(int) -> h
    int getCount(int) -> l
    com.google.common.collect.ImmutableSortedMultiset getSubMultiset(int,int) -> m
com.google.common.collect.RegularImmutableSortedSet -> com.google.common.collect.bp:
    com.google.common.collect.RegularImmutableSortedSet NATURAL_EMPTY_SET -> f
    com.google.common.collect.ImmutableList elements -> e
    int copyIntoArray(java.lang.Object[],int) -> a
    java.lang.Object[] internalArray() -> b
    int internalArrayEnd() -> c
    1:1:int unsafeBinarySearch(java.lang.Object):0:0 -> contains
    1:1:boolean contains(java.lang.Object):0 -> contains
    2:2:java.util.Comparator unsafeComparator():0:0 -> contains
    2:2:int unsafeBinarySearch(java.lang.Object):0 -> contains
    2:2:boolean contains(java.lang.Object):0 -> contains
    3:3:int unsafeBinarySearch(java.lang.Object):0:0 -> contains
    3:3:boolean contains(java.lang.Object):0 -> contains
    1:1:int com.google.common.collect.ImmutableSortedSet.unsafeCompare(java.lang.Object,java.lang.Object):0:0 -> containsAll
    1:1:boolean containsAll(java.util.Collection):0 -> containsAll
    2:2:int com.google.common.collect.ImmutableSortedSet.unsafeCompare(java.util.Comparator,java.lang.Object,java.lang.Object):0:0 -> containsAll
    2:2:int com.google.common.collect.ImmutableSortedSet.unsafeCompare(java.lang.Object,java.lang.Object):0 -> containsAll
    2:2:boolean containsAll(java.util.Collection):0 -> containsAll
    3:3:boolean containsAll(java.util.Collection):0:0 -> containsAll
    int internalArrayStart() -> d
    boolean isPartialView() -> e
    1:1:int com.google.common.collect.ImmutableSortedSet.unsafeCompare(java.lang.Object,java.lang.Object):0:0 -> equals
    1:1:boolean equals(java.lang.Object):0 -> equals
    2:2:int com.google.common.collect.ImmutableSortedSet.unsafeCompare(java.util.Comparator,java.lang.Object,java.lang.Object):0:0 -> equals
    2:2:int com.google.common.collect.ImmutableSortedSet.unsafeCompare(java.lang.Object,java.lang.Object):0 -> equals
    2:2:boolean equals(java.lang.Object):0 -> equals
    3:3:boolean equals(java.lang.Object):0:0 -> equals
    com.google.common.collect.ImmutableList createAsList() -> i
    1:1:java.util.Comparator unsafeComparator():0:0 -> indexOf
    1:1:int indexOf(java.lang.Object):0 -> indexOf
    2:2:int indexOf(java.lang.Object):0:0 -> indexOf
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> m
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> o
    1:1:com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean):0:0 -> p
    1:1:com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean):0 -> p
    2:2:com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean):0:0 -> p
    2:2:com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean):0 -> p
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> q
    com.google.common.collect.RegularImmutableSortedSet getSubSet(int,int) -> r
    int headIndex(java.lang.Object,boolean) -> s
    int tailIndex(java.lang.Object,boolean) -> t
com.google.common.collect.RegularImmutableTable -> com.google.common.collect.fp:
    1:1:com.google.common.collect.ImmutableSet createCellSet():0:0 -> c
    1:1:java.util.Set createCellSet():0 -> c
    java.util.Map com.google.common.collect.DenseImmutableTable.columnMap() -> columnMap
    1:1:com.google.common.collect.ImmutableCollection createValues():0:0 -> d
    1:1:java.util.Collection createValues():0 -> d
    com.google.common.collect.ImmutableSet createCellSet() -> i
    com.google.common.collect.ImmutableCollection createValues() -> j
    void checkNoDuplicate(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> k
    com.google.common.collect.Table$Cell getCell(int) -> l
    java.lang.Object getValue(int) -> m
    java.util.Map com.google.common.collect.DenseImmutableTable.rowMap() -> rowMap
com.google.common.collect.RegularImmutableTable$1 -> com.google.common.collect.cp:
    java.util.Comparator val$columnComparator -> b
    java.util.Comparator val$rowComparator -> a
    1:1:int compare(com.google.common.collect.Table$Cell,com.google.common.collect.Table$Cell):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
com.google.common.collect.RegularImmutableTable$CellSet -> com.google.common.collect.dp:
    com.google.common.collect.RegularImmutableTable this$0 -> c
    1:1:void <init>(com.google.common.collect.RegularImmutableTable):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.RegularImmutableTable,com.google.common.collect.RegularImmutableTable$1):0 -> <init>
    boolean isPartialView() -> e
    1:1:com.google.common.collect.Table$Cell get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
com.google.common.collect.RegularImmutableTable$Values -> com.google.common.collect.ep:
    com.google.common.collect.RegularImmutableTable this$0 -> b
    1:1:void <init>(com.google.common.collect.RegularImmutableTable):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.RegularImmutableTable,com.google.common.collect.RegularImmutableTable$1):0 -> <init>
    boolean isPartialView() -> e
com.google.common.collect.ReverseNaturalOrdering -> com.google.common.collect.gp:
    com.google.common.collect.ReverseNaturalOrdering INSTANCE -> a
    1:1:int compare(java.lang.Comparable,java.lang.Comparable):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
    1:1:java.lang.Comparable max(java.lang.Comparable,java.lang.Comparable):0:0 -> max
    1:1:java.lang.Object max(java.lang.Object,java.lang.Object):0 -> max
    2:2:java.lang.Comparable max(java.util.Iterator):0:0 -> max
    2:2:java.lang.Object max(java.util.Iterator):0 -> max
    1:1:java.lang.Comparable min(java.lang.Iterable):0:0 -> min
    1:1:java.lang.Object min(java.lang.Iterable):0 -> min
    2:2:java.lang.Comparable min(java.lang.Comparable,java.lang.Comparable):0:0 -> min
    2:2:java.lang.Object min(java.lang.Object,java.lang.Object):0 -> min
    3:3:java.lang.Comparable min(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable[]):0:0 -> min
    3:3:java.lang.Object min(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]):0 -> min
    4:4:java.lang.Comparable min(java.util.Iterator):0:0 -> min
    4:4:java.lang.Object min(java.util.Iterator):0 -> min
com.google.common.collect.ReverseOrdering -> com.google.common.collect.hp:
    com.google.common.collect.Ordering forwardOrder -> a
com.google.common.collect.Sets -> com.google.common.collect.Sets:
    boolean equalsImpl(java.util.Set,java.lang.Object) -> a
    int hashCodeImpl(java.util.Set) -> b
    boolean removeAllImpl(java.util.Set,java.util.Collection) -> c
    1:1:java.util.EnumSet makeComplementByHand(java.util.Collection,java.lang.Class):0:0 -> complementOf
    1:1:java.util.EnumSet complementOf(java.util.Collection):0 -> complementOf
    2:2:java.util.EnumSet makeComplementByHand(java.util.Collection,java.lang.Class):0:0 -> complementOf
    2:2:java.util.EnumSet complementOf(java.util.Collection,java.lang.Class):0 -> complementOf
    boolean removeAllImpl(java.util.Set,java.util.Iterator) -> d
    1:1:java.util.NavigableSet com.google.common.collect.Synchronized.navigableSet(java.util.NavigableSet,java.lang.Object):0:0 -> synchronizedNavigableSet
    1:1:java.util.NavigableSet com.google.common.collect.Synchronized.navigableSet(java.util.NavigableSet):0 -> synchronizedNavigableSet
    1:1:java.util.NavigableSet synchronizedNavigableSet(java.util.NavigableSet):0 -> synchronizedNavigableSet
    1:1:java.util.stream.Collector com.google.common.collect.CollectCollectors.toImmutableEnumSet():0:0 -> toImmutableEnumSet
    1:1:java.util.stream.Collector toImmutableEnumSet():0 -> toImmutableEnumSet
com.google.common.collect.Sets$1 -> com.google.common.collect.jp:
    java.util.Set val$set1 -> a
    java.util.Set val$set2 -> b
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.collect.Sets$1$1 -> com.google.common.collect.ip:
    java.util.Iterator itr2 -> d
    java.util.Iterator itr1 -> c
    com.google.common.collect.Sets$1 this$0 -> e
com.google.common.collect.Sets$2 -> com.google.common.collect.lp:
    java.util.Set val$set1 -> a
    java.util.Set val$set2 -> b
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.collect.Sets$2$1 -> com.google.common.collect.kp:
    java.util.Iterator itr -> c
    com.google.common.collect.Sets$2 this$0 -> d
com.google.common.collect.Sets$3 -> com.google.common.collect.np:
    java.util.Set val$set1 -> a
    java.util.Set val$set2 -> b
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.collect.Sets$3$1 -> com.google.common.collect.mp:
    java.util.Iterator itr -> c
    com.google.common.collect.Sets$3 this$0 -> d
com.google.common.collect.Sets$4 -> com.google.common.collect.pp:
    java.util.Set val$set1 -> a
    java.util.Set val$set2 -> b
com.google.common.collect.Sets$4$1 -> com.google.common.collect.op:
    java.util.Iterator val$itr2 -> d
    java.util.Iterator val$itr1 -> c
    com.google.common.collect.Sets$4 this$0 -> e
com.google.common.collect.Sets$5 -> com.google.common.collect.tp:
    com.google.common.collect.ImmutableMap val$index -> b
    int val$size -> a
com.google.common.collect.Sets$5$1 -> com.google.common.collect.sp:
    java.util.BitSet bits -> c
    com.google.common.collect.Sets$5 this$0 -> d
    1:1:java.util.Set computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
com.google.common.collect.Sets$5$1$1 -> com.google.common.collect.rp:
    com.google.common.collect.Sets$5$1 this$1 -> b
    java.util.BitSet val$copy -> a
com.google.common.collect.Sets$5$1$1$1 -> com.google.common.collect.qp:
    com.google.common.collect.Sets$5$1$1 this$2 -> d
    int i -> c
com.google.common.collect.Sets$CartesianSet -> com.google.common.collect.vp:
    com.google.common.collect.CartesianList delegate -> b
    com.google.common.collect.ImmutableList axes -> a
    java.util.Set create(java.util.List) -> a
    1:1:java.util.Collection delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
com.google.common.collect.Sets$CartesianSet$1 -> com.google.common.collect.up:
    com.google.common.collect.ImmutableList val$axes -> b
    boolean isPartialView() -> e
    1:1:java.util.List get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
com.google.common.collect.Sets$DescendingSet -> com.google.common.collect.wp:
    java.util.NavigableSet forward -> a
    1:1:com.google.common.collect.Ordering reverse(java.util.Comparator):0:0 -> comparator
    1:1:java.util.Comparator comparator():0 -> comparator
com.google.common.collect.Sets$FilteredNavigableSet -> com.google.common.collect.xp:
    1:1:java.util.NavigableSet unfiltered():0:0 -> ceiling
    1:1:java.lang.Object ceiling(java.lang.Object):0 -> ceiling
    2:2:java.lang.Object ceiling(java.lang.Object):0:0 -> ceiling
    1:1:java.util.NavigableSet unfiltered():0:0 -> descendingIterator
    1:1:java.util.Iterator descendingIterator():0 -> descendingIterator
    2:2:java.util.Iterator descendingIterator():0:0 -> descendingIterator
    1:1:java.util.NavigableSet unfiltered():0:0 -> descendingSet
    1:1:java.util.NavigableSet descendingSet():0 -> descendingSet
    2:2:java.util.NavigableSet descendingSet():0:0 -> descendingSet
    1:1:java.util.NavigableSet unfiltered():0:0 -> floor
    1:1:java.lang.Object floor(java.lang.Object):0 -> floor
    2:2:java.lang.Object floor(java.lang.Object):0:0 -> floor
    1:1:java.util.NavigableSet unfiltered():0:0 -> headSet
    1:1:java.util.NavigableSet headSet(java.lang.Object,boolean):0 -> headSet
    2:2:java.util.NavigableSet headSet(java.lang.Object,boolean):0:0 -> headSet
    1:1:java.util.NavigableSet unfiltered():0:0 -> higher
    1:1:java.lang.Object higher(java.lang.Object):0 -> higher
    2:2:java.lang.Object higher(java.lang.Object):0:0 -> higher
    1:1:java.util.NavigableSet unfiltered():0:0 -> last
    1:1:java.lang.Object last():0 -> last
    2:2:java.lang.Object last():0:0 -> last
    1:1:java.util.NavigableSet unfiltered():0:0 -> lower
    1:1:java.lang.Object lower(java.lang.Object):0 -> lower
    2:2:java.lang.Object lower(java.lang.Object):0:0 -> lower
    1:1:java.util.NavigableSet unfiltered():0:0 -> pollFirst
    1:1:java.lang.Object pollFirst():0 -> pollFirst
    2:2:java.lang.Object pollFirst():0:0 -> pollFirst
    1:1:java.util.NavigableSet unfiltered():0:0 -> pollLast
    1:1:java.lang.Object pollLast():0 -> pollLast
    2:2:java.lang.Object pollLast():0:0 -> pollLast
    1:1:java.util.NavigableSet unfiltered():0:0 -> subSet
    1:1:java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean):0 -> subSet
    2:2:java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean):0:0 -> subSet
    1:1:java.util.NavigableSet unfiltered():0:0 -> tailSet
    1:1:java.util.NavigableSet tailSet(java.lang.Object,boolean):0 -> tailSet
    2:2:java.util.NavigableSet tailSet(java.lang.Object,boolean):0:0 -> tailSet
com.google.common.collect.Sets$FilteredSet -> com.google.common.collect.yp:
com.google.common.collect.Sets$FilteredSortedSet -> com.google.common.collect.zp:
com.google.common.collect.Sets$ImprovedAbstractSet -> com.google.common.collect.aq:
com.google.common.collect.Sets$PowerSet -> com.google.common.collect.cq:
    com.google.common.collect.ImmutableMap inputSet -> a
com.google.common.collect.Sets$PowerSet$1 -> com.google.common.collect.bq:
    com.google.common.collect.Sets$PowerSet this$0 -> c
    1:1:java.util.Set get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
com.google.common.collect.Sets$SetView -> com.google.common.collect.Sets$SetView:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.collect.Sets$1):0 -> <init>
com.google.common.collect.Sets$SubSet -> com.google.common.collect.eq:
    com.google.common.collect.ImmutableMap inputSet -> a
    int mask -> b
    com.google.common.collect.ImmutableMap access$100(com.google.common.collect.Sets$SubSet) -> a
    int access$200(com.google.common.collect.Sets$SubSet) -> b
com.google.common.collect.Sets$SubSet$1 -> com.google.common.collect.dq:
    com.google.common.collect.ImmutableList elements -> a
    int remainingSetBits -> b
    com.google.common.collect.Sets$SubSet this$0 -> c
com.google.common.collect.Sets$UnmodifiableNavigableSet -> com.google.common.collect.fq:
    java.util.SortedSet unmodifiableDelegate -> b
    com.google.common.collect.Sets$UnmodifiableNavigableSet descendingSet -> c
    java.util.NavigableSet delegate -> a
    1:1:java.util.SortedSet delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
    2:2:java.util.SortedSet delegate():0:0 -> delegate
    2:2:java.util.Collection delegate():0 -> delegate
    3:3:java.util.SortedSet delegate():0:0 -> delegate
    3:3:java.util.Set delegate():0 -> delegate
com.google.common.collect.SingletonImmutableBiMap -> com.google.common.collect.gq:
    java.lang.Object singleKey -> f
    java.lang.Object singleValue -> g
    com.google.common.collect.ImmutableBiMap inverse -> h
    com.google.common.collect.ImmutableBiMap lazyInverse -> i
    com.google.common.collect.ImmutableSet createEntrySet() -> c
    com.google.common.collect.ImmutableSet createKeySet() -> d
    boolean isPartialView() -> h
com.google.common.collect.SingletonImmutableList -> com.google.common.collect.hq:
    java.lang.Object element -> b
    boolean isPartialView() -> e
com.google.common.collect.SingletonImmutableSet -> com.google.common.collect.iq:
    java.lang.Object element -> c
    int cachedHashCode -> d
    int copyIntoArray(java.lang.Object[],int) -> a
    boolean isPartialView() -> e
    com.google.common.collect.ImmutableList createAsList() -> i
    boolean isHashCodeFast() -> j
com.google.common.collect.SingletonImmutableTable -> com.google.common.collect.jq:
    java.lang.Object singleColumnKey -> d
    java.lang.Object singleValue -> e
    java.lang.Object singleRowKey -> c
    1:1:com.google.common.collect.ImmutableSet createCellSet():0:0 -> c
    1:1:java.util.Set createCellSet():0 -> c
    1:1:com.google.common.collect.ImmutableCollection createValues():0:0 -> d
    1:1:java.util.Collection createValues():0 -> d
    com.google.common.collect.ImmutableSet createCellSet() -> i
    com.google.common.collect.ImmutableCollection createValues() -> j
com.google.common.collect.SortedIterable -> com.google.common.collect.kq:
com.google.common.collect.SortedLists$1 -> com.google.common.collect.lq:
com.google.common.collect.SortedLists$KeyAbsentBehavior -> com.google.common.collect.pq:
    com.google.common.collect.SortedLists$KeyAbsentBehavior[] $VALUES -> d
    com.google.common.collect.SortedLists$KeyAbsentBehavior NEXT_LOWER -> a
    com.google.common.collect.SortedLists$KeyAbsentBehavior INVERTED_INSERTION_INDEX -> c
    com.google.common.collect.SortedLists$KeyAbsentBehavior NEXT_HIGHER -> b
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:void <init>(java.lang.String,int,com.google.common.collect.SortedLists$1):0 -> <init>
com.google.common.collect.SortedLists$KeyAbsentBehavior$1 -> com.google.common.collect.mq:
com.google.common.collect.SortedLists$KeyAbsentBehavior$2 -> com.google.common.collect.nq:
com.google.common.collect.SortedLists$KeyAbsentBehavior$3 -> com.google.common.collect.oq:
com.google.common.collect.SortedLists$KeyPresentBehavior -> com.google.common.collect.vq:
    com.google.common.collect.SortedLists$KeyPresentBehavior[] $VALUES -> f
    com.google.common.collect.SortedLists$KeyPresentBehavior ANY_PRESENT -> a
    com.google.common.collect.SortedLists$KeyPresentBehavior FIRST_PRESENT -> c
    com.google.common.collect.SortedLists$KeyPresentBehavior LAST_PRESENT -> b
    com.google.common.collect.SortedLists$KeyPresentBehavior LAST_BEFORE -> e
    com.google.common.collect.SortedLists$KeyPresentBehavior FIRST_AFTER -> d
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:void <init>(java.lang.String,int,com.google.common.collect.SortedLists$1):0 -> <init>
com.google.common.collect.SortedLists$KeyPresentBehavior$1 -> com.google.common.collect.qq:
com.google.common.collect.SortedLists$KeyPresentBehavior$2 -> com.google.common.collect.rq:
com.google.common.collect.SortedLists$KeyPresentBehavior$3 -> com.google.common.collect.sq:
com.google.common.collect.SortedLists$KeyPresentBehavior$4 -> com.google.common.collect.tq:
com.google.common.collect.SortedLists$KeyPresentBehavior$5 -> com.google.common.collect.uq:
com.google.common.collect.SortedMultisets$ElementSet -> com.google.common.collect.wq:
    com.google.common.collect.SortedMultiset multiset -> a
    1:1:com.google.common.collect.SortedMultiset multiset():0:0 -> a
    1:1:com.google.common.collect.Multiset multiset():0 -> a
    com.google.common.collect.SortedMultiset multiset() -> b
    1:1:com.google.common.collect.SortedMultiset multiset():0:0 -> comparator
    1:1:java.util.Comparator comparator():0 -> comparator
    2:2:java.util.Comparator comparator():0:0 -> comparator
    1:1:com.google.common.collect.SortedMultiset multiset():0:0 -> first
    1:1:java.lang.Object first():0 -> first
    2:2:java.lang.Object first():0:0 -> first
    3:3:java.lang.Object com.google.common.collect.SortedMultisets.getElementOrThrow(com.google.common.collect.Multiset$Entry):0:0 -> first
    3:3:java.lang.Object com.google.common.collect.SortedMultisets.access$000(com.google.common.collect.Multiset$Entry):0 -> first
    3:3:java.lang.Object first():0 -> first
    1:1:com.google.common.collect.SortedMultiset multiset():0:0 -> headSet
    1:1:java.util.SortedSet headSet(java.lang.Object):0 -> headSet
    2:2:java.util.SortedSet headSet(java.lang.Object):0:0 -> headSet
    1:1:com.google.common.collect.SortedMultiset multiset():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
    2:2:java.util.Iterator iterator():0:0 -> iterator
    3:3:java.util.Iterator com.google.common.collect.Multisets.elementIterator(java.util.Iterator):0:0 -> iterator
    3:3:java.util.Iterator iterator():0 -> iterator
    1:1:com.google.common.collect.SortedMultiset multiset():0:0 -> last
    1:1:java.lang.Object last():0 -> last
    2:2:java.lang.Object last():0:0 -> last
    3:3:java.lang.Object com.google.common.collect.SortedMultisets.getElementOrThrow(com.google.common.collect.Multiset$Entry):0:0 -> last
    3:3:java.lang.Object com.google.common.collect.SortedMultisets.access$000(com.google.common.collect.Multiset$Entry):0 -> last
    3:3:java.lang.Object last():0 -> last
    1:1:com.google.common.collect.SortedMultiset multiset():0:0 -> subSet
    1:1:java.util.SortedSet subSet(java.lang.Object,java.lang.Object):0 -> subSet
    2:2:java.util.SortedSet subSet(java.lang.Object,java.lang.Object):0:0 -> subSet
    1:1:com.google.common.collect.SortedMultiset multiset():0:0 -> tailSet
    1:1:java.util.SortedSet tailSet(java.lang.Object):0 -> tailSet
    2:2:java.util.SortedSet tailSet(java.lang.Object):0:0 -> tailSet
com.google.common.collect.SortedMultisets$NavigableElementSet -> com.google.common.collect.xq:
com.google.common.collect.SparseImmutableTable -> com.google.common.collect.yq:
    int[] cellColumnInRowIndices -> f
    int[] cellRowIndices -> e
    com.google.common.collect.ImmutableTable EMPTY -> g
    com.google.common.collect.ImmutableMap columnMap -> d
    com.google.common.collect.ImmutableMap rowMap -> c
    com.google.common.collect.Table$Cell getCell(int) -> l
    java.lang.Object getValue(int) -> m
com.google.common.collect.StandardRowSortedTable -> com.google.common.collect.br:
    1:1:java.util.SortedMap createRowMap():0:0 -> i
    1:1:java.util.Map createRowMap():0 -> i
com.google.common.collect.StandardRowSortedTable$1 -> com.google.common.collect.zq:
com.google.common.collect.StandardRowSortedTable$RowSortedMap -> com.google.common.collect.ar:
    com.google.common.collect.StandardRowSortedTable this$0 -> e
    1:1:void <init>(com.google.common.collect.StandardRowSortedTable):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.StandardRowSortedTable,com.google.common.collect.StandardRowSortedTable$1):0 -> <init>
    1:1:java.util.SortedMap com.google.common.collect.StandardRowSortedTable.sortedBackingMap():0:0 -> comparator
    1:1:java.util.SortedMap com.google.common.collect.StandardRowSortedTable.access$100(com.google.common.collect.StandardRowSortedTable):0 -> comparator
    1:1:java.util.Comparator comparator():0 -> comparator
    2:2:java.util.Comparator comparator():0:0 -> comparator
    1:1:java.util.SortedSet createKeySet():0:0 -> createKeySet
    1:1:java.util.Set createKeySet():0 -> createKeySet
    1:1:java.util.SortedMap com.google.common.collect.StandardRowSortedTable.sortedBackingMap():0:0 -> firstKey
    1:1:java.util.SortedMap com.google.common.collect.StandardRowSortedTable.access$100(com.google.common.collect.StandardRowSortedTable):0 -> firstKey
    1:1:java.lang.Object firstKey():0 -> firstKey
    2:2:java.lang.Object firstKey():0:0 -> firstKey
    1:1:java.util.SortedMap com.google.common.collect.StandardRowSortedTable.sortedBackingMap():0:0 -> headMap
    1:1:java.util.SortedMap com.google.common.collect.StandardRowSortedTable.access$100(com.google.common.collect.StandardRowSortedTable):0 -> headMap
    1:1:java.util.SortedMap headMap(java.lang.Object):0 -> headMap
    2:2:java.util.SortedMap headMap(java.lang.Object):0:0 -> headMap
    1:1:java.util.SortedSet keySet():0:0 -> keySet
    1:1:java.util.Set keySet():0 -> keySet
    1:1:java.util.SortedMap com.google.common.collect.StandardRowSortedTable.sortedBackingMap():0:0 -> lastKey
    1:1:java.util.SortedMap com.google.common.collect.StandardRowSortedTable.access$100(com.google.common.collect.StandardRowSortedTable):0 -> lastKey
    1:1:java.lang.Object lastKey():0 -> lastKey
    2:2:java.lang.Object lastKey():0:0 -> lastKey
    1:1:java.util.SortedMap com.google.common.collect.StandardRowSortedTable.sortedBackingMap():0:0 -> subMap
    1:1:java.util.SortedMap com.google.common.collect.StandardRowSortedTable.access$100(com.google.common.collect.StandardRowSortedTable):0 -> subMap
    1:1:java.util.SortedMap subMap(java.lang.Object,java.lang.Object):0 -> subMap
    2:2:java.util.SortedMap subMap(java.lang.Object,java.lang.Object):0:0 -> subMap
    1:1:java.util.SortedMap com.google.common.collect.StandardRowSortedTable.sortedBackingMap():0:0 -> tailMap
    1:1:java.util.SortedMap com.google.common.collect.StandardRowSortedTable.access$100(com.google.common.collect.StandardRowSortedTable):0 -> tailMap
    1:1:java.util.SortedMap tailMap(java.lang.Object):0 -> tailMap
    2:2:java.util.SortedMap tailMap(java.lang.Object):0:0 -> tailMap
com.google.common.collect.StandardTable -> com.google.common.collect.xr:
    java.util.Map backingMap -> c
    java.util.Set columnKeySet -> e
    com.google.common.collect.StandardTable$ColumnMap columnMap -> g
    com.google.common.base.Supplier factory -> d
    java.util.Map rowMap -> f
    java.util.Iterator cellIterator() -> a
    java.util.Spliterator cellSpliterator() -> b
    1:1:java.util.Map removeColumn(java.lang.Object):0:0 -> g
    1:1:java.util.Map access$900(com.google.common.collect.StandardTable,java.lang.Object):0 -> g
    java.util.Iterator createColumnKeyIterator() -> h
    java.util.Map createRowMap() -> i
    1:1:java.util.Map getOrCreate(java.lang.Object):0:0 -> put
    1:1:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object):0 -> put
    2:2:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object):0:0 -> put
com.google.common.collect.StandardTable$1 -> com.google.common.collect.cr:
com.google.common.collect.StandardTable$CellIterator -> com.google.common.collect.dr:
    java.util.Map$Entry rowEntry -> b
    java.util.Iterator columnIterator -> c
    java.util.Iterator rowIterator -> a
    com.google.common.collect.StandardTable this$0 -> d
    1:1:void <init>(com.google.common.collect.StandardTable):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.StandardTable,com.google.common.collect.StandardTable$1):0 -> <init>
    1:1:com.google.common.collect.Table$Cell next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
com.google.common.collect.StandardTable$Column -> com.google.common.collect.jr:
    java.lang.Object columnKey -> d
    com.google.common.collect.StandardTable this$0 -> e
    java.util.Collection createValues() -> a
    boolean removeFromColumnIf(com.google.common.base.Predicate) -> b
com.google.common.collect.StandardTable$Column$EntrySet -> com.google.common.collect.er:
    com.google.common.collect.StandardTable$Column this$1 -> a
    1:1:void <init>(com.google.common.collect.StandardTable$Column):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.StandardTable$Column,com.google.common.collect.StandardTable$1):0 -> <init>
    1:1:boolean com.google.common.collect.StandardTable.containsMapping(java.lang.Object,java.lang.Object,java.lang.Object):0:0 -> contains
    1:1:boolean com.google.common.collect.StandardTable.access$300(com.google.common.collect.StandardTable,java.lang.Object,java.lang.Object,java.lang.Object):0 -> contains
    1:1:boolean contains(java.lang.Object):0 -> contains
    1:1:boolean com.google.common.collect.StandardTable.removeMapping(java.lang.Object,java.lang.Object,java.lang.Object):0:0 -> remove
    1:1:boolean com.google.common.collect.StandardTable.access$400(com.google.common.collect.StandardTable,java.lang.Object,java.lang.Object,java.lang.Object):0 -> remove
    1:1:boolean remove(java.lang.Object):0 -> remove
    2:2:boolean com.google.common.collect.StandardTable.containsMapping(java.lang.Object,java.lang.Object,java.lang.Object):0:0 -> remove
    2:2:boolean com.google.common.collect.StandardTable.removeMapping(java.lang.Object,java.lang.Object,java.lang.Object):0 -> remove
    2:2:boolean com.google.common.collect.StandardTable.access$400(com.google.common.collect.StandardTable,java.lang.Object,java.lang.Object,java.lang.Object):0 -> remove
    2:2:boolean remove(java.lang.Object):0 -> remove
    3:3:boolean com.google.common.collect.StandardTable.removeMapping(java.lang.Object,java.lang.Object,java.lang.Object):0:0 -> remove
    3:3:boolean com.google.common.collect.StandardTable.access$400(com.google.common.collect.StandardTable,java.lang.Object,java.lang.Object,java.lang.Object):0 -> remove
    3:3:boolean remove(java.lang.Object):0 -> remove
com.google.common.collect.StandardTable$Column$EntrySetIterator -> com.google.common.collect.gr:
    java.util.Iterator iterator -> c
    com.google.common.collect.StandardTable$Column this$1 -> d
    1:1:void <init>(com.google.common.collect.StandardTable$Column):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.StandardTable$Column,com.google.common.collect.StandardTable$1):0 -> <init>
    1:1:java.util.Map$Entry computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
com.google.common.collect.StandardTable$Column$EntrySetIterator$1EntryImpl -> com.google.common.collect.fr:
    java.util.Map$Entry val$entry -> a
    com.google.common.collect.StandardTable$Column$EntrySetIterator this$2 -> b
com.google.common.collect.StandardTable$Column$KeySet -> com.google.common.collect.hr:
    com.google.common.collect.StandardTable$Column this$1 -> b
com.google.common.collect.StandardTable$Column$Values -> com.google.common.collect.ir:
    com.google.common.collect.StandardTable$Column this$1 -> b
com.google.common.collect.StandardTable$ColumnKeyIterator -> com.google.common.collect.kr:
    java.util.Iterator mapIterator -> d
    java.util.Map seen -> c
    java.util.Iterator entryIterator -> e
    com.google.common.collect.StandardTable this$0 -> f
    1:1:void <init>(com.google.common.collect.StandardTable):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.StandardTable,com.google.common.collect.StandardTable$1):0 -> <init>
    2:2:com.google.common.collect.UnmodifiableListIterator com.google.common.collect.Iterators.emptyListIterator():0:0 -> <init>
    2:2:com.google.common.collect.UnmodifiableIterator com.google.common.collect.Iterators.emptyIterator():0 -> <init>
    2:2:void <init>(com.google.common.collect.StandardTable):0 -> <init>
    2:2:void <init>(com.google.common.collect.StandardTable,com.google.common.collect.StandardTable$1):0 -> <init>
    3:3:void <init>(com.google.common.collect.StandardTable):0:0 -> <init>
    3:3:void <init>(com.google.common.collect.StandardTable,com.google.common.collect.StandardTable$1):0 -> <init>
com.google.common.collect.StandardTable$ColumnKeySet -> com.google.common.collect.lr:
    com.google.common.collect.StandardTable this$0 -> b
    1:1:void <init>(com.google.common.collect.StandardTable):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.StandardTable,com.google.common.collect.StandardTable$1):0 -> <init>
com.google.common.collect.StandardTable$ColumnMap -> com.google.common.collect.pr:
    com.google.common.collect.StandardTable this$0 -> d
    1:1:void <init>(com.google.common.collect.StandardTable):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.StandardTable,com.google.common.collect.StandardTable$1):0 -> <init>
    java.util.Collection createValues() -> a
    1:1:java.util.Map get(java.lang.Object):0:0 -> get
    1:1:java.lang.Object get(java.lang.Object):0 -> get
    1:1:java.util.Map remove(java.lang.Object):0:0 -> remove
    1:1:java.lang.Object remove(java.lang.Object):0 -> remove
com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet -> com.google.common.collect.nr:
    com.google.common.collect.StandardTable$ColumnMap this$1 -> b
    1:1:java.util.Map com.google.common.collect.StandardTable$ColumnMap.get(java.lang.Object):0:0 -> contains
    1:1:boolean contains(java.lang.Object):0 -> contains
    2:2:boolean contains(java.lang.Object):0:0 -> contains
com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet$1 -> com.google.common.collect.mr:
    com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet this$2 -> a
    1:1:java.util.Map apply(java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues -> com.google.common.collect.or:
    com.google.common.collect.StandardTable$ColumnMap this$1 -> b
com.google.common.collect.StandardTable$Row -> com.google.common.collect.sr:
    java.util.Map backingRowMap -> b
    java.lang.Object rowKey -> a
    com.google.common.collect.StandardTable this$0 -> c
    java.util.Iterator entryIterator() -> a
    java.util.Spliterator entrySpliterator() -> b
    java.util.Map backingRowMap() -> c
    java.util.Map computeBackingRowMap() -> d
    void maintainEmptyInvariant() -> e
    1:1:java.lang.Object com.google.common.collect.Maps.safeRemove(java.util.Map,java.lang.Object):0:0 -> remove
    1:1:java.lang.Object remove(java.lang.Object):0 -> remove
    2:2:java.lang.Object remove(java.lang.Object):0:0 -> remove
com.google.common.collect.StandardTable$Row$1 -> com.google.common.collect.qr:
    com.google.common.collect.StandardTable$Row this$1 -> b
    java.util.Iterator val$iterator -> a
    1:1:java.util.Map$Entry next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
    2:2:java.util.Map$Entry com.google.common.collect.StandardTable$Row.wrapEntry(java.util.Map$Entry):0:0 -> next
    2:2:java.util.Map$Entry next():0 -> next
    2:2:java.lang.Object next():0 -> next
com.google.common.collect.StandardTable$Row$2 -> com.google.common.collect.rr:
    java.util.Map$Entry val$entry -> a
    1:1:java.util.Map$Entry delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
com.google.common.collect.StandardTable$RowMap -> com.google.common.collect.vr:
    com.google.common.collect.StandardTable this$0 -> d
    1:1:java.util.Map get(java.lang.Object):0:0 -> get
    1:1:java.lang.Object get(java.lang.Object):0 -> get
    1:1:java.util.Map remove(java.lang.Object):0:0 -> remove
    1:1:java.lang.Object remove(java.lang.Object):0 -> remove
com.google.common.collect.StandardTable$RowMap$EntrySet -> com.google.common.collect.ur:
    com.google.common.collect.StandardTable$RowMap this$1 -> b
com.google.common.collect.StandardTable$RowMap$EntrySet$1 -> com.google.common.collect.tr:
    com.google.common.collect.StandardTable$RowMap$EntrySet this$2 -> a
    1:1:java.util.Map apply(java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.StandardTable$TableSet -> com.google.common.collect.wr:
    com.google.common.collect.StandardTable this$0 -> a
    1:1:void <init>(com.google.common.collect.StandardTable):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.StandardTable,com.google.common.collect.StandardTable$1):0 -> <init>
com.google.common.collect.Streams -> com.google.common.collect.Streams:
    void closeAll(java.util.stream.BaseStream[]) -> a
    void lambda$concat$1(java.util.stream.Stream[]) -> b
    void lambda$concat$3(java.util.stream.IntStream[]) -> c
    1:1:java.util.Spliterator$OfDouble com.google.common.collect.CollectSpliterators.flatMapToDouble(java.util.Spliterator,java.util.function.Function,int,long):0:0 -> concat
    1:1:java.util.stream.DoubleStream concat(java.util.stream.DoubleStream[]):0 -> concat
    2:2:java.util.stream.DoubleStream concat(java.util.stream.DoubleStream[]):0:0 -> concat
    3:3:java.util.Spliterator$OfInt com.google.common.collect.CollectSpliterators.flatMapToInt(java.util.Spliterator,java.util.function.Function,int,long):0:0 -> concat
    3:3:java.util.stream.IntStream concat(java.util.stream.IntStream[]):0 -> concat
    4:4:java.util.stream.IntStream concat(java.util.stream.IntStream[]):0:0 -> concat
    5:5:java.util.Spliterator$OfLong com.google.common.collect.CollectSpliterators.flatMapToLong(java.util.Spliterator,java.util.function.Function,int,long):0:0 -> concat
    5:5:java.util.stream.LongStream concat(java.util.stream.LongStream[]):0 -> concat
    6:6:java.util.stream.LongStream concat(java.util.stream.LongStream[]):0:0 -> concat
    void lambda$concat$5(java.util.stream.LongStream[]) -> d
    void lambda$concat$7(java.util.stream.DoubleStream[]) -> e
    1:1:java.lang.Object com.google.common.collect.Streams$1OptionalState.get():0:0 -> findLast
    1:1:java.util.Optional findLast(java.util.stream.Stream):0 -> findLast
    2:2:java.util.Optional findLast(java.util.stream.Stream):0:0 -> findLast
com.google.common.collect.Streams$1 -> com.google.common.collect.yr:
    java.util.function.BiFunction val$function -> c
    java.util.Iterator val$itrB -> b
    java.util.Iterator val$itrA -> a
com.google.common.collect.Streams$1OptionalState -> com.google.common.collect.zr:
    java.lang.Object value -> b
    boolean set -> a
com.google.common.collect.Streams$1Splitr -> com.google.common.collect.as:
    com.google.common.collect.Streams$FunctionWithIndex val$function -> d
    java.lang.Object holder -> c
    1:1:com.google.common.collect.Streams$1Splitr createSplit(java.util.Spliterator,long):0:0 -> a
    1:1:com.google.common.collect.Streams$MapWithIndexSpliterator createSplit(java.util.Spliterator,long):0 -> a
com.google.common.collect.Streams$2 -> com.google.common.collect.bs:
    com.google.common.collect.Streams$FunctionWithIndex val$function -> c
    java.util.Iterator val$fromIterator -> b
    long index -> a
com.google.common.collect.Streams$2Splitr -> com.google.common.collect.cs:
    com.google.common.collect.Streams$IntFunctionWithIndex val$function -> d
    int holder -> c
    1:1:com.google.common.collect.Streams$2Splitr createSplit(java.util.Spliterator$OfInt,long):0:0 -> a
    1:1:com.google.common.collect.Streams$MapWithIndexSpliterator createSplit(java.util.Spliterator,long):0 -> a
com.google.common.collect.Streams$3 -> com.google.common.collect.ds:
    long index -> a
    com.google.common.collect.Streams$IntFunctionWithIndex val$function -> c
    java.util.PrimitiveIterator$OfInt val$fromIterator -> b
com.google.common.collect.Streams$3Splitr -> com.google.common.collect.es:
    com.google.common.collect.Streams$LongFunctionWithIndex val$function -> d
    long holder -> c
    1:1:com.google.common.collect.Streams$3Splitr createSplit(java.util.Spliterator$OfLong,long):0:0 -> a
    1:1:com.google.common.collect.Streams$MapWithIndexSpliterator createSplit(java.util.Spliterator,long):0 -> a
com.google.common.collect.Streams$4 -> com.google.common.collect.fs:
    com.google.common.collect.Streams$LongFunctionWithIndex val$function -> c
    java.util.PrimitiveIterator$OfLong val$fromIterator -> b
    long index -> a
com.google.common.collect.Streams$4Splitr -> com.google.common.collect.gs:
    double holder -> c
    com.google.common.collect.Streams$DoubleFunctionWithIndex val$function -> d
    1:1:com.google.common.collect.Streams$4Splitr createSplit(java.util.Spliterator$OfDouble,long):0:0 -> a
    1:1:com.google.common.collect.Streams$MapWithIndexSpliterator createSplit(java.util.Spliterator,long):0 -> a
com.google.common.collect.Streams$5 -> com.google.common.collect.hs:
    java.util.PrimitiveIterator$OfDouble val$fromIterator -> b
    com.google.common.collect.Streams$DoubleFunctionWithIndex val$function -> c
    long index -> a
com.google.common.collect.Streams$MapWithIndexSpliterator -> com.google.common.collect.is:
    long index -> b
    java.util.Spliterator fromSpliterator -> a
    com.google.common.collect.Streams$MapWithIndexSpliterator createSplit(java.util.Spliterator,long) -> a
    1:1:com.google.common.collect.Streams$MapWithIndexSpliterator trySplit():0:0 -> trySplit
    1:1:java.util.Spliterator trySplit():0 -> trySplit
com.google.common.collect.Streams$TemporaryPair -> com.google.common.collect.js:
com.google.common.collect.Synchronized$1 -> com.google.common.collect.ks:
com.google.common.collect.Synchronized$SynchronizedAsMap -> com.google.common.collect.ls:
    java.util.Set asMapEntrySet -> f
    java.util.Collection asMapValues -> g
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> entrySet
    1:1:java.util.Map com.google.common.collect.Synchronized$SynchronizedMap.delegate():0 -> entrySet
    1:1:java.util.Set entrySet():0 -> entrySet
    2:2:java.util.Map com.google.common.collect.Synchronized$SynchronizedMap.delegate():0:0 -> entrySet
    2:2:java.util.Set entrySet():0 -> entrySet
    3:3:java.util.Set entrySet():0:0 -> entrySet
    1:1:java.util.Collection get(java.lang.Object):0:0 -> get
    1:1:java.lang.Object get(java.lang.Object):0 -> get
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> values
    1:1:java.util.Map com.google.common.collect.Synchronized$SynchronizedMap.delegate():0 -> values
    1:1:java.util.Collection values():0 -> values
    2:2:java.util.Map com.google.common.collect.Synchronized$SynchronizedMap.delegate():0:0 -> values
    2:2:java.util.Collection values():0 -> values
    3:3:java.util.Collection values():0:0 -> values
com.google.common.collect.Synchronized$SynchronizedAsMapEntries -> com.google.common.collect.os:
    1:1:boolean com.google.common.collect.Maps.containsEntryImpl(java.util.Collection,java.lang.Object):0:0 -> contains
    1:1:boolean contains(java.lang.Object):0 -> contains
    2:2:boolean contains(java.lang.Object):0:0 -> contains
    1:1:boolean com.google.common.collect.Maps.removeEntryImpl(java.util.Collection,java.lang.Object):0:0 -> remove
    1:1:boolean remove(java.lang.Object):0 -> remove
    2:2:boolean remove(java.lang.Object):0:0 -> remove
com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1 -> com.google.common.collect.ns:
    com.google.common.collect.Synchronized$SynchronizedAsMapEntries this$0 -> b
    1:1:java.util.Map$Entry transform(java.util.Map$Entry):0:0 -> a
    1:1:java.lang.Object transform(java.lang.Object):0 -> a
com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1 -> com.google.common.collect.ms:
    java.util.Map$Entry val$entry -> a
    com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1 this$1 -> b
    1:1:java.util.Map$Entry delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
    1:1:java.util.Collection getValue():0:0 -> getValue
    1:1:java.lang.Object getValue():0 -> getValue
com.google.common.collect.Synchronized$SynchronizedAsMapValues -> com.google.common.collect.qs:
com.google.common.collect.Synchronized$SynchronizedAsMapValues$1 -> com.google.common.collect.ps:
    com.google.common.collect.Synchronized$SynchronizedAsMapValues this$0 -> b
    1:1:java.util.Collection transform(java.util.Collection):0:0 -> a
    1:1:java.lang.Object transform(java.lang.Object):0 -> a
com.google.common.collect.Synchronized$SynchronizedBiMap -> com.google.common.collect.rs:
    java.util.Set valueSet -> f
    com.google.common.collect.BiMap inverse -> g
    1:1:void <init>(com.google.common.collect.BiMap,java.lang.Object,com.google.common.collect.BiMap):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.BiMap,java.lang.Object,com.google.common.collect.BiMap,com.google.common.collect.Synchronized$1):0 -> <init>
    java.util.Map delegate() -> a
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> b
    1:1:java.util.Map com.google.common.collect.Synchronized$SynchronizedMap.delegate():0 -> b
    1:1:com.google.common.collect.BiMap delegate():0 -> b
    2:2:java.util.Map com.google.common.collect.Synchronized$SynchronizedMap.delegate():0:0 -> b
    2:2:com.google.common.collect.BiMap delegate():0 -> b
    3:3:com.google.common.collect.BiMap delegate():0:0 -> b
    1:1:java.util.Set com.google.common.collect.Synchronized.set(java.util.Set,java.lang.Object):0:0 -> values
    1:1:java.util.Set values():0 -> values
    2:2:java.util.Set values():0:0 -> values
com.google.common.collect.Synchronized$SynchronizedCollection -> com.google.common.collect.ss:
    1:1:void <init>(java.util.Collection,java.lang.Object):0:0 -> <init>
    1:1:void <init>(java.util.Collection,java.lang.Object,com.google.common.collect.Synchronized$1):0 -> <init>
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> a
    1:1:java.util.Collection delegate():0 -> a
    2:2:java.util.Collection delegate():0:0 -> a
com.google.common.collect.Synchronized$SynchronizedDeque -> com.google.common.collect.ts:
    java.util.Collection delegate() -> a
    java.util.Queue delegate() -> b
    java.util.Deque delegate() -> c
com.google.common.collect.Synchronized$SynchronizedEntry -> com.google.common.collect.us:
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> equals
    1:1:java.util.Map$Entry delegate():0 -> equals
    1:1:boolean equals(java.lang.Object):0 -> equals
    2:2:java.util.Map$Entry delegate():0:0 -> equals
    2:2:boolean equals(java.lang.Object):0 -> equals
    3:3:boolean equals(java.lang.Object):0:0 -> equals
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> getKey
    1:1:java.util.Map$Entry delegate():0 -> getKey
    1:1:java.lang.Object getKey():0 -> getKey
    2:2:java.util.Map$Entry delegate():0:0 -> getKey
    2:2:java.lang.Object getKey():0 -> getKey
    3:3:java.lang.Object getKey():0:0 -> getKey
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> getValue
    1:1:java.util.Map$Entry delegate():0 -> getValue
    1:1:java.lang.Object getValue():0 -> getValue
    2:2:java.util.Map$Entry delegate():0:0 -> getValue
    2:2:java.lang.Object getValue():0 -> getValue
    3:3:java.lang.Object getValue():0:0 -> getValue
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> hashCode
    1:1:java.util.Map$Entry delegate():0 -> hashCode
    1:1:int hashCode():0 -> hashCode
    2:2:java.util.Map$Entry delegate():0:0 -> hashCode
    2:2:int hashCode():0 -> hashCode
    3:3:int hashCode():0:0 -> hashCode
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> setValue
    1:1:java.util.Map$Entry delegate():0 -> setValue
    1:1:java.lang.Object setValue(java.lang.Object):0 -> setValue
    2:2:java.util.Map$Entry delegate():0:0 -> setValue
    2:2:java.lang.Object setValue(java.lang.Object):0 -> setValue
    3:3:java.lang.Object setValue(java.lang.Object):0:0 -> setValue
com.google.common.collect.Synchronized$SynchronizedList -> com.google.common.collect.vs:
    java.util.Collection delegate() -> a
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> b
    1:1:java.util.Collection com.google.common.collect.Synchronized$SynchronizedCollection.delegate():0 -> b
    1:1:java.util.List delegate():0 -> b
    2:2:java.util.Collection com.google.common.collect.Synchronized$SynchronizedCollection.delegate():0:0 -> b
    2:2:java.util.List delegate():0 -> b
    3:3:java.util.List delegate():0:0 -> b
    1:1:java.util.List com.google.common.collect.Synchronized.list(java.util.List,java.lang.Object):0:0 -> subList
    1:1:java.util.List com.google.common.collect.Synchronized.access$200(java.util.List,java.lang.Object):0 -> subList
    1:1:java.util.List subList(int,int):0 -> subList
    2:2:java.util.List subList(int,int):0:0 -> subList
com.google.common.collect.Synchronized$SynchronizedListMultimap -> com.google.common.collect.ws:
    com.google.common.collect.Multimap delegate() -> a
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> b
    1:1:com.google.common.collect.Multimap com.google.common.collect.Synchronized$SynchronizedMultimap.delegate():0 -> b
    1:1:com.google.common.collect.ListMultimap delegate():0 -> b
    2:2:com.google.common.collect.Multimap com.google.common.collect.Synchronized$SynchronizedMultimap.delegate():0:0 -> b
    2:2:com.google.common.collect.ListMultimap delegate():0 -> b
    3:3:com.google.common.collect.ListMultimap delegate():0:0 -> b
    1:1:java.util.List com.google.common.collect.Synchronized.list(java.util.List,java.lang.Object):0:0 -> get
    1:1:java.util.List com.google.common.collect.Synchronized.access$200(java.util.List,java.lang.Object):0 -> get
    1:1:java.util.List get(java.lang.Object):0 -> get
    2:2:java.util.List get(java.lang.Object):0:0 -> get
com.google.common.collect.Synchronized$SynchronizedMap -> com.google.common.collect.xs:
    java.util.Collection values -> d
    java.util.Set keySet -> c
    java.util.Set entrySet -> e
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> a
    1:1:java.util.Map delegate():0 -> a
    2:2:java.util.Map delegate():0:0 -> a
    1:1:java.util.Set com.google.common.collect.Synchronized.set(java.util.Set,java.lang.Object):0:0 -> entrySet
    1:1:java.util.Set entrySet():0 -> entrySet
    2:2:java.util.Set entrySet():0:0 -> entrySet
    1:1:java.util.Set com.google.common.collect.Synchronized.set(java.util.Set,java.lang.Object):0:0 -> keySet
    1:1:java.util.Set keySet():0 -> keySet
    2:2:java.util.Set keySet():0:0 -> keySet
com.google.common.collect.Synchronized$SynchronizedMultimap -> com.google.common.collect.ys:
    java.util.Collection entries -> e
    java.util.Collection valuesCollection -> d
    java.util.Set keySet -> c
    java.util.Map asMap -> f
    com.google.common.collect.Multiset keys -> g
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> a
    1:1:com.google.common.collect.Multimap delegate():0 -> a
    2:2:com.google.common.collect.Multimap delegate():0:0 -> a
    1:1:com.google.common.collect.Multiset com.google.common.collect.Synchronized.multiset(com.google.common.collect.Multiset,java.lang.Object):0:0 -> keys
    1:1:com.google.common.collect.Multiset keys():0 -> keys
    2:2:com.google.common.collect.Multiset keys():0:0 -> keys
com.google.common.collect.Synchronized$SynchronizedMultiset -> com.google.common.collect.zs:
    java.util.Set elementSet -> c
    java.util.Set entrySet -> d
    java.util.Collection delegate() -> a
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> b
    1:1:java.util.Collection com.google.common.collect.Synchronized$SynchronizedCollection.delegate():0 -> b
    1:1:com.google.common.collect.Multiset delegate():0 -> b
    2:2:java.util.Collection com.google.common.collect.Synchronized$SynchronizedCollection.delegate():0:0 -> b
    2:2:com.google.common.collect.Multiset delegate():0 -> b
    3:3:com.google.common.collect.Multiset delegate():0:0 -> b
com.google.common.collect.Synchronized$SynchronizedNavigableMap -> com.google.common.collect.at:
    java.util.NavigableSet navigableKeySet -> h
    java.util.NavigableMap descendingMap -> g
    java.util.NavigableSet descendingKeySet -> f
    1:1:void com.google.common.collect.Synchronized$SynchronizedSortedMap.<init>(java.util.SortedMap,java.lang.Object):0:0 -> <init>
    1:1:void <init>(java.util.NavigableMap,java.lang.Object):0 -> <init>
    java.util.Map delegate() -> a
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> b
    1:1:java.util.Map com.google.common.collect.Synchronized$SynchronizedMap.delegate():0 -> b
    1:1:java.util.SortedMap com.google.common.collect.Synchronized$SynchronizedSortedMap.delegate():0 -> b
    1:1:java.util.NavigableMap delegate():0 -> b
    2:2:java.util.Map com.google.common.collect.Synchronized$SynchronizedMap.delegate():0:0 -> b
    2:2:java.util.SortedMap com.google.common.collect.Synchronized$SynchronizedSortedMap.delegate():0 -> b
    2:2:java.util.NavigableMap delegate():0 -> b
    3:3:java.util.SortedMap com.google.common.collect.Synchronized$SynchronizedSortedMap.delegate():0:0 -> b
    3:3:java.util.NavigableMap delegate():0 -> b
    4:4:java.util.NavigableMap delegate():0:0 -> b
    1:1:java.util.Comparator com.google.common.collect.Synchronized$SynchronizedSortedMap.comparator():0:0 -> comparator
    1:1:java.util.Comparator com.google.common.collect.Synchronized$SynchronizedSortedMap.comparator():0 -> comparator
    2:2:java.util.SortedMap delegate():0:0 -> comparator
    2:2:java.util.Comparator com.google.common.collect.Synchronized$SynchronizedSortedMap.comparator():0 -> comparator
    2:2:java.util.Comparator com.google.common.collect.Synchronized$SynchronizedSortedMap.comparator():0 -> comparator
    3:3:java.util.Comparator com.google.common.collect.Synchronized$SynchronizedSortedMap.comparator():0:0 -> comparator
    3:3:java.util.Comparator com.google.common.collect.Synchronized$SynchronizedSortedMap.comparator():0 -> comparator
    1:1:java.util.NavigableSet com.google.common.collect.Synchronized.navigableSet(java.util.NavigableSet,java.lang.Object):0:0 -> descendingKeySet
    1:1:java.util.NavigableSet descendingKeySet():0 -> descendingKeySet
    2:2:java.util.NavigableSet descendingKeySet():0:0 -> descendingKeySet
    1:1:java.util.NavigableMap com.google.common.collect.Synchronized.navigableMap(java.util.NavigableMap,java.lang.Object):0:0 -> descendingMap
    1:1:java.util.NavigableMap descendingMap():0 -> descendingMap
    2:2:java.util.NavigableMap descendingMap():0:0 -> descendingMap
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedSortedMap.firstKey():0:0 -> firstKey
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedSortedMap.firstKey():0 -> firstKey
    2:2:java.util.SortedMap delegate():0:0 -> firstKey
    2:2:java.lang.Object com.google.common.collect.Synchronized$SynchronizedSortedMap.firstKey():0 -> firstKey
    2:2:java.lang.Object com.google.common.collect.Synchronized$SynchronizedSortedMap.firstKey():0 -> firstKey
    3:3:java.lang.Object com.google.common.collect.Synchronized$SynchronizedSortedMap.firstKey():0:0 -> firstKey
    3:3:java.lang.Object com.google.common.collect.Synchronized$SynchronizedSortedMap.firstKey():0 -> firstKey
    1:1:java.util.NavigableMap com.google.common.collect.Synchronized.navigableMap(java.util.NavigableMap,java.lang.Object):0:0 -> headMap
    1:1:java.util.NavigableMap headMap(java.lang.Object,boolean):0 -> headMap
    2:2:java.util.NavigableMap headMap(java.lang.Object,boolean):0:0 -> headMap
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedSortedMap.lastKey():0:0 -> lastKey
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedSortedMap.lastKey():0 -> lastKey
    2:2:java.util.SortedMap delegate():0:0 -> lastKey
    2:2:java.lang.Object com.google.common.collect.Synchronized$SynchronizedSortedMap.lastKey():0 -> lastKey
    2:2:java.lang.Object com.google.common.collect.Synchronized$SynchronizedSortedMap.lastKey():0 -> lastKey
    3:3:java.lang.Object com.google.common.collect.Synchronized$SynchronizedSortedMap.lastKey():0:0 -> lastKey
    3:3:java.lang.Object com.google.common.collect.Synchronized$SynchronizedSortedMap.lastKey():0 -> lastKey
    1:1:java.util.NavigableSet com.google.common.collect.Synchronized.navigableSet(java.util.NavigableSet,java.lang.Object):0:0 -> navigableKeySet
    1:1:java.util.NavigableSet navigableKeySet():0 -> navigableKeySet
    2:2:java.util.NavigableSet navigableKeySet():0:0 -> navigableKeySet
    1:1:java.util.NavigableMap com.google.common.collect.Synchronized.navigableMap(java.util.NavigableMap,java.lang.Object):0:0 -> subMap
    1:1:java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean):0 -> subMap
    2:2:java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean):0:0 -> subMap
    1:1:java.util.NavigableMap com.google.common.collect.Synchronized.navigableMap(java.util.NavigableMap,java.lang.Object):0:0 -> tailMap
    1:1:java.util.NavigableMap tailMap(java.lang.Object,boolean):0 -> tailMap
    2:2:java.util.NavigableMap tailMap(java.lang.Object,boolean):0:0 -> tailMap
com.google.common.collect.Synchronized$SynchronizedNavigableSet -> com.google.common.collect.bt:
    java.util.NavigableSet descendingSet -> c
    java.util.Collection delegate() -> a
    java.util.Set delegate() -> b
    java.util.SortedSet delegate() -> c
    java.util.NavigableSet delegate() -> d
    1:1:java.util.NavigableSet com.google.common.collect.Synchronized.navigableSet(java.util.NavigableSet,java.lang.Object):0:0 -> descendingSet
    1:1:java.util.NavigableSet descendingSet():0 -> descendingSet
    2:2:java.util.NavigableSet descendingSet():0:0 -> descendingSet
    1:1:java.util.NavigableSet com.google.common.collect.Synchronized.navigableSet(java.util.NavigableSet,java.lang.Object):0:0 -> headSet
    1:1:java.util.NavigableSet headSet(java.lang.Object,boolean):0 -> headSet
    2:2:java.util.NavigableSet headSet(java.lang.Object,boolean):0:0 -> headSet
    1:1:java.util.NavigableSet com.google.common.collect.Synchronized.navigableSet(java.util.NavigableSet,java.lang.Object):0:0 -> subSet
    1:1:java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean):0 -> subSet
    2:2:java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean):0:0 -> subSet
    1:1:java.util.NavigableSet com.google.common.collect.Synchronized.navigableSet(java.util.NavigableSet,java.lang.Object):0:0 -> tailSet
    1:1:java.util.NavigableSet tailSet(java.lang.Object,boolean):0 -> tailSet
    2:2:java.util.NavigableSet tailSet(java.lang.Object,boolean):0:0 -> tailSet
com.google.common.collect.Synchronized$SynchronizedObject -> com.google.common.collect.ct:
    java.lang.Object mutex -> b
    java.lang.Object delegate -> a
com.google.common.collect.Synchronized$SynchronizedQueue -> com.google.common.collect.dt:
    java.util.Collection delegate() -> a
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> b
    1:1:java.util.Collection com.google.common.collect.Synchronized$SynchronizedCollection.delegate():0 -> b
    1:1:java.util.Queue delegate():0 -> b
    2:2:java.util.Collection com.google.common.collect.Synchronized$SynchronizedCollection.delegate():0:0 -> b
    2:2:java.util.Queue delegate():0 -> b
    3:3:java.util.Queue delegate():0:0 -> b
com.google.common.collect.Synchronized$SynchronizedRandomAccessList -> com.google.common.collect.et:
com.google.common.collect.Synchronized$SynchronizedSet -> com.google.common.collect.ft:
    java.util.Collection delegate() -> a
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> b
    1:1:java.util.Collection com.google.common.collect.Synchronized$SynchronizedCollection.delegate():0 -> b
    1:1:java.util.Set delegate():0 -> b
    2:2:java.util.Collection com.google.common.collect.Synchronized$SynchronizedCollection.delegate():0:0 -> b
    2:2:java.util.Set delegate():0 -> b
    3:3:java.util.Set delegate():0:0 -> b
com.google.common.collect.Synchronized$SynchronizedSetMultimap -> com.google.common.collect.gt:
    java.util.Set entrySet -> h
    com.google.common.collect.Multimap delegate() -> a
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> b
    1:1:com.google.common.collect.Multimap com.google.common.collect.Synchronized$SynchronizedMultimap.delegate():0 -> b
    1:1:com.google.common.collect.SetMultimap delegate():0 -> b
    2:2:com.google.common.collect.Multimap com.google.common.collect.Synchronized$SynchronizedMultimap.delegate():0:0 -> b
    2:2:com.google.common.collect.SetMultimap delegate():0 -> b
    3:3:com.google.common.collect.SetMultimap delegate():0:0 -> b
    1:1:java.util.Set com.google.common.collect.Synchronized.set(java.util.Set,java.lang.Object):0:0 -> entries
    1:1:java.util.Set entries():0 -> entries
    2:2:java.util.Set entries():0:0 -> entries
    1:1:java.util.Set com.google.common.collect.Synchronized.set(java.util.Set,java.lang.Object):0:0 -> get
    1:1:java.util.Set get(java.lang.Object):0 -> get
    2:2:java.util.Set get(java.lang.Object):0:0 -> get
com.google.common.collect.Synchronized$SynchronizedSortedSet -> com.google.common.collect.ht:
    java.util.Collection delegate() -> a
    java.util.Set delegate() -> b
    java.util.SortedSet delegate() -> c
    1:1:java.util.SortedSet com.google.common.collect.Synchronized.sortedSet(java.util.SortedSet,java.lang.Object):0:0 -> headSet
    1:1:java.util.SortedSet com.google.common.collect.Synchronized.access$100(java.util.SortedSet,java.lang.Object):0 -> headSet
    1:1:java.util.SortedSet headSet(java.lang.Object):0 -> headSet
    2:2:java.util.SortedSet headSet(java.lang.Object):0:0 -> headSet
    1:1:java.util.SortedSet com.google.common.collect.Synchronized.sortedSet(java.util.SortedSet,java.lang.Object):0:0 -> subSet
    1:1:java.util.SortedSet com.google.common.collect.Synchronized.access$100(java.util.SortedSet,java.lang.Object):0 -> subSet
    1:1:java.util.SortedSet subSet(java.lang.Object,java.lang.Object):0 -> subSet
    2:2:java.util.SortedSet subSet(java.lang.Object,java.lang.Object):0:0 -> subSet
    1:1:java.util.SortedSet com.google.common.collect.Synchronized.sortedSet(java.util.SortedSet,java.lang.Object):0:0 -> tailSet
    1:1:java.util.SortedSet com.google.common.collect.Synchronized.access$100(java.util.SortedSet,java.lang.Object):0 -> tailSet
    1:1:java.util.SortedSet tailSet(java.lang.Object):0 -> tailSet
    2:2:java.util.SortedSet tailSet(java.lang.Object):0:0 -> tailSet
com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap -> com.google.common.collect.it:
    com.google.common.collect.Multimap delegate() -> a
    com.google.common.collect.SetMultimap delegate() -> b
    com.google.common.collect.SortedSetMultimap delegate() -> c
    1:1:java.util.SortedSet com.google.common.collect.Synchronized.sortedSet(java.util.SortedSet,java.lang.Object):0:0 -> get
    1:1:java.util.SortedSet com.google.common.collect.Synchronized.access$100(java.util.SortedSet,java.lang.Object):0 -> get
    1:1:java.util.SortedSet get(java.lang.Object):0 -> get
    2:2:java.util.SortedSet get(java.lang.Object):0:0 -> get
com.google.common.collect.Synchronized$SynchronizedTable -> com.google.common.collect.lt:
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> cellSet
    1:1:com.google.common.collect.Table delegate():0 -> cellSet
    1:1:java.util.Set cellSet():0 -> cellSet
    2:2:com.google.common.collect.Table delegate():0:0 -> cellSet
    2:2:java.util.Set cellSet():0 -> cellSet
    3:3:java.util.Set cellSet():0:0 -> cellSet
    4:4:java.util.Set com.google.common.collect.Synchronized.set(java.util.Set,java.lang.Object):0:0 -> cellSet
    4:4:java.util.Set cellSet():0 -> cellSet
    5:5:java.util.Set cellSet():0:0 -> cellSet
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> clear
    1:1:com.google.common.collect.Table delegate():0 -> clear
    1:1:void clear():0 -> clear
    2:2:com.google.common.collect.Table delegate():0:0 -> clear
    2:2:void clear():0 -> clear
    3:3:void clear():0:0 -> clear
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> column
    1:1:com.google.common.collect.Table delegate():0 -> column
    1:1:java.util.Map column(java.lang.Object):0 -> column
    2:2:com.google.common.collect.Table delegate():0:0 -> column
    2:2:java.util.Map column(java.lang.Object):0 -> column
    3:3:java.util.Map column(java.lang.Object):0:0 -> column
    4:4:java.util.Map com.google.common.collect.Synchronized.map(java.util.Map,java.lang.Object):0:0 -> column
    4:4:java.util.Map column(java.lang.Object):0 -> column
    5:5:java.util.Map column(java.lang.Object):0:0 -> column
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> columnKeySet
    1:1:com.google.common.collect.Table delegate():0 -> columnKeySet
    1:1:java.util.Set columnKeySet():0 -> columnKeySet
    2:2:com.google.common.collect.Table delegate():0:0 -> columnKeySet
    2:2:java.util.Set columnKeySet():0 -> columnKeySet
    3:3:java.util.Set columnKeySet():0:0 -> columnKeySet
    4:4:java.util.Set com.google.common.collect.Synchronized.set(java.util.Set,java.lang.Object):0:0 -> columnKeySet
    4:4:java.util.Set columnKeySet():0 -> columnKeySet
    5:5:java.util.Set columnKeySet():0:0 -> columnKeySet
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> columnMap
    1:1:com.google.common.collect.Table delegate():0 -> columnMap
    1:1:java.util.Map columnMap():0 -> columnMap
    2:2:com.google.common.collect.Table delegate():0:0 -> columnMap
    2:2:java.util.Map columnMap():0 -> columnMap
    3:3:java.util.Map columnMap():0:0 -> columnMap
    4:4:java.util.Map com.google.common.collect.Synchronized.map(java.util.Map,java.lang.Object):0:0 -> columnMap
    4:4:java.util.Map columnMap():0 -> columnMap
    5:5:java.util.Map columnMap():0:0 -> columnMap
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> contains
    1:1:com.google.common.collect.Table delegate():0 -> contains
    1:1:boolean contains(java.lang.Object,java.lang.Object):0 -> contains
    2:2:com.google.common.collect.Table delegate():0:0 -> contains
    2:2:boolean contains(java.lang.Object,java.lang.Object):0 -> contains
    3:3:boolean contains(java.lang.Object,java.lang.Object):0:0 -> contains
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> containsColumn
    1:1:com.google.common.collect.Table delegate():0 -> containsColumn
    1:1:boolean containsColumn(java.lang.Object):0 -> containsColumn
    2:2:com.google.common.collect.Table delegate():0:0 -> containsColumn
    2:2:boolean containsColumn(java.lang.Object):0 -> containsColumn
    3:3:boolean containsColumn(java.lang.Object):0:0 -> containsColumn
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> containsRow
    1:1:com.google.common.collect.Table delegate():0 -> containsRow
    1:1:boolean containsRow(java.lang.Object):0 -> containsRow
    2:2:com.google.common.collect.Table delegate():0:0 -> containsRow
    2:2:boolean containsRow(java.lang.Object):0 -> containsRow
    3:3:boolean containsRow(java.lang.Object):0:0 -> containsRow
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> containsValue
    1:1:com.google.common.collect.Table delegate():0 -> containsValue
    1:1:boolean containsValue(java.lang.Object):0 -> containsValue
    2:2:com.google.common.collect.Table delegate():0:0 -> containsValue
    2:2:boolean containsValue(java.lang.Object):0 -> containsValue
    3:3:boolean containsValue(java.lang.Object):0:0 -> containsValue
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> equals
    1:1:com.google.common.collect.Table delegate():0 -> equals
    1:1:boolean equals(java.lang.Object):0 -> equals
    2:2:com.google.common.collect.Table delegate():0:0 -> equals
    2:2:boolean equals(java.lang.Object):0 -> equals
    3:3:boolean equals(java.lang.Object):0:0 -> equals
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> get
    1:1:com.google.common.collect.Table delegate():0 -> get
    1:1:java.lang.Object get(java.lang.Object,java.lang.Object):0 -> get
    2:2:com.google.common.collect.Table delegate():0:0 -> get
    2:2:java.lang.Object get(java.lang.Object,java.lang.Object):0 -> get
    3:3:java.lang.Object get(java.lang.Object,java.lang.Object):0:0 -> get
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> hashCode
    1:1:com.google.common.collect.Table delegate():0 -> hashCode
    1:1:int hashCode():0 -> hashCode
    2:2:com.google.common.collect.Table delegate():0:0 -> hashCode
    2:2:int hashCode():0 -> hashCode
    3:3:int hashCode():0:0 -> hashCode
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> isEmpty
    1:1:com.google.common.collect.Table delegate():0 -> isEmpty
    1:1:boolean isEmpty():0 -> isEmpty
    2:2:com.google.common.collect.Table delegate():0:0 -> isEmpty
    2:2:boolean isEmpty():0 -> isEmpty
    3:3:boolean isEmpty():0:0 -> isEmpty
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> put
    1:1:com.google.common.collect.Table delegate():0 -> put
    1:1:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object):0 -> put
    2:2:com.google.common.collect.Table delegate():0:0 -> put
    2:2:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object):0 -> put
    3:3:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object):0:0 -> put
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> putAll
    1:1:com.google.common.collect.Table delegate():0 -> putAll
    1:1:void putAll(com.google.common.collect.Table):0 -> putAll
    2:2:com.google.common.collect.Table delegate():0:0 -> putAll
    2:2:void putAll(com.google.common.collect.Table):0 -> putAll
    3:3:void putAll(com.google.common.collect.Table):0:0 -> putAll
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> remove
    1:1:com.google.common.collect.Table delegate():0 -> remove
    1:1:java.lang.Object remove(java.lang.Object,java.lang.Object):0 -> remove
    2:2:com.google.common.collect.Table delegate():0:0 -> remove
    2:2:java.lang.Object remove(java.lang.Object,java.lang.Object):0 -> remove
    3:3:java.lang.Object remove(java.lang.Object,java.lang.Object):0:0 -> remove
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> row
    1:1:com.google.common.collect.Table delegate():0 -> row
    1:1:java.util.Map row(java.lang.Object):0 -> row
    2:2:com.google.common.collect.Table delegate():0:0 -> row
    2:2:java.util.Map row(java.lang.Object):0 -> row
    3:3:java.util.Map row(java.lang.Object):0:0 -> row
    4:4:java.util.Map com.google.common.collect.Synchronized.map(java.util.Map,java.lang.Object):0:0 -> row
    4:4:java.util.Map row(java.lang.Object):0 -> row
    5:5:java.util.Map row(java.lang.Object):0:0 -> row
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> rowKeySet
    1:1:com.google.common.collect.Table delegate():0 -> rowKeySet
    1:1:java.util.Set rowKeySet():0 -> rowKeySet
    2:2:com.google.common.collect.Table delegate():0:0 -> rowKeySet
    2:2:java.util.Set rowKeySet():0 -> rowKeySet
    3:3:java.util.Set rowKeySet():0:0 -> rowKeySet
    4:4:java.util.Set com.google.common.collect.Synchronized.set(java.util.Set,java.lang.Object):0:0 -> rowKeySet
    4:4:java.util.Set rowKeySet():0 -> rowKeySet
    5:5:java.util.Set rowKeySet():0:0 -> rowKeySet
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> rowMap
    1:1:com.google.common.collect.Table delegate():0 -> rowMap
    1:1:java.util.Map rowMap():0 -> rowMap
    2:2:com.google.common.collect.Table delegate():0:0 -> rowMap
    2:2:java.util.Map rowMap():0 -> rowMap
    3:3:java.util.Map rowMap():0:0 -> rowMap
    4:4:java.util.Map com.google.common.collect.Synchronized.map(java.util.Map,java.lang.Object):0:0 -> rowMap
    4:4:java.util.Map rowMap():0 -> rowMap
    5:5:java.util.Map rowMap():0:0 -> rowMap
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> size
    1:1:com.google.common.collect.Table delegate():0 -> size
    1:1:int size():0 -> size
    2:2:com.google.common.collect.Table delegate():0:0 -> size
    2:2:int size():0 -> size
    3:3:int size():0:0 -> size
    1:1:java.lang.Object com.google.common.collect.Synchronized$SynchronizedObject.delegate():0:0 -> values
    1:1:com.google.common.collect.Table delegate():0 -> values
    1:1:java.util.Collection values():0 -> values
    2:2:com.google.common.collect.Table delegate():0:0 -> values
    2:2:java.util.Collection values():0 -> values
    3:3:java.util.Collection values():0:0 -> values
com.google.common.collect.Synchronized$SynchronizedTable$1 -> com.google.common.collect.jt:
    com.google.common.collect.Synchronized$SynchronizedTable this$0 -> a
    1:1:java.util.Map apply(java.util.Map):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
    2:2:java.util.Map com.google.common.collect.Synchronized.map(java.util.Map,java.lang.Object):0:0 -> apply
    2:2:java.util.Map apply(java.util.Map):0 -> apply
    2:2:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.Synchronized$SynchronizedTable$2 -> com.google.common.collect.kt:
    com.google.common.collect.Synchronized$SynchronizedTable this$0 -> a
    1:1:java.util.Map apply(java.util.Map):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
    2:2:java.util.Map com.google.common.collect.Synchronized.map(java.util.Map,java.lang.Object):0:0 -> apply
    2:2:java.util.Map apply(java.util.Map):0 -> apply
    2:2:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.TableCollectors$1 -> com.google.common.collect.mt:
com.google.common.collect.TableCollectors$ImmutableTableCollectorState -> com.google.common.collect.nt:
    java.util.List insertionOrder -> a
    com.google.common.collect.Table table -> b
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.collect.TableCollectors$1):0 -> <init>
    void put(java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator) -> a
com.google.common.collect.TableCollectors$MutableCell -> com.google.common.collect.ot:
    java.lang.Object column -> b
    java.lang.Object value -> c
    java.lang.Object row -> a
    void merge(java.lang.Object,java.util.function.BinaryOperator) -> a
com.google.common.collect.Tables -> com.google.common.collect.Tables:
    com.google.common.base.Function UNMODIFIABLE_WRAPPER -> a
    com.google.common.base.Function access$000() -> a
    1:1:com.google.common.collect.Table com.google.common.collect.Synchronized.table(com.google.common.collect.Table,java.lang.Object):0:0 -> synchronizedTable
    1:1:com.google.common.collect.Table synchronizedTable(com.google.common.collect.Table):0 -> synchronizedTable
    1:1:java.util.stream.Collector com.google.common.collect.TableCollectors.toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.Supplier):0:0 -> toTable
    1:1:java.util.stream.Collector toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.Supplier):0 -> toTable
com.google.common.collect.Tables$1 -> com.google.common.collect.pt:
    1:1:java.util.Map apply(java.util.Map):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.Tables$AbstractCell -> com.google.common.collect.qt:
com.google.common.collect.Tables$ImmutableCell -> com.google.common.collect.rt:
    java.lang.Object columnKey -> b
    java.lang.Object value -> c
    java.lang.Object rowKey -> a
com.google.common.collect.Tables$TransformedTable -> com.google.common.collect.vt:
    com.google.common.collect.Table fromTable -> c
    com.google.common.base.Function function -> d
    1:1:com.google.common.base.Function cellFunction():0:0 -> a
    1:1:java.util.Iterator cellIterator():0 -> a
    2:2:java.util.Iterator cellIterator():0:0 -> a
    1:1:com.google.common.base.Function cellFunction():0:0 -> b
    1:1:java.util.Spliterator cellSpliterator():0 -> b
    2:2:java.util.Spliterator cellSpliterator():0:0 -> b
    java.util.Collection createValues() -> d
    1:1:boolean contains(java.lang.Object,java.lang.Object):0:0 -> get
    1:1:java.lang.Object get(java.lang.Object,java.lang.Object):0 -> get
    2:2:java.lang.Object get(java.lang.Object,java.lang.Object):0:0 -> get
    1:1:boolean contains(java.lang.Object,java.lang.Object):0:0 -> remove
    1:1:java.lang.Object remove(java.lang.Object,java.lang.Object):0 -> remove
    2:2:java.lang.Object remove(java.lang.Object,java.lang.Object):0:0 -> remove
com.google.common.collect.Tables$TransformedTable$1 -> com.google.common.collect.st:
    com.google.common.collect.Tables$TransformedTable this$0 -> a
    1:1:com.google.common.collect.Table$Cell apply(com.google.common.collect.Table$Cell):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.Tables$TransformedTable$2 -> com.google.common.collect.tt:
    com.google.common.collect.Tables$TransformedTable this$0 -> a
    1:1:java.util.Map apply(java.util.Map):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.Tables$TransformedTable$3 -> com.google.common.collect.ut:
    com.google.common.collect.Tables$TransformedTable this$0 -> a
    1:1:java.util.Map apply(java.util.Map):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.Tables$TransposeTable -> com.google.common.collect.xt:
    com.google.common.collect.Table original -> c
    com.google.common.base.Function TRANSPOSE_CELL -> d
    java.util.Iterator cellIterator() -> a
    java.util.Spliterator cellSpliterator() -> b
com.google.common.collect.Tables$TransposeTable$1 -> com.google.common.collect.wt:
    1:1:com.google.common.collect.Table$Cell apply(com.google.common.collect.Table$Cell):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.Tables$UnmodifiableRowSortedMap -> com.google.common.collect.yt:
    1:1:com.google.common.collect.Table com.google.common.collect.Tables$UnmodifiableTable.delegate():0:0 -> delegate
    1:1:com.google.common.collect.RowSortedTable delegate():0 -> delegate
    1:1:com.google.common.collect.Table delegate():0 -> delegate
    2:2:com.google.common.collect.RowSortedTable delegate():0:0 -> delegate
    2:2:com.google.common.collect.Table delegate():0 -> delegate
    3:3:com.google.common.collect.Table com.google.common.collect.Tables$UnmodifiableTable.delegate():0:0 -> delegate
    3:3:com.google.common.collect.RowSortedTable delegate():0 -> delegate
    3:3:java.lang.Object delegate():0 -> delegate
    4:4:com.google.common.collect.RowSortedTable delegate():0:0 -> delegate
    4:4:java.lang.Object delegate():0 -> delegate
    1:1:com.google.common.collect.Table com.google.common.collect.Tables$UnmodifiableTable.delegate():0:0 -> rowKeySet
    1:1:com.google.common.collect.RowSortedTable delegate():0 -> rowKeySet
    1:1:java.util.SortedSet rowKeySet():0 -> rowKeySet
    2:2:com.google.common.collect.RowSortedTable delegate():0:0 -> rowKeySet
    2:2:java.util.SortedSet rowKeySet():0 -> rowKeySet
    3:3:java.util.SortedSet rowKeySet():0:0 -> rowKeySet
    1:1:com.google.common.collect.Table com.google.common.collect.Tables$UnmodifiableTable.delegate():0:0 -> rowMap
    1:1:com.google.common.collect.RowSortedTable delegate():0 -> rowMap
    1:1:java.util.SortedMap rowMap():0 -> rowMap
    2:2:com.google.common.collect.RowSortedTable delegate():0:0 -> rowMap
    2:2:java.util.SortedMap rowMap():0 -> rowMap
    3:3:java.util.SortedMap rowMap():0:0 -> rowMap
com.google.common.collect.Tables$UnmodifiableTable -> com.google.common.collect.zt:
    com.google.common.collect.Table delegate -> a
com.google.common.collect.TopKSelector -> com.google.common.collect.au:
    java.lang.Object[] buffer -> c
    java.lang.Object threshold -> e
    int bufferSize -> d
    java.util.Comparator comparator -> b
    int k -> a
    com.google.common.collect.TopKSelector combine(com.google.common.collect.TopKSelector) -> a
    1:1:void trim():0:0 -> offer
    1:1:void offer(java.lang.Object):0 -> offer
    2:2:int partition(int,int,int):0:0 -> offer
    2:2:void trim():0 -> offer
    2:2:void offer(java.lang.Object):0 -> offer
    3:3:void swap(int,int):0:0 -> offer
    3:3:int partition(int,int,int):0 -> offer
    3:3:void trim():0 -> offer
    3:3:void offer(java.lang.Object):0 -> offer
    4:4:int partition(int,int,int):0:0 -> offer
    4:4:void trim():0 -> offer
    4:4:void offer(java.lang.Object):0 -> offer
    5:5:void trim():0:0 -> offer
    5:5:void offer(java.lang.Object):0 -> offer
com.google.common.collect.TransformedIterator -> com.google.common.collect.bu:
    java.util.Iterator backingIterator -> a
    java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.TransformedListIterator -> com.google.common.collect.cu:
    1:1:java.util.ListIterator backingIterator():0:0 -> hasPrevious
    1:1:boolean hasPrevious():0 -> hasPrevious
    2:2:java.util.ListIterator com.google.common.collect.Iterators.cast(java.util.Iterator):0:0 -> hasPrevious
    2:2:java.util.ListIterator backingIterator():0 -> hasPrevious
    2:2:boolean hasPrevious():0 -> hasPrevious
    3:3:boolean hasPrevious():0:0 -> hasPrevious
    1:1:java.util.ListIterator backingIterator():0:0 -> nextIndex
    1:1:int nextIndex():0 -> nextIndex
    2:2:java.util.ListIterator com.google.common.collect.Iterators.cast(java.util.Iterator):0:0 -> nextIndex
    2:2:java.util.ListIterator backingIterator():0 -> nextIndex
    2:2:int nextIndex():0 -> nextIndex
    3:3:int nextIndex():0:0 -> nextIndex
    1:1:java.util.ListIterator backingIterator():0:0 -> previous
    1:1:java.lang.Object previous():0 -> previous
    2:2:java.util.ListIterator com.google.common.collect.Iterators.cast(java.util.Iterator):0:0 -> previous
    2:2:java.util.ListIterator backingIterator():0 -> previous
    2:2:java.lang.Object previous():0 -> previous
    3:3:java.lang.Object previous():0:0 -> previous
    1:1:java.util.ListIterator backingIterator():0:0 -> previousIndex
    1:1:int previousIndex():0 -> previousIndex
    2:2:java.util.ListIterator com.google.common.collect.Iterators.cast(java.util.Iterator):0:0 -> previousIndex
    2:2:java.util.ListIterator backingIterator():0 -> previousIndex
    2:2:int previousIndex():0 -> previousIndex
    3:3:int previousIndex():0:0 -> previousIndex
com.google.common.collect.TreeBasedTable -> com.google.common.collect.TreeBasedTable:
    java.util.Comparator columnComparator -> h
    java.util.Iterator createColumnKeyIterator() -> h
    1:1:void com.google.common.collect.TreeBasedTable$TreeRow.<init>(com.google.common.collect.TreeBasedTable,java.lang.Object):0:0 -> row
    1:1:java.util.SortedMap row(java.lang.Object):0 -> row
com.google.common.collect.TreeBasedTable$1 -> com.google.common.collect.du:
    1:1:java.util.Iterator apply(java.util.Map):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.collect.TreeBasedTable$2 -> com.google.common.collect.eu:
    java.util.Iterator val$merged -> d
    java.lang.Object lastValue -> c
    java.util.Comparator val$comparator -> e
com.google.common.collect.TreeBasedTable$Factory -> com.google.common.collect.fu:
    java.util.Comparator comparator -> a
    1:1:java.util.TreeMap get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.collect.TreeBasedTable$TreeRow -> com.google.common.collect.gu:
    java.lang.Object lowerBound -> d
    java.lang.Object upperBound -> e
    com.google.common.collect.TreeBasedTable this$0 -> g
    java.util.SortedMap wholeRow -> f
    1:1:int compare(java.lang.Object,java.lang.Object):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.TreeBasedTable,java.lang.Object,java.lang.Object,java.lang.Object):0 -> <init>
    2:2:void <init>(com.google.common.collect.TreeBasedTable,java.lang.Object,java.lang.Object,java.lang.Object):0:0 -> <init>
    java.util.Map backingRowMap() -> c
    1:1:java.util.SortedMap computeBackingRowMap():0:0 -> d
    1:1:java.util.Map computeBackingRowMap():0 -> d
    void maintainEmptyInvariant() -> e
    java.util.SortedMap backingRowMap() -> f
    int compare(java.lang.Object,java.lang.Object) -> g
    boolean rangeContains(java.lang.Object) -> h
    java.util.SortedMap wholeRow() -> i
    1:1:java.util.SortedSet keySet():0:0 -> keySet
    1:1:java.util.Set keySet():0 -> keySet
com.google.common.collect.TreeMultimap -> com.google.common.collect.TreeMultimap:
    java.util.Comparator keyComparator -> h
    java.util.Comparator valueComparator -> i
    java.util.Map createAsMap() -> a
    1:1:void <init>(java.util.Comparator,java.util.Comparator,com.google.common.collect.Multimap):0:0 -> create
    1:1:com.google.common.collect.TreeMultimap create(com.google.common.collect.Multimap):0 -> create
    1:1:java.util.SortedSet createCollection():0:0 -> createCollection
    1:1:java.util.Collection createCollection():0 -> createCollection
    1:1:java.util.Collection com.google.common.collect.AbstractMapBasedMultimap.createCollection(java.lang.Object):0:0 -> q
    1:1:java.util.Collection createCollection(java.lang.Object):0 -> q
com.google.common.collect.TreeMultiset -> com.google.common.collect.TreeMultiset:
    int $r8$clinit -> h
    com.google.common.collect.TreeMultiset$AvlNode header -> g
    com.google.common.collect.TreeMultiset$Reference rootReference -> e
    com.google.common.collect.GeneralRange range -> f
    1:1:void successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0:0 -> <init>
    1:1:void <init>(java.util.Comparator):0 -> <init>
    2:2:void <init>(java.util.Comparator):0:0 -> <init>
    1:1:void successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0:0 -> add
    1:1:void successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> add
    1:1:int add(java.lang.Object,int):0 -> add
    2:2:int add(java.lang.Object,int):0:0 -> add
    int distinctElements() -> b
    1:1:java.util.Iterator entryIterator():0:0 -> c
    1:1:java.util.Iterator elementIterator():0 -> c
    2:2:java.util.Iterator com.google.common.collect.Multisets.elementIterator(java.util.Iterator):0:0 -> c
    2:2:java.util.Iterator elementIterator():0 -> c
    1:1:void successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0:0 -> clear
    1:1:void clear():0 -> clear
    2:2:void clear():0:0 -> clear
    3:3:java.util.Iterator entryIterator():0:0 -> clear
    3:3:void clear():0 -> clear
    4:4:void clear():0:0 -> clear
    java.util.Iterator entryIterator() -> d
    com.google.common.collect.TreeMultiset$AvlNode access$1200(com.google.common.collect.TreeMultiset) -> e
    com.google.common.collect.GeneralRange access$1300(com.google.common.collect.TreeMultiset) -> f
    com.google.common.collect.TreeMultiset$AvlNode access$1500(com.google.common.collect.TreeMultiset) -> g
    1:1:com.google.common.collect.TreeMultiset$AvlNode lastNode():0:0 -> h
    1:1:com.google.common.collect.TreeMultiset$AvlNode access$1600(com.google.common.collect.TreeMultiset):0 -> h
    long aggregateAboveRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode) -> i
    1:1:java.util.Iterator com.google.common.collect.Multisets.iteratorImpl(com.google.common.collect.Multiset):0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
    long aggregateBelowRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode) -> j
    long aggregateForEntries(com.google.common.collect.TreeMultiset$Aggregate) -> k
    com.google.common.collect.TreeMultiset$AvlNode firstNode() -> l
com.google.common.collect.TreeMultiset$1 -> com.google.common.collect.hu:
    com.google.common.collect.TreeMultiset this$0 -> b
    com.google.common.collect.TreeMultiset$AvlNode val$baseEntry -> a
com.google.common.collect.TreeMultiset$2 -> com.google.common.collect.iu:
    com.google.common.collect.TreeMultiset this$0 -> c
    com.google.common.collect.TreeMultiset$AvlNode current -> a
    com.google.common.collect.Multiset$Entry prevEntry -> b
    1:1:com.google.common.collect.Multiset$Entry next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
    2:2:com.google.common.collect.Multiset$Entry com.google.common.collect.TreeMultiset.access$1400(com.google.common.collect.TreeMultiset,com.google.common.collect.TreeMultiset$AvlNode):0:0 -> next
    2:2:com.google.common.collect.Multiset$Entry next():0 -> next
    2:2:java.lang.Object next():0 -> next
    3:3:com.google.common.collect.Multiset$Entry com.google.common.collect.TreeMultiset.wrapEntry(com.google.common.collect.TreeMultiset$AvlNode):0:0 -> next
    3:3:com.google.common.collect.Multiset$Entry com.google.common.collect.TreeMultiset.access$1400(com.google.common.collect.TreeMultiset,com.google.common.collect.TreeMultiset$AvlNode):0 -> next
    3:3:com.google.common.collect.Multiset$Entry next():0 -> next
    3:3:java.lang.Object next():0 -> next
    4:4:com.google.common.collect.Multiset$Entry next():0:0 -> next
    4:4:java.lang.Object next():0 -> next
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
com.google.common.collect.TreeMultiset$3 -> com.google.common.collect.ju:
    com.google.common.collect.TreeMultiset this$0 -> c
    com.google.common.collect.TreeMultiset$AvlNode current -> a
    com.google.common.collect.Multiset$Entry prevEntry -> b
    1:1:com.google.common.collect.Multiset$Entry next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
    2:2:com.google.common.collect.Multiset$Entry com.google.common.collect.TreeMultiset.access$1400(com.google.common.collect.TreeMultiset,com.google.common.collect.TreeMultiset$AvlNode):0:0 -> next
    2:2:com.google.common.collect.Multiset$Entry next():0 -> next
    2:2:java.lang.Object next():0 -> next
    3:3:com.google.common.collect.Multiset$Entry com.google.common.collect.TreeMultiset.wrapEntry(com.google.common.collect.TreeMultiset$AvlNode):0:0 -> next
    3:3:com.google.common.collect.Multiset$Entry com.google.common.collect.TreeMultiset.access$1400(com.google.common.collect.TreeMultiset,com.google.common.collect.TreeMultiset$AvlNode):0 -> next
    3:3:com.google.common.collect.Multiset$Entry next():0 -> next
    3:3:java.lang.Object next():0 -> next
    4:4:com.google.common.collect.Multiset$Entry next():0:0 -> next
    4:4:java.lang.Object next():0 -> next
    1:1:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):0:0 -> remove
    1:1:void remove():0 -> remove
    2:2:void remove():0:0 -> remove
com.google.common.collect.TreeMultiset$Aggregate -> com.google.common.collect.mu:
    com.google.common.collect.TreeMultiset$Aggregate[] $VALUES -> c
    com.google.common.collect.TreeMultiset$Aggregate SIZE -> a
    com.google.common.collect.TreeMultiset$Aggregate DISTINCT -> b
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:void <init>(java.lang.String,int,com.google.common.collect.TreeMultiset$1):0 -> <init>
    int nodeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> a
    long treeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> b
com.google.common.collect.TreeMultiset$Aggregate$1 -> com.google.common.collect.ku:
    int nodeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> a
    long treeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> b
com.google.common.collect.TreeMultiset$Aggregate$2 -> com.google.common.collect.lu:
    int nodeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> a
    long treeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> b
com.google.common.collect.TreeMultiset$AvlNode -> com.google.common.collect.nu:
    com.google.common.collect.TreeMultiset$AvlNode succ -> i
    com.google.common.collect.TreeMultiset$AvlNode pred -> h
    com.google.common.collect.TreeMultiset$AvlNode right -> g
    com.google.common.collect.TreeMultiset$AvlNode left -> f
    long totalCount -> d
    java.lang.Object elem -> a
    int height -> e
    int elemCount -> b
    int distinctElements -> c
    1:1:void recomputeMultiset():0:0 -> A
    1:1:void recompute():0 -> A
    2:2:int com.google.common.collect.TreeMultiset.distinctElements(com.google.common.collect.TreeMultiset$AvlNode):0:0 -> A
    2:2:void recomputeMultiset():0 -> A
    2:2:void recompute():0 -> A
    3:3:void recomputeMultiset():0:0 -> A
    3:3:void recompute():0 -> A
    4:4:int com.google.common.collect.TreeMultiset.distinctElements(com.google.common.collect.TreeMultiset$AvlNode):0:0 -> A
    4:4:void recomputeMultiset():0 -> A
    4:4:void recompute():0 -> A
    5:5:void recomputeMultiset():0:0 -> A
    5:5:void recompute():0 -> A
    6:6:long totalCount(com.google.common.collect.TreeMultiset$AvlNode):0:0 -> A
    6:6:void recomputeMultiset():0 -> A
    6:6:void recompute():0 -> A
    7:7:void recomputeMultiset():0:0 -> A
    7:7:void recompute():0 -> A
    8:8:long totalCount(com.google.common.collect.TreeMultiset$AvlNode):0:0 -> A
    8:8:void recomputeMultiset():0 -> A
    8:8:void recompute():0 -> A
    9:9:void recomputeMultiset():0:0 -> A
    9:9:void recompute():0 -> A
    10:10:void recompute():0:0 -> A
    void recomputeHeight() -> B
    com.google.common.collect.TreeMultiset$AvlNode remove(java.util.Comparator,java.lang.Object,int,int[]) -> C
    com.google.common.collect.TreeMultiset$AvlNode removeMax(com.google.common.collect.TreeMultiset$AvlNode) -> D
    com.google.common.collect.TreeMultiset$AvlNode removeMin(com.google.common.collect.TreeMultiset$AvlNode) -> E
    com.google.common.collect.TreeMultiset$AvlNode rotateLeft() -> F
    com.google.common.collect.TreeMultiset$AvlNode rotateRight() -> G
    com.google.common.collect.TreeMultiset$AvlNode setCount(java.util.Comparator,java.lang.Object,int,int,int[]) -> H
    com.google.common.collect.TreeMultiset$AvlNode setCount(java.util.Comparator,java.lang.Object,int,int[]) -> I
    com.google.common.collect.TreeMultiset$AvlNode access$1000(com.google.common.collect.TreeMultiset$AvlNode,java.util.Comparator,java.lang.Object) -> a
    com.google.common.collect.TreeMultiset$AvlNode access$1100(com.google.common.collect.TreeMultiset$AvlNode,java.util.Comparator,java.lang.Object) -> b
    int access$200(com.google.common.collect.TreeMultiset$AvlNode) -> c
    int access$202(com.google.common.collect.TreeMultiset$AvlNode,int) -> d
    long access$300(com.google.common.collect.TreeMultiset$AvlNode) -> e
    int access$400(com.google.common.collect.TreeMultiset$AvlNode) -> f
    java.lang.Object access$500(com.google.common.collect.TreeMultiset$AvlNode) -> g
    com.google.common.collect.TreeMultiset$AvlNode access$600(com.google.common.collect.TreeMultiset$AvlNode) -> h
    com.google.common.collect.TreeMultiset$AvlNode access$602(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> i
    com.google.common.collect.TreeMultiset$AvlNode access$700(com.google.common.collect.TreeMultiset$AvlNode) -> j
    com.google.common.collect.TreeMultiset$AvlNode access$702(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> k
    com.google.common.collect.TreeMultiset$AvlNode access$800(com.google.common.collect.TreeMultiset$AvlNode) -> l
    com.google.common.collect.TreeMultiset$AvlNode access$802(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> m
    com.google.common.collect.TreeMultiset$AvlNode access$900(com.google.common.collect.TreeMultiset$AvlNode) -> n
    com.google.common.collect.TreeMultiset$AvlNode access$902(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> o
    com.google.common.collect.TreeMultiset$AvlNode add(java.util.Comparator,java.lang.Object,int,int[]) -> p
    1:1:void com.google.common.collect.TreeMultiset.access$1700(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0:0 -> q
    1:1:com.google.common.collect.TreeMultiset$AvlNode addLeftChild(java.lang.Object,int):0 -> q
    2:2:com.google.common.collect.TreeMultiset$AvlNode access$802(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0:0 -> q
    2:2:void com.google.common.collect.TreeMultiset.successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> q
    2:2:void com.google.common.collect.TreeMultiset.successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> q
    2:2:void com.google.common.collect.TreeMultiset.access$1700(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> q
    2:2:com.google.common.collect.TreeMultiset$AvlNode addLeftChild(java.lang.Object,int):0 -> q
    3:3:com.google.common.collect.TreeMultiset$AvlNode access$902(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0:0 -> q
    3:3:void com.google.common.collect.TreeMultiset.successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> q
    3:3:void com.google.common.collect.TreeMultiset.successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> q
    3:3:void com.google.common.collect.TreeMultiset.access$1700(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> q
    3:3:com.google.common.collect.TreeMultiset$AvlNode addLeftChild(java.lang.Object,int):0 -> q
    4:4:com.google.common.collect.TreeMultiset$AvlNode access$802(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0:0 -> q
    4:4:void com.google.common.collect.TreeMultiset.successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> q
    4:4:void com.google.common.collect.TreeMultiset.successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> q
    4:4:void com.google.common.collect.TreeMultiset.access$1700(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> q
    4:4:com.google.common.collect.TreeMultiset$AvlNode addLeftChild(java.lang.Object,int):0 -> q
    5:5:com.google.common.collect.TreeMultiset$AvlNode access$902(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0:0 -> q
    5:5:void com.google.common.collect.TreeMultiset.successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> q
    5:5:void com.google.common.collect.TreeMultiset.successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> q
    5:5:void com.google.common.collect.TreeMultiset.access$1700(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> q
    5:5:com.google.common.collect.TreeMultiset$AvlNode addLeftChild(java.lang.Object,int):0 -> q
    6:6:com.google.common.collect.TreeMultiset$AvlNode addLeftChild(java.lang.Object,int):0:0 -> q
    1:1:void com.google.common.collect.TreeMultiset.access$1700(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0:0 -> r
    1:1:com.google.common.collect.TreeMultiset$AvlNode addRightChild(java.lang.Object,int):0 -> r
    2:2:com.google.common.collect.TreeMultiset$AvlNode access$802(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0:0 -> r
    2:2:void com.google.common.collect.TreeMultiset.successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> r
    2:2:void com.google.common.collect.TreeMultiset.successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> r
    2:2:void com.google.common.collect.TreeMultiset.access$1700(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> r
    2:2:com.google.common.collect.TreeMultiset$AvlNode addRightChild(java.lang.Object,int):0 -> r
    3:3:com.google.common.collect.TreeMultiset$AvlNode access$902(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0:0 -> r
    3:3:void com.google.common.collect.TreeMultiset.successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> r
    3:3:void com.google.common.collect.TreeMultiset.successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> r
    3:3:void com.google.common.collect.TreeMultiset.access$1700(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> r
    3:3:com.google.common.collect.TreeMultiset$AvlNode addRightChild(java.lang.Object,int):0 -> r
    4:4:com.google.common.collect.TreeMultiset$AvlNode access$802(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0:0 -> r
    4:4:void com.google.common.collect.TreeMultiset.successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> r
    4:4:void com.google.common.collect.TreeMultiset.successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> r
    4:4:void com.google.common.collect.TreeMultiset.access$1700(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> r
    4:4:com.google.common.collect.TreeMultiset$AvlNode addRightChild(java.lang.Object,int):0 -> r
    5:5:com.google.common.collect.TreeMultiset$AvlNode access$902(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0:0 -> r
    5:5:void com.google.common.collect.TreeMultiset.successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> r
    5:5:void com.google.common.collect.TreeMultiset.successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> r
    5:5:void com.google.common.collect.TreeMultiset.access$1700(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> r
    5:5:com.google.common.collect.TreeMultiset$AvlNode addRightChild(java.lang.Object,int):0 -> r
    6:6:com.google.common.collect.TreeMultiset$AvlNode addRightChild(java.lang.Object,int):0:0 -> r
    int balanceFactor() -> s
    com.google.common.collect.TreeMultiset$AvlNode ceiling(java.util.Comparator,java.lang.Object) -> t
    1:1:java.lang.Object getElement():0:0 -> toString
    1:1:java.lang.String toString():0 -> toString
    2:2:int getCount():0:0 -> toString
    2:2:java.lang.String toString():0 -> toString
    3:3:java.lang.String toString():0:0 -> toString
    1:1:void com.google.common.collect.TreeMultiset.access$1800(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0:0 -> u
    1:1:com.google.common.collect.TreeMultiset$AvlNode deleteMe():0 -> u
    2:2:void com.google.common.collect.TreeMultiset.successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0:0 -> u
    2:2:void com.google.common.collect.TreeMultiset.access$1800(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode):0 -> u
    2:2:com.google.common.collect.TreeMultiset$AvlNode deleteMe():0 -> u
    3:3:com.google.common.collect.TreeMultiset$AvlNode deleteMe():0:0 -> u
    com.google.common.collect.TreeMultiset$AvlNode floor(java.util.Comparator,java.lang.Object) -> v
    int getCount() -> w
    java.lang.Object getElement() -> x
    int height(com.google.common.collect.TreeMultiset$AvlNode) -> y
    com.google.common.collect.TreeMultiset$AvlNode rebalance() -> z
com.google.common.collect.TreeMultiset$Reference -> com.google.common.collect.ou:
    java.lang.Object value -> a
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.collect.TreeMultiset$1):0 -> <init>
    void clear() -> a
com.google.common.collect.TreeRangeMap -> com.google.common.collect.TreeRangeMap:
    com.google.common.collect.RangeMap EMPTY_SUB_RANGE_MAP -> b
    java.util.NavigableMap entriesByLowerBound -> a
    java.util.NavigableMap access$000(com.google.common.collect.TreeRangeMap) -> a
    com.google.common.collect.Range access$100(com.google.common.collect.TreeRangeMap,com.google.common.collect.Range,java.lang.Object) -> b
    com.google.common.collect.RangeMap access$200(com.google.common.collect.TreeRangeMap) -> c
    com.google.common.collect.Range coalesce(com.google.common.collect.Range,java.lang.Object,java.util.Map$Entry) -> d
    com.google.common.collect.Range coalescedRange(com.google.common.collect.Range,java.lang.Object) -> e
    void putRangeMapEntry(com.google.common.collect.Cut,com.google.common.collect.Cut,java.lang.Object) -> f
    1:1:void putRangeMapEntry(com.google.common.collect.Cut,com.google.common.collect.Cut,java.lang.Object):0:0 -> g
    1:1:void split(com.google.common.collect.Cut):0 -> g
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.belowValue(java.lang.Comparable):0:0 -> getEntry
    1:1:java.util.Map$Entry getEntry(java.lang.Comparable):0 -> getEntry
    2:2:java.util.Map$Entry getEntry(java.lang.Comparable):0:0 -> getEntry
com.google.common.collect.TreeRangeMap$1 -> com.google.common.collect.pu:
com.google.common.collect.TreeRangeMap$AsMapOfRanges -> com.google.common.collect.qu:
    com.google.common.collect.TreeRangeMap this$0 -> b
    java.lang.Iterable entryIterable -> a
    java.util.Iterator entryIterator() -> a
com.google.common.collect.TreeRangeMap$RangeMapEntry -> com.google.common.collect.ru:
    java.lang.Object value -> b
    com.google.common.collect.Range range -> a
    1:1:void <init>(com.google.common.collect.Range,java.lang.Object):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.Cut,com.google.common.collect.Cut,java.lang.Object):0 -> <init>
    com.google.common.collect.Cut getLowerBound() -> a
    com.google.common.collect.Cut getUpperBound() -> b
    1:1:com.google.common.collect.Range getKey():0:0 -> getKey
    1:1:java.lang.Object getKey():0 -> getKey
com.google.common.collect.TreeRangeMap$SubRangeMap -> com.google.common.collect.zu:
    com.google.common.collect.TreeRangeMap this$0 -> b
    com.google.common.collect.Range subRange -> a
    com.google.common.collect.Range access$300(com.google.common.collect.TreeRangeMap$SubRangeMap) -> a
    1:1:java.util.Map asMapOfRanges():0:0 -> equals
    1:1:boolean equals(java.lang.Object):0 -> equals
    2:2:boolean equals(java.lang.Object):0:0 -> equals
    1:1:java.util.Map asMapOfRanges():0:0 -> hashCode
    1:1:int hashCode():0 -> hashCode
    2:2:int hashCode():0:0 -> hashCode
    1:1:void put(com.google.common.collect.Range,java.lang.Object):0:0 -> putCoalescing
    1:1:void putCoalescing(com.google.common.collect.Range,java.lang.Object):0 -> putCoalescing
    1:1:java.util.Map asMapOfRanges():0:0 -> toString
    1:1:java.lang.String toString():0 -> toString
    2:2:java.lang.String toString():0:0 -> toString
com.google.common.collect.TreeRangeMap$SubRangeMap$1 -> com.google.common.collect.tu:
    com.google.common.collect.TreeRangeMap$SubRangeMap this$1 -> b
    1:1:com.google.common.collect.UnmodifiableListIterator com.google.common.collect.Iterators.emptyListIterator():0:0 -> b
    1:1:com.google.common.collect.UnmodifiableIterator com.google.common.collect.Iterators.emptyIterator():0 -> b
    1:1:java.util.Iterator entryIterator():0 -> b
    2:2:java.util.Iterator entryIterator():0:0 -> b
com.google.common.collect.TreeRangeMap$SubRangeMap$1$1 -> com.google.common.collect.su:
    java.util.Iterator val$backingItr -> c
    com.google.common.collect.TreeRangeMap$SubRangeMap$1 this$2 -> d
    1:1:java.util.Map$Entry computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap -> com.google.common.collect.yu:
    com.google.common.collect.TreeRangeMap$SubRangeMap this$1 -> a
    1:1:boolean removeEntryIf(com.google.common.base.Predicate):0:0 -> a
    1:1:boolean access$400(com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap,com.google.common.base.Predicate):0 -> a
    2:2:java.util.Set entrySet():0:0 -> a
    2:2:boolean removeEntryIf(com.google.common.base.Predicate):0 -> a
    2:2:boolean access$400(com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap,com.google.common.base.Predicate):0 -> a
    3:3:boolean removeEntryIf(com.google.common.base.Predicate):0:0 -> a
    3:3:boolean access$400(com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap,com.google.common.base.Predicate):0 -> a
    1:1:com.google.common.collect.UnmodifiableListIterator com.google.common.collect.Iterators.emptyListIterator():0:0 -> b
    1:1:com.google.common.collect.UnmodifiableIterator com.google.common.collect.Iterators.emptyIterator():0 -> b
    1:1:java.util.Iterator entryIterator():0 -> b
    2:2:java.util.Iterator entryIterator():0:0 -> b
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1 -> com.google.common.collect.uu:
    com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap this$2 -> b
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2 -> com.google.common.collect.vu:
    com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap this$2 -> a
    java.util.Map map() -> a
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$3 -> com.google.common.collect.wu:
    java.util.Iterator val$backingItr -> c
    com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap this$2 -> d
    1:1:java.util.Map$Entry computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$4 -> com.google.common.collect.xu:
    com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap this$2 -> b
com.google.common.collect.TreeRangeSet -> com.google.common.collect.TreeRangeSet:
    java.util.Set asDescendingSetOfRanges -> c
    com.google.common.collect.RangeSet complement -> d
    java.util.Set asRanges -> b
    java.util.NavigableMap rangesByLowerBound -> a
    1:1:void <init>(java.util.NavigableMap):0:0 -> <init>
    1:1:void <init>(java.util.NavigableMap,com.google.common.collect.TreeRangeSet$1):0 -> <init>
    void replaceRangeWithSameLowerBound(com.google.common.collect.Range) -> a
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.belowValue(java.lang.Comparable):0:0 -> rangeContaining
    1:1:com.google.common.collect.Range rangeContaining(java.lang.Comparable):0 -> rangeContaining
    2:2:com.google.common.collect.Range rangeContaining(java.lang.Comparable):0:0 -> rangeContaining
com.google.common.collect.TreeRangeSet$1 -> com.google.common.collect.av:
com.google.common.collect.TreeRangeSet$AsRanges -> com.google.common.collect.bv:
    java.util.Collection delegate -> a
    1:1:java.util.Collection delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
com.google.common.collect.TreeRangeSet$Complement -> com.google.common.collect.cv:
    com.google.common.collect.TreeRangeSet this$0 -> e
com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound -> com.google.common.collect.fv:
    java.util.NavigableMap positiveRangesByUpperBound -> b
    java.util.NavigableMap positiveRangesByLowerBound -> a
    com.google.common.collect.Range complementLowerBoundWindow -> c
    1:1:void <init>(java.util.NavigableMap,com.google.common.collect.Range):0:0 -> <init>
    1:1:void <init>(java.util.NavigableMap):0 -> <init>
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.belowAll():0:0 -> a
    1:1:java.util.Iterator entryIterator():0 -> a
    2:2:java.util.Iterator entryIterator():0:0 -> a
    3:3:com.google.common.collect.Cut com.google.common.collect.Cut.belowAll():0:0 -> a
    3:3:java.util.Iterator entryIterator():0 -> a
    4:4:java.util.Iterator entryIterator():0:0 -> a
    5:5:com.google.common.collect.UnmodifiableListIterator com.google.common.collect.Iterators.emptyListIterator():0:0 -> a
    5:5:com.google.common.collect.UnmodifiableIterator com.google.common.collect.Iterators.emptyIterator():0 -> a
    5:5:java.util.Iterator entryIterator():0 -> a
    1:1:com.google.common.collect.Cut com.google.common.collect.Cut.aboveAll():0:0 -> c
    1:1:java.util.Iterator descendingEntryIterator():0 -> c
    2:2:java.util.Iterator descendingEntryIterator():0:0 -> c
    3:3:com.google.common.collect.Cut com.google.common.collect.Cut.aboveAll():0:0 -> c
    3:3:java.util.Iterator descendingEntryIterator():0 -> c
    4:4:java.util.Iterator descendingEntryIterator():0:0 -> c
    5:5:com.google.common.collect.Cut com.google.common.collect.Cut.belowAll():0:0 -> c
    5:5:java.util.Iterator descendingEntryIterator():0 -> c
    6:6:java.util.Iterator descendingEntryIterator():0:0 -> c
    7:7:com.google.common.collect.Cut com.google.common.collect.Cut.belowAll():0:0 -> c
    7:7:java.util.Iterator descendingEntryIterator():0 -> c
    8:8:java.util.Iterator descendingEntryIterator():0:0 -> c
    9:9:com.google.common.collect.Cut com.google.common.collect.Cut.belowAll():0:0 -> c
    9:9:java.util.Iterator descendingEntryIterator():0 -> c
    10:10:com.google.common.collect.Cut com.google.common.collect.Cut.aboveAll():0:0 -> c
    10:10:java.util.Iterator descendingEntryIterator():0 -> c
    11:11:java.util.Iterator descendingEntryIterator():0:0 -> c
    12:12:com.google.common.collect.UnmodifiableListIterator com.google.common.collect.Iterators.emptyListIterator():0:0 -> c
    12:12:com.google.common.collect.UnmodifiableIterator com.google.common.collect.Iterators.emptyIterator():0 -> c
    12:12:java.util.Iterator descendingEntryIterator():0 -> c
    com.google.common.collect.Range access$100(com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound) -> d
    java.util.NavigableMap subMap(com.google.common.collect.Range) -> e
    1:1:java.util.NavigableMap tailMap(com.google.common.collect.Cut,boolean):0:0 -> get
    1:1:com.google.common.collect.Range get(java.lang.Object):0 -> get
    2:2:com.google.common.collect.Range get(java.lang.Object):0:0 -> get
    1:1:java.util.NavigableMap headMap(com.google.common.collect.Cut,boolean):0:0 -> headMap
    1:1:java.util.NavigableMap headMap(java.lang.Object,boolean):0 -> headMap
    1:1:java.util.NavigableMap subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean):0:0 -> subMap
    1:1:java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean):0 -> subMap
    1:1:java.util.NavigableMap tailMap(com.google.common.collect.Cut,boolean):0:0 -> tailMap
    1:1:java.util.NavigableMap tailMap(java.lang.Object,boolean):0 -> tailMap
com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$1 -> com.google.common.collect.dv:
    com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound this$0 -> f
    com.google.common.collect.Cut nextComplementRangeLowerBound -> c
    com.google.common.collect.PeekingIterator val$positiveItr -> e
    com.google.common.collect.Cut val$firstComplementRangeLowerBound -> d
    1:1:java.util.Map$Entry computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
    2:2:com.google.common.collect.Cut com.google.common.collect.Cut.aboveAll():0:0 -> computeNext
    2:2:java.util.Map$Entry computeNext():0 -> computeNext
    2:2:java.lang.Object computeNext():0 -> computeNext
    3:3:java.util.Map$Entry computeNext():0:0 -> computeNext
    3:3:java.lang.Object computeNext():0 -> computeNext
    4:4:com.google.common.collect.Cut com.google.common.collect.Cut.aboveAll():0:0 -> computeNext
    4:4:java.util.Map$Entry computeNext():0 -> computeNext
    4:4:java.lang.Object computeNext():0 -> computeNext
    5:5:java.util.Map$Entry computeNext():0:0 -> computeNext
    5:5:java.lang.Object computeNext():0 -> computeNext
    6:6:com.google.common.collect.Cut com.google.common.collect.Cut.aboveAll():0:0 -> computeNext
    6:6:java.util.Map$Entry computeNext():0 -> computeNext
    6:6:java.lang.Object computeNext():0 -> computeNext
    7:7:java.util.Map$Entry computeNext():0:0 -> computeNext
    7:7:java.lang.Object computeNext():0 -> computeNext
com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$2 -> com.google.common.collect.ev:
    com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound this$0 -> f
    com.google.common.collect.Cut nextComplementRangeUpperBound -> c
    com.google.common.collect.PeekingIterator val$positiveItr -> e
    com.google.common.collect.Cut val$firstComplementRangeUpperBound -> d
    1:1:java.util.Map$Entry computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
    2:2:com.google.common.collect.Cut com.google.common.collect.Cut.belowAll():0:0 -> computeNext
    2:2:java.util.Map$Entry computeNext():0 -> computeNext
    2:2:java.lang.Object computeNext():0 -> computeNext
    3:3:java.util.Map$Entry computeNext():0:0 -> computeNext
    3:3:java.lang.Object computeNext():0 -> computeNext
    4:4:com.google.common.collect.Cut com.google.common.collect.Cut.belowAll():0:0 -> computeNext
    4:4:java.util.Map$Entry computeNext():0 -> computeNext
    4:4:java.lang.Object computeNext():0 -> computeNext
    5:5:java.util.Map$Entry computeNext():0:0 -> computeNext
    5:5:java.lang.Object computeNext():0 -> computeNext
    6:6:com.google.common.collect.Cut com.google.common.collect.Cut.belowAll():0:0 -> computeNext
    6:6:java.util.Map$Entry computeNext():0 -> computeNext
    6:6:java.lang.Object computeNext():0 -> computeNext
    7:7:java.util.Map$Entry computeNext():0:0 -> computeNext
    7:7:java.lang.Object computeNext():0 -> computeNext
    8:8:com.google.common.collect.Cut com.google.common.collect.Cut.belowAll():0:0 -> computeNext
    8:8:java.util.Map$Entry computeNext():0 -> computeNext
    8:8:java.lang.Object computeNext():0 -> computeNext
    9:9:java.util.Map$Entry computeNext():0:0 -> computeNext
    9:9:java.lang.Object computeNext():0 -> computeNext
    10:10:com.google.common.collect.Cut com.google.common.collect.Cut.belowAll():0:0 -> computeNext
    10:10:java.util.Map$Entry computeNext():0 -> computeNext
    10:10:java.lang.Object computeNext():0 -> computeNext
    11:11:java.util.Map$Entry computeNext():0:0 -> computeNext
    11:11:java.lang.Object computeNext():0 -> computeNext
com.google.common.collect.TreeRangeSet$RangesByUpperBound -> com.google.common.collect.iv:
    com.google.common.collect.Range upperBoundWindow -> b
    java.util.NavigableMap rangesByLowerBound -> a
    java.util.Iterator entryIterator() -> a
    java.util.Iterator descendingEntryIterator() -> c
    com.google.common.collect.Range access$000(com.google.common.collect.TreeRangeSet$RangesByUpperBound) -> d
    java.util.NavigableMap subMap(com.google.common.collect.Range) -> e
    1:1:java.util.NavigableMap headMap(com.google.common.collect.Cut,boolean):0:0 -> headMap
    1:1:java.util.NavigableMap headMap(java.lang.Object,boolean):0 -> headMap
    1:1:java.util.NavigableMap subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean):0:0 -> subMap
    1:1:java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean):0 -> subMap
    1:1:java.util.NavigableMap tailMap(com.google.common.collect.Cut,boolean):0:0 -> tailMap
    1:1:java.util.NavigableMap tailMap(java.lang.Object,boolean):0 -> tailMap
com.google.common.collect.TreeRangeSet$RangesByUpperBound$1 -> com.google.common.collect.gv:
    java.util.Iterator val$backingItr -> c
    com.google.common.collect.TreeRangeSet$RangesByUpperBound this$0 -> d
    1:1:java.util.Map$Entry computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
com.google.common.collect.TreeRangeSet$RangesByUpperBound$2 -> com.google.common.collect.hv:
    com.google.common.collect.TreeRangeSet$RangesByUpperBound this$0 -> d
    com.google.common.collect.PeekingIterator val$backingItr -> c
    1:1:java.util.Map$Entry computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
com.google.common.collect.TreeRangeSet$SubRangeSet -> com.google.common.collect.jv:
    com.google.common.collect.TreeRangeSet this$0 -> f
    com.google.common.collect.Range restriction -> e
    1:1:com.google.common.collect.Range com.google.common.collect.TreeRangeSet.rangeEnclosing(com.google.common.collect.Range):0:0 -> encloses
    1:1:com.google.common.collect.Range com.google.common.collect.TreeRangeSet.access$600(com.google.common.collect.TreeRangeSet,com.google.common.collect.Range):0 -> encloses
    1:1:boolean encloses(com.google.common.collect.Range):0 -> encloses
    2:2:boolean encloses(com.google.common.collect.Range):0:0 -> encloses
com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound -> com.google.common.collect.mv:
    java.util.NavigableMap rangesByUpperBound -> d
    java.util.NavigableMap rangesByLowerBound -> c
    com.google.common.collect.Range restriction -> b
    com.google.common.collect.Range lowerBoundWindow -> a
    1:1:com.google.common.collect.UnmodifiableListIterator com.google.common.collect.Iterators.emptyListIterator():0:0 -> a
    1:1:com.google.common.collect.UnmodifiableIterator com.google.common.collect.Iterators.emptyIterator():0 -> a
    1:1:java.util.Iterator entryIterator():0 -> a
    2:2:java.util.Iterator entryIterator():0:0 -> a
    3:3:com.google.common.collect.UnmodifiableListIterator com.google.common.collect.Iterators.emptyListIterator():0:0 -> a
    3:3:com.google.common.collect.UnmodifiableIterator com.google.common.collect.Iterators.emptyIterator():0 -> a
    3:3:java.util.Iterator entryIterator():0 -> a
    4:4:java.util.Iterator entryIterator():0:0 -> a
    5:5:com.google.common.collect.Cut com.google.common.collect.Cut.belowValue(java.lang.Comparable):0:0 -> a
    5:5:java.util.Iterator entryIterator():0 -> a
    6:6:java.util.Iterator entryIterator():0:0 -> a
    1:1:com.google.common.collect.UnmodifiableListIterator com.google.common.collect.Iterators.emptyListIterator():0:0 -> c
    1:1:com.google.common.collect.UnmodifiableIterator com.google.common.collect.Iterators.emptyIterator():0 -> c
    1:1:java.util.Iterator descendingEntryIterator():0 -> c
    2:2:java.util.Iterator descendingEntryIterator():0:0 -> c
    3:3:com.google.common.collect.Cut com.google.common.collect.Cut.belowValue(java.lang.Comparable):0:0 -> c
    3:3:java.util.Iterator descendingEntryIterator():0 -> c
    4:4:java.util.Iterator descendingEntryIterator():0:0 -> c
    com.google.common.collect.Range access$300(com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound) -> d
    com.google.common.collect.Range access$400(com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound) -> e
    java.util.NavigableMap subMap(com.google.common.collect.Range) -> f
    1:1:java.lang.Object com.google.common.collect.Maps.valueOrNull(java.util.Map$Entry):0:0 -> get
    1:1:com.google.common.collect.Range get(java.lang.Object):0 -> get
    2:2:com.google.common.collect.Range get(java.lang.Object):0:0 -> get
    1:1:java.util.NavigableMap headMap(com.google.common.collect.Cut,boolean):0:0 -> headMap
    1:1:java.util.NavigableMap headMap(java.lang.Object,boolean):0 -> headMap
    1:1:java.util.NavigableMap subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean):0:0 -> subMap
    1:1:java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean):0 -> subMap
    1:1:java.util.NavigableMap tailMap(com.google.common.collect.Cut,boolean):0:0 -> tailMap
    1:1:java.util.NavigableMap tailMap(java.lang.Object,boolean):0 -> tailMap
com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$1 -> com.google.common.collect.kv:
    java.util.Iterator val$completeRangeItr -> c
    com.google.common.collect.Cut val$upperBoundOnLowerBounds -> d
    com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound this$0 -> e
    1:1:java.util.Map$Entry computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$2 -> com.google.common.collect.lv:
    java.util.Iterator val$completeRangeItr -> c
    com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound this$0 -> d
    1:1:java.util.Map$Entry computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
com.google.common.collect.TreeTraverser$1 -> com.google.common.collect.nv:
    com.google.common.base.Function val$nodeToChildrenFunction -> a
com.google.common.collect.TreeTraverser$2 -> com.google.common.collect.pv:
    com.google.common.collect.TreeTraverser this$0 -> c
    java.lang.Object val$root -> b
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
    2:2:com.google.common.collect.UnmodifiableIterator com.google.common.collect.TreeTraverser.preOrderIterator(java.lang.Object):0:0 -> iterator
    2:2:com.google.common.collect.UnmodifiableIterator iterator():0 -> iterator
    2:2:java.util.Iterator iterator():0 -> iterator
com.google.common.collect.TreeTraverser$2$1 -> com.google.common.collect.ov:
    java.util.function.Consumer val$action -> a
    com.google.common.collect.TreeTraverser$2 this$1 -> b
com.google.common.collect.TreeTraverser$3 -> com.google.common.collect.rv:
    com.google.common.collect.TreeTraverser this$0 -> c
    java.lang.Object val$root -> b
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
    2:2:com.google.common.collect.UnmodifiableIterator com.google.common.collect.TreeTraverser.postOrderIterator(java.lang.Object):0:0 -> iterator
    2:2:com.google.common.collect.UnmodifiableIterator iterator():0 -> iterator
    2:2:java.util.Iterator iterator():0 -> iterator
com.google.common.collect.TreeTraverser$3$1 -> com.google.common.collect.qv:
    com.google.common.collect.TreeTraverser$3 this$1 -> b
    java.util.function.Consumer val$action -> a
com.google.common.collect.TreeTraverser$4 -> com.google.common.collect.sv:
    com.google.common.collect.TreeTraverser this$0 -> c
    java.lang.Object val$root -> b
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.collect.TreeTraverser$BreadthFirstIterator -> com.google.common.collect.tv:
    com.google.common.collect.TreeTraverser this$0 -> b
    java.util.Queue queue -> a
com.google.common.collect.TreeTraverser$PostOrderIterator -> com.google.common.collect.uv:
    com.google.common.collect.TreeTraverser this$0 -> d
    java.util.ArrayDeque stack -> c
    1:1:com.google.common.collect.TreeTraverser$PostOrderNode expand(java.lang.Object):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.TreeTraverser,java.lang.Object):0 -> <init>
    2:2:void <init>(com.google.common.collect.TreeTraverser,java.lang.Object):0:0 -> <init>
    1:1:com.google.common.collect.TreeTraverser$PostOrderNode expand(java.lang.Object):0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
    2:2:java.lang.Object computeNext():0:0 -> computeNext
com.google.common.collect.TreeTraverser$PostOrderNode -> com.google.common.collect.vv:
    java.util.Iterator childIterator -> b
    java.lang.Object root -> a
com.google.common.collect.TreeTraverser$PreOrderIterator -> com.google.common.collect.wv:
    com.google.common.collect.TreeTraverser this$0 -> b
    java.util.Deque stack -> a
com.google.common.collect.UnmodifiableSortedMultiset -> com.google.common.collect.xv:
    com.google.common.collect.UnmodifiableSortedMultiset descendingMultiset -> d
    1:1:com.google.common.collect.Multiset com.google.common.collect.Multisets$UnmodifiableMultiset.delegate():0:0 -> a
    1:1:com.google.common.collect.SortedMultiset delegate():0 -> a
    1:1:java.util.NavigableSet createElementSet():0 -> a
    1:1:java.util.Set createElementSet():0 -> a
    2:2:com.google.common.collect.SortedMultiset delegate():0:0 -> a
    2:2:java.util.NavigableSet createElementSet():0 -> a
    2:2:java.util.Set createElementSet():0 -> a
    3:3:java.util.NavigableSet createElementSet():0:0 -> a
    3:3:java.util.Set createElementSet():0 -> a
    1:1:com.google.common.collect.Multiset com.google.common.collect.Multisets$UnmodifiableMultiset.delegate():0:0 -> comparator
    1:1:com.google.common.collect.SortedMultiset delegate():0 -> comparator
    1:1:java.util.Comparator comparator():0 -> comparator
    2:2:com.google.common.collect.SortedMultiset delegate():0:0 -> comparator
    2:2:java.util.Comparator comparator():0 -> comparator
    3:3:java.util.Comparator comparator():0:0 -> comparator
    1:1:com.google.common.collect.Multiset com.google.common.collect.Multisets$UnmodifiableMultiset.delegate():0:0 -> delegate
    1:1:com.google.common.collect.SortedMultiset delegate():0 -> delegate
    1:1:com.google.common.collect.Multiset delegate():0 -> delegate
    2:2:com.google.common.collect.SortedMultiset delegate():0:0 -> delegate
    2:2:com.google.common.collect.Multiset delegate():0 -> delegate
    3:3:com.google.common.collect.Multiset com.google.common.collect.Multisets$UnmodifiableMultiset.delegate():0:0 -> delegate
    3:3:com.google.common.collect.SortedMultiset delegate():0 -> delegate
    3:3:java.lang.Object delegate():0 -> delegate
    4:4:com.google.common.collect.SortedMultiset delegate():0:0 -> delegate
    4:4:java.lang.Object delegate():0 -> delegate
    5:5:com.google.common.collect.Multiset com.google.common.collect.Multisets$UnmodifiableMultiset.delegate():0:0 -> delegate
    5:5:com.google.common.collect.SortedMultiset delegate():0 -> delegate
    5:5:java.util.Collection delegate():0 -> delegate
    6:6:com.google.common.collect.SortedMultiset delegate():0:0 -> delegate
    6:6:java.util.Collection delegate():0 -> delegate
    1:1:com.google.common.collect.Multiset com.google.common.collect.Multisets$UnmodifiableMultiset.delegate():0:0 -> descendingMultiset
    1:1:com.google.common.collect.SortedMultiset delegate():0 -> descendingMultiset
    1:1:com.google.common.collect.SortedMultiset descendingMultiset():0 -> descendingMultiset
    2:2:com.google.common.collect.SortedMultiset delegate():0:0 -> descendingMultiset
    2:2:com.google.common.collect.SortedMultiset descendingMultiset():0 -> descendingMultiset
    3:3:com.google.common.collect.SortedMultiset descendingMultiset():0:0 -> descendingMultiset
    1:1:com.google.common.collect.Multiset com.google.common.collect.Multisets$UnmodifiableMultiset.delegate():0:0 -> firstEntry
    1:1:com.google.common.collect.SortedMultiset delegate():0 -> firstEntry
    1:1:com.google.common.collect.Multiset$Entry firstEntry():0 -> firstEntry
    2:2:com.google.common.collect.SortedMultiset delegate():0:0 -> firstEntry
    2:2:com.google.common.collect.Multiset$Entry firstEntry():0 -> firstEntry
    3:3:com.google.common.collect.Multiset$Entry firstEntry():0:0 -> firstEntry
    1:1:com.google.common.collect.Multiset com.google.common.collect.Multisets$UnmodifiableMultiset.delegate():0:0 -> headMultiset
    1:1:com.google.common.collect.SortedMultiset delegate():0 -> headMultiset
    1:1:com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType):0 -> headMultiset
    2:2:com.google.common.collect.SortedMultiset delegate():0:0 -> headMultiset
    2:2:com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType):0 -> headMultiset
    3:3:com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType):0:0 -> headMultiset
    1:1:com.google.common.collect.Multiset com.google.common.collect.Multisets$UnmodifiableMultiset.delegate():0:0 -> lastEntry
    1:1:com.google.common.collect.SortedMultiset delegate():0 -> lastEntry
    1:1:com.google.common.collect.Multiset$Entry lastEntry():0 -> lastEntry
    2:2:com.google.common.collect.SortedMultiset delegate():0:0 -> lastEntry
    2:2:com.google.common.collect.Multiset$Entry lastEntry():0 -> lastEntry
    3:3:com.google.common.collect.Multiset$Entry lastEntry():0:0 -> lastEntry
    1:1:com.google.common.collect.Multiset com.google.common.collect.Multisets$UnmodifiableMultiset.delegate():0:0 -> subMultiset
    1:1:com.google.common.collect.SortedMultiset delegate():0 -> subMultiset
    1:1:com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType):0 -> subMultiset
    2:2:com.google.common.collect.SortedMultiset delegate():0:0 -> subMultiset
    2:2:com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType):0 -> subMultiset
    3:3:com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType):0:0 -> subMultiset
    1:1:com.google.common.collect.Multiset com.google.common.collect.Multisets$UnmodifiableMultiset.delegate():0:0 -> tailMultiset
    1:1:com.google.common.collect.SortedMultiset delegate():0 -> tailMultiset
    1:1:com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType):0 -> tailMultiset
    2:2:com.google.common.collect.SortedMultiset delegate():0:0 -> tailMultiset
    2:2:com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType):0 -> tailMultiset
    3:3:com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType):0:0 -> tailMultiset
com.google.common.collect.UsingToStringOrdering -> com.google.common.collect.yv:
    com.google.common.collect.UsingToStringOrdering INSTANCE -> a
com.google.common.escape.ArrayBasedCharEscaper -> com.google.common.escape.ArrayBasedCharEscaper:
    char[][] replacements -> b
    char safeMin -> d
    int replacementsLength -> c
    char safeMax -> e
com.google.common.escape.ArrayBasedEscaperMap -> com.google.common.escape.ArrayBasedEscaperMap:
    char[][] replacementArray -> a
    char[][] EMPTY_REPLACEMENT_ARRAY -> b
    char[][] getReplacementArray() -> a
    1:1:char[][] createReplacementArray(java.util.Map):0:0 -> create
    1:1:com.google.common.escape.ArrayBasedEscaperMap create(java.util.Map):0 -> create
    2:2:com.google.common.escape.ArrayBasedEscaperMap create(java.util.Map):0:0 -> create
com.google.common.escape.ArrayBasedUnicodeEscaper -> com.google.common.escape.ArrayBasedUnicodeEscaper:
    char safeMaxChar -> g
    int safeMin -> d
    char[][] replacements -> b
    int safeMax -> e
    int replacementsLength -> c
    char safeMinChar -> f
com.google.common.escape.CharEscaper -> com.google.common.escape.CharEscaper:
    1:1:char[] growBuffer(char[],int,int):0:0 -> escapeSlow
    1:1:java.lang.String escapeSlow(java.lang.String,int):0 -> escapeSlow
    2:2:java.lang.String escapeSlow(java.lang.String,int):0:0 -> escapeSlow
    3:3:char[] growBuffer(char[],int,int):0:0 -> escapeSlow
    3:3:java.lang.String escapeSlow(java.lang.String,int):0 -> escapeSlow
    4:4:java.lang.String escapeSlow(java.lang.String,int):0:0 -> escapeSlow
com.google.common.escape.CharEscaperBuilder -> com.google.common.escape.CharEscaperBuilder:
    java.util.Map map -> a
    int max -> b
com.google.common.escape.CharEscaperBuilder$CharArrayDecorator -> com.google.common.escape.a:
    char[][] replacements -> b
    int replaceLength -> c
com.google.common.escape.Escaper -> com.google.common.escape.Escaper:
    com.google.common.base.Function asFunction -> a
com.google.common.escape.Escaper$1 -> com.google.common.escape.b:
    com.google.common.escape.Escaper this$0 -> a
    1:1:java.lang.String apply(java.lang.String):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.escape.Escapers -> com.google.common.escape.Escapers:
    com.google.common.escape.Escaper NULL_ESCAPER -> a
    1:1:java.lang.String stringOrNull(char[]):0:0 -> computeReplacement
    1:1:java.lang.String computeReplacement(com.google.common.escape.CharEscaper,char):0 -> computeReplacement
    2:2:java.lang.String stringOrNull(char[]):0:0 -> computeReplacement
    2:2:java.lang.String computeReplacement(com.google.common.escape.UnicodeEscaper,int):0 -> computeReplacement
com.google.common.escape.Escapers$1 -> com.google.common.escape.c:
com.google.common.escape.Escapers$Builder -> com.google.common.escape.Escapers$Builder:
    java.util.Map replacementMap -> a
    char safeMin -> b
    char safeMax -> c
    java.lang.String unsafeReplacement -> d
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.escape.Escapers$1):0 -> <init>
    java.lang.String access$100(com.google.common.escape.Escapers$Builder) -> a
com.google.common.escape.Escapers$Builder$1 -> com.google.common.escape.d:
    com.google.common.escape.Escapers$Builder this$0 -> g
    char[] replacementChars -> f
com.google.common.escape.Platform -> com.google.common.escape.f:
    java.lang.ThreadLocal DEST_TL -> a
    char[] charBufferFromThreadLocal() -> a
com.google.common.escape.Platform$1 -> com.google.common.escape.e:
com.google.common.escape.UnicodeEscaper -> com.google.common.escape.UnicodeEscaper:
    1:1:char[] growBuffer(char[],int,int):0:0 -> escapeSlow
    1:1:java.lang.String escapeSlow(java.lang.String,int):0 -> escapeSlow
    2:2:java.lang.String escapeSlow(java.lang.String,int):0:0 -> escapeSlow
    3:3:char[] growBuffer(char[],int,int):0:0 -> escapeSlow
    3:3:java.lang.String escapeSlow(java.lang.String,int):0 -> escapeSlow
    4:4:java.lang.String escapeSlow(java.lang.String,int):0:0 -> escapeSlow
com.google.common.eventbus.DeadEvent -> com.google.common.eventbus.DeadEvent:
    java.lang.Object event -> b
    java.lang.Object source -> a
com.google.common.eventbus.Dispatcher -> com.google.common.eventbus.h:
    void dispatch(java.lang.Object,java.util.Iterator) -> a
    com.google.common.eventbus.Dispatcher legacyAsync() -> b
com.google.common.eventbus.Dispatcher$1 -> com.google.common.eventbus.a:
com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher -> com.google.common.eventbus.c:
    java.util.concurrent.ConcurrentLinkedQueue queue -> a
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.eventbus.Dispatcher$1):0 -> <init>
    void dispatch(java.lang.Object,java.util.Iterator) -> a
com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher$EventWithSubscriber -> com.google.common.eventbus.b:
    java.lang.Object event -> a
    com.google.common.eventbus.Subscriber subscriber -> b
    1:1:void <init>(java.lang.Object,com.google.common.eventbus.Subscriber):0:0 -> <init>
    1:1:void <init>(java.lang.Object,com.google.common.eventbus.Subscriber,com.google.common.eventbus.Dispatcher$1):0 -> <init>
    java.lang.Object access$700(com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher$EventWithSubscriber) -> a
    com.google.common.eventbus.Subscriber access$800(com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher$EventWithSubscriber) -> b
com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher -> com.google.common.eventbus.g:
    java.lang.ThreadLocal queue -> a
    java.lang.ThreadLocal dispatching -> b
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.eventbus.Dispatcher$1):0 -> <init>
    void dispatch(java.lang.Object,java.util.Iterator) -> a
com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$1 -> com.google.common.eventbus.d:
    1:1:java.util.Queue initialValue():0:0 -> initialValue
    1:1:java.lang.Object initialValue():0 -> initialValue
com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$2 -> com.google.common.eventbus.e:
com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$Event -> com.google.common.eventbus.f:
    java.util.Iterator subscribers -> b
    java.lang.Object event -> a
    1:1:void <init>(java.lang.Object,java.util.Iterator):0:0 -> <init>
    1:1:void <init>(java.lang.Object,java.util.Iterator,com.google.common.eventbus.Dispatcher$1):0 -> <init>
    java.util.Iterator access$400(com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$Event) -> a
    java.lang.Object access$500(com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$Event) -> b
com.google.common.eventbus.EventBus -> com.google.common.eventbus.EventBus:
    com.google.common.eventbus.SubscriberExceptionHandler exceptionHandler -> c
    com.google.common.eventbus.Dispatcher dispatcher -> e
    java.util.concurrent.Executor executor -> b
    com.google.common.eventbus.SubscriberRegistry subscribers -> d
    java.util.logging.Logger logger -> f
    java.lang.String identifier -> a
    1:1:com.google.common.eventbus.Dispatcher com.google.common.eventbus.Dispatcher.perThreadDispatchQueue():0:0 -> <init>
    1:1:void <init>(com.google.common.eventbus.SubscriberExceptionHandler):0 -> <init>
    2:2:void <init>(com.google.common.eventbus.SubscriberExceptionHandler):0:0 -> <init>
    3:3:com.google.common.eventbus.Dispatcher com.google.common.eventbus.Dispatcher.perThreadDispatchQueue():0:0 -> <init>
    3:3:void <init>(java.lang.String):0 -> <init>
    4:4:void <init>(java.lang.String):0:0 -> <init>
    java.util.concurrent.Executor executor() -> a
    void handleSubscriberException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext) -> b
com.google.common.eventbus.EventBus$LoggingHandler -> com.google.common.eventbus.i:
    com.google.common.eventbus.EventBus$LoggingHandler INSTANCE -> a
    1:1:java.util.logging.Logger logger(com.google.common.eventbus.SubscriberExceptionContext):0:0 -> handleException
    1:1:void handleException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext):0 -> handleException
    2:2:void handleException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext):0:0 -> handleException
    3:3:java.lang.String message(com.google.common.eventbus.SubscriberExceptionContext):0:0 -> handleException
    3:3:void handleException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext):0 -> handleException
    4:4:void handleException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext):0:0 -> handleException
com.google.common.eventbus.Subscriber -> com.google.common.eventbus.l:
    com.google.common.eventbus.EventBus bus -> a
    java.lang.Object target -> b
    java.lang.reflect.Method method -> c
    java.util.concurrent.Executor executor -> d
    1:1:com.google.common.eventbus.SubscriberExceptionContext context(java.lang.Object):0:0 -> a
    1:1:com.google.common.eventbus.SubscriberExceptionContext access$100(com.google.common.eventbus.Subscriber,java.lang.Object):0 -> a
    com.google.common.eventbus.EventBus access$200(com.google.common.eventbus.Subscriber) -> b
    1:1:boolean isDeclaredThreadSafe(java.lang.reflect.Method):0:0 -> c
    1:1:com.google.common.eventbus.Subscriber create(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method):0 -> c
    2:2:com.google.common.eventbus.Subscriber create(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method):0:0 -> c
    void dispatchEvent(java.lang.Object) -> d
    void invokeSubscriberMethod(java.lang.Object) -> e
com.google.common.eventbus.Subscriber$1 -> com.google.common.eventbus.j:
    java.lang.Object val$event -> a
    com.google.common.eventbus.Subscriber this$0 -> b
com.google.common.eventbus.Subscriber$SynchronizedSubscriber -> com.google.common.eventbus.k:
    1:1:void <init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method):0:0 -> <init>
    1:1:void <init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method,com.google.common.eventbus.Subscriber$1):0 -> <init>
    void invokeSubscriberMethod(java.lang.Object) -> e
com.google.common.eventbus.SubscriberExceptionContext -> com.google.common.eventbus.SubscriberExceptionContext:
    com.google.common.eventbus.EventBus eventBus -> a
    java.lang.Object event -> b
    java.lang.Object subscriber -> c
    java.lang.reflect.Method subscriberMethod -> d
com.google.common.eventbus.SubscriberRegistry -> com.google.common.eventbus.p:
    com.google.common.eventbus.EventBus bus -> b
    com.google.common.cache.LoadingCache subscriberMethodsCache -> c
    com.google.common.cache.LoadingCache flattenHierarchyCache -> d
    java.util.concurrent.ConcurrentMap subscribers -> a
    1:1:com.google.common.collect.ImmutableList getAnnotatedMethods(java.lang.Class):0:0 -> a
    1:1:com.google.common.collect.Multimap findAllSubscribers(java.lang.Object):0 -> a
    2:2:com.google.common.collect.Multimap findAllSubscribers(java.lang.Object):0:0 -> a
    3:3:com.google.common.collect.ImmutableList getAnnotatedMethods(java.lang.Class):0:0 -> a
    3:3:com.google.common.collect.Multimap findAllSubscribers(java.lang.Object):0 -> a
    1:1:com.google.common.collect.ImmutableSet flattenHierarchy(java.lang.Class):0:0 -> b
    1:1:java.util.Iterator getSubscribers(java.lang.Object):0 -> b
    2:2:java.util.Iterator getSubscribers(java.lang.Object):0:0 -> b
    3:3:com.google.common.collect.ImmutableSet flattenHierarchy(java.lang.Class):0:0 -> b
    3:3:java.util.Iterator getSubscribers(java.lang.Object):0 -> b
    void register(java.lang.Object) -> c
    void unregister(java.lang.Object) -> d
com.google.common.eventbus.SubscriberRegistry$1 -> com.google.common.eventbus.m:
    1:1:com.google.common.collect.ImmutableList com.google.common.eventbus.SubscriberRegistry.getAnnotatedMethodsNotCached(java.lang.Class):0:0 -> load
    1:1:com.google.common.collect.ImmutableList com.google.common.eventbus.SubscriberRegistry.access$000(java.lang.Class):0 -> load
    1:1:com.google.common.collect.ImmutableList load(java.lang.Class):0 -> load
    1:1:java.lang.Object load(java.lang.Object):0 -> load
com.google.common.eventbus.SubscriberRegistry$2 -> com.google.common.eventbus.n:
    1:1:com.google.common.collect.ImmutableSet load(java.lang.Class):0:0 -> load
    1:1:java.lang.Object load(java.lang.Object):0 -> load
com.google.common.eventbus.SubscriberRegistry$MethodIdentifier -> com.google.common.eventbus.o:
    java.util.List parameterTypes -> b
    java.lang.String name -> a
com.google.common.graph.AbstractBaseGraph -> com.google.common.graph.f:
com.google.common.graph.AbstractBaseGraph$1 -> com.google.common.graph.a:
    com.google.common.graph.AbstractBaseGraph this$0 -> a
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
    2:2:com.google.common.graph.EndpointPairIterator com.google.common.graph.EndpointPairIterator.of(com.google.common.graph.BaseGraph):0:0 -> iterator
    2:2:com.google.common.collect.UnmodifiableIterator iterator():0 -> iterator
    2:2:java.util.Iterator iterator():0 -> iterator
com.google.common.graph.AbstractBaseGraph$2 -> com.google.common.graph.e:
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.graph.AbstractBaseGraph$2$1 -> com.google.common.graph.b:
    com.google.common.graph.AbstractBaseGraph$2 this$1 -> a
    1:1:com.google.common.graph.EndpointPair apply(java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.graph.AbstractBaseGraph$2$2 -> com.google.common.graph.c:
    com.google.common.graph.AbstractBaseGraph$2 this$1 -> a
    1:1:com.google.common.graph.EndpointPair apply(java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.graph.AbstractBaseGraph$2$3 -> com.google.common.graph.d:
    com.google.common.graph.AbstractBaseGraph$2 this$1 -> a
    1:1:com.google.common.graph.EndpointPair apply(java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.graph.AbstractDirectedNetworkConnections -> com.google.common.graph.h:
    java.util.Map inEdgeMap -> a
    java.util.Map outEdgeMap -> b
    int selfLoopCount -> c
    int access$000(com.google.common.graph.AbstractDirectedNetworkConnections) -> a
com.google.common.graph.AbstractDirectedNetworkConnections$1 -> com.google.common.graph.g:
    com.google.common.graph.AbstractDirectedNetworkConnections this$0 -> a
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.graph.AbstractGraphBuilder -> com.google.common.graph.i:
    com.google.common.graph.ElementOrder incidentEdgeOrder -> d
    com.google.common.graph.ElementOrder nodeOrder -> c
    com.google.common.base.Optional expectedNodeCount -> e
    boolean directed -> a
    boolean allowsSelfLoops -> b
com.google.common.graph.AbstractNetwork -> com.google.common.graph.AbstractNetwork:
    1:1:com.google.common.base.Predicate connectedPredicate(java.lang.Object,java.lang.Object):0:0 -> edgesConnecting
    1:1:java.util.Set edgesConnecting(java.lang.Object,java.lang.Object):0 -> edgesConnecting
    2:2:java.util.Set edgesConnecting(java.lang.Object,java.lang.Object):0:0 -> edgesConnecting
    3:3:com.google.common.base.Predicate connectedPredicate(java.lang.Object,java.lang.Object):0:0 -> edgesConnecting
    3:3:java.util.Set edgesConnecting(java.lang.Object,java.lang.Object):0 -> edgesConnecting
    4:4:java.util.Set edgesConnecting(java.lang.Object,java.lang.Object):0:0 -> edgesConnecting
    1:1:java.util.Map edgeIncidentNodesMap(com.google.common.graph.Network):0:0 -> equals
    1:1:boolean equals(java.lang.Object):0 -> equals
    2:2:boolean equals(java.lang.Object):0:0 -> equals
    1:1:java.util.Map edgeIncidentNodesMap(com.google.common.graph.Network):0:0 -> hashCode
    1:1:int hashCode():0 -> hashCode
    2:2:int hashCode():0:0 -> hashCode
    1:1:java.util.Map edgeIncidentNodesMap(com.google.common.graph.Network):0:0 -> toString
    1:1:java.lang.String toString():0 -> toString
    2:2:java.lang.String toString():0:0 -> toString
com.google.common.graph.AbstractNetwork$1 -> com.google.common.graph.l:
    com.google.common.graph.AbstractNetwork this$0 -> a
    1:1:java.util.Set predecessors(java.lang.Object):0:0 -> predecessors
    1:1:java.lang.Iterable predecessors(java.lang.Object):0 -> predecessors
    1:1:java.util.Set successors(java.lang.Object):0:0 -> successors
    1:1:java.lang.Iterable successors(java.lang.Object):0 -> successors
com.google.common.graph.AbstractNetwork$1$1 -> com.google.common.graph.k:
    com.google.common.graph.AbstractNetwork$1 this$1 -> a
com.google.common.graph.AbstractNetwork$1$1$1 -> com.google.common.graph.j:
    com.google.common.graph.AbstractNetwork$1$1 this$2 -> a
    1:1:com.google.common.graph.EndpointPair apply(java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.graph.AbstractNetwork$2 -> com.google.common.graph.m:
    com.google.common.graph.AbstractNetwork this$0 -> c
    java.lang.Object val$nodeToCheck -> b
    java.lang.Object val$nodePresent -> a
com.google.common.graph.AbstractNetwork$3 -> com.google.common.graph.n:
    com.google.common.graph.Network val$network -> a
    1:1:com.google.common.graph.EndpointPair apply(java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.graph.AbstractUndirectedNetworkConnections -> com.google.common.graph.o:
    java.util.Map incidentEdgeMap -> a
com.google.common.graph.AbstractValueGraph -> com.google.common.graph.AbstractValueGraph:
    1:1:java.util.Map edgeValueMap(com.google.common.graph.ValueGraph):0:0 -> equals
    1:1:boolean equals(java.lang.Object):0 -> equals
    2:2:boolean equals(java.lang.Object):0:0 -> equals
    1:1:java.util.Map edgeValueMap(com.google.common.graph.ValueGraph):0:0 -> hashCode
    1:1:int hashCode():0 -> hashCode
    2:2:int hashCode():0:0 -> hashCode
    1:1:java.util.Map edgeValueMap(com.google.common.graph.ValueGraph):0:0 -> toString
    1:1:java.lang.String toString():0 -> toString
    2:2:java.lang.String toString():0:0 -> toString
com.google.common.graph.AbstractValueGraph$1 -> com.google.common.graph.p:
    com.google.common.graph.AbstractValueGraph this$0 -> a
    1:1:java.util.Set predecessors(java.lang.Object):0:0 -> predecessors
    1:1:java.lang.Iterable predecessors(java.lang.Object):0 -> predecessors
    1:1:java.util.Set successors(java.lang.Object):0:0 -> successors
    1:1:java.lang.Iterable successors(java.lang.Object):0 -> successors
com.google.common.graph.AbstractValueGraph$2 -> com.google.common.graph.q:
    com.google.common.graph.ValueGraph val$graph -> a
    1:1:java.lang.Object apply(com.google.common.graph.EndpointPair):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.graph.BaseGraph -> com.google.common.graph.r:
com.google.common.graph.DirectedGraphConnections -> com.google.common.graph.i0:
    java.util.Map adjacentNodeValues -> a
    java.util.List orderedNodeConnections -> b
    java.lang.Object PRED -> e
    int successorCount -> d
    int predecessorCount -> c
    java.util.List access$000(com.google.common.graph.DirectedGraphConnections) -> a
    java.util.Map access$100(com.google.common.graph.DirectedGraphConnections) -> b
    1:1:boolean isPredecessor(java.lang.Object):0:0 -> c
    1:1:boolean access$200(java.lang.Object):0 -> c
    int access$300(com.google.common.graph.DirectedGraphConnections) -> d
    1:1:boolean isSuccessor(java.lang.Object):0:0 -> e
    1:1:boolean access$400(java.lang.Object):0 -> e
    int access$500(com.google.common.graph.DirectedGraphConnections) -> f
    com.google.common.graph.DirectedGraphConnections of(com.google.common.graph.ElementOrder) -> g
    com.google.common.graph.DirectedGraphConnections ofImmutable(java.lang.Object,java.lang.Iterable,com.google.common.base.Function) -> h
    1:1:java.util.Set predecessors():0:0 -> incidentEdgeIterator
    1:1:java.util.Iterator incidentEdgeIterator(java.lang.Object):0 -> incidentEdgeIterator
    2:2:java.util.Iterator incidentEdgeIterator(java.lang.Object):0:0 -> incidentEdgeIterator
    3:3:java.util.Set successors():0:0 -> incidentEdgeIterator
    3:3:java.util.Iterator incidentEdgeIterator(java.lang.Object):0 -> incidentEdgeIterator
    4:4:java.util.Iterator incidentEdgeIterator(java.lang.Object):0:0 -> incidentEdgeIterator
com.google.common.graph.DirectedGraphConnections$1 -> com.google.common.graph.t:
    com.google.common.graph.DirectedGraphConnections this$0 -> a
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.graph.DirectedGraphConnections$1$1 -> com.google.common.graph.s:
    java.util.Iterator val$nodeConnections -> c
    java.util.Set val$seenNodes -> d
com.google.common.graph.DirectedGraphConnections$2 -> com.google.common.graph.w:
    com.google.common.graph.DirectedGraphConnections this$0 -> a
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.graph.DirectedGraphConnections$2$1 -> com.google.common.graph.u:
    java.util.Iterator val$entries -> c
com.google.common.graph.DirectedGraphConnections$2$2 -> com.google.common.graph.v:
    java.util.Iterator val$nodeConnections -> c
com.google.common.graph.DirectedGraphConnections$3 -> com.google.common.graph.z:
    com.google.common.graph.DirectedGraphConnections this$0 -> a
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.graph.DirectedGraphConnections$3$1 -> com.google.common.graph.x:
    java.util.Iterator val$entries -> c
com.google.common.graph.DirectedGraphConnections$3$2 -> com.google.common.graph.y:
    java.util.Iterator val$nodeConnections -> c
com.google.common.graph.DirectedGraphConnections$4 -> com.google.common.graph.a0:
    java.lang.Object val$thisNode -> a
    1:1:com.google.common.graph.EndpointPair apply(java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.graph.DirectedGraphConnections$5 -> com.google.common.graph.b0:
    java.lang.Object val$thisNode -> a
    1:1:com.google.common.graph.EndpointPair apply(java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.graph.DirectedGraphConnections$6 -> com.google.common.graph.c0:
    java.lang.Object val$thisNode -> a
    1:1:com.google.common.graph.EndpointPair apply(com.google.common.graph.DirectedGraphConnections$NodeConnection):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.graph.DirectedGraphConnections$7 -> com.google.common.graph.d0:
    java.util.Iterator val$resultWithDoubleSelfLoop -> c
    java.util.concurrent.atomic.AtomicBoolean val$alreadySeenSelfLoop -> d
    1:1:com.google.common.graph.EndpointPair computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
com.google.common.graph.DirectedGraphConnections$NodeConnection -> com.google.common.graph.g0:
    java.lang.Object node -> a
com.google.common.graph.DirectedGraphConnections$NodeConnection$Pred -> com.google.common.graph.e0:
com.google.common.graph.DirectedGraphConnections$NodeConnection$Succ -> com.google.common.graph.f0:
com.google.common.graph.DirectedGraphConnections$PredAndSucc -> com.google.common.graph.h0:
    java.lang.Object successorValue -> a
    java.lang.Object access$600(com.google.common.graph.DirectedGraphConnections$PredAndSucc) -> a
com.google.common.graph.DirectedMultiNetworkConnections -> com.google.common.graph.k0:
    java.lang.ref.Reference predecessorsReference -> d
    java.lang.ref.Reference successorsReference -> e
    com.google.common.collect.Multiset access$000(com.google.common.graph.DirectedMultiNetworkConnections) -> b
    java.lang.Object getReference(java.lang.ref.Reference) -> c
    com.google.common.graph.DirectedMultiNetworkConnections of() -> d
    com.google.common.graph.DirectedMultiNetworkConnections ofImmutable(java.util.Map,java.util.Map,int) -> e
    com.google.common.collect.Multiset successorsMultiset() -> f
    1:1:com.google.common.collect.Multiset predecessorsMultiset():0:0 -> predecessors
    1:1:java.util.Set predecessors():0 -> predecessors
    2:2:java.util.Set predecessors():0:0 -> predecessors
    1:1:java.lang.Object com.google.common.graph.AbstractDirectedNetworkConnections.removeOutEdge(java.lang.Object):0:0 -> removeOutEdge
    1:1:java.lang.Object removeOutEdge(java.lang.Object):0 -> removeOutEdge
    2:2:java.lang.Object removeOutEdge(java.lang.Object):0:0 -> removeOutEdge
com.google.common.graph.DirectedMultiNetworkConnections$1 -> com.google.common.graph.j0:
    java.lang.Object val$node -> c
    com.google.common.graph.DirectedMultiNetworkConnections this$0 -> d
com.google.common.graph.DirectedNetworkConnections -> com.google.common.graph.l0:
com.google.common.graph.EdgesConnecting -> com.google.common.graph.m0:
    java.util.Map nodeToOutEdge -> a
    java.lang.Object targetNode -> b
    java.lang.Object getConnectingEdge() -> a
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.graph.ElementOrder -> com.google.common.graph.ElementOrder:
    com.google.common.graph.ElementOrder$Type type -> a
    java.util.Comparator comparator -> b
    java.util.Map createMap(int) -> a
com.google.common.graph.ElementOrder$Type -> com.google.common.graph.ElementOrder$Type:
    com.google.common.graph.ElementOrder$Type[] $VALUES -> a
com.google.common.graph.EndpointPair -> com.google.common.graph.EndpointPair:
    java.lang.Object nodeV -> b
    java.lang.Object nodeU -> a
    1:1:void <init>(java.lang.Object,java.lang.Object):0:0 -> <init>
    1:1:void <init>(java.lang.Object,java.lang.Object,com.google.common.graph.EndpointPair$1):0 -> <init>
    com.google.common.graph.EndpointPair of(com.google.common.graph.Network,java.lang.Object,java.lang.Object) -> a
com.google.common.graph.EndpointPair$1 -> com.google.common.graph.n0:
com.google.common.graph.EndpointPair$Ordered -> com.google.common.graph.o0:
    1:1:void <init>(java.lang.Object,java.lang.Object):0:0 -> <init>
    1:1:void <init>(java.lang.Object,java.lang.Object,com.google.common.graph.EndpointPair$1):0 -> <init>
    1:1:java.lang.Object source():0:0 -> equals
    1:1:boolean equals(java.lang.Object):0 -> equals
    2:2:boolean equals(java.lang.Object):0:0 -> equals
    3:3:java.lang.Object target():0:0 -> equals
    3:3:boolean equals(java.lang.Object):0 -> equals
    4:4:boolean equals(java.lang.Object):0:0 -> equals
    1:1:java.lang.Object source():0:0 -> hashCode
    1:1:int hashCode():0 -> hashCode
    2:2:java.lang.Object target():0:0 -> hashCode
    2:2:int hashCode():0 -> hashCode
    3:3:int hashCode():0:0 -> hashCode
    1:1:java.lang.Object source():0:0 -> toString
    1:1:java.lang.String toString():0 -> toString
    2:2:java.lang.String toString():0:0 -> toString
    3:3:java.lang.Object target():0:0 -> toString
    3:3:java.lang.String toString():0 -> toString
    4:4:java.lang.String toString():0:0 -> toString
com.google.common.graph.EndpointPair$Unordered -> com.google.common.graph.p0:
    1:1:void <init>(java.lang.Object,java.lang.Object):0:0 -> <init>
    1:1:void <init>(java.lang.Object,java.lang.Object,com.google.common.graph.EndpointPair$1):0 -> <init>
com.google.common.graph.EndpointPairIterator -> com.google.common.graph.t0:
    java.util.Iterator nodeIterator -> d
    java.util.Iterator successorIterator -> f
    java.lang.Object node -> e
    com.google.common.graph.BaseGraph graph -> c
    1:1:void <init>(com.google.common.graph.BaseGraph):0:0 -> <init>
    1:1:void <init>(com.google.common.graph.BaseGraph,com.google.common.graph.EndpointPairIterator$1):0 -> <init>
com.google.common.graph.EndpointPairIterator$1 -> com.google.common.graph.q0:
com.google.common.graph.EndpointPairIterator$Directed -> com.google.common.graph.r0:
    1:1:void <init>(com.google.common.graph.BaseGraph):0:0 -> <init>
    1:1:void <init>(com.google.common.graph.BaseGraph,com.google.common.graph.EndpointPairIterator$1):0 -> <init>
    1:1:com.google.common.graph.EndpointPair computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
com.google.common.graph.EndpointPairIterator$Undirected -> com.google.common.graph.s0:
    java.util.Set visitedNodes -> g
    1:1:void <init>(com.google.common.graph.BaseGraph):0:0 -> <init>
    1:1:void <init>(com.google.common.graph.BaseGraph,com.google.common.graph.EndpointPairIterator$1):0 -> <init>
    1:1:com.google.common.graph.EndpointPair computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
com.google.common.graph.ForwardingGraph -> com.google.common.graph.u0:
com.google.common.graph.GraphBuilder -> com.google.common.graph.GraphBuilder:
    com.google.common.graph.GraphBuilder copy() -> a
com.google.common.graph.GraphConnections -> com.google.common.graph.v0:
com.google.common.graph.GraphConstants$Presence -> com.google.common.graph.w0:
    com.google.common.graph.GraphConstants$Presence EDGE_EXISTS -> a
    com.google.common.graph.GraphConstants$Presence[] $VALUES -> b
    com.google.common.graph.GraphConstants$Presence[] $values() -> a
com.google.common.graph.Graphs -> com.google.common.graph.Graphs:
    int checkNonNegative(int) -> a
    long checkNonNegative(long) -> b
    int checkPositive(int) -> c
    1:1:boolean canTraverseWithoutReusingEdge(com.google.common.graph.Graph,java.lang.Object,java.lang.Object):0:0 -> d
    1:1:boolean subgraphHasCycle(com.google.common.graph.Graph,java.util.Map,java.lang.Object,java.lang.Object):0 -> d
    2:2:boolean subgraphHasCycle(com.google.common.graph.Graph,java.util.Map,java.lang.Object,java.lang.Object):0:0 -> d
    com.google.common.graph.EndpointPair transpose(com.google.common.graph.EndpointPair) -> e
com.google.common.graph.Graphs$NodeVisitState -> com.google.common.graph.x0:
    com.google.common.graph.Graphs$NodeVisitState PENDING -> a
    com.google.common.graph.Graphs$NodeVisitState COMPLETE -> b
    com.google.common.graph.Graphs$NodeVisitState[] $VALUES -> c
    com.google.common.graph.Graphs$NodeVisitState[] $values() -> a
com.google.common.graph.Graphs$TransposedGraph -> com.google.common.graph.a1:
    com.google.common.graph.Graph graph -> a
    com.google.common.graph.Graph access$000(com.google.common.graph.Graphs$TransposedGraph) -> a
    1:1:com.google.common.graph.Graph delegate():0:0 -> delegate
    1:1:com.google.common.graph.BaseGraph delegate():0 -> delegate
    1:1:com.google.common.graph.Graph delegate():0:0 -> hasEdgeConnecting
    1:1:boolean hasEdgeConnecting(com.google.common.graph.EndpointPair):0 -> hasEdgeConnecting
    2:2:boolean hasEdgeConnecting(com.google.common.graph.EndpointPair):0:0 -> hasEdgeConnecting
    3:3:com.google.common.graph.Graph delegate():0:0 -> hasEdgeConnecting
    3:3:boolean hasEdgeConnecting(java.lang.Object,java.lang.Object):0 -> hasEdgeConnecting
    4:4:boolean hasEdgeConnecting(java.lang.Object,java.lang.Object):0:0 -> hasEdgeConnecting
    1:1:com.google.common.graph.Graph delegate():0:0 -> inDegree
    1:1:int inDegree(java.lang.Object):0 -> inDegree
    2:2:int inDegree(java.lang.Object):0:0 -> inDegree
    1:1:com.google.common.graph.Graph delegate():0:0 -> outDegree
    1:1:int outDegree(java.lang.Object):0 -> outDegree
    2:2:int outDegree(java.lang.Object):0:0 -> outDegree
    1:1:com.google.common.graph.Graph delegate():0:0 -> predecessors
    1:1:java.util.Set predecessors(java.lang.Object):0 -> predecessors
    1:1:java.lang.Iterable predecessors(java.lang.Object):0 -> predecessors
    2:2:java.util.Set predecessors(java.lang.Object):0:0 -> predecessors
    2:2:java.lang.Iterable predecessors(java.lang.Object):0 -> predecessors
    3:3:com.google.common.graph.Graph delegate():0:0 -> predecessors
    3:3:java.util.Set predecessors(java.lang.Object):0 -> predecessors
    4:4:java.util.Set predecessors(java.lang.Object):0:0 -> predecessors
    1:1:com.google.common.graph.Graph delegate():0:0 -> successors
    1:1:java.util.Set successors(java.lang.Object):0 -> successors
    1:1:java.lang.Iterable successors(java.lang.Object):0 -> successors
    2:2:java.util.Set successors(java.lang.Object):0:0 -> successors
    2:2:java.lang.Iterable successors(java.lang.Object):0 -> successors
    3:3:com.google.common.graph.Graph delegate():0:0 -> successors
    3:3:java.util.Set successors(java.lang.Object):0 -> successors
    4:4:java.util.Set successors(java.lang.Object):0:0 -> successors
com.google.common.graph.Graphs$TransposedGraph$1 -> com.google.common.graph.z0:
    com.google.common.graph.Graphs$TransposedGraph this$0 -> c
com.google.common.graph.Graphs$TransposedGraph$1$1 -> com.google.common.graph.y0:
    com.google.common.graph.Graphs$TransposedGraph$1 this$1 -> a
    1:1:com.google.common.graph.EndpointPair apply(com.google.common.graph.EndpointPair):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
    2:2:com.google.common.graph.EndpointPair com.google.common.graph.EndpointPair.of(com.google.common.graph.Graph,java.lang.Object,java.lang.Object):0:0 -> apply
    2:2:com.google.common.graph.EndpointPair apply(com.google.common.graph.EndpointPair):0 -> apply
    2:2:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.graph.Graphs$TransposedNetwork -> com.google.common.graph.b1:
    com.google.common.graph.Network network -> a
    1:1:void com.google.common.graph.ForwardingNetwork.<init>():0:0 -> <init>
    1:1:void <init>(com.google.common.graph.Network):0 -> <init>
    2:2:void <init>(com.google.common.graph.Network):0:0 -> <init>
    com.google.common.graph.Network access$200(com.google.common.graph.Graphs$TransposedNetwork) -> a
    java.util.Set com.google.common.graph.ForwardingNetwork.adjacentEdges(java.lang.Object) -> adjacentEdges
    1:1:com.google.common.graph.Network delegate():0:0 -> adjacentEdges$com$google$common$graph$ForwardingNetwork
    1:1:java.util.Set com.google.common.graph.ForwardingNetwork.adjacentEdges(java.lang.Object):0 -> adjacentEdges$com$google$common$graph$ForwardingNetwork
    2:2:java.util.Set com.google.common.graph.ForwardingNetwork.adjacentEdges(java.lang.Object):0:0 -> adjacentEdges$com$google$common$graph$ForwardingNetwork
    1:1:com.google.common.graph.Network delegate():0:0 -> adjacentNodes
    1:1:java.util.Set com.google.common.graph.ForwardingNetwork.adjacentNodes(java.lang.Object):0 -> adjacentNodes
    1:1:java.util.Set com.google.common.graph.ForwardingNetwork.adjacentNodes(java.lang.Object):0 -> adjacentNodes
    2:2:java.util.Set com.google.common.graph.ForwardingNetwork.adjacentNodes(java.lang.Object):0:0 -> adjacentNodes
    2:2:java.util.Set com.google.common.graph.ForwardingNetwork.adjacentNodes(java.lang.Object):0 -> adjacentNodes
    1:1:com.google.common.graph.Network delegate():0:0 -> allowsParallelEdges
    1:1:boolean com.google.common.graph.ForwardingNetwork.allowsParallelEdges():0 -> allowsParallelEdges
    1:1:boolean com.google.common.graph.ForwardingNetwork.allowsParallelEdges():0 -> allowsParallelEdges
    2:2:boolean com.google.common.graph.ForwardingNetwork.allowsParallelEdges():0:0 -> allowsParallelEdges
    2:2:boolean com.google.common.graph.ForwardingNetwork.allowsParallelEdges():0 -> allowsParallelEdges
    1:1:com.google.common.graph.Network delegate():0:0 -> allowsSelfLoops
    1:1:boolean com.google.common.graph.ForwardingNetwork.allowsSelfLoops():0 -> allowsSelfLoops
    1:1:boolean com.google.common.graph.ForwardingNetwork.allowsSelfLoops():0 -> allowsSelfLoops
    2:2:boolean com.google.common.graph.ForwardingNetwork.allowsSelfLoops():0:0 -> allowsSelfLoops
    2:2:boolean com.google.common.graph.ForwardingNetwork.allowsSelfLoops():0 -> allowsSelfLoops
    int com.google.common.graph.ForwardingNetwork.degree(java.lang.Object) -> degree
    1:1:com.google.common.graph.Network delegate():0:0 -> degree$com$google$common$graph$ForwardingNetwork
    1:1:int com.google.common.graph.ForwardingNetwork.degree(java.lang.Object):0 -> degree$com$google$common$graph$ForwardingNetwork
    2:2:int com.google.common.graph.ForwardingNetwork.degree(java.lang.Object):0:0 -> degree$com$google$common$graph$ForwardingNetwork
    1:1:com.google.common.graph.Network delegate():0:0 -> edgeConnecting
    1:1:java.util.Optional edgeConnecting(com.google.common.graph.EndpointPair):0 -> edgeConnecting
    2:2:java.util.Optional edgeConnecting(com.google.common.graph.EndpointPair):0:0 -> edgeConnecting
    3:3:com.google.common.graph.Network delegate():0:0 -> edgeConnecting
    3:3:java.util.Optional edgeConnecting(java.lang.Object,java.lang.Object):0 -> edgeConnecting
    4:4:java.util.Optional edgeConnecting(java.lang.Object,java.lang.Object):0:0 -> edgeConnecting
    1:1:com.google.common.graph.Network delegate():0:0 -> edgeConnectingOrNull
    1:1:java.lang.Object edgeConnectingOrNull(com.google.common.graph.EndpointPair):0 -> edgeConnectingOrNull
    2:2:java.lang.Object edgeConnectingOrNull(com.google.common.graph.EndpointPair):0:0 -> edgeConnectingOrNull
    3:3:com.google.common.graph.Network delegate():0:0 -> edgeConnectingOrNull
    3:3:java.lang.Object edgeConnectingOrNull(java.lang.Object,java.lang.Object):0 -> edgeConnectingOrNull
    4:4:java.lang.Object edgeConnectingOrNull(java.lang.Object,java.lang.Object):0:0 -> edgeConnectingOrNull
    1:1:com.google.common.graph.Network delegate():0:0 -> edgeOrder
    1:1:com.google.common.graph.ElementOrder com.google.common.graph.ForwardingNetwork.edgeOrder():0 -> edgeOrder
    1:1:com.google.common.graph.ElementOrder com.google.common.graph.ForwardingNetwork.edgeOrder():0 -> edgeOrder
    2:2:com.google.common.graph.ElementOrder com.google.common.graph.ForwardingNetwork.edgeOrder():0:0 -> edgeOrder
    2:2:com.google.common.graph.ElementOrder com.google.common.graph.ForwardingNetwork.edgeOrder():0 -> edgeOrder
    1:1:com.google.common.graph.Network delegate():0:0 -> edges
    1:1:java.util.Set com.google.common.graph.ForwardingNetwork.edges():0 -> edges
    1:1:java.util.Set com.google.common.graph.ForwardingNetwork.edges():0 -> edges
    2:2:java.util.Set com.google.common.graph.ForwardingNetwork.edges():0:0 -> edges
    2:2:java.util.Set com.google.common.graph.ForwardingNetwork.edges():0 -> edges
    1:1:com.google.common.graph.Network delegate():0:0 -> edgesConnecting
    1:1:java.util.Set edgesConnecting(com.google.common.graph.EndpointPair):0 -> edgesConnecting
    2:2:java.util.Set edgesConnecting(com.google.common.graph.EndpointPair):0:0 -> edgesConnecting
    3:3:com.google.common.graph.Network delegate():0:0 -> edgesConnecting
    3:3:java.util.Set edgesConnecting(java.lang.Object,java.lang.Object):0 -> edgesConnecting
    4:4:java.util.Set edgesConnecting(java.lang.Object,java.lang.Object):0:0 -> edgesConnecting
    1:1:com.google.common.graph.Network delegate():0:0 -> hasEdgeConnecting
    1:1:boolean hasEdgeConnecting(com.google.common.graph.EndpointPair):0 -> hasEdgeConnecting
    2:2:boolean hasEdgeConnecting(com.google.common.graph.EndpointPair):0:0 -> hasEdgeConnecting
    3:3:com.google.common.graph.Network delegate():0:0 -> hasEdgeConnecting
    3:3:boolean hasEdgeConnecting(java.lang.Object,java.lang.Object):0 -> hasEdgeConnecting
    4:4:boolean hasEdgeConnecting(java.lang.Object,java.lang.Object):0:0 -> hasEdgeConnecting
    1:1:com.google.common.graph.Network delegate():0:0 -> inDegree
    1:1:int inDegree(java.lang.Object):0 -> inDegree
    2:2:int inDegree(java.lang.Object):0:0 -> inDegree
    1:1:com.google.common.graph.Network delegate():0:0 -> inEdges
    1:1:java.util.Set inEdges(java.lang.Object):0 -> inEdges
    2:2:java.util.Set inEdges(java.lang.Object):0:0 -> inEdges
    1:1:com.google.common.graph.Network delegate():0:0 -> incidentEdges
    1:1:java.util.Set com.google.common.graph.ForwardingNetwork.incidentEdges(java.lang.Object):0 -> incidentEdges
    1:1:java.util.Set com.google.common.graph.ForwardingNetwork.incidentEdges(java.lang.Object):0 -> incidentEdges
    2:2:java.util.Set com.google.common.graph.ForwardingNetwork.incidentEdges(java.lang.Object):0:0 -> incidentEdges
    2:2:java.util.Set com.google.common.graph.ForwardingNetwork.incidentEdges(java.lang.Object):0 -> incidentEdges
    1:1:com.google.common.graph.Network delegate():0:0 -> incidentNodes
    1:1:com.google.common.graph.EndpointPair incidentNodes(java.lang.Object):0 -> incidentNodes
    2:2:com.google.common.graph.EndpointPair incidentNodes(java.lang.Object):0:0 -> incidentNodes
    1:1:com.google.common.graph.Network delegate():0:0 -> isDirected
    1:1:boolean com.google.common.graph.ForwardingNetwork.isDirected():0 -> isDirected
    1:1:boolean com.google.common.graph.ForwardingNetwork.isDirected():0 -> isDirected
    2:2:boolean com.google.common.graph.ForwardingNetwork.isDirected():0:0 -> isDirected
    2:2:boolean com.google.common.graph.ForwardingNetwork.isDirected():0 -> isDirected
    1:1:com.google.common.graph.Network delegate():0:0 -> nodeOrder
    1:1:com.google.common.graph.ElementOrder com.google.common.graph.ForwardingNetwork.nodeOrder():0 -> nodeOrder
    1:1:com.google.common.graph.ElementOrder com.google.common.graph.ForwardingNetwork.nodeOrder():0 -> nodeOrder
    2:2:com.google.common.graph.ElementOrder com.google.common.graph.ForwardingNetwork.nodeOrder():0:0 -> nodeOrder
    2:2:com.google.common.graph.ElementOrder com.google.common.graph.ForwardingNetwork.nodeOrder():0 -> nodeOrder
    1:1:com.google.common.graph.Network delegate():0:0 -> nodes
    1:1:java.util.Set com.google.common.graph.ForwardingNetwork.nodes():0 -> nodes
    1:1:java.util.Set com.google.common.graph.ForwardingNetwork.nodes():0 -> nodes
    2:2:java.util.Set com.google.common.graph.ForwardingNetwork.nodes():0:0 -> nodes
    2:2:java.util.Set com.google.common.graph.ForwardingNetwork.nodes():0 -> nodes
    1:1:com.google.common.graph.Network delegate():0:0 -> outDegree
    1:1:int outDegree(java.lang.Object):0 -> outDegree
    2:2:int outDegree(java.lang.Object):0:0 -> outDegree
    1:1:com.google.common.graph.Network delegate():0:0 -> outEdges
    1:1:java.util.Set outEdges(java.lang.Object):0 -> outEdges
    2:2:java.util.Set outEdges(java.lang.Object):0:0 -> outEdges
    1:1:com.google.common.graph.Network delegate():0:0 -> predecessors
    1:1:java.util.Set predecessors(java.lang.Object):0 -> predecessors
    1:1:java.lang.Iterable predecessors(java.lang.Object):0 -> predecessors
    2:2:java.util.Set predecessors(java.lang.Object):0:0 -> predecessors
    2:2:java.lang.Iterable predecessors(java.lang.Object):0 -> predecessors
    3:3:com.google.common.graph.Network delegate():0:0 -> predecessors
    3:3:java.util.Set predecessors(java.lang.Object):0 -> predecessors
    4:4:java.util.Set predecessors(java.lang.Object):0:0 -> predecessors
    1:1:com.google.common.graph.Network delegate():0:0 -> successors
    1:1:java.util.Set successors(java.lang.Object):0 -> successors
    1:1:java.lang.Iterable successors(java.lang.Object):0 -> successors
    2:2:java.util.Set successors(java.lang.Object):0:0 -> successors
    2:2:java.lang.Iterable successors(java.lang.Object):0 -> successors
    3:3:com.google.common.graph.Network delegate():0:0 -> successors
    3:3:java.util.Set successors(java.lang.Object):0 -> successors
    4:4:java.util.Set successors(java.lang.Object):0:0 -> successors
com.google.common.graph.Graphs$TransposedValueGraph -> com.google.common.graph.c1:
    com.google.common.graph.ValueGraph graph -> a
    1:1:void com.google.common.graph.ForwardingValueGraph.<init>():0:0 -> <init>
    1:1:void <init>(com.google.common.graph.ValueGraph):0 -> <init>
    2:2:void <init>(com.google.common.graph.ValueGraph):0:0 -> <init>
    com.google.common.graph.ValueGraph access$100(com.google.common.graph.Graphs$TransposedValueGraph) -> a
    1:1:com.google.common.graph.ValueGraph delegate():0:0 -> adjacentNodes
    1:1:java.util.Set com.google.common.graph.ForwardingValueGraph.adjacentNodes(java.lang.Object):0 -> adjacentNodes
    1:1:java.util.Set com.google.common.graph.ForwardingValueGraph.adjacentNodes(java.lang.Object):0 -> adjacentNodes
    2:2:java.util.Set com.google.common.graph.ForwardingValueGraph.adjacentNodes(java.lang.Object):0:0 -> adjacentNodes
    2:2:java.util.Set com.google.common.graph.ForwardingValueGraph.adjacentNodes(java.lang.Object):0 -> adjacentNodes
    1:1:com.google.common.graph.ValueGraph delegate():0:0 -> allowsSelfLoops
    1:1:boolean com.google.common.graph.ForwardingValueGraph.allowsSelfLoops():0 -> allowsSelfLoops
    1:1:boolean com.google.common.graph.ForwardingValueGraph.allowsSelfLoops():0 -> allowsSelfLoops
    2:2:boolean com.google.common.graph.ForwardingValueGraph.allowsSelfLoops():0:0 -> allowsSelfLoops
    2:2:boolean com.google.common.graph.ForwardingValueGraph.allowsSelfLoops():0 -> allowsSelfLoops
    int com.google.common.graph.ForwardingValueGraph.degree(java.lang.Object) -> degree
    1:1:com.google.common.graph.ValueGraph delegate():0:0 -> degree$com$google$common$graph$ForwardingValueGraph
    1:1:int com.google.common.graph.ForwardingValueGraph.degree(java.lang.Object):0 -> degree$com$google$common$graph$ForwardingValueGraph
    2:2:int com.google.common.graph.ForwardingValueGraph.degree(java.lang.Object):0:0 -> degree$com$google$common$graph$ForwardingValueGraph
    long com.google.common.graph.ForwardingValueGraph.edgeCount() -> edgeCount
    1:1:com.google.common.graph.ValueGraph delegate():0:0 -> edgeCount$com$google$common$graph$ForwardingValueGraph
    1:1:long com.google.common.graph.ForwardingValueGraph.edgeCount():0 -> edgeCount$com$google$common$graph$ForwardingValueGraph
    2:2:long com.google.common.graph.ForwardingValueGraph.edgeCount():0:0 -> edgeCount$com$google$common$graph$ForwardingValueGraph
    1:1:com.google.common.graph.ValueGraph delegate():0:0 -> edgeValue
    1:1:java.util.Optional edgeValue(com.google.common.graph.EndpointPair):0 -> edgeValue
    2:2:java.util.Optional edgeValue(com.google.common.graph.EndpointPair):0:0 -> edgeValue
    3:3:com.google.common.graph.ValueGraph delegate():0:0 -> edgeValue
    3:3:java.util.Optional edgeValue(java.lang.Object,java.lang.Object):0 -> edgeValue
    4:4:java.util.Optional edgeValue(java.lang.Object,java.lang.Object):0:0 -> edgeValue
    1:1:com.google.common.graph.ValueGraph delegate():0:0 -> edgeValueOrDefault
    1:1:java.lang.Object edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object):0 -> edgeValueOrDefault
    2:2:java.lang.Object edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object):0:0 -> edgeValueOrDefault
    3:3:com.google.common.graph.ValueGraph delegate():0:0 -> edgeValueOrDefault
    3:3:java.lang.Object edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object):0 -> edgeValueOrDefault
    4:4:java.lang.Object edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object):0:0 -> edgeValueOrDefault
    1:1:com.google.common.graph.ValueGraph delegate():0:0 -> hasEdgeConnecting
    1:1:boolean hasEdgeConnecting(com.google.common.graph.EndpointPair):0 -> hasEdgeConnecting
    2:2:boolean hasEdgeConnecting(com.google.common.graph.EndpointPair):0:0 -> hasEdgeConnecting
    3:3:com.google.common.graph.ValueGraph delegate():0:0 -> hasEdgeConnecting
    3:3:boolean hasEdgeConnecting(java.lang.Object,java.lang.Object):0 -> hasEdgeConnecting
    4:4:boolean hasEdgeConnecting(java.lang.Object,java.lang.Object):0:0 -> hasEdgeConnecting
    1:1:com.google.common.graph.ValueGraph delegate():0:0 -> inDegree
    1:1:int inDegree(java.lang.Object):0 -> inDegree
    2:2:int inDegree(java.lang.Object):0:0 -> inDegree
    com.google.common.graph.ElementOrder com.google.common.graph.ForwardingValueGraph.incidentEdgeOrder() -> incidentEdgeOrder
    1:1:com.google.common.graph.ValueGraph delegate():0:0 -> incidentEdgeOrder$com$google$common$graph$ForwardingValueGraph
    1:1:com.google.common.graph.ElementOrder com.google.common.graph.ForwardingValueGraph.incidentEdgeOrder():0 -> incidentEdgeOrder$com$google$common$graph$ForwardingValueGraph
    2:2:com.google.common.graph.ElementOrder com.google.common.graph.ForwardingValueGraph.incidentEdgeOrder():0:0 -> incidentEdgeOrder$com$google$common$graph$ForwardingValueGraph
    1:1:com.google.common.graph.ValueGraph delegate():0:0 -> isDirected
    1:1:boolean com.google.common.graph.ForwardingValueGraph.isDirected():0 -> isDirected
    1:1:boolean com.google.common.graph.ForwardingValueGraph.isDirected():0 -> isDirected
    2:2:boolean com.google.common.graph.ForwardingValueGraph.isDirected():0:0 -> isDirected
    2:2:boolean com.google.common.graph.ForwardingValueGraph.isDirected():0 -> isDirected
    1:1:com.google.common.graph.ValueGraph delegate():0:0 -> nodeOrder
    1:1:com.google.common.graph.ElementOrder com.google.common.graph.ForwardingValueGraph.nodeOrder():0 -> nodeOrder
    1:1:com.google.common.graph.ElementOrder com.google.common.graph.ForwardingValueGraph.nodeOrder():0 -> nodeOrder
    2:2:com.google.common.graph.ElementOrder com.google.common.graph.ForwardingValueGraph.nodeOrder():0:0 -> nodeOrder
    2:2:com.google.common.graph.ElementOrder com.google.common.graph.ForwardingValueGraph.nodeOrder():0 -> nodeOrder
    1:1:com.google.common.graph.ValueGraph delegate():0:0 -> nodes
    1:1:java.util.Set com.google.common.graph.ForwardingValueGraph.nodes():0 -> nodes
    1:1:java.util.Set com.google.common.graph.ForwardingValueGraph.nodes():0 -> nodes
    2:2:java.util.Set com.google.common.graph.ForwardingValueGraph.nodes():0:0 -> nodes
    2:2:java.util.Set com.google.common.graph.ForwardingValueGraph.nodes():0 -> nodes
    1:1:com.google.common.graph.ValueGraph delegate():0:0 -> outDegree
    1:1:int outDegree(java.lang.Object):0 -> outDegree
    2:2:int outDegree(java.lang.Object):0:0 -> outDegree
    1:1:com.google.common.graph.ValueGraph delegate():0:0 -> predecessors
    1:1:java.util.Set predecessors(java.lang.Object):0 -> predecessors
    1:1:java.lang.Iterable predecessors(java.lang.Object):0 -> predecessors
    2:2:java.util.Set predecessors(java.lang.Object):0:0 -> predecessors
    2:2:java.lang.Iterable predecessors(java.lang.Object):0 -> predecessors
    3:3:com.google.common.graph.ValueGraph delegate():0:0 -> predecessors
    3:3:java.util.Set predecessors(java.lang.Object):0 -> predecessors
    4:4:java.util.Set predecessors(java.lang.Object):0:0 -> predecessors
    1:1:com.google.common.graph.ValueGraph delegate():0:0 -> successors
    1:1:java.util.Set successors(java.lang.Object):0 -> successors
    1:1:java.lang.Iterable successors(java.lang.Object):0 -> successors
    2:2:java.util.Set successors(java.lang.Object):0:0 -> successors
    2:2:java.lang.Iterable successors(java.lang.Object):0 -> successors
    3:3:com.google.common.graph.ValueGraph delegate():0:0 -> successors
    3:3:java.util.Set successors(java.lang.Object):0 -> successors
    4:4:java.util.Set successors(java.lang.Object):0:0 -> successors
com.google.common.graph.ImmutableGraph -> com.google.common.graph.ImmutableGraph:
    com.google.common.graph.BaseGraph backingGraph -> a
    1:1:com.google.common.collect.ImmutableMap getNodeConnections(com.google.common.graph.Graph):0:0 -> copyOf
    1:1:com.google.common.graph.ImmutableGraph copyOf(com.google.common.graph.Graph):0 -> copyOf
    2:2:com.google.common.graph.GraphConnections connectionsOf(com.google.common.graph.Graph,java.lang.Object):0:0 -> copyOf
    2:2:com.google.common.collect.ImmutableMap getNodeConnections(com.google.common.graph.Graph):0 -> copyOf
    2:2:com.google.common.graph.ImmutableGraph copyOf(com.google.common.graph.Graph):0 -> copyOf
    3:3:com.google.common.collect.ImmutableMap getNodeConnections(com.google.common.graph.Graph):0:0 -> copyOf
    3:3:com.google.common.graph.ImmutableGraph copyOf(com.google.common.graph.Graph):0 -> copyOf
    4:4:com.google.common.graph.ImmutableGraph copyOf(com.google.common.graph.Graph):0:0 -> copyOf
com.google.common.graph.ImmutableGraph$Builder -> com.google.common.graph.ImmutableGraph$Builder:
    com.google.common.graph.MutableGraph mutableGraph -> a
com.google.common.graph.ImmutableNetwork -> com.google.common.graph.ImmutableNetwork:
    1:1:java.util.Map getNodeConnections(com.google.common.graph.Network):0:0 -> <init>
    1:1:void <init>(com.google.common.graph.Network):0 -> <init>
    2:2:com.google.common.graph.NetworkConnections connectionsOf(com.google.common.graph.Network,java.lang.Object):0:0 -> <init>
    2:2:java.util.Map getNodeConnections(com.google.common.graph.Network):0 -> <init>
    2:2:void <init>(com.google.common.graph.Network):0 -> <init>
    3:3:com.google.common.base.Function sourceNodeFn(com.google.common.graph.Network):0:0 -> <init>
    3:3:com.google.common.graph.NetworkConnections connectionsOf(com.google.common.graph.Network,java.lang.Object):0 -> <init>
    3:3:java.util.Map getNodeConnections(com.google.common.graph.Network):0 -> <init>
    3:3:void <init>(com.google.common.graph.Network):0 -> <init>
    4:4:com.google.common.graph.NetworkConnections connectionsOf(com.google.common.graph.Network,java.lang.Object):0:0 -> <init>
    4:4:java.util.Map getNodeConnections(com.google.common.graph.Network):0 -> <init>
    4:4:void <init>(com.google.common.graph.Network):0 -> <init>
    5:5:com.google.common.base.Function targetNodeFn(com.google.common.graph.Network):0:0 -> <init>
    5:5:com.google.common.graph.NetworkConnections connectionsOf(com.google.common.graph.Network,java.lang.Object):0 -> <init>
    5:5:java.util.Map getNodeConnections(com.google.common.graph.Network):0 -> <init>
    5:5:void <init>(com.google.common.graph.Network):0 -> <init>
    6:6:com.google.common.graph.NetworkConnections connectionsOf(com.google.common.graph.Network,java.lang.Object):0:0 -> <init>
    6:6:java.util.Map getNodeConnections(com.google.common.graph.Network):0 -> <init>
    6:6:void <init>(com.google.common.graph.Network):0 -> <init>
    7:7:com.google.common.graph.DirectedNetworkConnections com.google.common.graph.DirectedNetworkConnections.ofImmutable(java.util.Map,java.util.Map,int):0:0 -> <init>
    7:7:com.google.common.graph.NetworkConnections connectionsOf(com.google.common.graph.Network,java.lang.Object):0 -> <init>
    7:7:java.util.Map getNodeConnections(com.google.common.graph.Network):0 -> <init>
    7:7:void <init>(com.google.common.graph.Network):0 -> <init>
    8:8:com.google.common.graph.NetworkConnections connectionsOf(com.google.common.graph.Network,java.lang.Object):0:0 -> <init>
    8:8:java.util.Map getNodeConnections(com.google.common.graph.Network):0 -> <init>
    8:8:void <init>(com.google.common.graph.Network):0 -> <init>
    9:9:com.google.common.base.Function adjacentNodeFn(com.google.common.graph.Network,java.lang.Object):0:0 -> <init>
    9:9:com.google.common.graph.NetworkConnections connectionsOf(com.google.common.graph.Network,java.lang.Object):0 -> <init>
    9:9:java.util.Map getNodeConnections(com.google.common.graph.Network):0 -> <init>
    9:9:void <init>(com.google.common.graph.Network):0 -> <init>
    10:10:com.google.common.graph.NetworkConnections connectionsOf(com.google.common.graph.Network,java.lang.Object):0:0 -> <init>
    10:10:java.util.Map getNodeConnections(com.google.common.graph.Network):0 -> <init>
    10:10:void <init>(com.google.common.graph.Network):0 -> <init>
    11:11:com.google.common.graph.UndirectedNetworkConnections com.google.common.graph.UndirectedNetworkConnections.ofImmutable(java.util.Map):0:0 -> <init>
    11:11:com.google.common.graph.NetworkConnections connectionsOf(com.google.common.graph.Network,java.lang.Object):0 -> <init>
    11:11:java.util.Map getNodeConnections(com.google.common.graph.Network):0 -> <init>
    11:11:void <init>(com.google.common.graph.Network):0 -> <init>
    12:12:java.util.Map getNodeConnections(com.google.common.graph.Network):0:0 -> <init>
    12:12:void <init>(com.google.common.graph.Network):0 -> <init>
    13:13:java.util.Map getEdgeToReferenceNode(com.google.common.graph.Network):0:0 -> <init>
    13:13:void <init>(com.google.common.graph.Network):0 -> <init>
    14:14:void <init>(com.google.common.graph.Network):0:0 -> <init>
com.google.common.graph.ImmutableNetwork$1 -> com.google.common.graph.d1:
    com.google.common.graph.Network val$network -> a
com.google.common.graph.ImmutableNetwork$2 -> com.google.common.graph.e1:
    com.google.common.graph.Network val$network -> a
com.google.common.graph.ImmutableNetwork$3 -> com.google.common.graph.f1:
    java.lang.Object val$node -> b
    com.google.common.graph.Network val$network -> a
com.google.common.graph.ImmutableNetwork$Builder -> com.google.common.graph.ImmutableNetwork$Builder:
    com.google.common.graph.MutableNetwork mutableNetwork -> a
com.google.common.graph.ImmutableValueGraph -> com.google.common.graph.ImmutableValueGraph:
    1:1:com.google.common.collect.ImmutableMap getNodeConnections(com.google.common.graph.ValueGraph):0:0 -> <init>
    1:1:void <init>(com.google.common.graph.ValueGraph):0 -> <init>
    2:2:com.google.common.graph.GraphConnections connectionsOf(com.google.common.graph.ValueGraph,java.lang.Object):0:0 -> <init>
    2:2:com.google.common.collect.ImmutableMap getNodeConnections(com.google.common.graph.ValueGraph):0 -> <init>
    2:2:void <init>(com.google.common.graph.ValueGraph):0 -> <init>
    3:3:com.google.common.collect.ImmutableMap getNodeConnections(com.google.common.graph.ValueGraph):0:0 -> <init>
    3:3:void <init>(com.google.common.graph.ValueGraph):0 -> <init>
    4:4:void <init>(com.google.common.graph.ValueGraph):0:0 -> <init>
com.google.common.graph.ImmutableValueGraph$1 -> com.google.common.graph.g1:
    java.lang.Object val$node -> b
    com.google.common.graph.ValueGraph val$graph -> a
com.google.common.graph.ImmutableValueGraph$Builder -> com.google.common.graph.ImmutableValueGraph$Builder:
    com.google.common.graph.MutableValueGraph mutableValueGraph -> a
com.google.common.graph.IncidentEdgeSet -> com.google.common.graph.h1:
    com.google.common.graph.BaseGraph graph -> b
    java.lang.Object node -> a
com.google.common.graph.MapIteratorCache -> com.google.common.graph.k1:
    java.util.Map backingMap -> a
    java.util.Map$Entry cacheEntry -> b
    java.util.Map access$000(com.google.common.graph.MapIteratorCache) -> a
    java.util.Map$Entry access$102(com.google.common.graph.MapIteratorCache,java.util.Map$Entry) -> b
    1:1:java.lang.Object getWithoutCaching(java.lang.Object):0:0 -> get
    1:1:java.lang.Object get(java.lang.Object):0 -> get
com.google.common.graph.MapIteratorCache$1 -> com.google.common.graph.j1:
    com.google.common.graph.MapIteratorCache this$0 -> a
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.graph.MapIteratorCache$1$1 -> com.google.common.graph.i1:
    java.util.Iterator val$entryIterator -> a
    com.google.common.graph.MapIteratorCache$1 this$1 -> b
com.google.common.graph.MapRetrievalCache -> com.google.common.graph.m1:
    com.google.common.graph.MapRetrievalCache$CacheEntry cacheEntry1 -> c
    com.google.common.graph.MapRetrievalCache$CacheEntry cacheEntry2 -> d
    1:1:void addToCache(java.lang.Object,java.lang.Object):0:0 -> get
    1:1:java.lang.Object get(java.lang.Object):0 -> get
    2:2:void addToCache(com.google.common.graph.MapRetrievalCache$CacheEntry):0:0 -> get
    2:2:void addToCache(java.lang.Object,java.lang.Object):0 -> get
    2:2:java.lang.Object get(java.lang.Object):0 -> get
    1:1:void addToCache(com.google.common.graph.MapRetrievalCache$CacheEntry):0:0 -> getIfCached
    1:1:java.lang.Object getIfCached(java.lang.Object):0 -> getIfCached
    2:2:java.lang.Object getIfCached(java.lang.Object):0:0 -> getIfCached
com.google.common.graph.MapRetrievalCache$CacheEntry -> com.google.common.graph.l1:
    java.lang.Object value -> b
    java.lang.Object key -> a
com.google.common.graph.MultiEdgesConnecting -> com.google.common.graph.o1:
    java.util.Map outEdgeToNode -> a
    java.lang.Object targetNode -> b
    java.lang.Object access$000(com.google.common.graph.MultiEdgesConnecting) -> a
    1:1:com.google.common.collect.UnmodifiableIterator iterator():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.graph.MultiEdgesConnecting$1 -> com.google.common.graph.n1:
    java.util.Iterator val$entries -> c
    com.google.common.graph.MultiEdgesConnecting this$0 -> d
com.google.common.graph.NetworkBuilder -> com.google.common.graph.NetworkBuilder:
    boolean allowsParallelEdges -> f
    com.google.common.graph.ElementOrder edgeOrder -> g
    com.google.common.base.Optional expectedEdgeCount -> h
com.google.common.graph.NetworkConnections -> com.google.common.graph.p1:
com.google.common.graph.StandardMutableGraph -> com.google.common.graph.q1:
    com.google.common.graph.MutableValueGraph backingValueGraph -> a
    1:1:boolean removeEdge(java.lang.Object,java.lang.Object):0:0 -> removeEdge
    1:1:boolean removeEdge(com.google.common.graph.EndpointPair):0 -> removeEdge
com.google.common.graph.StandardMutableNetwork -> com.google.common.graph.r1:
    1:1:void com.google.common.graph.StandardNetwork.<init>(com.google.common.graph.NetworkBuilder):0:0 -> <init>
    1:1:void <init>(com.google.common.graph.NetworkBuilder):0 -> <init>
    1:1:com.google.common.graph.NetworkConnections newConnections():0:0 -> a
    1:1:com.google.common.graph.NetworkConnections addNodeInternal(java.lang.Object):0 -> a
    2:2:com.google.common.graph.DirectedNetworkConnections com.google.common.graph.DirectedNetworkConnections.of():0:0 -> a
    2:2:com.google.common.graph.NetworkConnections newConnections():0 -> a
    2:2:com.google.common.graph.NetworkConnections addNodeInternal(java.lang.Object):0 -> a
    3:3:com.google.common.graph.NetworkConnections newConnections():0:0 -> a
    3:3:com.google.common.graph.NetworkConnections addNodeInternal(java.lang.Object):0 -> a
    4:4:com.google.common.graph.UndirectedNetworkConnections com.google.common.graph.UndirectedNetworkConnections.of():0:0 -> a
    4:4:com.google.common.graph.NetworkConnections newConnections():0 -> a
    4:4:com.google.common.graph.NetworkConnections addNodeInternal(java.lang.Object):0 -> a
    5:5:com.google.common.graph.NetworkConnections addNodeInternal(java.lang.Object):0:0 -> a
    1:1:boolean removeEdge(java.lang.Object):0:0 -> removeNode
    1:1:boolean removeNode(java.lang.Object):0 -> removeNode
    2:2:boolean removeNode(java.lang.Object):0:0 -> removeNode
com.google.common.graph.StandardMutableValueGraph -> com.google.common.graph.s1:
    com.google.common.graph.ElementOrder incidentEdgeOrder -> d
    1:1:void com.google.common.graph.StandardValueGraph.<init>(com.google.common.graph.AbstractGraphBuilder):0:0 -> <init>
    1:1:void <init>(com.google.common.graph.AbstractGraphBuilder):0 -> <init>
    2:2:void <init>(com.google.common.graph.AbstractGraphBuilder):0:0 -> <init>
    3:3:com.google.common.graph.ElementOrder com.google.common.graph.ElementOrder.cast():0:0 -> <init>
    3:3:void <init>(com.google.common.graph.AbstractGraphBuilder):0 -> <init>
    4:4:void <init>(com.google.common.graph.AbstractGraphBuilder):0:0 -> <init>
    1:1:com.google.common.graph.GraphConnections newConnections():0:0 -> a
    1:1:com.google.common.graph.GraphConnections addNodeInternal(java.lang.Object):0 -> a
    2:2:com.google.common.graph.GraphConnections addNodeInternal(java.lang.Object):0:0 -> a
    1:1:long com.google.common.graph.Graphs.checkPositive(long):0:0 -> putEdgeValue
    1:1:java.lang.Object putEdgeValue(java.lang.Object,java.lang.Object,java.lang.Object):0 -> putEdgeValue
com.google.common.graph.StandardNetwork -> com.google.common.graph.t1:
    com.google.common.graph.ElementOrder nodeOrder -> d
    com.google.common.graph.ElementOrder edgeOrder -> e
    boolean isDirected -> a
    boolean allowsParallelEdges -> b
    boolean allowsSelfLoops -> c
    1:1:com.google.common.graph.ElementOrder com.google.common.graph.ElementOrder.cast():0:0 -> <init>
    1:1:void <init>(com.google.common.graph.NetworkBuilder,java.util.Map,java.util.Map):0 -> <init>
    2:2:void <init>(com.google.common.graph.NetworkBuilder,java.util.Map,java.util.Map):0:0 -> <init>
    3:3:com.google.common.graph.ElementOrder com.google.common.graph.ElementOrder.cast():0:0 -> <init>
    3:3:void <init>(com.google.common.graph.NetworkBuilder,java.util.Map,java.util.Map):0 -> <init>
    4:4:void <init>(com.google.common.graph.NetworkBuilder,java.util.Map,java.util.Map):0:0 -> <init>
    1:1:java.util.Set com.google.common.graph.MapIteratorCache.unmodifiableKeySet():0:0 -> edges
    1:1:java.util.Set edges():0 -> edges
    1:1:java.util.Set com.google.common.graph.MapIteratorCache.unmodifiableKeySet():0:0 -> nodes
    1:1:java.util.Set nodes():0 -> nodes
com.google.common.graph.StandardValueGraph -> com.google.common.graph.v1:
    com.google.common.graph.ElementOrder nodeOrder -> c
    boolean isDirected -> a
    boolean allowsSelfLoops -> b
    1:1:com.google.common.graph.ElementOrder com.google.common.graph.ElementOrder.cast():0:0 -> <init>
    1:1:void <init>(com.google.common.graph.AbstractGraphBuilder,java.util.Map,long):0 -> <init>
    2:2:void <init>(com.google.common.graph.AbstractGraphBuilder,java.util.Map,long):0:0 -> <init>
    1:1:java.util.Set com.google.common.graph.MapIteratorCache.unmodifiableKeySet():0:0 -> nodes
    1:1:java.util.Set nodes():0 -> nodes
com.google.common.graph.StandardValueGraph$1 -> com.google.common.graph.u1:
    com.google.common.graph.GraphConnections val$connections -> c
com.google.common.graph.Traverser -> com.google.common.graph.Traverser:
    com.google.common.graph.SuccessorsFunction successorFunction -> a
    1:1:void <init>(com.google.common.graph.SuccessorsFunction):0:0 -> <init>
    1:1:void <init>(com.google.common.graph.SuccessorsFunction,com.google.common.graph.Traverser$1):0 -> <init>
    com.google.common.graph.Traverser$Traversal newTraversal() -> a
    com.google.common.collect.ImmutableSet validate(java.lang.Iterable) -> b
com.google.common.graph.Traverser$1 -> com.google.common.graph.w1:
    com.google.common.graph.SuccessorsFunction val$graph -> b
    1:1:com.google.common.graph.Traverser$Traversal com.google.common.graph.Traverser$Traversal.inGraph(com.google.common.graph.SuccessorsFunction):0:0 -> a
    1:1:com.google.common.graph.Traverser$Traversal newTraversal():0 -> a
com.google.common.graph.Traverser$2 -> com.google.common.graph.x1:
    com.google.common.graph.SuccessorsFunction val$tree -> b
    1:1:com.google.common.graph.Traverser$Traversal com.google.common.graph.Traverser$Traversal.inTree(com.google.common.graph.SuccessorsFunction):0:0 -> a
    1:1:com.google.common.graph.Traverser$Traversal newTraversal():0 -> a
com.google.common.graph.Traverser$3 -> com.google.common.graph.y1:
    com.google.common.collect.ImmutableSet val$validated -> a
    com.google.common.graph.Traverser this$0 -> b
    1:1:java.util.Iterator com.google.common.graph.Traverser$Traversal.breadthFirst(java.util.Iterator):0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
    2:2:java.util.Iterator com.google.common.graph.Traverser$Traversal.topDown(java.util.Iterator,com.google.common.graph.Traverser$InsertionOrder):0:0 -> iterator
    2:2:java.util.Iterator com.google.common.graph.Traverser$Traversal.breadthFirst(java.util.Iterator):0 -> iterator
    2:2:java.util.Iterator iterator():0 -> iterator
com.google.common.graph.Traverser$4 -> com.google.common.graph.z1:
    com.google.common.collect.ImmutableSet val$validated -> a
    com.google.common.graph.Traverser this$0 -> b
    1:1:java.util.Iterator com.google.common.graph.Traverser$Traversal.preOrder(java.util.Iterator):0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
    2:2:java.util.Iterator com.google.common.graph.Traverser$Traversal.topDown(java.util.Iterator,com.google.common.graph.Traverser$InsertionOrder):0:0 -> iterator
    2:2:java.util.Iterator com.google.common.graph.Traverser$Traversal.preOrder(java.util.Iterator):0 -> iterator
    2:2:java.util.Iterator iterator():0 -> iterator
com.google.common.graph.Traverser$5 -> com.google.common.graph.a2:
    com.google.common.collect.ImmutableSet val$validated -> a
    com.google.common.graph.Traverser this$0 -> b
    1:1:java.util.Iterator com.google.common.graph.Traverser$Traversal.postOrder(java.util.Iterator):0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.graph.Traverser$InsertionOrder -> com.google.common.graph.d2:
    com.google.common.graph.Traverser$InsertionOrder FRONT -> a
    com.google.common.graph.Traverser$InsertionOrder BACK -> b
    com.google.common.graph.Traverser$InsertionOrder[] $VALUES -> c
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:void <init>(java.lang.String,int,com.google.common.graph.Traverser$1):0 -> <init>
    void insertInto(java.util.Deque,java.lang.Object) -> a
com.google.common.graph.Traverser$InsertionOrder$1 -> com.google.common.graph.b2:
    void insertInto(java.util.Deque,java.lang.Object) -> a
com.google.common.graph.Traverser$InsertionOrder$2 -> com.google.common.graph.c2:
    void insertInto(java.util.Deque,java.lang.Object) -> a
com.google.common.graph.Traverser$Traversal -> com.google.common.graph.i2:
    com.google.common.graph.SuccessorsFunction successorFunction -> a
    java.lang.Object visitNext(java.util.Deque) -> a
com.google.common.graph.Traverser$Traversal$1 -> com.google.common.graph.e2:
    java.util.Set val$visited -> b
    java.lang.Object visitNext(java.util.Deque) -> a
com.google.common.graph.Traverser$Traversal$2 -> com.google.common.graph.f2:
    java.lang.Object visitNext(java.util.Deque) -> a
com.google.common.graph.Traverser$Traversal$3 -> com.google.common.graph.g2:
    java.util.Deque val$horizon -> c
    com.google.common.graph.Traverser$InsertionOrder val$order -> d
    com.google.common.graph.Traverser$Traversal this$0 -> e
com.google.common.graph.Traverser$Traversal$4 -> com.google.common.graph.h2:
    java.util.Deque val$ancestorStack -> d
    java.util.Deque val$horizon -> c
    com.google.common.graph.Traverser$Traversal this$0 -> e
com.google.common.graph.UndirectedGraphConnections -> com.google.common.graph.k2:
    java.util.Map adjacentNodeValues -> a
    com.google.common.graph.UndirectedGraphConnections of(com.google.common.graph.ElementOrder) -> a
    1:1:java.lang.Object addSuccessor(java.lang.Object,java.lang.Object):0:0 -> addPredecessor
    1:1:void addPredecessor(java.lang.Object,java.lang.Object):0 -> addPredecessor
    com.google.common.graph.UndirectedGraphConnections ofImmutable(java.util.Map) -> b
    1:1:java.lang.Object removeSuccessor(java.lang.Object):0:0 -> removePredecessor
    1:1:void removePredecessor(java.lang.Object):0 -> removePredecessor
com.google.common.graph.UndirectedGraphConnections$1 -> com.google.common.graph.j2:
    java.lang.Object val$thisNode -> a
    1:1:com.google.common.graph.EndpointPair apply(java.lang.Object):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.graph.UndirectedMultiNetworkConnections -> com.google.common.graph.m2:
    java.lang.ref.Reference adjacentNodesReference -> b
    com.google.common.collect.Multiset access$000(com.google.common.graph.UndirectedMultiNetworkConnections) -> a
    com.google.common.collect.Multiset adjacentNodesMultiset() -> b
    java.lang.Object getReference(java.lang.ref.Reference) -> c
    com.google.common.graph.UndirectedMultiNetworkConnections of() -> d
    com.google.common.graph.UndirectedMultiNetworkConnections ofImmutable(java.util.Map) -> e
    1:1:java.lang.Object com.google.common.graph.AbstractUndirectedNetworkConnections.removeOutEdge(java.lang.Object):0:0 -> removeOutEdge
    1:1:java.lang.Object removeOutEdge(java.lang.Object):0 -> removeOutEdge
    2:2:java.lang.Object removeOutEdge(java.lang.Object):0:0 -> removeOutEdge
com.google.common.graph.UndirectedMultiNetworkConnections$1 -> com.google.common.graph.l2:
    com.google.common.graph.UndirectedMultiNetworkConnections this$0 -> d
    java.lang.Object val$node -> c
com.google.common.graph.UndirectedNetworkConnections -> com.google.common.graph.n2:
com.google.common.graph.ValueGraphBuilder -> com.google.common.graph.ValueGraphBuilder:
    com.google.common.graph.ValueGraphBuilder copy() -> a
com.google.common.hash.-$$Lambda$34GNz1QOs-rD1VhFshY69jjgHBY -> com.google.common.hash.a:
    com.google.common.hash.-$$Lambda$34GNz1QOs-rD1VhFshY69jjgHBY INSTANCE -> a
com.google.common.hash.-$$Lambda$BloomFilter$bYHgOZxJftGbm8MSCPdAxjcRRqQ -> com.google.common.hash.b:
    com.google.common.hash.Funnel f$0 -> a
    long f$1 -> b
    double f$2 -> c
    1:1:com.google.common.hash.BloomFilter com.google.common.hash.BloomFilter.lambda$toBloomFilter$0(com.google.common.hash.Funnel,long,double):0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.hash.-$$Lambda$BloomFilter$pSEydPrAyNXsjsY_dC-h1gp0mtI -> com.google.common.hash.c:
    com.google.common.hash.-$$Lambda$BloomFilter$pSEydPrAyNXsjsY_dC-h1gp0mtI INSTANCE -> a
    1:1:com.google.common.hash.BloomFilter com.google.common.hash.BloomFilter.lambda$toBloomFilter$1(com.google.common.hash.BloomFilter,com.google.common.hash.BloomFilter):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object,java.lang.Object):0 -> apply
com.google.common.hash.AbstractByteHasher -> com.google.common.hash.d:
    java.nio.ByteBuffer scratch -> a
    1:1:void com.google.common.hash.Java8Compatibility.clear(java.nio.Buffer):0:0 -> a
    1:1:com.google.common.hash.Hasher update(int):0 -> a
    2:2:com.google.common.hash.Hasher update(int):0:0 -> a
    3:3:void com.google.common.hash.Java8Compatibility.clear(java.nio.Buffer):0:0 -> a
    3:3:com.google.common.hash.Hasher update(int):0 -> a
    4:4:com.google.common.hash.Hasher update(int):0:0 -> a
    1:1:com.google.common.hash.Hasher putByte(byte):0:0 -> putByte
    1:1:com.google.common.hash.PrimitiveSink putByte(byte):0 -> putByte
    1:1:com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer):0:0 -> putBytes
    1:1:com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer):0 -> putBytes
    2:2:com.google.common.hash.Hasher putBytes(byte[]):0:0 -> putBytes
    2:2:com.google.common.hash.PrimitiveSink putBytes(byte[]):0 -> putBytes
    3:3:com.google.common.hash.Hasher putBytes(byte[],int,int):0:0 -> putBytes
    3:3:com.google.common.hash.PrimitiveSink putBytes(byte[],int,int):0 -> putBytes
    1:1:com.google.common.hash.Hasher putChar(char):0:0 -> putChar
    1:1:com.google.common.hash.PrimitiveSink putChar(char):0 -> putChar
    1:1:com.google.common.hash.Hasher putInt(int):0:0 -> putInt
    1:1:com.google.common.hash.PrimitiveSink putInt(int):0 -> putInt
    1:1:com.google.common.hash.Hasher putLong(long):0:0 -> putLong
    1:1:com.google.common.hash.PrimitiveSink putLong(long):0 -> putLong
    1:1:com.google.common.hash.Hasher putShort(short):0:0 -> putShort
    1:1:com.google.common.hash.PrimitiveSink putShort(short):0 -> putShort
    1:1:void com.google.common.hash.Java8Compatibility.position(java.nio.Buffer,int):0:0 -> update
    1:1:void update(java.nio.ByteBuffer):0 -> update
    2:2:void update(java.nio.ByteBuffer):0:0 -> update
com.google.common.hash.AbstractCompositeHashFunction$1 -> com.google.common.hash.e:
    com.google.common.hash.Hasher[] val$hashers -> a
    com.google.common.hash.AbstractCompositeHashFunction this$0 -> b
    1:1:com.google.common.hash.HashCode com.google.common.hash.Hashing$ConcatenatedHashFunction.makeHash(com.google.common.hash.Hasher[]):0:0 -> hash
    1:1:com.google.common.hash.HashCode hash():0 -> hash
    2:2:com.google.common.hash.HashCode com.google.common.hash.HashCode.fromBytesNoCopy(byte[]):0:0 -> hash
    2:2:com.google.common.hash.HashCode com.google.common.hash.Hashing$ConcatenatedHashFunction.makeHash(com.google.common.hash.Hasher[]):0 -> hash
    2:2:com.google.common.hash.HashCode hash():0 -> hash
    1:1:void com.google.common.hash.Java8Compatibility.position(java.nio.Buffer,int):0:0 -> putBytes
    1:1:com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer):0 -> putBytes
    2:2:com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer):0:0 -> putBytes
com.google.common.hash.AbstractHashFunction -> com.google.common.hash.f:
com.google.common.hash.AbstractHasher -> com.google.common.hash.g:
    1:1:com.google.common.hash.Hasher putBoolean(boolean):0:0 -> putBoolean
    1:1:com.google.common.hash.PrimitiveSink putBoolean(boolean):0 -> putBoolean
com.google.common.hash.AbstractNonStreamingHashFunction -> com.google.common.hash.j:
    1:1:com.google.common.hash.Hasher com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putBytes(java.nio.ByteBuffer):0:0 -> hashBytes
    1:1:com.google.common.hash.HashCode hashBytes(java.nio.ByteBuffer):0 -> hashBytes
    2:2:com.google.common.hash.HashCode hashBytes(java.nio.ByteBuffer):0:0 -> hashBytes
com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher -> com.google.common.hash.h:
    com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream stream -> a
    com.google.common.hash.AbstractNonStreamingHashFunction this$0 -> b
    1:1:com.google.common.hash.Hasher putByte(byte):0:0 -> putByte
    1:1:com.google.common.hash.PrimitiveSink putByte(byte):0 -> putByte
    1:1:com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer):0:0 -> putBytes
    1:1:com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer):0 -> putBytes
    2:2:com.google.common.hash.Hasher putBytes(byte[],int,int):0:0 -> putBytes
    2:2:com.google.common.hash.PrimitiveSink putBytes(byte[],int,int):0 -> putBytes
com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream -> com.google.common.hash.i:
    byte[] byteArray() -> a
    int length() -> b
    void write(java.nio.ByteBuffer) -> c
com.google.common.hash.AbstractStreamingHasher -> com.google.common.hash.k:
    int bufferSize -> b
    java.nio.ByteBuffer buffer -> a
    int chunkSize -> c
    1:1:void <init>(int,int):0:0 -> <init>
    1:1:void <init>(int):0 -> <init>
    1:1:void com.google.common.hash.Java8Compatibility.flip(java.nio.Buffer):0:0 -> a
    1:1:void munch():0 -> a
    2:2:void munch():0:0 -> a
    void munchIfFull() -> b
    com.google.common.hash.Hasher putBytesInternal(java.nio.ByteBuffer) -> c
    1:1:void com.google.common.hash.Java8Compatibility.flip(java.nio.Buffer):0:0 -> hash
    1:1:com.google.common.hash.HashCode hash():0 -> hash
    2:2:com.google.common.hash.HashCode hash():0:0 -> hash
    3:3:void com.google.common.hash.Java8Compatibility.position(java.nio.Buffer,int):0:0 -> hash
    3:3:com.google.common.hash.HashCode hash():0 -> hash
    4:4:com.google.common.hash.HashCode hash():0:0 -> hash
    1:1:com.google.common.hash.Hasher putByte(byte):0:0 -> putByte
    1:1:com.google.common.hash.PrimitiveSink putByte(byte):0 -> putByte
    1:1:com.google.common.hash.Hasher putChar(char):0:0 -> putChar
    1:1:com.google.common.hash.PrimitiveSink putChar(char):0 -> putChar
    1:1:com.google.common.hash.Hasher putInt(int):0:0 -> putInt
    1:1:com.google.common.hash.PrimitiveSink putInt(int):0 -> putInt
    1:1:com.google.common.hash.Hasher putLong(long):0:0 -> putLong
    1:1:com.google.common.hash.PrimitiveSink putLong(long):0 -> putLong
    1:1:com.google.common.hash.Hasher putShort(short):0:0 -> putShort
    1:1:com.google.common.hash.PrimitiveSink putShort(short):0 -> putShort
com.google.common.hash.BloomFilter -> com.google.common.hash.BloomFilter:
    com.google.common.hash.Funnel funnel -> c
    com.google.common.hash.BloomFilterStrategies$LockFreeBitArray bits -> a
    int numHashFunctions -> b
    com.google.common.hash.BloomFilter$Strategy strategy -> d
    long bitSize() -> a
    1:1:com.google.common.hash.BloomFilterStrategies$LockFreeBitArray com.google.common.hash.BloomFilterStrategies$LockFreeBitArray.copy():0:0 -> copy
    1:1:com.google.common.hash.BloomFilter copy():0 -> copy
    2:2:com.google.common.hash.BloomFilter copy():0:0 -> copy
    1:1:com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,long,double,com.google.common.hash.BloomFilter$Strategy):0:0 -> create
    1:1:com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,long,double):0 -> create
    2:2:long optimalNumOfBits(long,double):0:0 -> create
    2:2:com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,long,double,com.google.common.hash.BloomFilter$Strategy):0 -> create
    2:2:com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,long,double):0 -> create
    3:3:int optimalNumOfHashFunctions(long,long):0:0 -> create
    3:3:com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,long,double,com.google.common.hash.BloomFilter$Strategy):0 -> create
    3:3:com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,long,double):0 -> create
    4:4:com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,long,double,com.google.common.hash.BloomFilter$Strategy):0:0 -> create
    4:4:com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,long,double):0 -> create
com.google.common.hash.BloomFilter$Strategy -> com.google.common.hash.l:
com.google.common.hash.BloomFilterStrategies -> com.google.common.hash.p:
    com.google.common.hash.BloomFilterStrategies[] $VALUES -> c
    com.google.common.hash.BloomFilterStrategies MURMUR128_MITZ_64 -> b
    com.google.common.hash.BloomFilterStrategies MURMUR128_MITZ_32 -> a
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:void <init>(java.lang.String,int,com.google.common.hash.BloomFilterStrategies$1):0 -> <init>
com.google.common.hash.BloomFilterStrategies$1 -> com.google.common.hash.m:
com.google.common.hash.BloomFilterStrategies$2 -> com.google.common.hash.n:
    long lowerEight(byte[]) -> a
    long upperEight(byte[]) -> b
com.google.common.hash.BloomFilterStrategies$LockFreeBitArray -> com.google.common.hash.o:
    com.google.common.hash.LongAddable bitCount -> b
    java.util.concurrent.atomic.AtomicLongArray data -> a
    long bitCount() -> a
    long bitSize() -> b
    boolean get(long) -> c
    void putAll(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray) -> d
    boolean set(long) -> e
com.google.common.hash.ChecksumHashFunction -> com.google.common.hash.s:
    com.google.common.hash.ImmutableSupplier checksumSupplier -> a
    int bits -> b
    java.lang.String toString -> c
    int access$100(com.google.common.hash.ChecksumHashFunction) -> a
com.google.common.hash.ChecksumHashFunction$1 -> com.google.common.hash.q:
com.google.common.hash.ChecksumHashFunction$ChecksumHasher -> com.google.common.hash.r:
    com.google.common.hash.ChecksumHashFunction this$0 -> c
    java.util.zip.Checksum checksum -> b
    1:1:void <init>(com.google.common.hash.ChecksumHashFunction,java.util.zip.Checksum):0:0 -> <init>
    1:1:void <init>(com.google.common.hash.ChecksumHashFunction,java.util.zip.Checksum,com.google.common.hash.ChecksumHashFunction$1):0 -> <init>
com.google.common.hash.Crc32cHashFunction -> com.google.common.hash.u:
    com.google.common.hash.HashFunction CRC_32_C -> a
com.google.common.hash.Crc32cHashFunction$Crc32cHasher -> com.google.common.hash.t:
    int[] CRC_TABLE -> c
    int crc -> b
com.google.common.hash.FarmHashFingerprint64 -> com.google.common.hash.v:
    com.google.common.hash.HashFunction FARMHASH_FINGERPRINT_64 -> a
    long hashLength16(long,long,long) -> a
    long shiftMix(long) -> b
    void weakHashLength32WithSeeds(byte[],int,long,long,long[]) -> c
    1:1:long hashLength0to16(byte[],int,int):0:0 -> hashBytes
    1:1:long fingerprint(byte[],int,int):0 -> hashBytes
    1:1:com.google.common.hash.HashCode hashBytes(byte[],int,int):0 -> hashBytes
    2:2:long hashLength17to32(byte[],int,int):0:0 -> hashBytes
    2:2:long fingerprint(byte[],int,int):0 -> hashBytes
    2:2:com.google.common.hash.HashCode hashBytes(byte[],int,int):0 -> hashBytes
    3:3:long hashLength33To64(byte[],int,int):0:0 -> hashBytes
    3:3:long fingerprint(byte[],int,int):0 -> hashBytes
    3:3:com.google.common.hash.HashCode hashBytes(byte[],int,int):0 -> hashBytes
    4:4:long hashLength65Plus(byte[],int,int):0:0 -> hashBytes
    4:4:long fingerprint(byte[],int,int):0 -> hashBytes
    4:4:com.google.common.hash.HashCode hashBytes(byte[],int,int):0 -> hashBytes
    5:5:com.google.common.hash.HashCode hashBytes(byte[],int,int):0:0 -> hashBytes
com.google.common.hash.Funnels$ByteArrayFunnel -> com.google.common.hash.w:
    com.google.common.hash.Funnels$ByteArrayFunnel[] $VALUES -> b
    com.google.common.hash.Funnels$ByteArrayFunnel INSTANCE -> a
    com.google.common.hash.Funnels$ByteArrayFunnel[] $values() -> a
    1:1:void funnel(byte[],com.google.common.hash.PrimitiveSink):0:0 -> funnel
    1:1:void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink):0 -> funnel
com.google.common.hash.Funnels$IntegerFunnel -> com.google.common.hash.x:
    com.google.common.hash.Funnels$IntegerFunnel INSTANCE -> a
    com.google.common.hash.Funnels$IntegerFunnel[] $VALUES -> b
    com.google.common.hash.Funnels$IntegerFunnel[] $values() -> a
    1:1:void funnel(java.lang.Integer,com.google.common.hash.PrimitiveSink):0:0 -> funnel
    1:1:void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink):0 -> funnel
com.google.common.hash.Funnels$LongFunnel -> com.google.common.hash.y:
    com.google.common.hash.Funnels$LongFunnel INSTANCE -> a
    com.google.common.hash.Funnels$LongFunnel[] $VALUES -> b
    com.google.common.hash.Funnels$LongFunnel[] $values() -> a
    1:1:void funnel(java.lang.Long,com.google.common.hash.PrimitiveSink):0:0 -> funnel
    1:1:void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink):0 -> funnel
com.google.common.hash.Funnels$SequentialFunnel -> com.google.common.hash.z:
    com.google.common.hash.Funnel elementFunnel -> a
    1:1:void funnel(java.lang.Iterable,com.google.common.hash.PrimitiveSink):0:0 -> funnel
    1:1:void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink):0 -> funnel
com.google.common.hash.Funnels$SinkAsStream -> com.google.common.hash.a0:
    com.google.common.hash.PrimitiveSink sink -> a
com.google.common.hash.Funnels$StringCharsetFunnel -> com.google.common.hash.b0:
    java.nio.charset.Charset charset -> a
    1:1:void funnel(java.lang.CharSequence,com.google.common.hash.PrimitiveSink):0:0 -> funnel
    1:1:void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink):0 -> funnel
com.google.common.hash.Funnels$UnencodedCharsFunnel -> com.google.common.hash.c0:
    com.google.common.hash.Funnels$UnencodedCharsFunnel[] $VALUES -> b
    com.google.common.hash.Funnels$UnencodedCharsFunnel INSTANCE -> a
    com.google.common.hash.Funnels$UnencodedCharsFunnel[] $values() -> a
    1:1:void funnel(java.lang.CharSequence,com.google.common.hash.PrimitiveSink):0:0 -> funnel
    1:1:void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink):0 -> funnel
com.google.common.hash.HashCode -> com.google.common.hash.HashCode:
    char[] hexDigits -> a
    int $r8$clinit -> b
    int decode(char) -> a
    boolean equalsSameBits(com.google.common.hash.HashCode) -> b
    byte[] getBytesInternal() -> c
    void writeBytesToImpl(byte[],int,int) -> d
    1:1:com.google.common.hash.HashCode fromBytesNoCopy(byte[]):0:0 -> fromBytes
    1:1:com.google.common.hash.HashCode fromBytes(byte[]):0 -> fromBytes
    1:1:com.google.common.hash.HashCode fromBytesNoCopy(byte[]):0:0 -> fromString
    1:1:com.google.common.hash.HashCode fromString(java.lang.String):0 -> fromString
com.google.common.hash.HashCode$BytesHashCode -> com.google.common.hash.d0:
    byte[] bytes -> c
    boolean equalsSameBits(com.google.common.hash.HashCode) -> b
    byte[] getBytesInternal() -> c
    void writeBytesToImpl(byte[],int,int) -> d
com.google.common.hash.HashCode$IntHashCode -> com.google.common.hash.e0:
    int hash -> c
    boolean equalsSameBits(com.google.common.hash.HashCode) -> b
    void writeBytesToImpl(byte[],int,int) -> d
com.google.common.hash.HashCode$LongHashCode -> com.google.common.hash.f0:
    long hash -> c
    boolean equalsSameBits(com.google.common.hash.HashCode) -> b
    void writeBytesToImpl(byte[],int,int) -> d
com.google.common.hash.Hashing -> com.google.common.hash.Hashing:
    int GOOD_FAST_HASH_SEED -> a
    java.lang.String hmacToString(java.lang.String,java.security.Key) -> a
    1:1:com.google.common.hash.HashCode com.google.common.hash.HashCode.fromBytesNoCopy(byte[]):0:0 -> combineOrdered
    1:1:com.google.common.hash.HashCode combineOrdered(java.lang.Iterable):0 -> combineOrdered
    1:1:com.google.common.hash.HashCode com.google.common.hash.HashCode.fromBytesNoCopy(byte[]):0:0 -> combineUnordered
    1:1:com.google.common.hash.HashCode combineUnordered(java.lang.Iterable):0 -> combineUnordered
    1:1:int checkPositiveAndMakeMultipleOf32(int):0:0 -> goodFastHash
    1:1:com.google.common.hash.HashFunction goodFastHash(int):0 -> goodFastHash
    2:2:com.google.common.hash.HashFunction goodFastHash(int):0:0 -> goodFastHash
com.google.common.hash.Hashing$1 -> com.google.common.hash.g0:
com.google.common.hash.Hashing$ChecksumType -> com.google.common.hash.j0:
    com.google.common.hash.Hashing$ChecksumType CRC_32 -> b
    com.google.common.hash.HashFunction hashFunction -> a
    com.google.common.hash.Hashing$ChecksumType ADLER_32 -> c
    com.google.common.hash.Hashing$ChecksumType[] $VALUES -> d
    com.google.common.hash.Hashing$ChecksumType[] $values() -> a
com.google.common.hash.Hashing$ChecksumType$1 -> com.google.common.hash.h0:
    1:1:java.util.zip.Checksum get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.hash.Hashing$ChecksumType$2 -> com.google.common.hash.i0:
    1:1:java.util.zip.Checksum get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.hash.Hashing$ConcatenatedHashFunction -> com.google.common.hash.k0:
    com.google.common.hash.HashFunction[] com.google.common.hash.AbstractCompositeHashFunction.functions -> a
    1:1:void com.google.common.hash.AbstractCompositeHashFunction.<init>(com.google.common.hash.HashFunction[]):0:0 -> <init>
    1:1:void <init>(com.google.common.hash.HashFunction[]):0 -> <init>
    1:1:void <init>(com.google.common.hash.HashFunction[],com.google.common.hash.Hashing$1):0 -> <init>
    2:2:void <init>(com.google.common.hash.HashFunction[]):0:0 -> <init>
    2:2:void <init>(com.google.common.hash.HashFunction[],com.google.common.hash.Hashing$1):0 -> <init>
    1:1:com.google.common.hash.Hasher com.google.common.hash.AbstractCompositeHashFunction.newHasher():0:0 -> newHasher
    1:1:com.google.common.hash.Hasher com.google.common.hash.AbstractCompositeHashFunction.newHasher():0 -> newHasher
    2:2:com.google.common.hash.Hasher com.google.common.hash.AbstractCompositeHashFunction.fromHashers(com.google.common.hash.Hasher[]):0:0 -> newHasher
    2:2:com.google.common.hash.Hasher com.google.common.hash.AbstractCompositeHashFunction.newHasher():0 -> newHasher
    2:2:com.google.common.hash.Hasher com.google.common.hash.AbstractCompositeHashFunction.newHasher():0 -> newHasher
    3:3:com.google.common.hash.Hasher com.google.common.hash.AbstractCompositeHashFunction.newHasher(int):0:0 -> newHasher
    3:3:com.google.common.hash.Hasher com.google.common.hash.AbstractCompositeHashFunction.newHasher(int):0 -> newHasher
    4:4:com.google.common.hash.Hasher com.google.common.hash.AbstractCompositeHashFunction.fromHashers(com.google.common.hash.Hasher[]):0:0 -> newHasher
    4:4:com.google.common.hash.Hasher com.google.common.hash.AbstractCompositeHashFunction.newHasher(int):0 -> newHasher
    4:4:com.google.common.hash.Hasher com.google.common.hash.AbstractCompositeHashFunction.newHasher(int):0 -> newHasher
com.google.common.hash.Hashing$LinearCongruentialGenerator -> com.google.common.hash.l0:
    long state -> a
com.google.common.hash.Hashing$Md5Holder -> com.google.common.hash.m0:
    com.google.common.hash.HashFunction MD5 -> a
com.google.common.hash.Hashing$Sha1Holder -> com.google.common.hash.n0:
    com.google.common.hash.HashFunction SHA_1 -> a
com.google.common.hash.Hashing$Sha256Holder -> com.google.common.hash.o0:
    com.google.common.hash.HashFunction SHA_256 -> a
com.google.common.hash.Hashing$Sha384Holder -> com.google.common.hash.p0:
    com.google.common.hash.HashFunction SHA_384 -> a
com.google.common.hash.Hashing$Sha512Holder -> com.google.common.hash.q0:
    com.google.common.hash.HashFunction SHA_512 -> a
com.google.common.hash.HashingInputStream -> com.google.common.hash.HashingInputStream:
    com.google.common.hash.Hasher hasher -> a
com.google.common.hash.HashingOutputStream -> com.google.common.hash.HashingOutputStream:
    com.google.common.hash.Hasher hasher -> a
com.google.common.hash.ImmutableSupplier -> com.google.common.hash.r0:
com.google.common.hash.LittleEndianByteArray -> com.google.common.hash.a1:
    com.google.common.hash.LittleEndianByteArray$LittleEndianBytes byteArray -> a
    int load32(byte[],int) -> a
    long load64(byte[],int) -> b
com.google.common.hash.LittleEndianByteArray$1 -> com.google.common.hash.s0:
com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes -> com.google.common.hash.u0:
    com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes[] $VALUES -> b
    com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes INSTANCE -> a
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:void <init>(java.lang.String,int,com.google.common.hash.LittleEndianByteArray$1):0 -> <init>
com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes$1 -> com.google.common.hash.t0:
com.google.common.hash.LittleEndianByteArray$LittleEndianBytes -> com.google.common.hash.v0:
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray -> com.google.common.hash.z0:
    com.google.common.hash.LittleEndianByteArray$UnsafeByteArray UNSAFE_LITTLE_ENDIAN -> a
    com.google.common.hash.LittleEndianByteArray$UnsafeByteArray UNSAFE_BIG_ENDIAN -> b
    com.google.common.hash.LittleEndianByteArray$UnsafeByteArray[] $VALUES -> e
    sun.misc.Unsafe theUnsafe -> c
    int BYTE_ARRAY_BASE_OFFSET -> d
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:void <init>(java.lang.String,int,com.google.common.hash.LittleEndianByteArray$1):0 -> <init>
    int access$100() -> a
    sun.misc.Unsafe access$200() -> b
    sun.misc.Unsafe getUnsafe() -> c
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$1 -> com.google.common.hash.w0:
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$2 -> com.google.common.hash.x0:
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$3 -> com.google.common.hash.y0:
com.google.common.hash.LongAddable -> com.google.common.hash.b1:
com.google.common.hash.LongAddables -> com.google.common.hash.f1:
    com.google.common.base.Supplier SUPPLIER -> a
com.google.common.hash.LongAddables$1 -> com.google.common.hash.c1:
    1:1:com.google.common.hash.LongAddable get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.hash.LongAddables$2 -> com.google.common.hash.d1:
    1:1:com.google.common.hash.LongAddable get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.hash.LongAddables$PureJavaLongAddable -> com.google.common.hash.e1:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.hash.LongAddables$1):0 -> <init>
com.google.common.hash.LongAdder -> com.google.common.hash.g1:
    1:1:void com.google.common.hash.Striped64.retryUpdate(long,int[],boolean):0:0 -> add
    1:1:void add(long):0 -> add
    long fn(long,long) -> e
com.google.common.hash.MacHashFunction -> com.google.common.hash.j1:
    java.security.Key key -> b
    boolean supportsClone -> e
    javax.crypto.Mac prototype -> a
    int bits -> d
    java.lang.String toString -> c
    1:1:boolean supportsClone(javax.crypto.Mac):0:0 -> <init>
    1:1:void <init>(java.lang.String,java.security.Key,java.lang.String):0 -> <init>
    2:2:void <init>(java.lang.String,java.security.Key,java.lang.String):0:0 -> <init>
    javax.crypto.Mac getMac(java.lang.String,java.security.Key) -> a
com.google.common.hash.MacHashFunction$1 -> com.google.common.hash.h1:
com.google.common.hash.MacHashFunction$MacHasher -> com.google.common.hash.i1:
    javax.crypto.Mac mac -> b
    boolean done -> c
    1:1:void <init>(javax.crypto.Mac):0:0 -> <init>
    1:1:void <init>(javax.crypto.Mac,com.google.common.hash.MacHashFunction$1):0 -> <init>
    void checkNotDone() -> b
    1:1:com.google.common.hash.HashCode com.google.common.hash.HashCode.fromBytesNoCopy(byte[]):0:0 -> hash
    1:1:com.google.common.hash.HashCode hash():0 -> hash
com.google.common.hash.MessageDigestHashFunction -> com.google.common.hash.m1:
    java.security.MessageDigest prototype -> a
    int bytes -> b
    boolean supportsClone -> c
    java.lang.String toString -> d
    1:1:java.security.MessageDigest getMessageDigest(java.lang.String):0:0 -> <init>
    1:1:void <init>(java.lang.String,java.lang.String):0 -> <init>
    2:2:void <init>(java.lang.String,java.lang.String):0:0 -> <init>
    3:3:boolean supportsClone(java.security.MessageDigest):0:0 -> <init>
    3:3:void <init>(java.lang.String,java.lang.String):0 -> <init>
    4:4:void <init>(java.lang.String,java.lang.String):0:0 -> <init>
    5:5:java.security.MessageDigest getMessageDigest(java.lang.String):0:0 -> <init>
    5:5:void <init>(java.lang.String,java.lang.String):0 -> <init>
    1:1:java.security.MessageDigest getMessageDigest(java.lang.String):0:0 -> newHasher
    1:1:com.google.common.hash.Hasher newHasher():0 -> newHasher
    2:2:com.google.common.hash.Hasher newHasher():0:0 -> newHasher
    3:3:java.security.MessageDigest getMessageDigest(java.lang.String):0:0 -> newHasher
    3:3:com.google.common.hash.Hasher newHasher():0 -> newHasher
com.google.common.hash.MessageDigestHashFunction$1 -> com.google.common.hash.k1:
com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher -> com.google.common.hash.l1:
    java.security.MessageDigest digest -> b
    int bytes -> c
    boolean done -> d
    1:1:void <init>(java.security.MessageDigest,int):0:0 -> <init>
    1:1:void <init>(java.security.MessageDigest,int,com.google.common.hash.MessageDigestHashFunction$1):0 -> <init>
    void checkNotDone() -> b
    1:1:com.google.common.hash.HashCode com.google.common.hash.HashCode.fromBytesNoCopy(byte[]):0:0 -> hash
    1:1:com.google.common.hash.HashCode hash():0 -> hash
    2:2:com.google.common.hash.HashCode hash():0:0 -> hash
    3:3:com.google.common.hash.HashCode com.google.common.hash.HashCode.fromBytesNoCopy(byte[]):0:0 -> hash
    3:3:com.google.common.hash.HashCode hash():0 -> hash
com.google.common.hash.Murmur3_128HashFunction -> com.google.common.hash.o1:
    com.google.common.hash.HashFunction MURMUR3_128 -> b
    com.google.common.hash.HashFunction GOOD_FAST_HASH_128 -> c
    int seed -> a
com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher -> com.google.common.hash.n1:
    long h2 -> e
    int length -> f
    long h1 -> d
    long fmix64(long) -> d
    1:1:com.google.common.hash.HashCode com.google.common.hash.HashCode.fromBytesNoCopy(byte[]):0:0 -> makeHash
    1:1:com.google.common.hash.HashCode makeHash():0 -> makeHash
    1:1:void bmix64(long,long):0:0 -> process
    1:1:void process(java.nio.ByteBuffer):0 -> process
    2:2:long mixK1(long):0:0 -> process
    2:2:void bmix64(long,long):0 -> process
    2:2:void process(java.nio.ByteBuffer):0 -> process
    3:3:void bmix64(long,long):0:0 -> process
    3:3:void process(java.nio.ByteBuffer):0 -> process
    4:4:long mixK2(long):0:0 -> process
    4:4:void bmix64(long,long):0 -> process
    4:4:void process(java.nio.ByteBuffer):0 -> process
    5:5:void bmix64(long,long):0:0 -> process
    5:5:void process(java.nio.ByteBuffer):0 -> process
    6:6:void process(java.nio.ByteBuffer):0:0 -> process
    1:1:long mixK1(long):0:0 -> processRemaining
    1:1:void processRemaining(java.nio.ByteBuffer):0 -> processRemaining
    2:2:void processRemaining(java.nio.ByteBuffer):0:0 -> processRemaining
    3:3:long mixK2(long):0:0 -> processRemaining
    3:3:void processRemaining(java.nio.ByteBuffer):0 -> processRemaining
    4:4:void processRemaining(java.nio.ByteBuffer):0:0 -> processRemaining
com.google.common.hash.Murmur3_32HashFunction -> com.google.common.hash.q1:
    com.google.common.hash.HashFunction MURMUR3_32 -> b
    com.google.common.hash.HashFunction GOOD_FAST_HASH_32 -> c
    int seed -> a
    int access$000(int) -> a
    int access$100(int,int) -> b
    long access$400(char) -> c
    long access$500(int) -> d
    com.google.common.hash.HashCode access$600(int,int) -> e
    long charToThreeUtf8Bytes(char) -> f
    long codePointToFourUtf8Bytes(int) -> g
    com.google.common.hash.HashCode fmix(int,int) -> h
    1:1:int getIntLittleEndian(byte[],int):0:0 -> hashBytes
    1:1:com.google.common.hash.HashCode hashBytes(byte[],int,int):0 -> hashBytes
    2:2:com.google.common.hash.HashCode hashBytes(byte[],int,int):0:0 -> hashBytes
    int mixH1(int,int) -> i
    int mixK1(int) -> j
com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher -> com.google.common.hash.p1:
    long buffer -> b
    boolean isDone -> e
    int length -> d
    int shift -> c
    int h1 -> a
    void update(int,long) -> a
    1:1:com.google.common.hash.Hasher putByte(byte):0:0 -> putByte
    1:1:com.google.common.hash.PrimitiveSink putByte(byte):0 -> putByte
    1:1:int com.google.common.hash.Murmur3_32HashFunction.getIntLittleEndian(byte[],int):0:0 -> putBytes
    1:1:int com.google.common.hash.Murmur3_32HashFunction.access$200(byte[],int):0 -> putBytes
    1:1:com.google.common.hash.Hasher putBytes(byte[],int,int):0 -> putBytes
    2:2:com.google.common.hash.Hasher putBytes(byte[],int,int):0:0 -> putBytes
    1:1:com.google.common.hash.Hasher putChar(char):0:0 -> putChar
    1:1:com.google.common.hash.PrimitiveSink putChar(char):0 -> putChar
    1:1:com.google.common.hash.Hasher putInt(int):0:0 -> putInt
    1:1:com.google.common.hash.PrimitiveSink putInt(int):0 -> putInt
    1:1:com.google.common.hash.Hasher com.google.common.hash.AbstractHasher.putString(java.lang.CharSequence,java.nio.charset.Charset):0:0 -> putString
    1:1:com.google.common.hash.Hasher putString(java.lang.CharSequence,java.nio.charset.Charset):0 -> putString
com.google.common.hash.SipHashFunction -> com.google.common.hash.s1:
    com.google.common.hash.HashFunction SIP_HASH_24 -> e
    long k1 -> d
    long k0 -> c
    int d -> b
    int c -> a
com.google.common.hash.SipHashFunction$SipHasher -> com.google.common.hash.r1:
    long b -> j
    long v3 -> i
    long finalM -> k
    long v0 -> f
    long v2 -> h
    long v1 -> g
    int c -> d
    int d -> e
    void sipRound(int) -> d
    1:1:void processM(long):0:0 -> makeHash
    1:1:com.google.common.hash.HashCode makeHash():0 -> makeHash
    2:2:com.google.common.hash.HashCode makeHash():0:0 -> makeHash
    1:1:void processM(long):0:0 -> process
    1:1:void process(java.nio.ByteBuffer):0 -> process
com.google.common.hash.Striped64 -> com.google.common.hash.v1:
    long busyOffset -> i
    com.google.common.hash.Striped64$Cell[] cells -> a
    java.lang.ThreadLocal threadHashCode -> d
    long baseOffset -> h
    java.util.Random rng -> e
    int NCPU -> f
    long base -> b
    sun.misc.Unsafe UNSAFE -> g
    int busy -> c
    sun.misc.Unsafe access$000() -> a
    boolean casBase(long,long) -> b
    boolean casBusy() -> c
    sun.misc.Unsafe getUnsafe() -> d
com.google.common.hash.Striped64$1 -> com.google.common.hash.t1:
com.google.common.hash.Striped64$Cell -> com.google.common.hash.u1:
    sun.misc.Unsafe UNSAFE -> b
    long value -> a
    long valueOffset -> c
    boolean cas(long,long) -> a
com.google.common.html.HtmlEscapers -> com.google.common.html.HtmlEscapers:
    com.google.common.escape.Escaper HTML_ESCAPER -> a
com.google.common.io.-$$Lambda$CharSource$uWfacz9Bc4sFbLcPwYQKSuikcM0 -> com.google.common.io.a:
    java.io.BufferedReader f$0 -> a
    1:1:void com.google.common.io.CharSource.lambda$lines$0(java.io.BufferedReader):0:0 -> run
    1:1:void run():0 -> run
com.google.common.io.AppendableWriter -> com.google.common.io.b:
    java.lang.Appendable target -> a
    boolean closed -> b
    void checkNotClosed() -> a
    1:1:java.io.Writer append(char):0:0 -> append
    1:1:java.lang.Appendable append(char):0 -> append
    2:2:java.io.Writer append(java.lang.CharSequence):0:0 -> append
    2:2:java.lang.Appendable append(java.lang.CharSequence):0 -> append
    3:3:java.io.Writer append(java.lang.CharSequence,int,int):0:0 -> append
    3:3:java.lang.Appendable append(java.lang.CharSequence,int,int):0 -> append
com.google.common.io.BaseEncoding -> com.google.common.io.BaseEncoding:
    com.google.common.io.BaseEncoding BASE64 -> a
    com.google.common.io.BaseEncoding BASE16 -> e
    com.google.common.io.BaseEncoding BASE32_HEX -> d
    com.google.common.io.BaseEncoding BASE32 -> c
    com.google.common.io.BaseEncoding BASE64_URL -> b
    1:1:void com.google.common.io.BaseEncoding$StandardBaseEncoding.<init>(java.lang.String,java.lang.String,java.lang.Character):0:0 -> <clinit>
    1:1:void <clinit>():0 -> <clinit>
    2:2:void <clinit>():0:0 -> <clinit>
    3:3:void com.google.common.io.BaseEncoding$StandardBaseEncoding.<init>(java.lang.String,java.lang.String,java.lang.Character):0:0 -> <clinit>
    3:3:void <clinit>():0 -> <clinit>
    4:4:void <clinit>():0:0 -> <clinit>
    int decodeTo(byte[],java.lang.CharSequence) -> a
    void encodeTo(java.lang.Appendable,byte[],int,int) -> b
    int maxDecodedSize(int) -> c
    int maxEncodedSize(int) -> d
    1:1:byte[] decodeChecked(java.lang.CharSequence):0:0 -> decode
    1:1:byte[] decode(java.lang.CharSequence):0 -> decode
    2:2:byte[] extract(byte[],int):0:0 -> decode
    2:2:byte[] decodeChecked(java.lang.CharSequence):0 -> decode
    2:2:byte[] decode(java.lang.CharSequence):0 -> decode
    3:3:byte[] decode(java.lang.CharSequence):0:0 -> decode
    java.lang.CharSequence trimTrailingPadding(java.lang.CharSequence) -> e
com.google.common.io.BaseEncoding$1 -> com.google.common.io.c:
    com.google.common.io.BaseEncoding this$0 -> b
    com.google.common.io.CharSink val$encodedSink -> a
com.google.common.io.BaseEncoding$2 -> com.google.common.io.d:
    com.google.common.io.CharSource val$encodedSource -> a
    com.google.common.io.BaseEncoding this$0 -> b
com.google.common.io.BaseEncoding$3 -> com.google.common.io.e:
    java.io.Reader val$delegate -> a
    java.lang.String val$toIgnore -> b
com.google.common.io.BaseEncoding$4 -> com.google.common.io.f:
    java.lang.Appendable val$delegate -> c
    int val$afterEveryChars -> b
    int charsUntilSeparator -> a
    java.lang.String val$separator -> d
com.google.common.io.BaseEncoding$5 -> com.google.common.io.g:
    java.lang.Appendable val$separatingAppendable -> a
    java.io.Writer val$delegate -> b
com.google.common.io.BaseEncoding$Alphabet -> com.google.common.io.h:
    char[] chars -> b
    boolean[] validPadding -> h
    int bytesPerChunk -> f
    byte[] decodabet -> g
    java.lang.String name -> a
    int bitsPerChar -> d
    int charsPerChunk -> e
    int mask -> c
    char[] access$000(com.google.common.io.BaseEncoding$Alphabet) -> a
    boolean canDecode(char) -> b
    int decode(char) -> c
    char encode(int) -> d
    boolean hasLowerCase() -> e
    boolean hasUpperCase() -> f
    boolean isValidPaddingStartPosition(int) -> g
    com.google.common.io.BaseEncoding$Alphabet lowerCase() -> h
    com.google.common.io.BaseEncoding$Alphabet upperCase() -> i
com.google.common.io.BaseEncoding$Base16Encoding -> com.google.common.io.i:
    char[] encoding -> j
    int decodeTo(byte[],java.lang.CharSequence) -> a
    void encodeTo(java.lang.Appendable,byte[],int,int) -> b
    com.google.common.io.BaseEncoding newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character) -> g
com.google.common.io.BaseEncoding$Base64Encoding -> com.google.common.io.j:
    int decodeTo(byte[],java.lang.CharSequence) -> a
    void encodeTo(java.lang.Appendable,byte[],int,int) -> b
    com.google.common.io.BaseEncoding newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character) -> g
com.google.common.io.BaseEncoding$SeparatedBaseEncoding -> com.google.common.io.k:
    java.lang.String separator -> g
    int afterEveryChars -> h
    com.google.common.io.BaseEncoding delegate -> f
    int decodeTo(byte[],java.lang.CharSequence) -> a
    1:1:java.lang.Appendable com.google.common.io.BaseEncoding.separatingAppendable(java.lang.Appendable,java.lang.String,int):0:0 -> b
    1:1:void encodeTo(java.lang.Appendable,byte[],int,int):0 -> b
    2:2:void encodeTo(java.lang.Appendable,byte[],int,int):0:0 -> b
    int maxDecodedSize(int) -> c
    int maxEncodedSize(int) -> d
    1:1:java.io.Reader com.google.common.io.BaseEncoding.ignoringReader(java.io.Reader,java.lang.String):0:0 -> decodingStream
    1:1:java.io.InputStream decodingStream(java.io.Reader):0 -> decodingStream
    2:2:java.io.InputStream decodingStream(java.io.Reader):0:0 -> decodingStream
    java.lang.CharSequence trimTrailingPadding(java.lang.CharSequence) -> e
    1:1:java.lang.Appendable com.google.common.io.BaseEncoding.separatingAppendable(java.lang.Appendable,java.lang.String,int):0:0 -> encodingStream
    1:1:java.io.Writer com.google.common.io.BaseEncoding.separatingWriter(java.io.Writer,java.lang.String,int):0 -> encodingStream
    1:1:java.io.OutputStream encodingStream(java.io.Writer):0 -> encodingStream
    2:2:java.io.Writer com.google.common.io.BaseEncoding.separatingWriter(java.io.Writer,java.lang.String,int):0:0 -> encodingStream
    2:2:java.io.OutputStream encodingStream(java.io.Writer):0 -> encodingStream
    3:3:java.io.OutputStream encodingStream(java.io.Writer):0:0 -> encodingStream
com.google.common.io.BaseEncoding$StandardBaseEncoding -> com.google.common.io.n:
    com.google.common.io.BaseEncoding$Alphabet alphabet -> f
    com.google.common.io.BaseEncoding lowerCase -> i
    com.google.common.io.BaseEncoding upperCase -> h
    java.lang.Character paddingChar -> g
    int decodeTo(byte[],java.lang.CharSequence) -> a
    void encodeTo(java.lang.Appendable,byte[],int,int) -> b
    int maxDecodedSize(int) -> c
    int maxEncodedSize(int) -> d
    java.lang.CharSequence trimTrailingPadding(java.lang.CharSequence) -> e
    void encodeChunkTo(java.lang.Appendable,byte[],int,int) -> f
    com.google.common.io.BaseEncoding newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character) -> g
com.google.common.io.BaseEncoding$StandardBaseEncoding$1 -> com.google.common.io.l:
    com.google.common.io.BaseEncoding$StandardBaseEncoding this$0 -> e
    int bitBufferLength -> b
    java.io.Writer val$out -> d
    int writtenChars -> c
    int bitBuffer -> a
com.google.common.io.BaseEncoding$StandardBaseEncoding$2 -> com.google.common.io.m:
    com.google.common.io.BaseEncoding$StandardBaseEncoding this$0 -> f
    int bitBufferLength -> b
    int readChars -> c
    java.io.Reader val$reader -> e
    int bitBuffer -> a
    boolean hitPadding -> d
com.google.common.io.ByteSink$1 -> com.google.common.io.o:
com.google.common.io.ByteSink$AsCharSink -> com.google.common.io.p:
    java.nio.charset.Charset charset -> a
    com.google.common.io.ByteSink this$0 -> b
    1:1:void <init>(com.google.common.io.ByteSink,java.nio.charset.Charset):0:0 -> <init>
    1:1:void <init>(com.google.common.io.ByteSink,java.nio.charset.Charset,com.google.common.io.ByteSink$1):0 -> <init>
com.google.common.io.ByteSource -> com.google.common.io.ByteSource:
    1:1:byte[] com.google.common.io.ByteStreams.createBuffer():0:0 -> contentEquals
    1:1:boolean contentEquals(com.google.common.io.ByteSource):0 -> contentEquals
    2:2:boolean contentEquals(com.google.common.io.ByteSource):0:0 -> contentEquals
    1:1:long countBySkipping(java.io.InputStream):0:0 -> size
    1:1:long size():0 -> size
    2:2:long size():0:0 -> size
com.google.common.io.ByteSource$AsCharSource -> com.google.common.io.q:
    com.google.common.io.ByteSource this$0 -> b
    java.nio.charset.Charset charset -> a
com.google.common.io.ByteSource$ByteArrayByteSource -> com.google.common.io.r:
    byte[] bytes -> a
    int offset -> b
    int length -> c
    1:1:void <init>(byte[],int,int):0:0 -> <init>
    1:1:void <init>(byte[]):0 -> <init>
com.google.common.io.ByteSource$ConcatenatedByteSource -> com.google.common.io.s:
    java.lang.Iterable sources -> a
com.google.common.io.ByteSource$EmptyByteSource -> com.google.common.io.t:
    com.google.common.io.ByteSource$EmptyByteSource INSTANCE -> d
com.google.common.io.ByteSource$SlicedByteSource -> com.google.common.io.u:
    com.google.common.io.ByteSource this$0 -> c
    long length -> b
    long offset -> a
    java.io.InputStream sliceStream(java.io.InputStream) -> a
com.google.common.io.ByteStreams -> com.google.common.io.ByteStreams:
    java.io.OutputStream NULL_OUTPUT_STREAM -> a
    int $r8$clinit -> b
    byte[] combineBuffers(java.util.Queue,int) -> a
    1:1:long skipSafely(java.io.InputStream,long):0:0 -> b
    1:1:long skipUpTo(java.io.InputStream,long):0 -> b
    2:2:long skipUpTo(java.io.InputStream,long):0:0 -> b
    byte[] toByteArray(java.io.InputStream,long) -> c
    1:1:void com.google.common.io.Java8Compatibility.flip(java.nio.Buffer):0:0 -> copy
    1:1:long copy(java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel):0 -> copy
    2:2:long copy(java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel):0:0 -> copy
    3:3:void com.google.common.io.Java8Compatibility.clear(java.nio.Buffer):0:0 -> copy
    3:3:long copy(java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel):0 -> copy
    byte[] toByteArrayInternal(java.io.InputStream,java.util.Queue,int) -> d
com.google.common.io.ByteStreams$1 -> com.google.common.io.v:
com.google.common.io.ByteStreams$ByteArrayDataInputStream -> com.google.common.io.w:
    java.io.DataInput input -> a
com.google.common.io.ByteStreams$ByteArrayDataOutputStream -> com.google.common.io.x:
    java.io.DataOutput output -> a
    java.io.ByteArrayOutputStream byteArrayOutputStream -> b
com.google.common.io.ByteStreams$LimitedInputStream -> com.google.common.io.y:
    long mark -> b
    long left -> a
com.google.common.io.CharSequenceReader -> com.google.common.io.z:
    java.lang.CharSequence seq -> a
    int pos -> b
    int mark -> c
    void checkOpen() -> a
    boolean hasRemaining() -> b
    int remaining() -> c
com.google.common.io.CharSink -> com.google.common.io.CharSink:
    void writeLines(java.util.Iterator,java.lang.String) -> a
com.google.common.io.CharSource -> com.google.common.io.CharSource:
    1:1:long countBySkipping(java.io.Reader):0:0 -> length
    1:1:long length():0 -> length
    2:2:long length():0:0 -> length
com.google.common.io.CharSource$AsByteSource -> com.google.common.io.a0:
    java.nio.charset.Charset charset -> a
    com.google.common.io.CharSource this$0 -> b
com.google.common.io.CharSource$CharSequenceCharSource -> com.google.common.io.c0:
    com.google.common.base.Splitter LINE_SPLITTER -> b
    java.lang.CharSequence seq -> a
    com.google.common.base.Splitter access$100() -> a
    1:1:java.util.Iterator linesIterator():0:0 -> lines
    1:1:java.util.stream.Stream lines():0 -> lines
    2:2:java.util.stream.Stream lines():0:0 -> lines
    1:1:java.util.Iterator linesIterator():0:0 -> readFirstLine
    1:1:java.lang.String readFirstLine():0 -> readFirstLine
    2:2:java.lang.String readFirstLine():0:0 -> readFirstLine
    1:1:java.util.Iterator linesIterator():0:0 -> readLines
    1:1:com.google.common.collect.ImmutableList readLines():0 -> readLines
    2:2:com.google.common.collect.ImmutableList readLines():0:0 -> readLines
    3:3:java.util.Iterator linesIterator():0:0 -> readLines
    3:3:java.lang.Object readLines(com.google.common.io.LineProcessor):0 -> readLines
    4:4:java.lang.Object readLines(com.google.common.io.LineProcessor):0:0 -> readLines
com.google.common.io.CharSource$CharSequenceCharSource$1 -> com.google.common.io.b0:
    java.util.Iterator lines -> c
    com.google.common.io.CharSource$CharSequenceCharSource this$0 -> d
    1:1:java.lang.String computeNext():0:0 -> computeNext
    1:1:java.lang.Object computeNext():0 -> computeNext
com.google.common.io.CharSource$ConcatenatedCharSource -> com.google.common.io.d0:
    java.lang.Iterable sources -> a
com.google.common.io.CharSource$EmptyCharSource -> com.google.common.io.e0:
    com.google.common.io.CharSource$EmptyCharSource INSTANCE -> c
    com.google.common.io.CharSource$EmptyCharSource access$000() -> b
com.google.common.io.CharSource$StringCharSource -> com.google.common.io.f0:
com.google.common.io.CharStreams -> com.google.common.io.CharStreams:
    long copyReaderToBuilder(java.io.Reader,java.lang.StringBuilder) -> a
    java.nio.CharBuffer createBuffer() -> b
    1:1:long copyReaderToWriter(java.io.Reader,java.io.Writer):0:0 -> copy
    1:1:long copy(java.lang.Readable,java.lang.Appendable):0 -> copy
    2:2:long copy(java.lang.Readable,java.lang.Appendable):0:0 -> copy
    3:3:void com.google.common.io.Java8Compatibility.flip(java.nio.Buffer):0:0 -> copy
    3:3:long copy(java.lang.Readable,java.lang.Appendable):0 -> copy
    4:4:long copy(java.lang.Readable,java.lang.Appendable):0:0 -> copy
    5:5:void com.google.common.io.Java8Compatibility.clear(java.nio.Buffer):0:0 -> copy
    5:5:long copy(java.lang.Readable,java.lang.Appendable):0 -> copy
    1:1:void com.google.common.io.Java8Compatibility.clear(java.nio.Buffer):0:0 -> exhaust
    1:1:long exhaust(java.lang.Readable):0 -> exhaust
    1:1:java.lang.StringBuilder toStringBuilder(java.lang.Readable):0:0 -> toString
    1:1:java.lang.String toString(java.lang.Readable):0 -> toString
    2:2:java.lang.String toString(java.lang.Readable):0:0 -> toString
com.google.common.io.CharStreams$NullWriter -> com.google.common.io.g0:
    com.google.common.io.CharStreams$NullWriter INSTANCE -> a
    com.google.common.io.CharStreams$NullWriter access$000() -> a
com.google.common.io.Closeables -> com.google.common.io.Closeables:
    java.util.logging.Logger logger -> a
com.google.common.io.Closer -> com.google.common.io.Closer:
    java.util.Deque stack -> b
    java.lang.Throwable thrown -> c
    com.google.common.io.Closer$Suppressor suppressor -> a
    com.google.common.io.Closer$Suppressor SUPPRESSOR -> d
    1:1:boolean com.google.common.io.Closer$SuppressingSuppressor.isAvailable():0:0 -> <clinit>
    1:1:void <clinit>():0 -> <clinit>
    2:2:void <clinit>():0:0 -> <clinit>
com.google.common.io.Closer$LoggingSuppressor -> com.google.common.io.h0:
    com.google.common.io.Closer$LoggingSuppressor INSTANCE -> a
com.google.common.io.Closer$SuppressingSuppressor -> com.google.common.io.i0:
    com.google.common.io.Closer$SuppressingSuppressor INSTANCE -> a
    java.lang.reflect.Method addSuppressed -> b
    1:1:java.lang.reflect.Method addSuppressedMethodOrNull():0:0 -> <clinit>
    1:1:void <clinit>():0 -> <clinit>
    2:2:void <clinit>():0:0 -> <clinit>
    1:1:void com.google.common.io.Closer$LoggingSuppressor.suppress(java.io.Closeable,java.lang.Throwable,java.lang.Throwable):0:0 -> suppress
    1:1:void suppress(java.io.Closeable,java.lang.Throwable,java.lang.Throwable):0 -> suppress
com.google.common.io.Closer$Suppressor -> com.google.common.io.j0:
com.google.common.io.CountingInputStream -> com.google.common.io.CountingInputStream:
    long mark -> b
    long count -> a
com.google.common.io.CountingOutputStream -> com.google.common.io.CountingOutputStream:
    long count -> a
com.google.common.io.FileBackedOutputStream -> com.google.common.io.FileBackedOutputStream:
    com.google.common.io.ByteSource source -> c
    java.io.File parentDirectory -> d
    java.io.OutputStream out -> e
    com.google.common.io.FileBackedOutputStream$MemoryOutput memory -> f
    java.io.File file -> g
    boolean resetOnFinalize -> b
    int fileThreshold -> a
    1:1:void <init>(int,boolean,java.io.File):0:0 -> <init>
    1:1:void <init>(int,boolean):0 -> <init>
    1:1:java.io.InputStream openInputStream():0:0 -> a
    1:1:java.io.InputStream access$100(com.google.common.io.FileBackedOutputStream):0 -> a
    void update(int) -> b
com.google.common.io.FileBackedOutputStream$1 -> com.google.common.io.k0:
    com.google.common.io.FileBackedOutputStream this$0 -> a
com.google.common.io.FileBackedOutputStream$2 -> com.google.common.io.l0:
    com.google.common.io.FileBackedOutputStream this$0 -> a
com.google.common.io.FileBackedOutputStream$MemoryOutput -> com.google.common.io.m0:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.io.FileBackedOutputStream$1):0 -> <init>
    byte[] getBuffer() -> a
com.google.common.io.FileWriteMode -> com.google.common.io.FileWriteMode:
    com.google.common.io.FileWriteMode[] $VALUES -> a
com.google.common.io.Files -> com.google.common.io.Files:
    com.google.common.graph.SuccessorsFunction FILE_TREE -> a
    java.nio.MappedByteBuffer mapInternal(java.io.File,java.nio.channels.FileChannel$MapMode,long) -> a
com.google.common.io.Files$1 -> com.google.common.io.n0:
    java.util.List result -> a
    1:1:java.util.List getResult():0:0 -> getResult
    1:1:java.lang.Object getResult():0 -> getResult
com.google.common.io.Files$2 -> com.google.common.io.o0:
    1:1:java.lang.Iterable successors(java.io.File):0:0 -> successors
    1:1:java.lang.Iterable successors(java.lang.Object):0 -> successors
com.google.common.io.Files$FileByteSink -> com.google.common.io.p0:
    java.io.File file -> a
    com.google.common.collect.ImmutableSet modes -> b
    1:1:void <init>(java.io.File,com.google.common.io.FileWriteMode[]):0:0 -> <init>
    1:1:void <init>(java.io.File,com.google.common.io.FileWriteMode[],com.google.common.io.Files$1):0 -> <init>
    1:1:java.io.FileOutputStream openStream():0:0 -> openStream
    1:1:java.io.OutputStream openStream():0 -> openStream
com.google.common.io.Files$FileByteSource -> com.google.common.io.q0:
    java.io.File file -> a
    1:1:void <init>(java.io.File):0:0 -> <init>
    1:1:void <init>(java.io.File,com.google.common.io.Files$1):0 -> <init>
    1:1:java.io.FileInputStream openStream():0:0 -> openStream
    1:1:java.io.InputStream openStream():0 -> openStream
    1:1:java.io.FileInputStream openStream():0:0 -> read
    1:1:byte[] read():0 -> read
    2:2:byte[] read():0:0 -> read
com.google.common.io.Files$FilePredicate -> com.google.common.io.t0:
    com.google.common.io.Files$FilePredicate[] $VALUES -> c
    com.google.common.io.Files$FilePredicate IS_DIRECTORY -> a
    com.google.common.io.Files$FilePredicate IS_FILE -> b
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:void <init>(java.lang.String,int,com.google.common.io.Files$1):0 -> <init>
    com.google.common.io.Files$FilePredicate[] $values() -> a
com.google.common.io.Files$FilePredicate$1 -> com.google.common.io.r0:
    1:1:boolean apply(java.io.File):0:0 -> apply
    1:1:boolean apply(java.lang.Object):0 -> apply
com.google.common.io.Files$FilePredicate$2 -> com.google.common.io.s0:
    1:1:boolean apply(java.io.File):0:0 -> apply
    1:1:boolean apply(java.lang.Object):0 -> apply
com.google.common.io.Flushables -> com.google.common.io.Flushables:
    java.util.logging.Logger logger -> a
com.google.common.io.LineReader -> com.google.common.io.LineReader:
    java.nio.CharBuffer cbuf -> c
    char[] buf -> d
    com.google.common.io.LineBuffer lineBuf -> f
    java.util.Queue lines -> e
    java.io.Reader reader -> b
    java.lang.Readable readable -> a
    java.util.Queue access$000(com.google.common.io.LineReader) -> a
    1:1:void com.google.common.io.Java8Compatibility.clear(java.nio.Buffer):0:0 -> readLine
    1:1:java.lang.String readLine():0 -> readLine
    2:2:java.lang.String readLine():0:0 -> readLine
com.google.common.io.LineReader$1 -> com.google.common.io.u0:
    com.google.common.io.LineReader this$0 -> c
    java.lang.StringBuilder com.google.common.io.LineBuffer.line -> a
    boolean com.google.common.io.LineBuffer.sawReturn -> b
    1:1:void com.google.common.io.LineBuffer.<init>():0:0 -> <init>
    1:1:void <init>(com.google.common.io.LineReader):0 -> <init>
    1:1:void handleLine(java.lang.String,java.lang.String):0:0 -> a
    1:1:boolean com.google.common.io.LineBuffer.finishLine(boolean):0 -> a
    2:2:boolean com.google.common.io.LineBuffer.finishLine(boolean):0:0 -> a
    1:1:void com.google.common.io.LineBuffer.add(char[],int,int):0:0 -> add
    1:1:void com.google.common.io.LineBuffer.add(char[],int,int):0 -> add
    1:1:void com.google.common.io.LineBuffer.finish():0:0 -> finish
    1:1:void com.google.common.io.LineBuffer.finish():0 -> finish
com.google.common.io.LittleEndianDataInputStream -> com.google.common.io.LittleEndianDataInputStream:
    byte readAndCheckByte() -> a
com.google.common.io.MoreFiles -> com.google.common.io.MoreFiles:
    com.google.common.graph.SuccessorsFunction FILE_TREE -> a
    java.util.Collection addException(java.util.Collection,java.io.IOException) -> a
    void checkAllowsInsecure(java.nio.file.Path,com.google.common.io.RecursiveDeleteOption[]) -> b
    1:1:java.util.Collection concat(java.util.Collection,java.util.Collection):0:0 -> c
    1:1:java.util.Collection deleteDirectoryContentsInsecure(java.nio.file.DirectoryStream):0 -> c
    2:2:java.util.Collection deleteDirectoryContentsInsecure(java.nio.file.DirectoryStream):0:0 -> c
    1:1:java.util.Collection concat(java.util.Collection,java.util.Collection):0:0 -> d
    1:1:java.util.Collection deleteDirectoryContentsSecure(java.nio.file.SecureDirectoryStream):0 -> d
    2:2:java.util.Collection deleteDirectoryContentsSecure(java.nio.file.SecureDirectoryStream):0:0 -> d
    1:1:java.nio.file.Path getParentPath(java.nio.file.Path):0:0 -> deleteRecursively
    1:1:void deleteRecursively(java.nio.file.Path,com.google.common.io.RecursiveDeleteOption[]):0 -> deleteRecursively
    2:2:void deleteRecursively(java.nio.file.Path,com.google.common.io.RecursiveDeleteOption[]):0:0 -> deleteRecursively
    java.util.Collection deleteRecursivelyInsecure(java.nio.file.Path) -> e
    1:1:boolean isDirectory(java.nio.file.SecureDirectoryStream,java.nio.file.Path,java.nio.file.LinkOption[]):0:0 -> f
    1:1:java.util.Collection deleteRecursivelySecure(java.nio.file.SecureDirectoryStream,java.nio.file.Path):0 -> f
    2:2:java.util.Collection deleteRecursivelySecure(java.nio.file.SecureDirectoryStream,java.nio.file.Path):0:0 -> f
    void throwDeleteFailed(java.nio.file.Path,java.util.Collection) -> g
com.google.common.io.MoreFiles$1 -> com.google.common.io.v0:
    1:1:java.lang.Iterable com.google.common.io.MoreFiles.fileTreeChildren(java.nio.file.Path):0:0 -> successors
    1:1:java.lang.Iterable com.google.common.io.MoreFiles.access$300(java.nio.file.Path):0 -> successors
    1:1:java.lang.Iterable successors(java.nio.file.Path):0 -> successors
    1:1:java.lang.Iterable successors(java.lang.Object):0 -> successors
com.google.common.io.MoreFiles$2 -> com.google.common.io.w0:
    java.nio.file.LinkOption[] val$optionsCopy -> a
    1:1:boolean apply(java.nio.file.Path):0:0 -> apply
    1:1:boolean apply(java.lang.Object):0 -> apply
com.google.common.io.MoreFiles$3 -> com.google.common.io.x0:
    java.nio.file.LinkOption[] val$optionsCopy -> a
    1:1:boolean apply(java.nio.file.Path):0:0 -> apply
    1:1:boolean apply(java.lang.Object):0 -> apply
com.google.common.io.MoreFiles$PathByteSink -> com.google.common.io.y0:
    java.nio.file.OpenOption[] options -> b
    java.nio.file.Path path -> a
    1:1:void <init>(java.nio.file.Path,java.nio.file.OpenOption[]):0:0 -> <init>
    1:1:void <init>(java.nio.file.Path,java.nio.file.OpenOption[],com.google.common.io.MoreFiles$1):0 -> <init>
com.google.common.io.MoreFiles$PathByteSource -> com.google.common.io.a1:
    java.nio.file.OpenOption[] options -> b
    java.nio.file.LinkOption[] FOLLOW_LINKS -> d
    java.nio.file.Path path -> a
    boolean followLinks -> c
    1:1:void <init>(java.nio.file.Path,java.nio.file.OpenOption[]):0:0 -> <init>
    1:1:void <init>(java.nio.file.Path,java.nio.file.OpenOption[],com.google.common.io.MoreFiles$1):0 -> <init>
    2:2:boolean followLinks(java.nio.file.OpenOption[]):0:0 -> <init>
    2:2:void <init>(java.nio.file.Path,java.nio.file.OpenOption[]):0 -> <init>
    2:2:void <init>(java.nio.file.Path,java.nio.file.OpenOption[],com.google.common.io.MoreFiles$1):0 -> <init>
    3:3:void <init>(java.nio.file.Path,java.nio.file.OpenOption[]):0:0 -> <init>
    3:3:void <init>(java.nio.file.Path,java.nio.file.OpenOption[],com.google.common.io.MoreFiles$1):0 -> <init>
    java.nio.file.Path access$100(com.google.common.io.MoreFiles$PathByteSource) -> a
    java.nio.file.attribute.BasicFileAttributes readAttributes() -> b
com.google.common.io.MoreFiles$PathByteSource$1 -> com.google.common.io.z0:
    com.google.common.io.MoreFiles$PathByteSource this$0 -> c
com.google.common.io.MultiInputStream -> com.google.common.io.b1:
    java.util.Iterator it -> a
    java.io.InputStream in -> b
    void advance() -> a
com.google.common.io.MultiReader -> com.google.common.io.c1:
    java.util.Iterator it -> a
    java.io.Reader current -> b
    void advance() -> a
com.google.common.io.PatternFilenameFilter -> com.google.common.io.PatternFilenameFilter:
    java.util.regex.Pattern pattern -> a
com.google.common.io.ReaderInputStream -> com.google.common.io.d1:
    java.nio.CharBuffer charBuffer -> d
    java.nio.ByteBuffer byteBuffer -> e
    boolean endOfInput -> f
    java.io.Reader reader -> a
    boolean draining -> g
    java.nio.charset.CharsetEncoder encoder -> b
    boolean doneFlushing -> h
    byte[] singleByte -> c
    1:1:void <init>(java.io.Reader,java.nio.charset.CharsetEncoder,int):0:0 -> <init>
    1:1:void <init>(java.io.Reader,java.nio.charset.Charset,int):0 -> <init>
    2:2:void com.google.common.io.Java8Compatibility.flip(java.nio.Buffer):0:0 -> <init>
    2:2:void <init>(java.io.Reader,java.nio.charset.CharsetEncoder,int):0 -> <init>
    2:2:void <init>(java.io.Reader,java.nio.charset.Charset,int):0 -> <init>
    3:3:void <init>(java.io.Reader,java.nio.charset.CharsetEncoder,int):0:0 -> <init>
    3:3:void <init>(java.io.Reader,java.nio.charset.Charset,int):0 -> <init>
    1:1:void com.google.common.io.Java8Compatibility.flip(java.nio.Buffer):0:0 -> a
    1:1:void startDraining(boolean):0 -> a
    2:2:void startDraining(boolean):0:0 -> a
    1:1:int drain(byte[],int,int):0:0 -> read
    1:1:int read(byte[],int,int):0 -> read
    2:2:int read(byte[],int,int):0:0 -> read
    3:3:void com.google.common.io.Java8Compatibility.clear(java.nio.Buffer):0:0 -> read
    3:3:int read(byte[],int,int):0 -> read
    4:4:int read(byte[],int,int):0:0 -> read
    5:5:void readMoreChars():0:0 -> read
    5:5:int read(byte[],int,int):0 -> read
    6:6:int availableCapacity(java.nio.Buffer):0:0 -> read
    6:6:void readMoreChars():0 -> read
    6:6:int read(byte[],int,int):0 -> read
    7:7:void readMoreChars():0:0 -> read
    7:7:int read(byte[],int,int):0 -> read
    8:8:void com.google.common.io.Java8Compatibility.flip(java.nio.Buffer):0:0 -> read
    8:8:void readMoreChars():0 -> read
    8:8:int read(byte[],int,int):0 -> read
    9:9:void readMoreChars():0:0 -> read
    9:9:int read(byte[],int,int):0 -> read
    10:10:java.nio.CharBuffer grow(java.nio.CharBuffer):0:0 -> read
    10:10:void readMoreChars():0 -> read
    10:10:int read(byte[],int,int):0 -> read
    11:11:void com.google.common.io.Java8Compatibility.position(java.nio.Buffer,int):0:0 -> read
    11:11:java.nio.CharBuffer grow(java.nio.CharBuffer):0 -> read
    11:11:void readMoreChars():0 -> read
    11:11:int read(byte[],int,int):0 -> read
    12:12:java.nio.CharBuffer grow(java.nio.CharBuffer):0:0 -> read
    12:12:void readMoreChars():0 -> read
    12:12:int read(byte[],int,int):0 -> read
    13:13:void com.google.common.io.Java8Compatibility.limit(java.nio.Buffer,int):0:0 -> read
    13:13:java.nio.CharBuffer grow(java.nio.CharBuffer):0 -> read
    13:13:void readMoreChars():0 -> read
    13:13:int read(byte[],int,int):0 -> read
    14:14:void readMoreChars():0:0 -> read
    14:14:int read(byte[],int,int):0 -> read
    15:15:int availableCapacity(java.nio.Buffer):0:0 -> read
    15:15:void readMoreChars():0 -> read
    15:15:int read(byte[],int,int):0 -> read
    16:16:void readMoreChars():0:0 -> read
    16:16:int read(byte[],int,int):0 -> read
    17:17:void com.google.common.io.Java8Compatibility.limit(java.nio.Buffer,int):0:0 -> read
    17:17:void readMoreChars():0 -> read
    17:17:int read(byte[],int,int):0 -> read
    18:18:int read(byte[],int,int):0:0 -> read
com.google.common.io.RecursiveDeleteOption -> com.google.common.io.RecursiveDeleteOption:
    com.google.common.io.RecursiveDeleteOption[] $VALUES -> a
com.google.common.io.Resources$1 -> com.google.common.io.e1:
    java.util.List result -> a
    1:1:java.util.List getResult():0:0 -> getResult
    1:1:java.lang.Object getResult():0 -> getResult
com.google.common.io.Resources$UrlByteSource -> com.google.common.io.f1:
    java.net.URL url -> a
    1:1:void <init>(java.net.URL):0:0 -> <init>
    1:1:void <init>(java.net.URL,com.google.common.io.Resources$1):0 -> <init>
com.google.common.math.-$$Lambda$6xCQX5kr97R2jW--AHVvxMnZhm0 -> com.google.common.math.a:
    com.google.common.math.-$$Lambda$6xCQX5kr97R2jW--AHVvxMnZhm0 INSTANCE -> a
com.google.common.math.-$$Lambda$P4QK5SGSmSKCQDgsxzhrMPZhkGg -> com.google.common.math.b:
    com.google.common.math.-$$Lambda$P4QK5SGSmSKCQDgsxzhrMPZhkGg INSTANCE -> a
com.google.common.math.-$$Lambda$Stats$Vt90TnZ4wBaEUosW2k9PSZhjFks -> com.google.common.math.c:
    com.google.common.math.-$$Lambda$Stats$Vt90TnZ4wBaEUosW2k9PSZhjFks INSTANCE -> a
    1:1:com.google.common.math.StatsAccumulator com.google.common.math.Stats.lambda$toStats$1(com.google.common.math.StatsAccumulator,com.google.common.math.StatsAccumulator):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object,java.lang.Object):0 -> apply
com.google.common.math.-$$Lambda$Stats$VxHKtBCVuyC9OsmI96q09f5T4mE -> com.google.common.math.d:
    com.google.common.math.-$$Lambda$Stats$VxHKtBCVuyC9OsmI96q09f5T4mE INSTANCE -> a
    1:1:void com.google.common.math.Stats.lambda$toStats$0(com.google.common.math.StatsAccumulator,java.lang.Number):0:0 -> accept
    1:1:void accept(java.lang.Object,java.lang.Object):0 -> accept
com.google.common.math.-$$Lambda$gaZlXQMyYIzHeALpTW3BJPzFuOY -> com.google.common.math.e:
    com.google.common.math.-$$Lambda$gaZlXQMyYIzHeALpTW3BJPzFuOY INSTANCE -> a
com.google.common.math.-$$Lambda$l7I63kXAkqWyk6evpJk_ESWAsuU -> com.google.common.math.f:
    com.google.common.math.-$$Lambda$l7I63kXAkqWyk6evpJk_ESWAsuU INSTANCE -> a
com.google.common.math.-$$Lambda$vwIe-7W1yt_pspi1rjSYS76ZkrU -> com.google.common.math.g:
    com.google.common.math.-$$Lambda$vwIe-7W1yt_pspi1rjSYS76ZkrU INSTANCE -> a
com.google.common.math.-$$Lambda$wy74eMedbRSqXlSd7LWrAf_bJuw -> com.google.common.math.h:
    com.google.common.math.-$$Lambda$wy74eMedbRSqXlSd7LWrAf_bJuw INSTANCE -> a
com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder -> com.google.common.math.i:
    com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder INSTANCE -> a
    1:1:java.math.BigDecimal minus(java.math.BigDecimal,java.math.BigDecimal):0:0 -> a
    1:1:java.lang.Number minus(java.lang.Number,java.lang.Number):0 -> a
    1:1:double roundToDoubleArbitrarily(java.math.BigDecimal):0:0 -> c
    1:1:double roundToDoubleArbitrarily(java.lang.Number):0 -> c
    1:1:int sign(java.math.BigDecimal):0:0 -> d
    1:1:int sign(java.lang.Number):0 -> d
    1:1:java.math.BigDecimal toX(double,java.math.RoundingMode):0:0 -> e
    1:1:java.lang.Number toX(double,java.math.RoundingMode):0 -> e
com.google.common.math.BigIntegerMath -> com.google.common.math.BigIntegerMath:
    java.math.BigInteger SQRT2_PRECOMPUTED_BITS -> a
    double LN_10 -> b
    double LN_2 -> c
    java.math.BigInteger listProduct(java.util.List,int,int) -> a
    1:1:java.math.BigInteger listProduct(java.util.List):0:0 -> factorial
    1:1:java.math.BigInteger factorial(int):0 -> factorial
    2:2:java.math.BigInteger factorial(int):0:0 -> factorial
    1:1:boolean fitsInLong(java.math.BigInteger):0:0 -> log10
    1:1:int log10(java.math.BigInteger,java.math.RoundingMode):0 -> log10
    2:2:int log10(java.math.BigInteger,java.math.RoundingMode):0:0 -> log10
    1:1:java.math.BigInteger com.google.common.math.MathPreconditions.checkNonNegative(java.lang.String,java.math.BigInteger):0:0 -> sqrt
    1:1:java.math.BigInteger sqrt(java.math.BigInteger,java.math.RoundingMode):0 -> sqrt
    2:2:boolean fitsInLong(java.math.BigInteger):0:0 -> sqrt
    2:2:java.math.BigInteger sqrt(java.math.BigInteger,java.math.RoundingMode):0 -> sqrt
    3:3:java.math.BigInteger sqrt(java.math.BigInteger,java.math.RoundingMode):0:0 -> sqrt
    4:4:java.math.BigInteger sqrtFloor(java.math.BigInteger):0:0 -> sqrt
    4:4:java.math.BigInteger sqrt(java.math.BigInteger,java.math.RoundingMode):0 -> sqrt
    5:5:java.math.BigInteger sqrtApproxWithDoubles(java.math.BigInteger):0:0 -> sqrt
    5:5:java.math.BigInteger sqrtFloor(java.math.BigInteger):0 -> sqrt
    5:5:java.math.BigInteger sqrt(java.math.BigInteger,java.math.RoundingMode):0 -> sqrt
    6:6:java.math.BigInteger sqrtFloor(java.math.BigInteger):0:0 -> sqrt
    6:6:java.math.BigInteger sqrt(java.math.BigInteger,java.math.RoundingMode):0 -> sqrt
    7:7:java.math.BigInteger sqrtApproxWithDoubles(java.math.BigInteger):0:0 -> sqrt
    7:7:java.math.BigInteger sqrtFloor(java.math.BigInteger):0 -> sqrt
    7:7:java.math.BigInteger sqrt(java.math.BigInteger,java.math.RoundingMode):0 -> sqrt
    8:8:java.math.BigInteger sqrtFloor(java.math.BigInteger):0:0 -> sqrt
    8:8:java.math.BigInteger sqrt(java.math.BigInteger,java.math.RoundingMode):0 -> sqrt
    9:9:java.math.BigInteger sqrt(java.math.BigInteger,java.math.RoundingMode):0:0 -> sqrt
    10:10:java.math.BigInteger com.google.common.math.MathPreconditions.checkNonNegative(java.lang.String,java.math.BigInteger):0:0 -> sqrt
    10:10:java.math.BigInteger sqrt(java.math.BigInteger,java.math.RoundingMode):0 -> sqrt
com.google.common.math.BigIntegerMath$1 -> com.google.common.math.j:
    int[] $SwitchMap$java$math$RoundingMode -> a
com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder -> com.google.common.math.k:
    com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder INSTANCE -> a
    1:1:java.math.BigInteger minus(java.math.BigInteger,java.math.BigInteger):0:0 -> a
    1:1:java.lang.Number minus(java.lang.Number,java.lang.Number):0 -> a
    1:1:double roundToDoubleArbitrarily(java.math.BigInteger):0:0 -> c
    1:1:double roundToDoubleArbitrarily(java.lang.Number):0 -> c
    1:1:int sign(java.math.BigInteger):0:0 -> d
    1:1:int sign(java.lang.Number):0 -> d
    1:1:java.math.BigInteger toX(double,java.math.RoundingMode):0:0 -> e
    1:1:java.lang.Number toX(double,java.math.RoundingMode):0 -> e
com.google.common.math.DoubleMath -> com.google.common.math.DoubleMath:
    double[] everySixteenthFactorial -> b
    double LN_2 -> a
    double checkFinite(double) -> a
    double roundIntermediate(double,java.math.RoundingMode) -> b
    1:1:double com.google.common.math.MathPreconditions.checkNonNegative(java.lang.String,double):0:0 -> fuzzyEquals
    1:1:boolean fuzzyEquals(double,double,double):0 -> fuzzyEquals
    1:1:boolean com.google.common.math.DoubleUtils.isNormal(double):0:0 -> log2
    1:1:int log2(double,java.math.RoundingMode):0 -> log2
    2:2:int log2(double,java.math.RoundingMode):0:0 -> log2
    3:3:double com.google.common.math.DoubleUtils.scaleNormalize(double):0:0 -> log2
    3:3:int log2(double,java.math.RoundingMode):0 -> log2
    4:4:int log2(double,java.math.RoundingMode):0:0 -> log2
com.google.common.math.DoubleMath$1 -> com.google.common.math.l:
    int[] $SwitchMap$java$math$RoundingMode -> a
com.google.common.math.DoubleUtils -> com.google.common.math.m:
    double bigToDouble(java.math.BigInteger) -> a
    void com.google.common.math.MathPreconditions.checkInRangeForRoundingInputs(boolean,double,java.math.RoundingMode) -> b
    void com.google.common.math.MathPreconditions.checkNoOverflow(boolean,java.lang.String,int,int) -> c
    void com.google.common.math.MathPreconditions.checkNoOverflow(boolean,java.lang.String,long,long) -> d
    int com.google.common.math.MathPreconditions.checkNonNegative(java.lang.String,int) -> e
    long com.google.common.math.MathPreconditions.checkNonNegative(java.lang.String,long) -> f
    int com.google.common.math.MathPreconditions.checkPositive(java.lang.String,int) -> g
    long com.google.common.math.MathPreconditions.checkPositive(java.lang.String,long) -> h
    java.math.BigInteger com.google.common.math.MathPreconditions.checkPositive(java.lang.String,java.math.BigInteger) -> i
    void com.google.common.math.MathPreconditions.checkRoundingUnnecessary(boolean) -> j
    double ensureNonNegative(double) -> k
    long getSignificand(double) -> l
    boolean isFinite(double) -> m
    double nextDown(double) -> n
com.google.common.math.IntMath -> com.google.common.math.IntMath:
    byte[] maxLog10ForLeadingZeros -> a
    int[] powersOf10 -> b
    int[] halfPowersOf10 -> c
    int[] factorials -> d
    int[] biggestBinomials -> e
    int lessThanBranchFree(int,int) -> a
    1:1:int log10Floor(int):0:0 -> log10
    1:1:int log10(int,java.math.RoundingMode):0 -> log10
    2:2:int log10(int,java.math.RoundingMode):0:0 -> log10
    1:1:int sqrtFloor(int):0:0 -> sqrt
    1:1:int sqrt(int,java.math.RoundingMode):0 -> sqrt
    2:2:int sqrt(int,java.math.RoundingMode):0:0 -> sqrt
com.google.common.math.IntMath$1 -> com.google.common.math.n:
    int[] $SwitchMap$java$math$RoundingMode -> a
com.google.common.math.LinearTransformation$1 -> com.google.common.math.o:
com.google.common.math.LinearTransformation$LinearTransformationBuilder -> com.google.common.math.LinearTransformation$LinearTransformationBuilder:
    double x1 -> a
    double y1 -> b
    1:1:void <init>(double,double):0:0 -> <init>
    1:1:void <init>(double,double,com.google.common.math.LinearTransformation$1):0 -> <init>
com.google.common.math.LinearTransformation$NaNLinearTransformation -> com.google.common.math.p:
    com.google.common.math.LinearTransformation$NaNLinearTransformation INSTANCE -> a
com.google.common.math.LinearTransformation$RegularLinearTransformation -> com.google.common.math.q:
    double slope -> a
    double yIntercept -> b
    com.google.common.math.LinearTransformation inverse -> c
    1:1:com.google.common.math.LinearTransformation createInverse():0:0 -> inverse
    1:1:com.google.common.math.LinearTransformation inverse():0 -> inverse
    2:2:com.google.common.math.LinearTransformation inverse():0:0 -> inverse
com.google.common.math.LinearTransformation$VerticalLinearTransformation -> com.google.common.math.r:
    double x -> a
    com.google.common.math.LinearTransformation inverse -> b
    1:1:com.google.common.math.LinearTransformation createInverse():0:0 -> inverse
    1:1:com.google.common.math.LinearTransformation inverse():0 -> inverse
    2:2:com.google.common.math.LinearTransformation inverse():0:0 -> inverse
com.google.common.math.LongMath -> com.google.common.math.LongMath:
    long[] halfPowersOf10 -> c
    int[] biggestSimpleBinomials -> f
    long[] factorials -> d
    byte[] maxLog10ForLeadingZeros -> a
    long[][] millerRabinBaseSets -> g
    long[] powersOf10 -> b
    int[] biggestBinomials -> e
    int lessThanBranchFree(long,long) -> a
    long multiplyFraction(long,long,long) -> b
    1:1:boolean com.google.common.math.LongMath$MillerRabinTester.test(long,long):0:0 -> isPrime
    1:1:boolean isPrime(long):0 -> isPrime
    2:2:boolean com.google.common.math.LongMath$MillerRabinTester.testWitness(long,long):0:0 -> isPrime
    2:2:boolean com.google.common.math.LongMath$MillerRabinTester.test(long,long):0 -> isPrime
    2:2:boolean isPrime(long):0 -> isPrime
    3:3:long com.google.common.math.LongMath$MillerRabinTester.powMod(long,long,long):0:0 -> isPrime
    3:3:boolean com.google.common.math.LongMath$MillerRabinTester.testWitness(long,long):0 -> isPrime
    3:3:boolean com.google.common.math.LongMath$MillerRabinTester.test(long,long):0 -> isPrime
    3:3:boolean isPrime(long):0 -> isPrime
    4:4:boolean com.google.common.math.LongMath$MillerRabinTester.testWitness(long,long):0:0 -> isPrime
    4:4:boolean com.google.common.math.LongMath$MillerRabinTester.test(long,long):0 -> isPrime
    4:4:boolean isPrime(long):0 -> isPrime
    5:5:boolean isPrime(long):0:0 -> isPrime
    1:1:int log10Floor(long):0:0 -> log10
    1:1:int log10(long,java.math.RoundingMode):0 -> log10
    2:2:int log10(long,java.math.RoundingMode):0:0 -> log10
com.google.common.math.LongMath$1 -> com.google.common.math.s:
    int[] $SwitchMap$java$math$RoundingMode -> a
com.google.common.math.LongMath$MillerRabinTester -> com.google.common.math.v:
    com.google.common.math.LongMath$MillerRabinTester SMALL -> a
    com.google.common.math.LongMath$MillerRabinTester[] $VALUES -> c
    com.google.common.math.LongMath$MillerRabinTester LARGE -> b
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:void <init>(java.lang.String,int,com.google.common.math.LongMath$1):0 -> <init>
    com.google.common.math.LongMath$MillerRabinTester[] $values() -> a
    long mulMod(long,long,long) -> b
    long squareMod(long,long) -> c
com.google.common.math.LongMath$MillerRabinTester$1 -> com.google.common.math.t:
    long mulMod(long,long,long) -> b
    long squareMod(long,long) -> c
com.google.common.math.LongMath$MillerRabinTester$2 -> com.google.common.math.u:
    long mulMod(long,long,long) -> b
    long squareMod(long,long) -> c
    long times2ToThe32Mod(long,long) -> d
com.google.common.math.PairedStats -> com.google.common.math.PairedStats:
    com.google.common.math.Stats xStats -> a
    com.google.common.math.Stats yStats -> b
    double sumOfProductsOfDeltas -> c
    double sumOfProductsOfDeltas() -> a
com.google.common.math.PairedStatsAccumulator -> com.google.common.math.PairedStatsAccumulator:
    double sumOfProductsOfDeltas -> c
    com.google.common.math.StatsAccumulator xStats -> a
    com.google.common.math.StatsAccumulator yStats -> b
    1:1:double ensureInUnitRange(double):0:0 -> pearsonsCorrelationCoefficient
    1:1:double pearsonsCorrelationCoefficient():0 -> pearsonsCorrelationCoefficient
com.google.common.math.Quantiles -> com.google.common.math.Quantiles:
    1:1:void checkIndex(int,int):0:0 -> a
    1:1:void access$300(int,int):0 -> a
    1:1:boolean containsNaN(double[]):0:0 -> b
    1:1:boolean access$600(double[]):0 -> b
    void access$700(int,double[],int,int) -> c
    double access$800(double,double,double,double) -> d
    void access$900(int[],int,int,double[],int,int) -> e
    1:1:int chooseNextSelection(int[],int,int,int,int):0:0 -> f
    1:1:void selectAllInPlace(int[],int,int,double[],int,int):0 -> f
    2:2:void selectAllInPlace(int[],int,int,double[],int,int):0:0 -> f
    1:1:void swap(double[],int,int):0:0 -> g
    1:1:void selectInPlace(int,double[],int,int):0 -> g
    2:2:void movePivotToStartOfSlice(double[],int,int):0:0 -> g
    2:2:int partition(double[],int,int):0 -> g
    2:2:void selectInPlace(int,double[],int,int):0 -> g
    3:3:void swap(double[],int,int):0:0 -> g
    3:3:void movePivotToStartOfSlice(double[],int,int):0 -> g
    3:3:int partition(double[],int,int):0 -> g
    3:3:void selectInPlace(int,double[],int,int):0 -> g
    4:4:int partition(double[],int,int):0:0 -> g
    4:4:void selectInPlace(int,double[],int,int):0 -> g
    5:5:void swap(double[],int,int):0:0 -> g
    5:5:int partition(double[],int,int):0 -> g
    5:5:void selectInPlace(int,double[],int,int):0 -> g
com.google.common.math.Quantiles$1 -> com.google.common.math.w:
com.google.common.math.Quantiles$Scale -> com.google.common.math.Quantiles$Scale:
    int scale -> a
    1:1:void <init>(int):0:0 -> <init>
    1:1:void <init>(int,com.google.common.math.Quantiles$1):0 -> <init>
com.google.common.math.Quantiles$ScaleAndIndex -> com.google.common.math.Quantiles$ScaleAndIndex:
    int index -> b
    int scale -> a
    1:1:void <init>(int,int):0:0 -> <init>
    1:1:void <init>(int,int,com.google.common.math.Quantiles$1):0 -> <init>
    1:1:double[] com.google.common.math.Quantiles.intsToDoubles(int[]):0:0 -> compute
    1:1:double[] com.google.common.math.Quantiles.access$500(int[]):0 -> compute
    1:1:double compute(int[]):0 -> compute
    2:2:double compute(int[]):0:0 -> compute
    3:3:double[] com.google.common.math.Quantiles.longsToDoubles(long[]):0:0 -> compute
    3:3:double[] com.google.common.math.Quantiles.access$400(long[]):0 -> compute
    3:3:double compute(long[]):0 -> compute
    4:4:double compute(long[]):0:0 -> compute
com.google.common.math.Quantiles$ScaleAndIndexes -> com.google.common.math.Quantiles$ScaleAndIndexes:
    int[] indexes -> b
    int scale -> a
    1:1:void <init>(int,int[]):0:0 -> <init>
    1:1:void <init>(int,int[],com.google.common.math.Quantiles$1):0 -> <init>
    1:1:double[] com.google.common.math.Quantiles.intsToDoubles(int[]):0:0 -> compute
    1:1:double[] com.google.common.math.Quantiles.access$500(int[]):0 -> compute
    1:1:java.util.Map compute(int[]):0 -> compute
    2:2:java.util.Map compute(int[]):0:0 -> compute
    3:3:double[] com.google.common.math.Quantiles.longsToDoubles(long[]):0:0 -> compute
    3:3:double[] com.google.common.math.Quantiles.access$400(long[]):0 -> compute
    3:3:java.util.Map compute(long[]):0 -> compute
    4:4:java.util.Map compute(long[]):0:0 -> compute
com.google.common.math.Stats -> com.google.common.math.Stats:
    double mean -> b
    long count -> a
    double sumOfSquaresOfDeltas -> c
    double min -> d
    double max -> e
    com.google.common.math.Stats readFrom(java.nio.ByteBuffer) -> a
    double sumOfSquaresOfDeltas() -> b
    void writeTo(java.nio.ByteBuffer) -> c
com.google.common.math.StatsAccumulator -> com.google.common.math.StatsAccumulator:
    double mean -> b
    long count -> a
    double sumOfSquaresOfDeltas -> c
    double min -> d
    double max -> e
    double calculateNewMeanNonFinite(double,double) -> a
    1:1:double sumOfSquaresOfDeltas():0:0 -> addAll
    1:1:void addAll(com.google.common.math.StatsAccumulator):0 -> addAll
    2:2:void addAll(com.google.common.math.StatsAccumulator):0:0 -> addAll
    void merge(long,double,double,double,double) -> b
    double sumOfSquaresOfDeltas() -> c
com.google.common.math.ToDoubleRounder -> com.google.common.math.y:
    java.lang.Number minus(java.lang.Number,java.lang.Number) -> a
    double roundToDouble(java.lang.Number,java.math.RoundingMode) -> b
    double roundToDoubleArbitrarily(java.lang.Number) -> c
    int sign(java.lang.Number) -> d
    java.lang.Number toX(double,java.math.RoundingMode) -> e
com.google.common.math.ToDoubleRounder$1 -> com.google.common.math.x:
    int[] $SwitchMap$java$math$RoundingMode -> a
com.google.common.net.HostAndPort -> com.google.common.net.HostAndPort:
    java.lang.String host -> a
    int port -> b
    boolean hasBracketlessColons -> c
    boolean isValidPort(int) -> a
    1:1:java.lang.String[] getHostAndPortFromBracketedHost(java.lang.String):0:0 -> fromString
    1:1:com.google.common.net.HostAndPort fromString(java.lang.String):0 -> fromString
    2:2:com.google.common.net.HostAndPort fromString(java.lang.String):0:0 -> fromString
com.google.common.net.HostSpecifier -> com.google.common.net.HostSpecifier:
    java.lang.String canonicalForm -> a
com.google.common.net.InetAddresses -> com.google.common.net.InetAddresses:
    java.net.Inet4Address ANY4 -> d
    java.net.Inet4Address LOOPBACK4 -> c
    com.google.common.base.CharMatcher IPV6_DELIMITER_MATCHER -> b
    com.google.common.base.CharMatcher IPV4_DELIMITER_MATCHER -> a
    java.net.Inet4Address access$000() -> a
    java.net.InetAddress bytesToInetAddress(byte[]) -> b
    java.net.InetAddress forUriStringNoThrow(java.lang.String) -> c
    java.lang.IllegalArgumentException formatIllegalArgumentException(java.lang.String,java.lang.Object[]) -> d
    java.net.InetAddress fromBigInteger(java.math.BigInteger,boolean) -> e
    java.net.Inet4Address getInet4Address(byte[]) -> f
    1:1:java.lang.String convertDottedQuadToHex(java.lang.String):0:0 -> g
    1:1:byte[] ipStringToBytes(java.lang.String):0 -> g
    2:2:byte[] ipStringToBytes(java.lang.String):0:0 -> g
    3:3:byte[] textToNumericFormatV6(java.lang.String):0:0 -> g
    3:3:byte[] ipStringToBytes(java.lang.String):0 -> g
    4:4:short parseHextet(java.lang.String,int,int):0:0 -> g
    4:4:byte[] textToNumericFormatV6(java.lang.String):0 -> g
    4:4:byte[] ipStringToBytes(java.lang.String):0 -> g
    5:5:byte[] textToNumericFormatV6(java.lang.String):0:0 -> g
    5:5:byte[] ipStringToBytes(java.lang.String):0 -> g
    6:6:short parseHextet(java.lang.String,int,int):0:0 -> g
    6:6:byte[] textToNumericFormatV6(java.lang.String):0 -> g
    6:6:byte[] ipStringToBytes(java.lang.String):0 -> g
    7:7:byte[] textToNumericFormatV6(java.lang.String):0:0 -> g
    7:7:byte[] ipStringToBytes(java.lang.String):0 -> g
    8:8:byte[] ipStringToBytes(java.lang.String):0:0 -> g
    byte parseOctet(java.lang.String,int,int) -> h
    byte[] textToNumericFormatV4(java.lang.String) -> i
    1:1:void compressLongestRunOfZeroes(int[]):0:0 -> toAddrString
    1:1:java.lang.String toAddrString(java.net.InetAddress):0 -> toAddrString
    2:2:java.lang.String hextetsToIPv6String(int[]):0:0 -> toAddrString
    2:2:java.lang.String toAddrString(java.net.InetAddress):0 -> toAddrString
com.google.common.net.InetAddresses$TeredoInfo -> com.google.common.net.InetAddresses$TeredoInfo:
    java.net.Inet4Address client -> b
    int flags -> d
    java.net.Inet4Address server -> a
    int port -> c
com.google.common.net.InternetDomainName -> com.google.common.net.InternetDomainName:
    com.google.common.base.CharMatcher DASH_MATCHER -> h
    com.google.common.base.CharMatcher LETTER_MATCHER -> j
    com.google.common.base.CharMatcher DIGIT_MATCHER -> i
    com.google.common.base.Joiner DOT_JOINER -> g
    com.google.common.base.CharMatcher DOTS_MATCHER -> e
    com.google.common.base.Splitter DOT_SPLITTER -> f
    java.lang.String name -> a
    com.google.common.collect.ImmutableList parts -> b
    int registrySuffixIndex -> d
    com.google.common.base.CharMatcher PART_CHAR_MATCHER -> k
    int publicSuffixIndex -> c
    1:1:boolean validateSyntax(java.util.List):0:0 -> <init>
    1:1:void <init>(java.lang.String):0 -> <init>
    2:2:void <init>(java.lang.String):0:0 -> <init>
    com.google.common.net.InternetDomainName ancestor(int) -> a
    1:1:boolean matchesType(com.google.common.base.Optional,com.google.common.base.Optional):0:0 -> b
    1:1:int findSuffixOfType(com.google.common.base.Optional):0 -> b
    2:2:int findSuffixOfType(com.google.common.base.Optional):0:0 -> b
    3:3:boolean matchesWildcardSuffixType(com.google.common.base.Optional,java.lang.String):0:0 -> b
    3:3:int findSuffixOfType(com.google.common.base.Optional):0 -> b
    4:4:boolean matchesType(com.google.common.base.Optional,com.google.common.base.Optional):0:0 -> b
    4:4:boolean matchesWildcardSuffixType(com.google.common.base.Optional,java.lang.String):0 -> b
    4:4:int findSuffixOfType(com.google.common.base.Optional):0 -> b
    boolean validatePart(java.lang.String,boolean) -> c
com.google.common.net.MediaType -> com.google.common.net.MediaType:
    com.google.common.base.CharMatcher TOKEN_MATCHER -> h
    com.google.common.base.CharMatcher LINEAR_WHITE_SPACE -> j
    com.google.common.collect.ImmutableListMultimap parameters -> c
    com.google.common.base.CharMatcher QUOTED_TEXT_MATCHER -> i
    com.google.common.base.Optional parsedCharset -> f
    java.util.Map KNOWN_TYPES -> k
    java.lang.String type -> a
    int hashCode -> e
    java.lang.String subtype -> b
    com.google.common.collect.ImmutableListMultimap UTF_8_CONSTANT_PARAMETERS -> g
    com.google.common.base.Joiner$MapJoiner PARAMETER_JOINER -> l
    java.lang.String toString -> d
    com.google.common.base.CharMatcher access$000() -> a
    com.google.common.net.MediaType create(java.lang.String,java.lang.String,com.google.common.collect.Multimap) -> b
    1:1:com.google.common.net.MediaType addKnownType(com.google.common.net.MediaType):0:0 -> c
    1:1:com.google.common.net.MediaType createConstant(java.lang.String,java.lang.String):0 -> c
    2:2:com.google.common.net.MediaType createConstant(java.lang.String,java.lang.String):0:0 -> c
    1:1:com.google.common.net.MediaType addKnownType(com.google.common.net.MediaType):0:0 -> d
    1:1:com.google.common.net.MediaType createConstantUtf8(java.lang.String,java.lang.String):0 -> d
    2:2:com.google.common.net.MediaType createConstantUtf8(java.lang.String,java.lang.String):0:0 -> d
    java.lang.String normalizeParameterValue(java.lang.String,java.lang.String) -> e
    java.lang.String normalizeToken(java.lang.String) -> f
    java.util.Map parametersAsMap() -> g
    1:1:char com.google.common.net.MediaType$Tokenizer.consumeCharacter(com.google.common.base.CharMatcher):0:0 -> parse
    1:1:com.google.common.net.MediaType parse(java.lang.String):0 -> parse
    2:2:com.google.common.net.MediaType parse(java.lang.String):0:0 -> parse
    1:1:java.lang.String computeToString():0:0 -> toString
    1:1:java.lang.String toString():0 -> toString
    2:2:java.lang.String toString():0:0 -> toString
com.google.common.net.MediaType$1 -> com.google.common.net.a:
    1:1:com.google.common.collect.ImmutableMultiset apply(java.util.Collection):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.net.MediaType$2 -> com.google.common.net.b:
    1:1:java.lang.String apply(java.lang.String):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
    2:2:java.lang.String com.google.common.net.MediaType.escapeAndQuote(java.lang.String):0:0 -> apply
    2:2:java.lang.String com.google.common.net.MediaType.access$100(java.lang.String):0 -> apply
    2:2:java.lang.String apply(java.lang.String):0 -> apply
    2:2:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.net.MediaType$Tokenizer -> com.google.common.net.c:
    java.lang.String input -> a
    int position -> b
    char consumeCharacter(char) -> a
    java.lang.String consumeToken(com.google.common.base.CharMatcher) -> b
    java.lang.String consumeTokenIfPresent(com.google.common.base.CharMatcher) -> c
    boolean hasMore() -> d
    char previewChar() -> e
com.google.common.net.PercentEscaper -> com.google.common.net.PercentEscaper:
    char[] PLUS_SIGN -> d
    char[] UPPER_HEX_DIGITS -> e
    boolean[] safeOctets -> c
    boolean plusForSpace -> b
    1:1:boolean[] createSafeOctets(java.lang.String):0:0 -> <init>
    1:1:void <init>(java.lang.String,boolean):0 -> <init>
    2:2:void <init>(java.lang.String,boolean):0:0 -> <init>
com.google.common.net.UrlEscapers -> com.google.common.net.UrlEscapers:
    com.google.common.escape.Escaper URL_FORM_PARAMETER_ESCAPER -> a
    com.google.common.escape.Escaper URL_PATH_SEGMENT_ESCAPER -> b
    com.google.common.escape.Escaper URL_FRAGMENT_ESCAPER -> c
com.google.common.primitives.-$$Lambda$TrwGmgT2l69myqmU7Htm-2HA_-k -> com.google.common.primitives.a:
    com.google.common.primitives.ImmutableIntArray$Builder f$0 -> a
com.google.common.primitives.-$$Lambda$cTT5Rvns9wlA5QO2KM8I2YbQ570 -> com.google.common.primitives.b:
    com.google.common.primitives.ImmutableDoubleArray$Builder f$0 -> a
com.google.common.primitives.-$$Lambda$h-1KKPHlGjwLS1aj_6_2GNlfBbs -> com.google.common.primitives.c:
    com.google.common.primitives.ImmutableLongArray$Builder f$0 -> a
com.google.common.primitives.Booleans -> com.google.common.primitives.Booleans:
    1:1:int indexOf(boolean[],boolean,int,int):0:0 -> indexOf
    1:1:int indexOf(boolean[],boolean):0 -> indexOf
    1:1:int lastIndexOf(boolean[],boolean,int,int):0:0 -> lastIndexOf
    1:1:int lastIndexOf(boolean[],boolean):0 -> lastIndexOf
    1:1:boolean[] com.google.common.primitives.Booleans$BooleanArrayAsList.toBooleanArray():0:0 -> toArray
    1:1:boolean[] toArray(java.util.Collection):0 -> toArray
    2:2:boolean[] toArray(java.util.Collection):0:0 -> toArray
com.google.common.primitives.Booleans$BooleanArrayAsList -> com.google.common.primitives.d:
    boolean[] array -> a
    int start -> b
    int end -> c
    1:1:void <init>(boolean[],int,int):0:0 -> <init>
    1:1:void <init>(boolean[]):0 -> <init>
    1:1:int com.google.common.primitives.Booleans.indexOf(boolean[],boolean,int,int):0:0 -> contains
    1:1:int com.google.common.primitives.Booleans.access$000(boolean[],boolean,int,int):0 -> contains
    1:1:boolean contains(java.lang.Object):0 -> contains
    1:1:java.lang.Boolean get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
    1:1:int com.google.common.primitives.Booleans.indexOf(boolean[],boolean,int,int):0:0 -> indexOf
    1:1:int com.google.common.primitives.Booleans.access$000(boolean[],boolean,int,int):0 -> indexOf
    1:1:int indexOf(java.lang.Object):0 -> indexOf
    2:2:int indexOf(java.lang.Object):0:0 -> indexOf
    1:1:int com.google.common.primitives.Booleans.lastIndexOf(boolean[],boolean,int,int):0:0 -> lastIndexOf
    1:1:int com.google.common.primitives.Booleans.access$100(boolean[],boolean,int,int):0 -> lastIndexOf
    1:1:int lastIndexOf(java.lang.Object):0 -> lastIndexOf
    2:2:int lastIndexOf(java.lang.Object):0:0 -> lastIndexOf
    1:1:java.lang.Boolean set(int,java.lang.Boolean):0:0 -> set
    1:1:java.lang.Object set(int,java.lang.Object):0 -> set
com.google.common.primitives.Booleans$BooleanComparator -> com.google.common.primitives.e:
    com.google.common.primitives.Booleans$BooleanComparator TRUE_FIRST -> c
    com.google.common.primitives.Booleans$BooleanComparator FALSE_FIRST -> d
    com.google.common.primitives.Booleans$BooleanComparator[] $VALUES -> e
    java.lang.String toString -> b
    int trueValue -> a
    com.google.common.primitives.Booleans$BooleanComparator[] $values() -> a
    1:1:int compare(java.lang.Boolean,java.lang.Boolean):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
com.google.common.primitives.Booleans$LexicographicalComparator -> com.google.common.primitives.f:
    com.google.common.primitives.Booleans$LexicographicalComparator[] $VALUES -> b
    com.google.common.primitives.Booleans$LexicographicalComparator INSTANCE -> a
    com.google.common.primitives.Booleans$LexicographicalComparator[] $values() -> a
    1:1:int compare(boolean[],boolean[]):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
com.google.common.primitives.Bytes -> com.google.common.primitives.Bytes:
    1:1:int indexOf(byte[],byte,int,int):0:0 -> indexOf
    1:1:int indexOf(byte[],byte):0 -> indexOf
    1:1:int lastIndexOf(byte[],byte,int,int):0:0 -> lastIndexOf
    1:1:int lastIndexOf(byte[],byte):0 -> lastIndexOf
    1:1:byte[] com.google.common.primitives.Bytes$ByteArrayAsList.toByteArray():0:0 -> toArray
    1:1:byte[] toArray(java.util.Collection):0 -> toArray
    2:2:byte[] toArray(java.util.Collection):0:0 -> toArray
com.google.common.primitives.Bytes$ByteArrayAsList -> com.google.common.primitives.g:
    byte[] array -> a
    int start -> b
    int end -> c
    1:1:void <init>(byte[],int,int):0:0 -> <init>
    1:1:void <init>(byte[]):0 -> <init>
    1:1:int com.google.common.primitives.Bytes.indexOf(byte[],byte,int,int):0:0 -> contains
    1:1:int com.google.common.primitives.Bytes.access$000(byte[],byte,int,int):0 -> contains
    1:1:boolean contains(java.lang.Object):0 -> contains
    1:1:java.lang.Byte get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
    1:1:int com.google.common.primitives.Bytes.indexOf(byte[],byte,int,int):0:0 -> indexOf
    1:1:int com.google.common.primitives.Bytes.access$000(byte[],byte,int,int):0 -> indexOf
    1:1:int indexOf(java.lang.Object):0 -> indexOf
    2:2:int indexOf(java.lang.Object):0:0 -> indexOf
    1:1:int com.google.common.primitives.Bytes.lastIndexOf(byte[],byte,int,int):0:0 -> lastIndexOf
    1:1:int com.google.common.primitives.Bytes.access$100(byte[],byte,int,int):0 -> lastIndexOf
    1:1:int lastIndexOf(java.lang.Object):0 -> lastIndexOf
    2:2:int lastIndexOf(java.lang.Object):0:0 -> lastIndexOf
    1:1:java.lang.Byte set(int,java.lang.Byte):0:0 -> set
    1:1:java.lang.Object set(int,java.lang.Object):0 -> set
com.google.common.primitives.Chars -> com.google.common.primitives.Chars:
    1:1:int indexOf(char[],char,int,int):0:0 -> indexOf
    1:1:int indexOf(char[],char):0 -> indexOf
    1:1:int lastIndexOf(char[],char,int,int):0:0 -> lastIndexOf
    1:1:int lastIndexOf(char[],char):0 -> lastIndexOf
    1:1:char[] com.google.common.primitives.Chars$CharArrayAsList.toCharArray():0:0 -> toArray
    1:1:char[] toArray(java.util.Collection):0 -> toArray
    2:2:char[] toArray(java.util.Collection):0:0 -> toArray
com.google.common.primitives.Chars$CharArrayAsList -> com.google.common.primitives.h:
    char[] array -> a
    int start -> b
    int end -> c
    1:1:void <init>(char[],int,int):0:0 -> <init>
    1:1:void <init>(char[]):0 -> <init>
    1:1:int com.google.common.primitives.Chars.indexOf(char[],char,int,int):0:0 -> contains
    1:1:int com.google.common.primitives.Chars.access$000(char[],char,int,int):0 -> contains
    1:1:boolean contains(java.lang.Object):0 -> contains
    1:1:java.lang.Character get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
    1:1:int com.google.common.primitives.Chars.indexOf(char[],char,int,int):0:0 -> indexOf
    1:1:int com.google.common.primitives.Chars.access$000(char[],char,int,int):0 -> indexOf
    1:1:int indexOf(java.lang.Object):0 -> indexOf
    2:2:int indexOf(java.lang.Object):0:0 -> indexOf
    1:1:int com.google.common.primitives.Chars.lastIndexOf(char[],char,int,int):0:0 -> lastIndexOf
    1:1:int com.google.common.primitives.Chars.access$100(char[],char,int,int):0 -> lastIndexOf
    1:1:int lastIndexOf(java.lang.Object):0 -> lastIndexOf
    2:2:int lastIndexOf(java.lang.Object):0:0 -> lastIndexOf
    1:1:java.lang.Character set(int,java.lang.Character):0:0 -> set
    1:1:java.lang.Object set(int,java.lang.Object):0 -> set
com.google.common.primitives.Chars$LexicographicalComparator -> com.google.common.primitives.i:
    com.google.common.primitives.Chars$LexicographicalComparator INSTANCE -> a
    com.google.common.primitives.Chars$LexicographicalComparator[] $VALUES -> b
    com.google.common.primitives.Chars$LexicographicalComparator[] $values() -> a
    1:1:int compare(char[],char[]):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
com.google.common.primitives.Doubles -> com.google.common.primitives.Doubles:
    java.util.regex.Pattern FLOATING_POINT_PATTERN -> a
    1:1:java.util.regex.Pattern fpPattern():0:0 -> <clinit>
    1:1:void <clinit>():0 -> <clinit>
    2:2:void <clinit>():0:0 -> <clinit>
    1:1:int indexOf(double[],double,int,int):0:0 -> indexOf
    1:1:int indexOf(double[],double):0 -> indexOf
    1:1:int lastIndexOf(double[],double,int,int):0:0 -> lastIndexOf
    1:1:int lastIndexOf(double[],double):0 -> lastIndexOf
    1:1:double[] com.google.common.primitives.Doubles$DoubleArrayAsList.toDoubleArray():0:0 -> toArray
    1:1:double[] toArray(java.util.Collection):0 -> toArray
    2:2:double[] toArray(java.util.Collection):0:0 -> toArray
com.google.common.primitives.Doubles$DoubleArrayAsList -> com.google.common.primitives.j:
    double[] array -> a
    int start -> b
    int end -> c
    1:1:void <init>(double[],int,int):0:0 -> <init>
    1:1:void <init>(double[]):0 -> <init>
    1:1:int com.google.common.primitives.Doubles.access$000(double[],double,int,int):0:0 -> contains
    1:1:boolean contains(java.lang.Object):0 -> contains
    2:2:int com.google.common.primitives.Doubles.indexOf(double[],double,int,int):0:0 -> contains
    2:2:int com.google.common.primitives.Doubles.access$000(double[],double,int,int):0 -> contains
    2:2:boolean contains(java.lang.Object):0 -> contains
    1:1:java.lang.Double get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
    1:1:int com.google.common.primitives.Doubles.access$000(double[],double,int,int):0:0 -> indexOf
    1:1:int indexOf(java.lang.Object):0 -> indexOf
    2:2:int com.google.common.primitives.Doubles.indexOf(double[],double,int,int):0:0 -> indexOf
    2:2:int com.google.common.primitives.Doubles.access$000(double[],double,int,int):0 -> indexOf
    2:2:int indexOf(java.lang.Object):0 -> indexOf
    3:3:int indexOf(java.lang.Object):0:0 -> indexOf
    1:1:int com.google.common.primitives.Doubles.access$100(double[],double,int,int):0:0 -> lastIndexOf
    1:1:int lastIndexOf(java.lang.Object):0 -> lastIndexOf
    2:2:int com.google.common.primitives.Doubles.lastIndexOf(double[],double,int,int):0:0 -> lastIndexOf
    2:2:int com.google.common.primitives.Doubles.access$100(double[],double,int,int):0 -> lastIndexOf
    2:2:int lastIndexOf(java.lang.Object):0 -> lastIndexOf
    3:3:int lastIndexOf(java.lang.Object):0:0 -> lastIndexOf
    1:1:java.lang.Double set(int,java.lang.Double):0:0 -> set
    1:1:java.lang.Object set(int,java.lang.Object):0 -> set
    1:1:java.util.Spliterator$OfDouble spliterator():0:0 -> spliterator
    1:1:java.util.Spliterator spliterator():0 -> spliterator
com.google.common.primitives.Doubles$DoubleConverter -> com.google.common.primitives.k:
    com.google.common.primitives.Doubles$DoubleConverter INSTANCE -> c
    1:1:java.lang.String doBackward(java.lang.Double):0:0 -> doBackward
    1:1:java.lang.Object doBackward(java.lang.Object):0 -> doBackward
    1:1:java.lang.Double doForward(java.lang.String):0:0 -> doForward
    1:1:java.lang.Object doForward(java.lang.Object):0 -> doForward
com.google.common.primitives.Doubles$LexicographicalComparator -> com.google.common.primitives.l:
    com.google.common.primitives.Doubles$LexicographicalComparator INSTANCE -> a
    com.google.common.primitives.Doubles$LexicographicalComparator[] $VALUES -> b
    com.google.common.primitives.Doubles$LexicographicalComparator[] $values() -> a
    1:1:int compare(double[],double[]):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
com.google.common.primitives.DoublesMethodsForWeb -> com.google.common.primitives.m:
com.google.common.primitives.Floats -> com.google.common.primitives.Floats:
    1:1:void com.google.common.primitives.FloatsMethodsForWeb.<init>():0:0 -> <init>
    1:1:void <init>():0 -> <init>
    1:1:int indexOf(float[],float,int,int):0:0 -> indexOf
    1:1:int indexOf(float[],float):0 -> indexOf
    1:1:int lastIndexOf(float[],float,int,int):0:0 -> lastIndexOf
    1:1:int lastIndexOf(float[],float):0 -> lastIndexOf
    1:1:float[] com.google.common.primitives.Floats$FloatArrayAsList.toFloatArray():0:0 -> toArray
    1:1:float[] toArray(java.util.Collection):0 -> toArray
    2:2:float[] toArray(java.util.Collection):0:0 -> toArray
com.google.common.primitives.Floats$FloatArrayAsList -> com.google.common.primitives.n:
    float[] array -> a
    int start -> b
    int end -> c
    1:1:void <init>(float[],int,int):0:0 -> <init>
    1:1:void <init>(float[]):0 -> <init>
    1:1:int com.google.common.primitives.Floats.indexOf(float[],float,int,int):0:0 -> contains
    1:1:int com.google.common.primitives.Floats.access$000(float[],float,int,int):0 -> contains
    1:1:boolean contains(java.lang.Object):0 -> contains
    1:1:java.lang.Float get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
    1:1:int com.google.common.primitives.Floats.indexOf(float[],float,int,int):0:0 -> indexOf
    1:1:int com.google.common.primitives.Floats.access$000(float[],float,int,int):0 -> indexOf
    1:1:int indexOf(java.lang.Object):0 -> indexOf
    2:2:int indexOf(java.lang.Object):0:0 -> indexOf
    1:1:int com.google.common.primitives.Floats.lastIndexOf(float[],float,int,int):0:0 -> lastIndexOf
    1:1:int com.google.common.primitives.Floats.access$100(float[],float,int,int):0 -> lastIndexOf
    1:1:int lastIndexOf(java.lang.Object):0 -> lastIndexOf
    2:2:int lastIndexOf(java.lang.Object):0:0 -> lastIndexOf
    1:1:java.lang.Float set(int,java.lang.Float):0:0 -> set
    1:1:java.lang.Object set(int,java.lang.Object):0 -> set
com.google.common.primitives.Floats$FloatConverter -> com.google.common.primitives.o:
    com.google.common.primitives.Floats$FloatConverter INSTANCE -> c
    1:1:java.lang.String doBackward(java.lang.Float):0:0 -> doBackward
    1:1:java.lang.Object doBackward(java.lang.Object):0 -> doBackward
    1:1:java.lang.Float doForward(java.lang.String):0:0 -> doForward
    1:1:java.lang.Object doForward(java.lang.Object):0 -> doForward
com.google.common.primitives.Floats$LexicographicalComparator -> com.google.common.primitives.p:
    com.google.common.primitives.Floats$LexicographicalComparator[] $VALUES -> b
    com.google.common.primitives.Floats$LexicographicalComparator INSTANCE -> a
    com.google.common.primitives.Floats$LexicographicalComparator[] $values() -> a
    1:1:int compare(float[],float[]):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
com.google.common.primitives.ImmutableDoubleArray -> com.google.common.primitives.ImmutableDoubleArray:
    double[] array -> a
    com.google.common.primitives.ImmutableDoubleArray EMPTY -> d
    int start -> b
    int end -> c
    1:1:void <init>(double[],int,int):0:0 -> <init>
    1:1:void <init>(double[]):0 -> <init>
    2:2:void <init>(double[],int,int):0:0 -> <init>
    2:2:void <init>(double[],int,int,com.google.common.primitives.ImmutableDoubleArray$1):0 -> <init>
    double[] access$000(com.google.common.primitives.ImmutableDoubleArray) -> a
    int access$100(com.google.common.primitives.ImmutableDoubleArray) -> b
    com.google.common.primitives.ImmutableDoubleArray access$200() -> c
    1:1:java.util.Spliterator$OfDouble spliterator():0:0 -> d
    1:1:java.util.Spliterator$OfDouble access$500(com.google.common.primitives.ImmutableDoubleArray):0 -> d
    boolean access$600(double,double) -> e
    boolean areEqual(double,double) -> f
    1:1:boolean isPartialView():0:0 -> trimmed
    1:1:com.google.common.primitives.ImmutableDoubleArray trimmed():0 -> trimmed
    2:2:com.google.common.primitives.ImmutableDoubleArray trimmed():0:0 -> trimmed
com.google.common.primitives.ImmutableDoubleArray$1 -> com.google.common.primitives.q:
com.google.common.primitives.ImmutableDoubleArray$AsList -> com.google.common.primitives.r:
    com.google.common.primitives.ImmutableDoubleArray parent -> a
    1:1:void <init>(com.google.common.primitives.ImmutableDoubleArray):0:0 -> <init>
    1:1:void <init>(com.google.common.primitives.ImmutableDoubleArray,com.google.common.primitives.ImmutableDoubleArray$1):0 -> <init>
    1:1:java.lang.Double get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
com.google.common.primitives.ImmutableDoubleArray$Builder -> com.google.common.primitives.ImmutableDoubleArray$Builder:
    double[] array -> a
    int count -> b
    1:1:int expandedCapacity(int,int):0:0 -> a
    1:1:void ensureRoomFor(int):0 -> a
    2:2:void ensureRoomFor(int):0:0 -> a
    3:3:int expandedCapacity(int,int):0:0 -> a
    3:3:void ensureRoomFor(int):0 -> a
com.google.common.primitives.ImmutableIntArray -> com.google.common.primitives.ImmutableIntArray:
    com.google.common.primitives.ImmutableIntArray EMPTY -> d
    int[] array -> a
    int start -> b
    int end -> c
    1:1:void <init>(int[],int,int):0:0 -> <init>
    1:1:void <init>(int[]):0 -> <init>
    2:2:void <init>(int[],int,int):0:0 -> <init>
    2:2:void <init>(int[],int,int,com.google.common.primitives.ImmutableIntArray$1):0 -> <init>
    int[] access$000(com.google.common.primitives.ImmutableIntArray) -> a
    int access$100(com.google.common.primitives.ImmutableIntArray) -> b
    com.google.common.primitives.ImmutableIntArray access$200() -> c
    1:1:java.util.Spliterator$OfInt spliterator():0:0 -> d
    1:1:java.util.Spliterator$OfInt access$500(com.google.common.primitives.ImmutableIntArray):0 -> d
    1:1:boolean isPartialView():0:0 -> trimmed
    1:1:com.google.common.primitives.ImmutableIntArray trimmed():0 -> trimmed
    2:2:com.google.common.primitives.ImmutableIntArray trimmed():0:0 -> trimmed
com.google.common.primitives.ImmutableIntArray$1 -> com.google.common.primitives.s:
com.google.common.primitives.ImmutableIntArray$AsList -> com.google.common.primitives.t:
    com.google.common.primitives.ImmutableIntArray parent -> a
    1:1:void <init>(com.google.common.primitives.ImmutableIntArray):0:0 -> <init>
    1:1:void <init>(com.google.common.primitives.ImmutableIntArray,com.google.common.primitives.ImmutableIntArray$1):0 -> <init>
    1:1:java.lang.Integer get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
com.google.common.primitives.ImmutableIntArray$Builder -> com.google.common.primitives.ImmutableIntArray$Builder:
    int[] array -> a
    int count -> b
    1:1:int expandedCapacity(int,int):0:0 -> a
    1:1:void ensureRoomFor(int):0 -> a
    2:2:void ensureRoomFor(int):0:0 -> a
    3:3:int expandedCapacity(int,int):0:0 -> a
    3:3:void ensureRoomFor(int):0 -> a
com.google.common.primitives.ImmutableLongArray -> com.google.common.primitives.ImmutableLongArray:
    long[] array -> a
    com.google.common.primitives.ImmutableLongArray EMPTY -> d
    int start -> b
    int end -> c
    1:1:void <init>(long[],int,int):0:0 -> <init>
    1:1:void <init>(long[]):0 -> <init>
    2:2:void <init>(long[],int,int):0:0 -> <init>
    2:2:void <init>(long[],int,int,com.google.common.primitives.ImmutableLongArray$1):0 -> <init>
    long[] access$000(com.google.common.primitives.ImmutableLongArray) -> a
    int access$100(com.google.common.primitives.ImmutableLongArray) -> b
    com.google.common.primitives.ImmutableLongArray access$200() -> c
    1:1:java.util.Spliterator$OfLong spliterator():0:0 -> d
    1:1:java.util.Spliterator$OfLong access$500(com.google.common.primitives.ImmutableLongArray):0 -> d
    1:1:boolean isPartialView():0:0 -> trimmed
    1:1:com.google.common.primitives.ImmutableLongArray trimmed():0 -> trimmed
    2:2:com.google.common.primitives.ImmutableLongArray trimmed():0:0 -> trimmed
com.google.common.primitives.ImmutableLongArray$1 -> com.google.common.primitives.u:
com.google.common.primitives.ImmutableLongArray$AsList -> com.google.common.primitives.v:
    com.google.common.primitives.ImmutableLongArray parent -> a
    1:1:void <init>(com.google.common.primitives.ImmutableLongArray):0:0 -> <init>
    1:1:void <init>(com.google.common.primitives.ImmutableLongArray,com.google.common.primitives.ImmutableLongArray$1):0 -> <init>
    1:1:java.lang.Long get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
com.google.common.primitives.ImmutableLongArray$Builder -> com.google.common.primitives.ImmutableLongArray$Builder:
    long[] array -> a
    int count -> b
    1:1:int expandedCapacity(int,int):0:0 -> a
    1:1:void ensureRoomFor(int):0 -> a
    2:2:void ensureRoomFor(int):0:0 -> a
    3:3:int expandedCapacity(int,int):0:0 -> a
    3:3:void ensureRoomFor(int):0 -> a
com.google.common.primitives.Ints -> com.google.common.primitives.Ints:
    1:1:void com.google.common.primitives.IntsMethodsForWeb.<init>():0:0 -> <init>
    1:1:void <init>():0 -> <init>
    1:1:int indexOf(int[],int,int,int):0:0 -> indexOf
    1:1:int indexOf(int[],int):0 -> indexOf
    1:1:int lastIndexOf(int[],int,int,int):0:0 -> lastIndexOf
    1:1:int lastIndexOf(int[],int):0 -> lastIndexOf
    1:1:int[] com.google.common.primitives.Ints$IntArrayAsList.toIntArray():0:0 -> toArray
    1:1:int[] toArray(java.util.Collection):0 -> toArray
    2:2:int[] toArray(java.util.Collection):0:0 -> toArray
com.google.common.primitives.Ints$IntArrayAsList -> com.google.common.primitives.w:
    int[] array -> a
    int start -> b
    int end -> c
    1:1:void <init>(int[],int,int):0:0 -> <init>
    1:1:void <init>(int[]):0 -> <init>
    1:1:int com.google.common.primitives.Ints.indexOf(int[],int,int,int):0:0 -> contains
    1:1:int com.google.common.primitives.Ints.access$000(int[],int,int,int):0 -> contains
    1:1:boolean contains(java.lang.Object):0 -> contains
    1:1:java.lang.Integer get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
    1:1:int com.google.common.primitives.Ints.indexOf(int[],int,int,int):0:0 -> indexOf
    1:1:int com.google.common.primitives.Ints.access$000(int[],int,int,int):0 -> indexOf
    1:1:int indexOf(java.lang.Object):0 -> indexOf
    2:2:int indexOf(java.lang.Object):0:0 -> indexOf
    1:1:int com.google.common.primitives.Ints.lastIndexOf(int[],int,int,int):0:0 -> lastIndexOf
    1:1:int com.google.common.primitives.Ints.access$100(int[],int,int,int):0 -> lastIndexOf
    1:1:int lastIndexOf(java.lang.Object):0 -> lastIndexOf
    2:2:int lastIndexOf(java.lang.Object):0:0 -> lastIndexOf
    1:1:java.lang.Integer set(int,java.lang.Integer):0:0 -> set
    1:1:java.lang.Object set(int,java.lang.Object):0 -> set
    1:1:java.util.Spliterator$OfInt spliterator():0:0 -> spliterator
    1:1:java.util.Spliterator spliterator():0 -> spliterator
com.google.common.primitives.Ints$IntConverter -> com.google.common.primitives.x:
    com.google.common.primitives.Ints$IntConverter INSTANCE -> c
    1:1:java.lang.String doBackward(java.lang.Integer):0:0 -> doBackward
    1:1:java.lang.Object doBackward(java.lang.Object):0 -> doBackward
    1:1:java.lang.Integer doForward(java.lang.String):0:0 -> doForward
    1:1:java.lang.Object doForward(java.lang.Object):0 -> doForward
com.google.common.primitives.Ints$LexicographicalComparator -> com.google.common.primitives.y:
    com.google.common.primitives.Ints$LexicographicalComparator INSTANCE -> a
    com.google.common.primitives.Ints$LexicographicalComparator[] $VALUES -> b
    com.google.common.primitives.Ints$LexicographicalComparator[] $values() -> a
    1:1:int compare(int[],int[]):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
com.google.common.primitives.Longs -> com.google.common.primitives.Longs:
    1:1:int indexOf(long[],long,int,int):0:0 -> indexOf
    1:1:int indexOf(long[],long):0 -> indexOf
    1:1:int lastIndexOf(long[],long,int,int):0:0 -> lastIndexOf
    1:1:int lastIndexOf(long[],long):0 -> lastIndexOf
    1:1:long[] com.google.common.primitives.Longs$LongArrayAsList.toLongArray():0:0 -> toArray
    1:1:long[] toArray(java.util.Collection):0 -> toArray
    2:2:long[] toArray(java.util.Collection):0:0 -> toArray
com.google.common.primitives.Longs$AsciiDigits -> com.google.common.primitives.z:
    byte[] asciiDigits -> a
    int digit(char) -> a
com.google.common.primitives.Longs$LexicographicalComparator -> com.google.common.primitives.a0:
    com.google.common.primitives.Longs$LexicographicalComparator[] $VALUES -> b
    com.google.common.primitives.Longs$LexicographicalComparator INSTANCE -> a
    com.google.common.primitives.Longs$LexicographicalComparator[] $values() -> a
    1:1:int compare(long[],long[]):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
com.google.common.primitives.Longs$LongArrayAsList -> com.google.common.primitives.b0:
    long[] array -> a
    int start -> b
    int end -> c
    1:1:void <init>(long[],int,int):0:0 -> <init>
    1:1:void <init>(long[]):0 -> <init>
    1:1:int com.google.common.primitives.Longs.indexOf(long[],long,int,int):0:0 -> contains
    1:1:int com.google.common.primitives.Longs.access$000(long[],long,int,int):0 -> contains
    1:1:boolean contains(java.lang.Object):0 -> contains
    1:1:java.lang.Long get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
    1:1:int com.google.common.primitives.Longs.indexOf(long[],long,int,int):0:0 -> indexOf
    1:1:int com.google.common.primitives.Longs.access$000(long[],long,int,int):0 -> indexOf
    1:1:int indexOf(java.lang.Object):0 -> indexOf
    2:2:int indexOf(java.lang.Object):0:0 -> indexOf
    1:1:int com.google.common.primitives.Longs.lastIndexOf(long[],long,int,int):0:0 -> lastIndexOf
    1:1:int com.google.common.primitives.Longs.access$100(long[],long,int,int):0 -> lastIndexOf
    1:1:int lastIndexOf(java.lang.Object):0 -> lastIndexOf
    2:2:int lastIndexOf(java.lang.Object):0:0 -> lastIndexOf
    1:1:java.lang.Long set(int,java.lang.Long):0:0 -> set
    1:1:java.lang.Object set(int,java.lang.Object):0 -> set
    1:1:java.util.Spliterator$OfLong spliterator():0:0 -> spliterator
    1:1:java.util.Spliterator spliterator():0 -> spliterator
com.google.common.primitives.Longs$LongConverter -> com.google.common.primitives.c0:
    com.google.common.primitives.Longs$LongConverter INSTANCE -> c
    1:1:java.lang.String doBackward(java.lang.Long):0:0 -> doBackward
    1:1:java.lang.Object doBackward(java.lang.Object):0 -> doBackward
    1:1:java.lang.Long doForward(java.lang.String):0:0 -> doForward
    1:1:java.lang.Object doForward(java.lang.Object):0 -> doForward
com.google.common.primitives.ParseRequest -> com.google.common.primitives.d0:
    java.lang.String rawValue -> a
    int radix -> b
    com.google.common.primitives.ParseRequest fromString(java.lang.String) -> a
com.google.common.primitives.Primitives -> com.google.common.primitives.Primitives:
    java.util.Map PRIMITIVE_TO_WRAPPER_TYPE -> a
    java.util.Map WRAPPER_TO_PRIMITIVE_TYPE -> b
    1:1:void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class):0:0 -> <clinit>
    1:1:void <clinit>():0 -> <clinit>
    2:2:void <clinit>():0:0 -> <clinit>
    3:3:void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class):0:0 -> <clinit>
    3:3:void <clinit>():0 -> <clinit>
    4:4:void <clinit>():0:0 -> <clinit>
    5:5:void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class):0:0 -> <clinit>
    5:5:void <clinit>():0 -> <clinit>
    6:6:void <clinit>():0:0 -> <clinit>
    7:7:void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class):0:0 -> <clinit>
    7:7:void <clinit>():0 -> <clinit>
    8:8:void <clinit>():0:0 -> <clinit>
    9:9:void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class):0:0 -> <clinit>
    9:9:void <clinit>():0 -> <clinit>
    10:10:void <clinit>():0:0 -> <clinit>
    11:11:void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class):0:0 -> <clinit>
    11:11:void <clinit>():0 -> <clinit>
    12:12:void <clinit>():0:0 -> <clinit>
    13:13:void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class):0:0 -> <clinit>
    13:13:void <clinit>():0 -> <clinit>
    14:14:void <clinit>():0:0 -> <clinit>
    15:15:void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class):0:0 -> <clinit>
    15:15:void <clinit>():0 -> <clinit>
    16:16:void <clinit>():0:0 -> <clinit>
    17:17:void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class):0:0 -> <clinit>
    17:17:void <clinit>():0 -> <clinit>
    18:18:void <clinit>():0:0 -> <clinit>
com.google.common.primitives.Shorts -> com.google.common.primitives.Shorts:
    1:1:void com.google.common.primitives.ShortsMethodsForWeb.<init>():0:0 -> <init>
    1:1:void <init>():0 -> <init>
    1:1:int indexOf(short[],short,int,int):0:0 -> indexOf
    1:1:int indexOf(short[],short):0 -> indexOf
    1:1:int lastIndexOf(short[],short,int,int):0:0 -> lastIndexOf
    1:1:int lastIndexOf(short[],short):0 -> lastIndexOf
    1:1:short[] com.google.common.primitives.Shorts$ShortArrayAsList.toShortArray():0:0 -> toArray
    1:1:short[] toArray(java.util.Collection):0 -> toArray
    2:2:short[] toArray(java.util.Collection):0:0 -> toArray
com.google.common.primitives.Shorts$LexicographicalComparator -> com.google.common.primitives.e0:
    com.google.common.primitives.Shorts$LexicographicalComparator[] $VALUES -> b
    com.google.common.primitives.Shorts$LexicographicalComparator INSTANCE -> a
    com.google.common.primitives.Shorts$LexicographicalComparator[] $values() -> a
    1:1:int compare(short[],short[]):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
com.google.common.primitives.Shorts$ShortArrayAsList -> com.google.common.primitives.f0:
    short[] array -> a
    int start -> b
    int end -> c
    1:1:void <init>(short[],int,int):0:0 -> <init>
    1:1:void <init>(short[]):0 -> <init>
    1:1:int com.google.common.primitives.Shorts.indexOf(short[],short,int,int):0:0 -> contains
    1:1:int com.google.common.primitives.Shorts.access$000(short[],short,int,int):0 -> contains
    1:1:boolean contains(java.lang.Object):0 -> contains
    1:1:java.lang.Short get(int):0:0 -> get
    1:1:java.lang.Object get(int):0 -> get
    1:1:int com.google.common.primitives.Shorts.indexOf(short[],short,int,int):0:0 -> indexOf
    1:1:int com.google.common.primitives.Shorts.access$000(short[],short,int,int):0 -> indexOf
    1:1:int indexOf(java.lang.Object):0 -> indexOf
    2:2:int indexOf(java.lang.Object):0:0 -> indexOf
    1:1:int com.google.common.primitives.Shorts.lastIndexOf(short[],short,int,int):0:0 -> lastIndexOf
    1:1:int com.google.common.primitives.Shorts.access$100(short[],short,int,int):0 -> lastIndexOf
    1:1:int lastIndexOf(java.lang.Object):0 -> lastIndexOf
    2:2:int lastIndexOf(java.lang.Object):0:0 -> lastIndexOf
    1:1:java.lang.Short set(int,java.lang.Short):0:0 -> set
    1:1:java.lang.Object set(int,java.lang.Object):0 -> set
com.google.common.primitives.Shorts$ShortConverter -> com.google.common.primitives.g0:
    com.google.common.primitives.Shorts$ShortConverter INSTANCE -> c
    1:1:java.lang.String doBackward(java.lang.Short):0:0 -> doBackward
    1:1:java.lang.Object doBackward(java.lang.Object):0 -> doBackward
    1:1:java.lang.Short doForward(java.lang.String):0:0 -> doForward
    1:1:java.lang.Object doForward(java.lang.Object):0 -> doForward
com.google.common.primitives.SignedBytes$LexicographicalComparator -> com.google.common.primitives.h0:
    com.google.common.primitives.SignedBytes$LexicographicalComparator INSTANCE -> a
    com.google.common.primitives.SignedBytes$LexicographicalComparator[] $VALUES -> b
    com.google.common.primitives.SignedBytes$LexicographicalComparator[] $values() -> a
    1:1:int compare(byte[],byte[]):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder -> com.google.common.primitives.j0:
    java.lang.String UNSAFE_COMPARATOR_NAME -> a
    java.util.Comparator BEST_COMPARATOR -> b
    1:1:java.util.Comparator getBestComparator():0:0 -> <clinit>
    1:1:void <clinit>():0 -> <clinit>
    2:2:java.util.Comparator com.google.common.primitives.UnsignedBytes.lexicographicalComparatorJavaImpl():0:0 -> <clinit>
    2:2:java.util.Comparator getBestComparator():0 -> <clinit>
    2:2:void <clinit>():0 -> <clinit>
    3:3:void <clinit>():0:0 -> <clinit>
com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator -> com.google.common.primitives.i0:
    com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator[] $VALUES -> b
    com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator INSTANCE -> a
    com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator[] $values() -> a
    1:1:int compare(byte[],byte[]):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
com.google.common.primitives.UnsignedInteger -> com.google.common.primitives.UnsignedInteger:
    int value -> a
com.google.common.primitives.UnsignedInts$LexicographicalComparator -> com.google.common.primitives.k0:
    com.google.common.primitives.UnsignedInts$LexicographicalComparator INSTANCE -> a
    com.google.common.primitives.UnsignedInts$LexicographicalComparator[] $VALUES -> b
    com.google.common.primitives.UnsignedInts$LexicographicalComparator[] $values() -> a
    1:1:int compare(int[],int[]):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
com.google.common.primitives.UnsignedLong -> com.google.common.primitives.UnsignedLong:
    long value -> a
com.google.common.primitives.UnsignedLongs -> com.google.common.primitives.UnsignedLongs:
    1:1:boolean com.google.common.primitives.UnsignedLongs$ParseOverflowDetection.overflowInParse(long,int,int):0:0 -> parseUnsignedLong
    1:1:long parseUnsignedLong(java.lang.String,int):0 -> parseUnsignedLong
    2:2:long parseUnsignedLong(java.lang.String,int):0:0 -> parseUnsignedLong
com.google.common.primitives.UnsignedLongs$LexicographicalComparator -> com.google.common.primitives.l0:
    com.google.common.primitives.UnsignedLongs$LexicographicalComparator[] $VALUES -> b
    com.google.common.primitives.UnsignedLongs$LexicographicalComparator INSTANCE -> a
    com.google.common.primitives.UnsignedLongs$LexicographicalComparator[] $values() -> a
    1:1:int compare(long[],long[]):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
com.google.common.primitives.UnsignedLongs$ParseOverflowDetection -> com.google.common.primitives.m0:
    int[] maxValueMods -> b
    int[] maxSafeDigits -> c
    long[] maxValueDivs -> a
com.google.common.reflect.AbstractInvocationHandler -> com.google.common.reflect.AbstractInvocationHandler:
    java.lang.Object[] NO_ARGS -> a
    1:1:boolean isProxyOfSameInterfaces(java.lang.Object,java.lang.Class):0:0 -> invoke
    1:1:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]):0 -> invoke
    2:2:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]):0:0 -> invoke
com.google.common.reflect.ClassPath -> com.google.common.reflect.ClassPath:
    com.google.common.base.Splitter CLASS_PATH_ATTRIBUTE_SEPARATOR -> c
    com.google.common.collect.ImmutableSet resources -> a
    int $r8$clinit -> d
    java.util.logging.Logger logger -> b
    java.util.logging.Logger access$000() -> a
    1:1:com.google.common.collect.ImmutableList getClassLoaderUrls(java.lang.ClassLoader):0:0 -> b
    1:1:com.google.common.collect.ImmutableMap getClassPathEntries(java.lang.ClassLoader):0 -> b
    2:2:com.google.common.collect.ImmutableList parseJavaClassPath():0:0 -> b
    2:2:com.google.common.collect.ImmutableList getClassLoaderUrls(java.lang.ClassLoader):0 -> b
    2:2:com.google.common.collect.ImmutableMap getClassPathEntries(java.lang.ClassLoader):0 -> b
    3:3:com.google.common.collect.ImmutableList getClassLoaderUrls(java.lang.ClassLoader):0:0 -> b
    3:3:com.google.common.collect.ImmutableMap getClassPathEntries(java.lang.ClassLoader):0 -> b
    4:4:com.google.common.collect.ImmutableMap getClassPathEntries(java.lang.ClassLoader):0:0 -> b
    1:1:java.net.URL getClassPathEntry(java.io.File,java.lang.String):0:0 -> c
    1:1:com.google.common.collect.ImmutableSet getClassPathFromManifest(java.io.File,java.util.jar.Manifest):0 -> c
    2:2:com.google.common.collect.ImmutableSet getClassPathFromManifest(java.io.File,java.util.jar.Manifest):0:0 -> c
    java.io.File toFile(java.net.URL) -> d
    1:1:com.google.common.collect.ImmutableSet locationsFrom(java.lang.ClassLoader):0:0 -> from
    1:1:com.google.common.reflect.ClassPath from(java.lang.ClassLoader):0 -> from
    2:2:com.google.common.reflect.ClassPath from(java.lang.ClassLoader):0:0 -> from
    3:3:java.io.File com.google.common.reflect.ClassPath$LocationInfo.file():0:0 -> from
    3:3:com.google.common.reflect.ClassPath from(java.lang.ClassLoader):0 -> from
    4:4:com.google.common.reflect.ClassPath from(java.lang.ClassLoader):0:0 -> from
com.google.common.reflect.ClassPath$1 -> com.google.common.reflect.a:
    1:1:boolean apply(com.google.common.reflect.ClassPath$ClassInfo):0:0 -> apply
    1:1:boolean apply(java.lang.Object):0 -> apply
com.google.common.reflect.ClassPath$ClassInfo -> com.google.common.reflect.ClassPath$ClassInfo:
    java.lang.String className -> c
    1:1:java.lang.String com.google.common.reflect.ClassPath.getClassName(java.lang.String):0:0 -> <init>
    1:1:void <init>(java.io.File,java.lang.String,java.lang.ClassLoader):0 -> <init>
    2:2:void <init>(java.io.File,java.lang.String,java.lang.ClassLoader):0:0 -> <init>
com.google.common.reflect.ClassPath$LocationInfo -> com.google.common.reflect.b:
    java.io.File home -> a
    java.lang.ClassLoader classloader -> b
    1:1:void scanDirectory(java.io.File,com.google.common.collect.ImmutableSet$Builder):0:0 -> a
    1:1:void scan(java.io.File,java.util.Set,com.google.common.collect.ImmutableSet$Builder):0 -> a
    2:2:void scanJar(java.io.File,java.util.Set,com.google.common.collect.ImmutableSet$Builder):0:0 -> a
    2:2:void scan(java.io.File,java.util.Set,com.google.common.collect.ImmutableSet$Builder):0 -> a
    3:3:void scan(java.io.File,java.util.Set,com.google.common.collect.ImmutableSet$Builder):0:0 -> a
    1:1:com.google.common.reflect.ClassPath$ResourceInfo com.google.common.reflect.ClassPath$ResourceInfo.of(java.io.File,java.lang.String,java.lang.ClassLoader):0:0 -> b
    1:1:void scanDirectory(java.io.File,java.lang.String,java.util.Set,com.google.common.collect.ImmutableSet$Builder):0 -> b
    2:2:void scanDirectory(java.io.File,java.lang.String,java.util.Set,com.google.common.collect.ImmutableSet$Builder):0:0 -> b
    1:1:com.google.common.reflect.ClassPath$ResourceInfo com.google.common.reflect.ClassPath$ResourceInfo.of(java.io.File,java.lang.String,java.lang.ClassLoader):0:0 -> c
    1:1:void scanJarFile(java.util.jar.JarFile,com.google.common.collect.ImmutableSet$Builder):0 -> c
    2:2:void scanJarFile(java.util.jar.JarFile,com.google.common.collect.ImmutableSet$Builder):0:0 -> c
com.google.common.reflect.ClassPath$ResourceInfo -> com.google.common.reflect.ClassPath$ResourceInfo:
    java.lang.ClassLoader loader -> b
    java.lang.String resourceName -> a
com.google.common.reflect.Element -> com.google.common.reflect.c:
    java.lang.reflect.AccessibleObject accessibleObject -> a
    java.lang.reflect.Member member -> b
com.google.common.reflect.ImmutableTypeToInstanceMap -> com.google.common.reflect.ImmutableTypeToInstanceMap:
    com.google.common.collect.ImmutableMap delegate -> a
    1:1:void <init>(com.google.common.collect.ImmutableMap):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.ImmutableMap,com.google.common.reflect.ImmutableTypeToInstanceMap$1):0 -> <init>
    1:1:java.lang.Object trustedGet(com.google.common.reflect.TypeToken):0:0 -> getInstance
    1:1:java.lang.Object getInstance(com.google.common.reflect.TypeToken):0 -> getInstance
    2:2:java.lang.Object trustedGet(com.google.common.reflect.TypeToken):0:0 -> getInstance
    2:2:java.lang.Object getInstance(java.lang.Class):0 -> getInstance
com.google.common.reflect.ImmutableTypeToInstanceMap$1 -> com.google.common.reflect.d:
com.google.common.reflect.ImmutableTypeToInstanceMap$Builder -> com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:
    com.google.common.collect.ImmutableMap$Builder mapBuilder -> a
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.reflect.ImmutableTypeToInstanceMap$1):0 -> <init>
com.google.common.reflect.Invokable -> com.google.common.reflect.Invokable:
    java.lang.reflect.AnnotatedType[] getAnnotatedParameterTypes() -> a
    java.lang.reflect.Type[] getGenericExceptionTypes() -> b
    java.lang.reflect.Type[] getGenericParameterTypes() -> c
    java.lang.reflect.Type getGenericReturnType() -> d
    java.lang.annotation.Annotation[][] getParameterAnnotations() -> e
    java.lang.Object invokeInternal(java.lang.Object,java.lang.Object[]) -> f
com.google.common.reflect.Invokable$ConstructorInvokable -> com.google.common.reflect.e:
    java.lang.reflect.Constructor constructor -> c
    java.lang.reflect.AnnotatedType[] getAnnotatedParameterTypes() -> a
    java.lang.reflect.Type[] getGenericExceptionTypes() -> b
    1:1:boolean mayNeedHiddenThis():0:0 -> c
    1:1:java.lang.reflect.Type[] getGenericParameterTypes():0 -> c
    2:2:java.lang.reflect.Type[] getGenericParameterTypes():0:0 -> c
    1:1:java.lang.reflect.ParameterizedType com.google.common.reflect.Types.newParameterizedType(java.lang.Class,java.lang.reflect.Type[]):0:0 -> d
    1:1:java.lang.reflect.Type getGenericReturnType():0 -> d
    java.lang.annotation.Annotation[][] getParameterAnnotations() -> e
    java.lang.Object invokeInternal(java.lang.Object,java.lang.Object[]) -> f
com.google.common.reflect.Invokable$MethodInvokable -> com.google.common.reflect.f:
    java.lang.reflect.Method method -> c
    java.lang.reflect.AnnotatedType[] getAnnotatedParameterTypes() -> a
    java.lang.reflect.Type[] getGenericExceptionTypes() -> b
    java.lang.reflect.Type[] getGenericParameterTypes() -> c
    java.lang.reflect.Type getGenericReturnType() -> d
    java.lang.annotation.Annotation[][] getParameterAnnotations() -> e
    java.lang.Object invokeInternal(java.lang.Object,java.lang.Object[]) -> f
com.google.common.reflect.MutableTypeToInstanceMap -> com.google.common.reflect.MutableTypeToInstanceMap:
    java.util.Map backingMap -> a
    1:1:java.util.Set com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry.transformEntries(java.util.Set):0:0 -> entrySet
    1:1:java.util.Set entrySet():0 -> entrySet
    1:1:java.lang.Object trustedGet(com.google.common.reflect.TypeToken):0:0 -> getInstance
    1:1:java.lang.Object getInstance(com.google.common.reflect.TypeToken):0 -> getInstance
    2:2:java.lang.Object trustedGet(com.google.common.reflect.TypeToken):0:0 -> getInstance
    2:2:java.lang.Object getInstance(java.lang.Class):0 -> getInstance
    1:1:java.lang.Object trustedPut(com.google.common.reflect.TypeToken,java.lang.Object):0:0 -> putInstance
    1:1:java.lang.Object putInstance(com.google.common.reflect.TypeToken,java.lang.Object):0 -> putInstance
    2:2:java.lang.Object trustedPut(com.google.common.reflect.TypeToken,java.lang.Object):0:0 -> putInstance
    2:2:java.lang.Object putInstance(java.lang.Class,java.lang.Object):0 -> putInstance
com.google.common.reflect.MutableTypeToInstanceMap$1 -> com.google.common.reflect.g:
com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry -> com.google.common.reflect.j:
    java.util.Map$Entry delegate -> a
    1:1:void <init>(java.util.Map$Entry):0:0 -> <init>
    1:1:void <init>(java.util.Map$Entry,com.google.common.reflect.MutableTypeToInstanceMap$1):0 -> <init>
    1:1:java.util.Map$Entry delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1 -> com.google.common.reflect.h:
    java.util.Set val$entries -> a
    1:1:java.util.Set delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
    2:2:java.util.Set delegate():0:0 -> delegate
    2:2:java.util.Collection delegate():0 -> delegate
    1:1:java.util.Iterator com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry.transformEntries(java.util.Iterator):0:0 -> iterator
    1:1:java.util.Iterator com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry.access$000(java.util.Iterator):0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$2 -> com.google.common.reflect.i:
    1:1:java.util.Map$Entry apply(java.util.Map$Entry):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.reflect.Parameter -> com.google.common.reflect.Parameter:
    com.google.common.reflect.Invokable declaration -> a
    com.google.common.reflect.TypeToken type -> c
    com.google.common.collect.ImmutableList annotations -> d
    int position -> b
    java.lang.reflect.AnnotatedType annotatedType -> e
com.google.common.reflect.TypeCapture -> com.google.common.reflect.k:
    java.lang.reflect.Type capture() -> a
com.google.common.reflect.TypeParameter -> com.google.common.reflect.TypeParameter:
    java.lang.reflect.TypeVariable typeVariable -> a
com.google.common.reflect.TypeResolver -> com.google.common.reflect.TypeResolver:
    com.google.common.reflect.TypeResolver$TypeTable typeTable -> a
    1:1:void <init>(com.google.common.reflect.TypeResolver$TypeTable):0:0 -> <init>
    1:1:void <init>(com.google.common.reflect.TypeResolver$TypeTable,com.google.common.reflect.TypeResolver$1):0 -> <init>
    void access$000(java.util.Map,java.lang.reflect.Type,java.lang.reflect.Type) -> a
    java.lang.reflect.Type[] access$300(com.google.common.reflect.TypeResolver,java.lang.reflect.Type[]) -> b
    void populateTypeMappings(java.util.Map,java.lang.reflect.Type,java.lang.reflect.Type) -> c
    java.lang.reflect.Type[] resolveTypes(java.lang.reflect.Type[]) -> d
    java.lang.reflect.Type[] resolveTypesInPlace(java.lang.reflect.Type[]) -> e
    com.google.common.reflect.TypeResolver where(java.util.Map) -> f
    1:1:java.lang.reflect.Type com.google.common.reflect.TypeResolver$TypeTable.resolve(java.lang.reflect.TypeVariable):0:0 -> resolveType
    1:1:java.lang.reflect.Type resolveType(java.lang.reflect.Type):0 -> resolveType
    2:2:java.lang.reflect.Type resolveType(java.lang.reflect.Type):0:0 -> resolveType
    3:3:java.lang.reflect.ParameterizedType resolveParameterizedType(java.lang.reflect.ParameterizedType):0:0 -> resolveType
    3:3:java.lang.reflect.Type resolveType(java.lang.reflect.Type):0 -> resolveType
    4:4:java.lang.reflect.Type resolveType(java.lang.reflect.Type):0:0 -> resolveType
    5:5:java.lang.reflect.Type resolveGenericArrayType(java.lang.reflect.GenericArrayType):0:0 -> resolveType
    5:5:java.lang.reflect.Type resolveType(java.lang.reflect.Type):0 -> resolveType
    6:6:java.lang.reflect.Type resolveType(java.lang.reflect.Type):0:0 -> resolveType
    7:7:java.lang.reflect.WildcardType resolveWildcardType(java.lang.reflect.WildcardType):0:0 -> resolveType
    7:7:java.lang.reflect.Type resolveType(java.lang.reflect.Type):0 -> resolveType
com.google.common.reflect.TypeResolver$1 -> com.google.common.reflect.l:
    java.util.Map val$mappings -> b
    java.lang.reflect.Type val$to -> c
    void visitClass(java.lang.Class) -> a
    void visitGenericArrayType(java.lang.reflect.GenericArrayType) -> b
    1:1:java.lang.Object com.google.common.reflect.TypeResolver.expectArgument(java.lang.Class,java.lang.Object):0:0 -> c
    1:1:java.lang.Object com.google.common.reflect.TypeResolver.access$100(java.lang.Class,java.lang.Object):0 -> c
    1:1:void visitParameterizedType(java.lang.reflect.ParameterizedType):0 -> c
    2:2:void visitParameterizedType(java.lang.reflect.ParameterizedType):0:0 -> c
    3:3:java.lang.Object com.google.common.reflect.TypeResolver.expectArgument(java.lang.Class,java.lang.Object):0:0 -> c
    3:3:java.lang.Object com.google.common.reflect.TypeResolver.access$100(java.lang.Class,java.lang.Object):0 -> c
    3:3:void visitParameterizedType(java.lang.reflect.ParameterizedType):0 -> c
    void visitTypeVariable(java.lang.reflect.TypeVariable) -> d
    void visitWildcardType(java.lang.reflect.WildcardType) -> e
com.google.common.reflect.TypeResolver$TypeMappingIntrospector -> com.google.common.reflect.m:
    java.util.Map mappings -> b
    void visitClass(java.lang.Class) -> a
    1:1:void map(com.google.common.reflect.TypeResolver$TypeVariableKey,java.lang.reflect.Type):0:0 -> c
    1:1:void visitParameterizedType(java.lang.reflect.ParameterizedType):0 -> c
    2:2:com.google.common.reflect.TypeResolver$TypeVariableKey com.google.common.reflect.TypeResolver$TypeVariableKey.forLookup(java.lang.reflect.Type):0:0 -> c
    2:2:void map(com.google.common.reflect.TypeResolver$TypeVariableKey,java.lang.reflect.Type):0 -> c
    2:2:void visitParameterizedType(java.lang.reflect.ParameterizedType):0 -> c
    3:3:void map(com.google.common.reflect.TypeResolver$TypeVariableKey,java.lang.reflect.Type):0:0 -> c
    3:3:void visitParameterizedType(java.lang.reflect.ParameterizedType):0 -> c
    4:4:com.google.common.reflect.TypeResolver$TypeVariableKey com.google.common.reflect.TypeResolver$TypeVariableKey.forLookup(java.lang.reflect.Type):0:0 -> c
    4:4:void map(com.google.common.reflect.TypeResolver$TypeVariableKey,java.lang.reflect.Type):0 -> c
    4:4:void visitParameterizedType(java.lang.reflect.ParameterizedType):0 -> c
    5:5:void map(com.google.common.reflect.TypeResolver$TypeVariableKey,java.lang.reflect.Type):0:0 -> c
    5:5:void visitParameterizedType(java.lang.reflect.ParameterizedType):0 -> c
    6:6:void visitParameterizedType(java.lang.reflect.ParameterizedType):0:0 -> c
    void visitTypeVariable(java.lang.reflect.TypeVariable) -> d
    void visitWildcardType(java.lang.reflect.WildcardType) -> e
    com.google.common.collect.ImmutableMap getTypeMappings(java.lang.reflect.Type) -> f
com.google.common.reflect.TypeResolver$TypeTable -> com.google.common.reflect.o:
    com.google.common.collect.ImmutableMap map -> a
    com.google.common.reflect.TypeResolver$TypeTable where(java.util.Map) -> a
com.google.common.reflect.TypeResolver$TypeTable$1 -> com.google.common.reflect.n:
    com.google.common.reflect.TypeResolver$TypeTable val$unguarded -> c
    java.lang.reflect.TypeVariable val$var -> b
com.google.common.reflect.TypeResolver$TypeVariableKey -> com.google.common.reflect.p:
    java.lang.reflect.TypeVariable var -> a
    boolean equalsType(java.lang.reflect.Type) -> a
    boolean equalsTypeVariable(java.lang.reflect.TypeVariable) -> b
com.google.common.reflect.TypeResolver$WildcardCapturer -> com.google.common.reflect.r:
    java.util.concurrent.atomic.AtomicInteger id -> a
    com.google.common.reflect.TypeResolver$WildcardCapturer INSTANCE -> b
    1:1:void <init>(java.util.concurrent.atomic.AtomicInteger):0:0 -> <init>
    1:1:void <init>():0 -> <init>
    2:2:void <init>(java.util.concurrent.atomic.AtomicInteger):0:0 -> <init>
    2:2:void <init>(java.util.concurrent.atomic.AtomicInteger,com.google.common.reflect.TypeResolver$1):0 -> <init>
    1:1:com.google.common.reflect.TypeResolver$WildcardCapturer notForTypeVariable():0:0 -> a
    1:1:java.lang.reflect.Type capture(java.lang.reflect.Type):0 -> a
    2:2:java.lang.reflect.Type capture(java.lang.reflect.Type):0:0 -> a
    3:3:com.google.common.reflect.TypeResolver$WildcardCapturer forTypeVariable(java.lang.reflect.TypeVariable):0:0 -> a
    3:3:java.lang.reflect.Type capture(java.lang.reflect.Type):0 -> a
    4:4:java.lang.reflect.Type capture(java.lang.reflect.Type):0:0 -> a
    5:5:com.google.common.reflect.TypeResolver$WildcardCapturer notForTypeVariable():0:0 -> a
    5:5:java.lang.reflect.Type capture(java.lang.reflect.Type):0 -> a
    6:6:java.lang.reflect.Type capture(java.lang.reflect.Type):0:0 -> a
    7:7:java.lang.reflect.Type captureNullable(java.lang.reflect.Type):0:0 -> a
    7:7:java.lang.reflect.Type capture(java.lang.reflect.Type):0 -> a
    8:8:java.lang.reflect.Type capture(java.lang.reflect.Type):0:0 -> a
    java.lang.reflect.TypeVariable captureAsTypeVariable(java.lang.reflect.Type[]) -> b
com.google.common.reflect.TypeResolver$WildcardCapturer$1 -> com.google.common.reflect.q:
    java.lang.reflect.TypeVariable val$typeParam -> c
    java.lang.reflect.TypeVariable captureAsTypeVariable(java.lang.reflect.Type[]) -> b
com.google.common.reflect.TypeToken -> com.google.common.reflect.TypeToken:
    java.lang.reflect.Type runtimeType -> a
    com.google.common.reflect.TypeResolver invariantTypeResolver -> b
    com.google.common.reflect.TypeResolver covariantTypeResolver -> c
    1:1:com.google.common.reflect.TypeResolver com.google.common.reflect.TypeResolver.covariantly(java.lang.reflect.Type):0:0 -> <init>
    1:1:void <init>(java.lang.Class):0 -> <init>
    2:2:void <init>(java.lang.Class):0:0 -> <init>
    3:3:void <init>(java.lang.reflect.Type):0:0 -> <init>
    3:3:void <init>(java.lang.reflect.Type,com.google.common.reflect.TypeToken$1):0 -> <init>
    com.google.common.reflect.TypeResolver access$000(com.google.common.reflect.TypeToken) -> b
    com.google.common.reflect.TypeResolver access$100(com.google.common.reflect.TypeToken) -> c
    com.google.common.collect.ImmutableSet access$300(com.google.common.reflect.TypeToken) -> d
    java.lang.reflect.Type access$500(com.google.common.reflect.TypeToken) -> e
    com.google.common.reflect.TypeToken$Bounds any(java.lang.reflect.Type[]) -> f
    com.google.common.collect.ImmutableList boundsAsInterfaces(java.lang.reflect.Type[]) -> g
    1:1:com.google.common.reflect.TypeToken getSubtypeFromLowerBounds(java.lang.Class,java.lang.reflect.Type[]):0:0 -> getSubtype
    1:1:com.google.common.reflect.TypeToken getSubtype(java.lang.Class):0 -> getSubtype
    2:2:com.google.common.reflect.TypeToken getSubtype(java.lang.Class):0:0 -> getSubtype
    3:3:com.google.common.reflect.TypeToken getArraySubtype(java.lang.Class):0:0 -> getSubtype
    3:3:com.google.common.reflect.TypeToken getSubtype(java.lang.Class):0 -> getSubtype
    4:4:java.lang.reflect.Type newArrayClassOrGenericArrayType(java.lang.reflect.Type):0:0 -> getSubtype
    4:4:com.google.common.reflect.TypeToken getArraySubtype(java.lang.Class):0 -> getSubtype
    4:4:com.google.common.reflect.TypeToken getSubtype(java.lang.Class):0 -> getSubtype
    5:5:com.google.common.reflect.TypeToken getArraySubtype(java.lang.Class):0:0 -> getSubtype
    5:5:com.google.common.reflect.TypeToken getSubtype(java.lang.Class):0 -> getSubtype
    6:6:com.google.common.reflect.TypeToken getSubtype(java.lang.Class):0:0 -> getSubtype
    7:7:java.lang.reflect.Type resolveTypeArgsForSubclass(java.lang.Class):0:0 -> getSubtype
    7:7:com.google.common.reflect.TypeToken getSubtype(java.lang.Class):0 -> getSubtype
    8:8:com.google.common.reflect.TypeToken getSubtype(java.lang.Class):0:0 -> getSubtype
    1:1:com.google.common.reflect.TypeToken getArraySupertype(java.lang.Class):0:0 -> getSupertype
    1:1:com.google.common.reflect.TypeToken getSupertype(java.lang.Class):0 -> getSupertype
    2:2:java.lang.reflect.Type newArrayClassOrGenericArrayType(java.lang.reflect.Type):0:0 -> getSupertype
    2:2:com.google.common.reflect.TypeToken getArraySupertype(java.lang.Class):0 -> getSupertype
    2:2:com.google.common.reflect.TypeToken getSupertype(java.lang.Class):0 -> getSupertype
    3:3:com.google.common.reflect.TypeToken getArraySupertype(java.lang.Class):0:0 -> getSupertype
    3:3:com.google.common.reflect.TypeToken getSupertype(java.lang.Class):0 -> getSupertype
    4:4:com.google.common.reflect.TypeToken getSupertype(java.lang.Class):0:0 -> getSupertype
    java.lang.reflect.Type canonicalizeTypeArg(java.lang.reflect.TypeVariable,java.lang.reflect.Type) -> h
    java.lang.reflect.WildcardType canonicalizeWildcardType(java.lang.reflect.TypeVariable,java.lang.reflect.WildcardType) -> i
    1:1:boolean isSupertypeOfArray(java.lang.reflect.GenericArrayType):0:0 -> isSubtypeOf
    1:1:boolean isSubtypeOf(java.lang.reflect.Type):0 -> isSubtypeOf
    2:2:boolean isSubtypeOf(java.lang.reflect.Type):0:0 -> isSubtypeOf
    3:3:boolean isSubtypeOfParameterizedType(java.lang.reflect.ParameterizedType):0:0 -> isSubtypeOf
    3:3:boolean isSubtypeOf(java.lang.reflect.Type):0 -> isSubtypeOf
    4:4:boolean is(java.lang.reflect.Type,java.lang.reflect.TypeVariable):0:0 -> isSubtypeOf
    4:4:boolean isSubtypeOfParameterizedType(java.lang.reflect.ParameterizedType):0 -> isSubtypeOf
    4:4:boolean isSubtypeOf(java.lang.reflect.Type):0 -> isSubtypeOf
    5:5:com.google.common.reflect.TypeToken$Bounds every(java.lang.reflect.Type[]):0:0 -> isSubtypeOf
    5:5:boolean is(java.lang.reflect.Type,java.lang.reflect.TypeVariable):0 -> isSubtypeOf
    5:5:boolean isSubtypeOfParameterizedType(java.lang.reflect.ParameterizedType):0 -> isSubtypeOf
    5:5:boolean isSubtypeOf(java.lang.reflect.Type):0 -> isSubtypeOf
    6:6:boolean is(java.lang.reflect.Type,java.lang.reflect.TypeVariable):0:0 -> isSubtypeOf
    6:6:boolean isSubtypeOfParameterizedType(java.lang.reflect.ParameterizedType):0 -> isSubtypeOf
    6:6:boolean isSubtypeOf(java.lang.reflect.Type):0 -> isSubtypeOf
    7:7:com.google.common.reflect.TypeToken$Bounds every(java.lang.reflect.Type[]):0:0 -> isSubtypeOf
    7:7:boolean is(java.lang.reflect.Type,java.lang.reflect.TypeVariable):0 -> isSubtypeOf
    7:7:boolean isSubtypeOfParameterizedType(java.lang.reflect.ParameterizedType):0 -> isSubtypeOf
    7:7:boolean isSubtypeOf(java.lang.reflect.Type):0 -> isSubtypeOf
    8:8:boolean is(java.lang.reflect.Type,java.lang.reflect.TypeVariable):0:0 -> isSubtypeOf
    8:8:boolean isSubtypeOfParameterizedType(java.lang.reflect.ParameterizedType):0 -> isSubtypeOf
    8:8:boolean isSubtypeOf(java.lang.reflect.Type):0 -> isSubtypeOf
    9:9:boolean isSubtypeOfParameterizedType(java.lang.reflect.ParameterizedType):0:0 -> isSubtypeOf
    9:9:boolean isSubtypeOf(java.lang.reflect.Type):0 -> isSubtypeOf
    10:10:boolean isOwnedBySubtypeOf(java.lang.reflect.Type):0:0 -> isSubtypeOf
    10:10:boolean isSubtypeOfParameterizedType(java.lang.reflect.ParameterizedType):0 -> isSubtypeOf
    10:10:boolean isSubtypeOf(java.lang.reflect.Type):0 -> isSubtypeOf
    11:11:java.lang.reflect.Type getOwnerTypeIfPresent():0:0 -> isSubtypeOf
    11:11:boolean isOwnedBySubtypeOf(java.lang.reflect.Type):0 -> isSubtypeOf
    11:11:boolean isSubtypeOfParameterizedType(java.lang.reflect.ParameterizedType):0 -> isSubtypeOf
    11:11:boolean isSubtypeOf(java.lang.reflect.Type):0 -> isSubtypeOf
    12:12:boolean isOwnedBySubtypeOf(java.lang.reflect.Type):0:0 -> isSubtypeOf
    12:12:boolean isSubtypeOfParameterizedType(java.lang.reflect.ParameterizedType):0 -> isSubtypeOf
    12:12:boolean isSubtypeOf(java.lang.reflect.Type):0 -> isSubtypeOf
    13:13:boolean isSubtypeOf(java.lang.reflect.Type):0:0 -> isSubtypeOf
    14:14:boolean isSubtypeOfArrayType(java.lang.reflect.GenericArrayType):0:0 -> isSubtypeOf
    14:14:boolean isSubtypeOf(java.lang.reflect.Type):0 -> isSubtypeOf
    1:1:java.lang.reflect.ParameterizedType canonicalizeWildcardsInParameterizedType(java.lang.reflect.ParameterizedType):0:0 -> j
    1:1:java.lang.reflect.Type canonicalizeWildcardsInType(java.lang.reflect.Type):0 -> j
    2:2:java.lang.reflect.Type canonicalizeWildcardsInType(java.lang.reflect.Type):0:0 -> j
    1:1:com.google.common.reflect.TypeResolver com.google.common.reflect.TypeResolver.covariantly(java.lang.reflect.Type):0:0 -> k
    1:1:com.google.common.reflect.TypeResolver getCovariantTypeResolver():0 -> k
    2:2:com.google.common.reflect.TypeResolver getCovariantTypeResolver():0:0 -> k
    com.google.common.collect.ImmutableList getGenericInterfaces() -> l
    1:1:com.google.common.reflect.TypeToken boundAsSuperclass(java.lang.reflect.Type):0:0 -> m
    1:1:com.google.common.reflect.TypeToken getGenericSuperclass():0 -> m
    2:2:com.google.common.reflect.TypeToken getGenericSuperclass():0:0 -> m
    3:3:com.google.common.reflect.TypeToken boundAsSuperclass(java.lang.reflect.Type):0:0 -> m
    3:3:com.google.common.reflect.TypeToken getGenericSuperclass():0 -> m
    4:4:com.google.common.reflect.TypeToken getGenericSuperclass():0:0 -> m
    1:1:com.google.common.reflect.TypeResolver com.google.common.reflect.TypeResolver.invariantly(java.lang.reflect.Type):0:0 -> n
    1:1:com.google.common.reflect.TypeResolver getInvariantTypeResolver():0 -> n
    2:2:com.google.common.reflect.TypeResolver getInvariantTypeResolver():0:0 -> n
    com.google.common.collect.ImmutableSet getRawTypes() -> o
    com.google.common.reflect.TypeToken getSupertypeFromUpperBounds(java.lang.Class,java.lang.reflect.Type[]) -> p
    com.google.common.reflect.TypeToken rejectTypeVariables() -> q
    com.google.common.reflect.TypeToken resolveSupertype(java.lang.reflect.Type) -> r
    boolean someRawTypeIsSubclassOf(java.lang.Class) -> s
    com.google.common.reflect.TypeToken toGenericType(java.lang.Class) -> t
    1:1:boolean isWrapper():0:0 -> unwrap
    1:1:com.google.common.reflect.TypeToken unwrap():0 -> unwrap
    2:2:com.google.common.reflect.TypeToken unwrap():0:0 -> unwrap
com.google.common.reflect.TypeToken$1 -> com.google.common.reflect.s:
    com.google.common.reflect.TypeToken this$0 -> d
    1:1:java.lang.reflect.Type[] com.google.common.reflect.Invokable$MethodInvokable.getGenericExceptionTypes():0:0 -> b
    1:1:java.lang.reflect.Type[] getGenericExceptionTypes():0 -> b
    2:2:java.lang.reflect.Type[] getGenericExceptionTypes():0:0 -> b
    1:1:java.lang.reflect.Type[] com.google.common.reflect.Invokable$MethodInvokable.getGenericParameterTypes():0:0 -> c
    1:1:java.lang.reflect.Type[] getGenericParameterTypes():0 -> c
    2:2:java.lang.reflect.Type[] getGenericParameterTypes():0:0 -> c
    1:1:java.lang.reflect.Type com.google.common.reflect.Invokable$MethodInvokable.getGenericReturnType():0:0 -> d
    1:1:java.lang.reflect.Type getGenericReturnType():0 -> d
    2:2:java.lang.reflect.Type getGenericReturnType():0:0 -> d
    1:1:com.google.common.reflect.TypeToken getOwnerType():0:0 -> toString
    1:1:java.lang.String toString():0 -> toString
    2:2:java.lang.String toString():0:0 -> toString
com.google.common.reflect.TypeToken$2 -> com.google.common.reflect.t:
    com.google.common.reflect.TypeToken this$0 -> d
    1:1:java.lang.reflect.Type[] com.google.common.reflect.Invokable$ConstructorInvokable.getGenericExceptionTypes():0:0 -> b
    1:1:java.lang.reflect.Type[] getGenericExceptionTypes():0 -> b
    2:2:java.lang.reflect.Type[] getGenericExceptionTypes():0:0 -> b
    java.lang.reflect.Type[] getGenericParameterTypes() -> c
    java.lang.reflect.Type getGenericReturnType() -> d
    1:1:com.google.common.reflect.TypeToken getOwnerType():0:0 -> toString
    1:1:java.lang.String toString():0 -> toString
    2:2:java.lang.String toString():0:0 -> toString
    3:3:java.lang.reflect.Type[] getGenericParameterTypes():0:0 -> toString
    3:3:java.lang.String toString():0 -> toString
    4:4:java.lang.String toString():0:0 -> toString
com.google.common.reflect.TypeToken$3 -> com.google.common.reflect.u:
    com.google.common.reflect.TypeToken this$0 -> b
    void visitGenericArrayType(java.lang.reflect.GenericArrayType) -> b
    void visitParameterizedType(java.lang.reflect.ParameterizedType) -> c
    void visitTypeVariable(java.lang.reflect.TypeVariable) -> d
    void visitWildcardType(java.lang.reflect.WildcardType) -> e
com.google.common.reflect.TypeToken$4 -> com.google.common.reflect.v:
    com.google.common.collect.ImmutableSet$Builder val$builder -> b
    void visitClass(java.lang.Class) -> a
    1:1:java.lang.Class com.google.common.reflect.Types.getArrayClass(java.lang.Class):0:0 -> b
    1:1:void visitGenericArrayType(java.lang.reflect.GenericArrayType):0 -> b
    2:2:void visitGenericArrayType(java.lang.reflect.GenericArrayType):0:0 -> b
    void visitParameterizedType(java.lang.reflect.ParameterizedType) -> c
    void visitTypeVariable(java.lang.reflect.TypeVariable) -> d
    void visitWildcardType(java.lang.reflect.WildcardType) -> e
com.google.common.reflect.TypeToken$Bounds -> com.google.common.reflect.w:
    java.lang.reflect.Type[] bounds -> a
    boolean target -> b
    boolean isSubtypeOf(java.lang.reflect.Type) -> a
    boolean isSupertypeOf(java.lang.reflect.Type) -> b
com.google.common.reflect.TypeToken$ClassSet -> com.google.common.reflect.x:
    com.google.common.collect.ImmutableSet classes -> c
    com.google.common.reflect.TypeToken this$0 -> d
    1:1:void <init>(com.google.common.reflect.TypeToken):0:0 -> <init>
    1:1:void <init>(com.google.common.reflect.TypeToken,com.google.common.reflect.TypeToken$1):0 -> <init>
    1:1:com.google.common.reflect.TypeToken$TypeCollector com.google.common.reflect.TypeToken$TypeCollector.classesOnly():0:0 -> delegate
    1:1:java.util.Set delegate():0 -> delegate
    2:2:java.util.Set delegate():0:0 -> delegate
    3:3:com.google.common.collect.ImmutableList com.google.common.reflect.TypeToken$TypeCollector.collectTypes(java.lang.Object):0:0 -> delegate
    3:3:java.util.Set delegate():0 -> delegate
    4:4:java.util.Set delegate():0:0 -> delegate
    1:1:com.google.common.reflect.TypeToken$TypeCollector com.google.common.reflect.TypeToken$TypeCollector.classesOnly():0:0 -> rawTypes
    1:1:java.util.Set rawTypes():0 -> rawTypes
    2:2:java.util.Set rawTypes():0:0 -> rawTypes
com.google.common.reflect.TypeToken$InterfaceSet -> com.google.common.reflect.z:
    com.google.common.reflect.TypeToken this$0 -> e
    com.google.common.collect.ImmutableSet interfaces -> d
    com.google.common.reflect.TypeToken$TypeSet allTypes -> c
com.google.common.reflect.TypeToken$InterfaceSet$1 -> com.google.common.reflect.y:
    1:1:boolean apply(java.lang.Class):0:0 -> apply
    1:1:boolean apply(java.lang.Object):0 -> apply
com.google.common.reflect.TypeToken$SimpleTypeToken -> com.google.common.reflect.a0:
com.google.common.reflect.TypeToken$TypeCollector -> com.google.common.reflect.f0:
    com.google.common.reflect.TypeToken$TypeCollector FOR_RAW_TYPE -> b
    com.google.common.reflect.TypeToken$TypeCollector FOR_GENERIC_TYPE -> a
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.reflect.TypeToken$1):0 -> <init>
    int collectTypes(java.lang.Object,java.util.Map) -> a
    1:1:com.google.common.collect.ImmutableList sortKeysByValue(java.util.Map,java.util.Comparator):0:0 -> b
    1:1:com.google.common.collect.ImmutableList collectTypes(java.lang.Iterable):0 -> b
    java.lang.Iterable getInterfaces(java.lang.Object) -> c
    java.lang.Class getRawType(java.lang.Object) -> d
    java.lang.Object getSuperclass(java.lang.Object) -> e
com.google.common.reflect.TypeToken$TypeCollector$1 -> com.google.common.reflect.b0:
    1:1:java.lang.Iterable getInterfaces(com.google.common.reflect.TypeToken):0:0 -> c
    1:1:java.lang.Iterable getInterfaces(java.lang.Object):0 -> c
    1:1:java.lang.Class getRawType(com.google.common.reflect.TypeToken):0:0 -> d
    1:1:java.lang.Class getRawType(java.lang.Object):0 -> d
    1:1:com.google.common.reflect.TypeToken getSuperclass(com.google.common.reflect.TypeToken):0:0 -> e
    1:1:java.lang.Object getSuperclass(java.lang.Object):0 -> e
com.google.common.reflect.TypeToken$TypeCollector$2 -> com.google.common.reflect.c0:
    1:1:java.lang.Iterable getInterfaces(java.lang.Class):0:0 -> c
    1:1:java.lang.Iterable getInterfaces(java.lang.Object):0 -> c
    java.lang.Class getRawType(java.lang.Object) -> d
    1:1:java.lang.Class getSuperclass(java.lang.Class):0:0 -> e
    1:1:java.lang.Object getSuperclass(java.lang.Object):0 -> e
com.google.common.reflect.TypeToken$TypeCollector$3 -> com.google.common.reflect.d0:
    com.google.common.reflect.TypeToken$TypeCollector com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector.delegate -> c
    1:1:void com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector.<init>(com.google.common.reflect.TypeToken$TypeCollector):0:0 -> <init>
    1:1:void <init>(com.google.common.reflect.TypeToken$TypeCollector,com.google.common.reflect.TypeToken$TypeCollector):0 -> <init>
    com.google.common.collect.ImmutableList collectTypes(java.lang.Iterable) -> b
    java.lang.Iterable getInterfaces(java.lang.Object) -> c
    1:1:java.lang.Class com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector.getRawType(java.lang.Object):0:0 -> d
    1:1:java.lang.Class com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector.getRawType(java.lang.Object):0 -> d
    1:1:java.lang.Object com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector.getSuperclass(java.lang.Object):0:0 -> e
    1:1:java.lang.Object com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector.getSuperclass(java.lang.Object):0 -> e
com.google.common.reflect.TypeToken$TypeCollector$4 -> com.google.common.reflect.e0:
    java.util.Map val$map -> b
    java.util.Comparator val$valueComparator -> a
com.google.common.reflect.TypeToken$TypeFilter -> com.google.common.reflect.i0:
    com.google.common.reflect.TypeToken$TypeFilter[] $VALUES -> c
    com.google.common.reflect.TypeToken$TypeFilter INTERFACE_ONLY -> b
    com.google.common.reflect.TypeToken$TypeFilter IGNORE_TYPE_VARIABLE_OR_WILDCARD -> a
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:void <init>(java.lang.String,int,com.google.common.reflect.TypeToken$1):0 -> <init>
com.google.common.reflect.TypeToken$TypeFilter$1 -> com.google.common.reflect.g0:
    1:1:boolean apply(com.google.common.reflect.TypeToken):0:0 -> apply
    1:1:boolean apply(java.lang.Object):0 -> apply
com.google.common.reflect.TypeToken$TypeFilter$2 -> com.google.common.reflect.h0:
    1:1:boolean apply(com.google.common.reflect.TypeToken):0:0 -> apply
    1:1:boolean apply(java.lang.Object):0 -> apply
com.google.common.reflect.TypeToken$TypeSet -> com.google.common.reflect.TypeToken$TypeSet:
    com.google.common.collect.ImmutableSet types -> a
    com.google.common.reflect.TypeToken this$0 -> b
    1:1:com.google.common.collect.ImmutableList com.google.common.reflect.TypeToken$TypeCollector.collectTypes(java.lang.Object):0:0 -> delegate
    1:1:java.util.Set delegate():0 -> delegate
    2:2:java.util.Set delegate():0:0 -> delegate
com.google.common.reflect.TypeVisitor -> com.google.common.reflect.j0:
    java.util.Set visited -> a
    void visitClass(java.lang.Class) -> a
    void visitGenericArrayType(java.lang.reflect.GenericArrayType) -> b
    void visitParameterizedType(java.lang.reflect.ParameterizedType) -> c
    void visitTypeVariable(java.lang.reflect.TypeVariable) -> d
    void visitWildcardType(java.lang.reflect.WildcardType) -> e
com.google.common.reflect.Types -> com.google.common.reflect.e1:
    com.google.common.base.Function TYPE_NAME -> a
    com.google.common.base.Joiner COMMA_JOINER -> b
    int $r8$clinit -> c
    1:1:java.lang.reflect.Type subtypeOfComponentType(java.lang.reflect.Type[]):0:0 -> a
    1:1:java.lang.reflect.Type access$100(java.lang.reflect.Type[]):0 -> a
    2:2:java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type):0:0 -> a
    2:2:java.lang.reflect.Type subtypeOfComponentType(java.lang.reflect.Type[]):0 -> a
    2:2:java.lang.reflect.Type access$100(java.lang.reflect.Type[]):0 -> a
    1:1:void disallowPrimitiveType(java.lang.reflect.Type[],java.lang.String):0:0 -> b
    1:1:void access$200(java.lang.reflect.Type[],java.lang.String):0 -> b
    1:1:java.lang.reflect.Type[] toArray(java.util.Collection):0:0 -> c
    1:1:java.lang.reflect.Type[] access$300(java.util.Collection):0 -> c
    com.google.common.base.Function access$400() -> d
    com.google.common.base.Joiner access$500() -> e
    java.lang.reflect.Type getComponentType(java.lang.reflect.Type) -> f
    1:1:java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type):0:0 -> g
    1:1:java.lang.reflect.Type newArrayType(java.lang.reflect.Type):0 -> g
    2:2:java.lang.reflect.Type newArrayType(java.lang.reflect.Type):0:0 -> g
    3:3:java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type):0:0 -> g
    3:3:java.lang.reflect.Type newArrayType(java.lang.reflect.Type):0 -> g
    4:4:java.lang.reflect.Type newArrayType(java.lang.reflect.Type):0:0 -> g
    1:1:java.lang.reflect.TypeVariable newTypeVariableImpl(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[]):0:0 -> h
    1:1:java.lang.reflect.TypeVariable newArtificialTypeVariable(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[]):0 -> h
    1:1:java.lang.reflect.ParameterizedType newParameterizedType(java.lang.Class,java.lang.reflect.Type[]):0:0 -> i
    1:1:java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[]):0 -> i
    2:2:java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[]):0:0 -> i
    java.lang.String toString(java.lang.reflect.Type) -> j
com.google.common.reflect.Types$1 -> com.google.common.reflect.k0:
    1:1:java.lang.String apply(java.lang.reflect.Type):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.reflect.Types$2 -> com.google.common.reflect.l0:
    java.util.concurrent.atomic.AtomicReference val$result -> b
    void visitClass(java.lang.Class) -> a
    void visitGenericArrayType(java.lang.reflect.GenericArrayType) -> b
    void visitTypeVariable(java.lang.reflect.TypeVariable) -> d
    void visitWildcardType(java.lang.reflect.WildcardType) -> e
com.google.common.reflect.Types$ClassOwnership -> com.google.common.reflect.q0:
    com.google.common.reflect.Types$ClassOwnership JVM_BEHAVIOR -> c
    com.google.common.reflect.Types$ClassOwnership OWNED_BY_ENCLOSING_CLASS -> a
    com.google.common.reflect.Types$ClassOwnership LOCAL_CLASS_HAS_NO_OWNER -> b
    com.google.common.reflect.Types$ClassOwnership[] $VALUES -> d
    1:1:com.google.common.reflect.Types$ClassOwnership detectJvmBehavior():0:0 -> <clinit>
    1:1:void <clinit>():0 -> <clinit>
    2:2:void <clinit>():0:0 -> <clinit>
    3:3:com.google.common.reflect.Types$ClassOwnership detectJvmBehavior():0:0 -> <clinit>
    3:3:void <clinit>():0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:void <init>(java.lang.String,int,com.google.common.reflect.Types$1):0 -> <init>
    java.lang.Class getOwnerType(java.lang.Class) -> a
com.google.common.reflect.Types$ClassOwnership$1 -> com.google.common.reflect.m0:
    java.lang.Class getOwnerType(java.lang.Class) -> a
com.google.common.reflect.Types$ClassOwnership$1LocalClass -> com.google.common.reflect.n0:
com.google.common.reflect.Types$ClassOwnership$2 -> com.google.common.reflect.o0:
    java.lang.Class getOwnerType(java.lang.Class) -> a
com.google.common.reflect.Types$ClassOwnership$3 -> com.google.common.reflect.p0:
com.google.common.reflect.Types$GenericArrayTypeImpl -> com.google.common.reflect.r0:
    java.lang.reflect.Type componentType -> a
    1:1:java.lang.reflect.Type getGenericComponentType():0:0 -> equals
    1:1:boolean equals(java.lang.Object):0 -> equals
    2:2:boolean equals(java.lang.Object):0:0 -> equals
com.google.common.reflect.Types$JavaVersion -> com.google.common.reflect.y0:
    com.google.common.reflect.Types$JavaVersion JAVA6 -> a
    com.google.common.reflect.Types$JavaVersion[] $VALUES -> f
    com.google.common.reflect.Types$JavaVersion JAVA8 -> c
    com.google.common.reflect.Types$JavaVersion JAVA7 -> b
    com.google.common.reflect.Types$JavaVersion CURRENT -> e
    com.google.common.reflect.Types$JavaVersion JAVA9 -> d
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:void <init>(java.lang.String,int,com.google.common.reflect.Types$1):0 -> <init>
    boolean jdkTypeDuplicatesOwnerName() -> a
    java.lang.reflect.Type newArrayType(java.lang.reflect.Type) -> b
    java.lang.String typeName(java.lang.reflect.Type) -> c
    com.google.common.collect.ImmutableList usedInGenericType(java.lang.reflect.Type[]) -> d
    java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type) -> e
com.google.common.reflect.Types$JavaVersion$1 -> com.google.common.reflect.s0:
    1:1:java.lang.reflect.GenericArrayType newArrayType(java.lang.reflect.Type):0:0 -> b
    1:1:java.lang.reflect.Type newArrayType(java.lang.reflect.Type):0 -> b
    java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type) -> e
com.google.common.reflect.Types$JavaVersion$2 -> com.google.common.reflect.t0:
    1:1:java.lang.Class com.google.common.reflect.Types.getArrayClass(java.lang.Class):0:0 -> b
    1:1:java.lang.reflect.Type newArrayType(java.lang.reflect.Type):0 -> b
    2:2:java.lang.reflect.Type newArrayType(java.lang.reflect.Type):0:0 -> b
    java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type) -> e
com.google.common.reflect.Types$JavaVersion$3 -> com.google.common.reflect.u0:
    java.lang.reflect.Type newArrayType(java.lang.reflect.Type) -> b
    java.lang.String typeName(java.lang.reflect.Type) -> c
    java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type) -> e
com.google.common.reflect.Types$JavaVersion$4 -> com.google.common.reflect.v0:
    boolean jdkTypeDuplicatesOwnerName() -> a
    java.lang.reflect.Type newArrayType(java.lang.reflect.Type) -> b
    java.lang.String typeName(java.lang.reflect.Type) -> c
    java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type) -> e
com.google.common.reflect.Types$JavaVersion$5 -> com.google.common.reflect.w0:
com.google.common.reflect.Types$JavaVersion$6 -> com.google.common.reflect.x0:
com.google.common.reflect.Types$NativeTypeVariableEquals -> com.google.common.reflect.z0:
    boolean NATIVE_TYPE_VARIABLE_ONLY -> a
com.google.common.reflect.Types$ParameterizedTypeImpl -> com.google.common.reflect.a1:
    java.lang.reflect.Type ownerType -> a
    com.google.common.collect.ImmutableList argumentsList -> b
    java.lang.Class rawType -> c
    1:1:java.lang.reflect.Type getRawType():0:0 -> equals
    1:1:boolean equals(java.lang.Object):0 -> equals
    2:2:boolean equals(java.lang.Object):0:0 -> equals
    3:3:java.lang.reflect.Type getOwnerType():0:0 -> equals
    3:3:boolean equals(java.lang.Object):0 -> equals
    4:4:boolean equals(java.lang.Object):0:0 -> equals
com.google.common.reflect.Types$TypeVariableImpl -> com.google.common.reflect.b1:
    com.google.common.collect.ImmutableList bounds -> c
    java.lang.String name -> b
    java.lang.reflect.GenericDeclaration genericDeclaration -> a
    1:1:java.lang.String getName():0:0 -> equals
    1:1:boolean equals(java.lang.Object):0 -> equals
    2:2:boolean equals(java.lang.Object):0:0 -> equals
    3:3:java.lang.reflect.GenericDeclaration getGenericDeclaration():0:0 -> equals
    3:3:boolean equals(java.lang.Object):0 -> equals
    4:4:boolean equals(java.lang.Object):0:0 -> equals
com.google.common.reflect.Types$TypeVariableInvocationHandler -> com.google.common.reflect.c1:
    com.google.common.reflect.Types$TypeVariableImpl typeVariableImpl -> a
    com.google.common.collect.ImmutableMap typeVariableMethods -> b
    com.google.common.reflect.Types$TypeVariableImpl access$600(com.google.common.reflect.Types$TypeVariableInvocationHandler) -> a
com.google.common.reflect.Types$WildcardTypeImpl -> com.google.common.reflect.d1:
    com.google.common.collect.ImmutableList lowerBounds -> a
    com.google.common.collect.ImmutableList upperBounds -> b
    1:1:java.lang.Iterable com.google.common.reflect.Types.access$700(java.lang.Iterable):0:0 -> toString
    1:1:java.lang.String toString():0 -> toString
    2:2:java.lang.Iterable com.google.common.reflect.Types.filterUpperBounds(java.lang.Iterable):0:0 -> toString
    2:2:java.lang.Iterable com.google.common.reflect.Types.access$700(java.lang.Iterable):0 -> toString
    2:2:java.lang.String toString():0 -> toString
    3:3:java.lang.String toString():0:0 -> toString
com.google.common.util.concurrent.-$$Lambda$AtomicLongMap$EWwULNGrV5tMEv4DDsPUrjlc_ZE -> com.google.common.util.concurrent.a:
    com.google.common.util.concurrent.-$$Lambda$AtomicLongMap$EWwULNGrV5tMEv4DDsPUrjlc_ZE INSTANCE -> a
    1:1:boolean com.google.common.util.concurrent.AtomicLongMap.lambda$removeAllZeros$5(java.lang.Long):0:0 -> test
    1:1:boolean test(java.lang.Object):0 -> test
com.google.common.util.concurrent.-$$Lambda$AtomicLongMap$SnMl4Y_nQef6wM6cDV1pASlPVSk -> com.google.common.util.concurrent.b:
    java.util.function.LongBinaryOperator f$0 -> a
    long f$1 -> b
    1:1:long com.google.common.util.concurrent.AtomicLongMap.lambda$getAndAccumulate$3(java.util.function.LongBinaryOperator,long,long):0:0 -> applyAsLong
    1:1:long applyAsLong(long):0 -> applyAsLong
com.google.common.util.concurrent.-$$Lambda$AtomicLongMap$Uvr36h25polW_deFqqO71iZNYoA -> com.google.common.util.concurrent.c:
    java.util.concurrent.atomic.AtomicLong f$0 -> a
    java.util.function.LongUnaryOperator f$1 -> b
    1:1:java.lang.Long com.google.common.util.concurrent.AtomicLongMap.lambda$getAndUpdate$1(java.util.concurrent.atomic.AtomicLong,java.util.function.LongUnaryOperator,java.lang.Object,java.lang.Long):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object,java.lang.Object):0 -> apply
com.google.common.util.concurrent.-$$Lambda$AtomicLongMap$ecPez9oktrNi4UZ7FC7yOwakeO8 -> com.google.common.util.concurrent.d:
    long f$0 -> a
com.google.common.util.concurrent.-$$Lambda$AtomicLongMap$sfC6T1t8Vkjg7Ce_FXreqJkl0iA -> com.google.common.util.concurrent.e:
    java.util.function.LongBinaryOperator f$0 -> a
    long f$1 -> b
    1:1:long com.google.common.util.concurrent.AtomicLongMap.lambda$accumulateAndGet$2(java.util.function.LongBinaryOperator,long,long):0:0 -> applyAsLong
    1:1:long applyAsLong(long):0 -> applyAsLong
com.google.common.util.concurrent.-$$Lambda$AtomicLongMap$uCVx350uuc-yIuk09CZ0EqHFDBM -> com.google.common.util.concurrent.f:
    java.util.function.LongUnaryOperator f$0 -> a
    1:1:java.lang.Long com.google.common.util.concurrent.AtomicLongMap.lambda$updateAndGet$0(java.util.function.LongUnaryOperator,java.lang.Object,java.lang.Long):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object,java.lang.Object):0 -> apply
com.google.common.util.concurrent.-$$Lambda$KLHD0yp1rABa-B64J30uRiMHGGI -> com.google.common.util.concurrent.g:
    com.google.common.util.concurrent.AtomicLongMap f$0 -> a
com.google.common.util.concurrent.-$$Lambda$UBRSyPJ3VlOcJeQkp7RT_cF4kcw -> com.google.common.util.concurrent.h:
    com.google.common.util.concurrent.-$$Lambda$UBRSyPJ3VlOcJeQkp7RT_cF4kcw INSTANCE -> a
com.google.common.util.concurrent.-$$Lambda$uAjrY3NI4r9F1o9CaCMzj_QnUcY -> com.google.common.util.concurrent.i:
    com.google.common.util.concurrent.-$$Lambda$uAjrY3NI4r9F1o9CaCMzj_QnUcY INSTANCE -> a
com.google.common.util.concurrent.AbstractCatchingFuture -> com.google.common.util.concurrent.l:
    java.lang.Object fallback -> j
    int $r8$clinit -> k
    java.lang.Class exceptionType -> i
    com.google.common.util.concurrent.ListenableFuture inputFuture -> h
    1:1:boolean com.google.common.util.concurrent.Platform.isInstanceOfThrowableClass(java.lang.Throwable,java.lang.Class):0:0 -> run
    1:1:void run():0 -> run
    2:2:void run():0:0 -> run
    java.lang.Object doFallback(java.lang.Object,java.lang.Throwable) -> t
    void setResult(java.lang.Object) -> u
com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture -> com.google.common.util.concurrent.j:
    1:1:com.google.common.util.concurrent.ListenableFuture doFallback(com.google.common.util.concurrent.AsyncFunction,java.lang.Throwable):0:0 -> t
    1:1:java.lang.Object doFallback(java.lang.Object,java.lang.Throwable):0 -> t
    1:1:void setResult(com.google.common.util.concurrent.ListenableFuture):0:0 -> u
    1:1:void setResult(java.lang.Object):0 -> u
com.google.common.util.concurrent.AbstractCatchingFuture$CatchingFuture -> com.google.common.util.concurrent.k:
    1:1:java.lang.Object doFallback(com.google.common.base.Function,java.lang.Throwable):0:0 -> t
    1:1:java.lang.Object doFallback(java.lang.Object,java.lang.Throwable):0 -> t
    void setResult(java.lang.Object) -> u
com.google.common.util.concurrent.AbstractExecutionThreadService -> com.google.common.util.concurrent.AbstractExecutionThreadService:
    java.util.logging.Logger logger -> b
    com.google.common.util.concurrent.Service delegate -> a
    java.util.logging.Logger access$000() -> a
com.google.common.util.concurrent.AbstractExecutionThreadService$1 -> com.google.common.util.concurrent.o:
    com.google.common.util.concurrent.AbstractExecutionThreadService this$0 -> p
com.google.common.util.concurrent.AbstractExecutionThreadService$1$1 -> com.google.common.util.concurrent.m:
    com.google.common.util.concurrent.AbstractExecutionThreadService$1 this$1 -> a
    1:1:java.lang.String get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.util.concurrent.AbstractExecutionThreadService$1$2 -> com.google.common.util.concurrent.n:
    com.google.common.util.concurrent.AbstractExecutionThreadService$1 this$1 -> a
com.google.common.util.concurrent.AbstractExecutionThreadService$2 -> com.google.common.util.concurrent.p:
    com.google.common.util.concurrent.AbstractExecutionThreadService this$0 -> a
com.google.common.util.concurrent.AbstractFuture -> com.google.common.util.concurrent.AbstractFuture:
    com.google.common.util.concurrent.AbstractFuture$Listener listeners -> b
    java.lang.Object NULL -> g
    java.util.logging.Logger log -> e
    java.lang.Object value -> a
    com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER -> f
    boolean GENERATE_CANCELLATION_CAUSES -> d
    com.google.common.util.concurrent.AbstractFuture$Waiter waiters -> c
    com.google.common.util.concurrent.AbstractFuture$AtomicHelper access$200() -> a
    boolean access$300() -> b
    java.lang.Object access$400(com.google.common.util.concurrent.AbstractFuture) -> c
    java.lang.Object access$402(com.google.common.util.concurrent.AbstractFuture,java.lang.Object) -> d
    java.lang.Object access$500(com.google.common.util.concurrent.ListenableFuture) -> e
    void access$600(com.google.common.util.concurrent.AbstractFuture) -> f
    com.google.common.util.concurrent.AbstractFuture$Waiter access$800(com.google.common.util.concurrent.AbstractFuture) -> g
    1:1:com.google.common.util.concurrent.AbstractFuture$AtomicHelper access$200():0:0 -> get
    1:1:void com.google.common.util.concurrent.AbstractFuture$Waiter.setNext(com.google.common.util.concurrent.AbstractFuture$Waiter):0 -> get
    1:1:java.lang.Object get():0 -> get
    2:2:void com.google.common.util.concurrent.AbstractFuture$Waiter.setNext(com.google.common.util.concurrent.AbstractFuture$Waiter):0:0 -> get
    2:2:java.lang.Object get():0 -> get
    3:3:java.lang.Object get():0:0 -> get
    4:4:com.google.common.util.concurrent.AbstractFuture$AtomicHelper access$200():0:0 -> get
    4:4:void com.google.common.util.concurrent.AbstractFuture$Waiter.setNext(com.google.common.util.concurrent.AbstractFuture$Waiter):0 -> get
    4:4:java.lang.Object get(long,java.util.concurrent.TimeUnit):0 -> get
    5:5:void com.google.common.util.concurrent.AbstractFuture$Waiter.setNext(com.google.common.util.concurrent.AbstractFuture$Waiter):0:0 -> get
    5:5:java.lang.Object get(long,java.util.concurrent.TimeUnit):0 -> get
    6:6:java.lang.Object get(long,java.util.concurrent.TimeUnit):0:0 -> get
    7:7:void com.google.common.util.concurrent.OverflowAvoidingLockSupport.parkNanos(java.lang.Object,long):0:0 -> get
    7:7:java.lang.Object get(long,java.util.concurrent.TimeUnit):0 -> get
    8:8:java.lang.Object get(long,java.util.concurrent.TimeUnit):0:0 -> get
    com.google.common.util.concurrent.AbstractFuture$Waiter access$802(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter) -> h
    com.google.common.util.concurrent.AbstractFuture$Listener access$900(com.google.common.util.concurrent.AbstractFuture) -> i
    com.google.common.util.concurrent.AbstractFuture$Listener access$902(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener) -> j
    void addDoneString(java.lang.StringBuilder) -> k
    void appendResultObject(java.lang.StringBuilder,java.lang.Object) -> l
    1:1:void releaseWaiters():0:0 -> m
    1:1:void complete(com.google.common.util.concurrent.AbstractFuture):0 -> m
    2:2:void com.google.common.util.concurrent.AbstractFuture$Waiter.unpark():0:0 -> m
    2:2:void releaseWaiters():0 -> m
    2:2:void complete(com.google.common.util.concurrent.AbstractFuture):0 -> m
    3:3:void releaseWaiters():0:0 -> m
    3:3:void complete(com.google.common.util.concurrent.AbstractFuture):0 -> m
    4:4:void complete(com.google.common.util.concurrent.AbstractFuture):0:0 -> m
    5:5:com.google.common.util.concurrent.AbstractFuture$Listener clearListeners(com.google.common.util.concurrent.AbstractFuture$Listener):0:0 -> m
    5:5:void complete(com.google.common.util.concurrent.AbstractFuture):0 -> m
    6:6:void complete(com.google.common.util.concurrent.AbstractFuture):0:0 -> m
    void executeListener(java.lang.Runnable,java.util.concurrent.Executor) -> n
    1:1:java.util.concurrent.CancellationException cancellationExceptionWithCause(java.lang.String,java.lang.Throwable):0:0 -> o
    1:1:java.lang.Object getDoneValue(java.lang.Object):0 -> o
    2:2:java.lang.Object getDoneValue(java.lang.Object):0:0 -> o
    java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture) -> p
    java.lang.Object getUninterruptibly(java.util.concurrent.Future) -> q
    void maybePropagateCancellationTo(java.util.concurrent.Future) -> r
    void removeWaiter(com.google.common.util.concurrent.AbstractFuture$Waiter) -> s
    1:1:void addPendingString(java.lang.StringBuilder):0:0 -> toString
    1:1:java.lang.String toString():0 -> toString
    2:2:void appendUserObject(java.lang.StringBuilder,java.lang.Object):0:0 -> toString
    2:2:void addPendingString(java.lang.StringBuilder):0 -> toString
    2:2:java.lang.String toString():0 -> toString
    3:3:void addPendingString(java.lang.StringBuilder):0:0 -> toString
    3:3:java.lang.String toString():0 -> toString
    4:4:java.lang.String toString():0:0 -> toString
com.google.common.util.concurrent.AbstractFuture$1 -> com.google.common.util.concurrent.q:
com.google.common.util.concurrent.AbstractFuture$AtomicHelper -> com.google.common.util.concurrent.r:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.AbstractFuture$1):0 -> <init>
    boolean casListeners(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener,com.google.common.util.concurrent.AbstractFuture$Listener) -> a
    boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object) -> b
    boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> c
    void putNext(com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> d
    void putThread(com.google.common.util.concurrent.AbstractFuture$Waiter,java.lang.Thread) -> e
com.google.common.util.concurrent.AbstractFuture$Cancellation -> com.google.common.util.concurrent.s:
    java.lang.Throwable cause -> b
    com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_INTERRUPTED -> c
    com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_CANCELLED -> d
    boolean wasInterrupted -> a
com.google.common.util.concurrent.AbstractFuture$Failure -> com.google.common.util.concurrent.u:
    java.lang.Throwable exception -> a
    com.google.common.util.concurrent.AbstractFuture$Failure FALLBACK_INSTANCE -> b
com.google.common.util.concurrent.AbstractFuture$Failure$1 -> com.google.common.util.concurrent.t:
com.google.common.util.concurrent.AbstractFuture$Listener -> com.google.common.util.concurrent.v:
    com.google.common.util.concurrent.AbstractFuture$Listener next -> c
    com.google.common.util.concurrent.AbstractFuture$Listener TOMBSTONE -> d
    java.util.concurrent.Executor executor -> b
    java.lang.Runnable task -> a
com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper -> com.google.common.util.concurrent.w:
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater waiterNextUpdater -> b
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater waitersUpdater -> c
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater waiterThreadUpdater -> a
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater listenersUpdater -> d
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater valueUpdater -> e
    boolean casListeners(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener,com.google.common.util.concurrent.AbstractFuture$Listener) -> a
    boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object) -> b
    boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> c
    void putNext(com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> d
    void putThread(com.google.common.util.concurrent.AbstractFuture$Waiter,java.lang.Thread) -> e
com.google.common.util.concurrent.AbstractFuture$SetFuture -> com.google.common.util.concurrent.x:
    com.google.common.util.concurrent.ListenableFuture future -> b
    com.google.common.util.concurrent.AbstractFuture owner -> a
com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper -> com.google.common.util.concurrent.y:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.AbstractFuture$1):0 -> <init>
    boolean casListeners(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener,com.google.common.util.concurrent.AbstractFuture$Listener) -> a
    boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object) -> b
    boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> c
    void putNext(com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> d
    void putThread(com.google.common.util.concurrent.AbstractFuture$Waiter,java.lang.Thread) -> e
com.google.common.util.concurrent.AbstractFuture$Trusted -> com.google.common.util.concurrent.z:
com.google.common.util.concurrent.AbstractFuture$TrustedFuture -> com.google.common.util.concurrent.a0:
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper -> com.google.common.util.concurrent.c0:
    sun.misc.Unsafe UNSAFE -> a
    long WAITER_NEXT_OFFSET -> f
    long WAITER_THREAD_OFFSET -> e
    long LISTENERS_OFFSET -> b
    long VALUE_OFFSET -> d
    long WAITERS_OFFSET -> c
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.AbstractFuture$1):0 -> <init>
    boolean casListeners(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener,com.google.common.util.concurrent.AbstractFuture$Listener) -> a
    boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object) -> b
    boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> c
    void putNext(com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> d
    void putThread(com.google.common.util.concurrent.AbstractFuture$Waiter,java.lang.Thread) -> e
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1 -> com.google.common.util.concurrent.b0:
com.google.common.util.concurrent.AbstractFuture$Waiter -> com.google.common.util.concurrent.d0:
    java.lang.Thread thread -> a
    com.google.common.util.concurrent.AbstractFuture$Waiter next -> b
    com.google.common.util.concurrent.AbstractFuture$Waiter TOMBSTONE -> c
com.google.common.util.concurrent.AbstractIdleService -> com.google.common.util.concurrent.AbstractIdleService:
    com.google.common.base.Supplier threadNameSupplier -> a
    com.google.common.util.concurrent.Service delegate -> b
    com.google.common.base.Supplier access$200(com.google.common.util.concurrent.AbstractIdleService) -> a
com.google.common.util.concurrent.AbstractIdleService$1 -> com.google.common.util.concurrent.e0:
    com.google.common.util.concurrent.AbstractIdleService this$0 -> a
com.google.common.util.concurrent.AbstractIdleService$DelegateService -> com.google.common.util.concurrent.h0:
    com.google.common.util.concurrent.AbstractIdleService this$0 -> p
    1:1:void <init>(com.google.common.util.concurrent.AbstractIdleService):0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.AbstractIdleService,com.google.common.util.concurrent.AbstractIdleService$1):0 -> <init>
com.google.common.util.concurrent.AbstractIdleService$DelegateService$1 -> com.google.common.util.concurrent.f0:
    com.google.common.util.concurrent.AbstractIdleService$DelegateService this$1 -> a
com.google.common.util.concurrent.AbstractIdleService$DelegateService$2 -> com.google.common.util.concurrent.g0:
    com.google.common.util.concurrent.AbstractIdleService$DelegateService this$1 -> a
com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier -> com.google.common.util.concurrent.i0:
    com.google.common.util.concurrent.AbstractIdleService this$0 -> a
    1:1:void <init>(com.google.common.util.concurrent.AbstractIdleService):0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.AbstractIdleService,com.google.common.util.concurrent.AbstractIdleService$1):0 -> <init>
    1:1:java.lang.String get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.util.concurrent.AbstractListeningExecutorService -> com.google.common.util.concurrent.AbstractListeningExecutorService:
    1:1:com.google.common.util.concurrent.TrustedListenableFutureTask com.google.common.util.concurrent.TrustedListenableFutureTask.create(java.util.concurrent.Callable):0:0 -> newTaskFor
    1:1:java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable):0 -> newTaskFor
com.google.common.util.concurrent.AbstractScheduledService -> com.google.common.util.concurrent.AbstractScheduledService:
    com.google.common.util.concurrent.AbstractService delegate -> a
    java.util.logging.Logger logger -> b
    java.util.logging.Logger access$400() -> a
    com.google.common.util.concurrent.AbstractService access$500(com.google.common.util.concurrent.AbstractScheduledService) -> b
com.google.common.util.concurrent.AbstractScheduledService$1 -> com.google.common.util.concurrent.j0:
    java.util.concurrent.ScheduledExecutorService val$executor -> a
com.google.common.util.concurrent.AbstractScheduledService$1ThreadFactoryImpl -> com.google.common.util.concurrent.k0:
    com.google.common.util.concurrent.AbstractScheduledService this$0 -> a
com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable -> com.google.common.util.concurrent.l0:
    com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler this$0 -> f
    java.util.concurrent.locks.ReentrantLock lock -> d
    java.lang.Runnable wrappedRunnable -> a
    java.util.concurrent.Future currentFuture -> e
    java.util.concurrent.ScheduledExecutorService executor -> b
    com.google.common.util.concurrent.AbstractService service -> c
    1:1:java.lang.Void call():0:0 -> call
    1:1:java.lang.Object call():0 -> call
com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule -> com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule:
    long delay -> a
    java.util.concurrent.TimeUnit unit -> b
    long access$800(com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule) -> a
    java.util.concurrent.TimeUnit access$900(com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule) -> b
com.google.common.util.concurrent.AbstractScheduledService$Scheduler -> com.google.common.util.concurrent.AbstractScheduledService$Scheduler:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.AbstractScheduledService$1):0 -> <init>
com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1 -> com.google.common.util.concurrent.m0:
    long val$delay -> b
    long val$initialDelay -> a
    java.util.concurrent.TimeUnit val$unit -> c
com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2 -> com.google.common.util.concurrent.n0:
    long val$period -> b
    long val$initialDelay -> a
    java.util.concurrent.TimeUnit val$unit -> c
com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate -> com.google.common.util.concurrent.s0:
    java.util.concurrent.Future runningTask -> p
    java.lang.Runnable task -> s
    java.util.concurrent.locks.ReentrantLock lock -> r
    com.google.common.util.concurrent.AbstractScheduledService this$0 -> t
    java.util.concurrent.ScheduledExecutorService executorService -> q
    1:1:void <init>(com.google.common.util.concurrent.AbstractScheduledService):0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.AbstractScheduledService,com.google.common.util.concurrent.AbstractScheduledService$1):0 -> <init>
    1:1:java.util.concurrent.ScheduledExecutorService com.google.common.util.concurrent.MoreExecutors.renamingDecorator(java.util.concurrent.ScheduledExecutorService,com.google.common.base.Supplier):0:0 -> doStart
    1:1:void doStart():0 -> doStart
    2:2:void doStart():0:0 -> doStart
    java.util.concurrent.locks.ReentrantLock access$200(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate) -> f
    java.util.concurrent.Future access$300(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate) -> g
    java.util.concurrent.Future access$302(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate,java.util.concurrent.Future) -> h
    java.util.concurrent.ScheduledExecutorService access$600(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate) -> i
    java.lang.Runnable access$700(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate) -> j
com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$1 -> com.google.common.util.concurrent.o0:
    com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate this$1 -> a
    1:1:java.lang.String get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$2 -> com.google.common.util.concurrent.p0:
    com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate this$1 -> a
com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$3 -> com.google.common.util.concurrent.q0:
    com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate this$1 -> a
com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$Task -> com.google.common.util.concurrent.r0:
    com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate this$1 -> a
com.google.common.util.concurrent.AbstractService -> com.google.common.util.concurrent.AbstractService:
    com.google.common.util.concurrent.AbstractService$StateSnapshot snapshot -> g
    com.google.common.util.concurrent.ListenerCallQueue$Event STARTING_EVENT -> h
    com.google.common.util.concurrent.ListenerCallQueue$Event RUNNING_EVENT -> i
    com.google.common.util.concurrent.ListenerCallQueue$Event STOPPING_FROM_STARTING_EVENT -> j
    com.google.common.util.concurrent.ListenerCallQueue$Event STOPPING_FROM_RUNNING_EVENT -> k
    com.google.common.util.concurrent.ListenerCallQueue$Event TERMINATED_FROM_NEW_EVENT -> l
    com.google.common.util.concurrent.ListenerCallQueue$Event TERMINATED_FROM_STARTING_EVENT -> m
    com.google.common.util.concurrent.ListenerCallQueue$Event TERMINATED_FROM_RUNNING_EVENT -> n
    com.google.common.util.concurrent.ListenerCallQueue$Event TERMINATED_FROM_STOPPING_EVENT -> o
    com.google.common.util.concurrent.Monitor$Guard isStartable -> b
    com.google.common.util.concurrent.Monitor$Guard isStoppable -> c
    com.google.common.util.concurrent.Monitor$Guard hasReachedRunning -> d
    com.google.common.util.concurrent.Monitor$Guard isStopped -> e
    com.google.common.util.concurrent.ListenerCallQueue listeners -> f
    com.google.common.util.concurrent.Monitor monitor -> a
    1:1:com.google.common.util.concurrent.ListenerCallQueue$Event stoppingEvent(com.google.common.util.concurrent.Service$State):0:0 -> <clinit>
    1:1:void <clinit>():0 -> <clinit>
    2:2:void <clinit>():0:0 -> <clinit>
    3:3:com.google.common.util.concurrent.ListenerCallQueue$Event stoppingEvent(com.google.common.util.concurrent.Service$State):0:0 -> <clinit>
    3:3:void <clinit>():0 -> <clinit>
    4:4:void <clinit>():0:0 -> <clinit>
    5:5:com.google.common.util.concurrent.ListenerCallQueue$Event terminatedEvent(com.google.common.util.concurrent.Service$State):0:0 -> <clinit>
    5:5:void <clinit>():0 -> <clinit>
    6:6:void <clinit>():0:0 -> <clinit>
    7:7:com.google.common.util.concurrent.ListenerCallQueue$Event terminatedEvent(com.google.common.util.concurrent.Service$State):0:0 -> <clinit>
    7:7:void <clinit>():0 -> <clinit>
    8:8:void <clinit>():0:0 -> <clinit>
    9:9:com.google.common.util.concurrent.ListenerCallQueue$Event terminatedEvent(com.google.common.util.concurrent.Service$State):0:0 -> <clinit>
    9:9:void <clinit>():0 -> <clinit>
    10:10:void <clinit>():0:0 -> <clinit>
    11:11:com.google.common.util.concurrent.ListenerCallQueue$Event terminatedEvent(com.google.common.util.concurrent.Service$State):0:0 -> <clinit>
    11:11:void <clinit>():0 -> <clinit>
    12:12:void <clinit>():0:0 -> <clinit>
    com.google.common.util.concurrent.Monitor access$000(com.google.common.util.concurrent.AbstractService) -> a
    void checkCurrentState(com.google.common.util.concurrent.Service$State) -> b
    void dispatchListenerEvents() -> c
    void enqueueStoppingEvent(com.google.common.util.concurrent.Service$State) -> d
    void enqueueTerminatedEvent(com.google.common.util.concurrent.Service$State) -> e
    1:1:java.lang.Throwable com.google.common.util.concurrent.AbstractService$StateSnapshot.failureCause():0:0 -> failureCause
    1:1:java.lang.Throwable failureCause():0 -> failureCause
    1:1:void enqueueFailedEvent(com.google.common.util.concurrent.Service$State,java.lang.Throwable):0:0 -> notifyFailed
    1:1:void notifyFailed(java.lang.Throwable):0 -> notifyFailed
    2:2:void notifyFailed(java.lang.Throwable):0:0 -> notifyFailed
    1:1:void enqueueRunningEvent():0:0 -> notifyStarted
    1:1:void notifyStarted():0 -> notifyStarted
    2:2:void notifyStarted():0:0 -> notifyStarted
    1:1:void enqueueStartingEvent():0:0 -> startAsync
    1:1:com.google.common.util.concurrent.Service startAsync():0 -> startAsync
    2:2:com.google.common.util.concurrent.Service startAsync():0:0 -> startAsync
    1:1:com.google.common.util.concurrent.Service$State com.google.common.util.concurrent.AbstractService$StateSnapshot.externalState():0:0 -> state
    1:1:com.google.common.util.concurrent.Service$State state():0 -> state
com.google.common.util.concurrent.AbstractService$1 -> com.google.common.util.concurrent.t0:
    1:1:void call(com.google.common.util.concurrent.Service$Listener):0:0 -> call
    1:1:void call(java.lang.Object):0 -> call
com.google.common.util.concurrent.AbstractService$2 -> com.google.common.util.concurrent.u0:
    1:1:void call(com.google.common.util.concurrent.Service$Listener):0:0 -> call
    1:1:void call(java.lang.Object):0 -> call
com.google.common.util.concurrent.AbstractService$3 -> com.google.common.util.concurrent.v0:
    com.google.common.util.concurrent.Service$State val$from -> a
    1:1:void call(com.google.common.util.concurrent.Service$Listener):0:0 -> call
    1:1:void call(java.lang.Object):0 -> call
com.google.common.util.concurrent.AbstractService$4 -> com.google.common.util.concurrent.w0:
    com.google.common.util.concurrent.Service$State val$from -> a
    1:1:void call(com.google.common.util.concurrent.Service$Listener):0:0 -> call
    1:1:void call(java.lang.Object):0 -> call
com.google.common.util.concurrent.AbstractService$5 -> com.google.common.util.concurrent.x0:
    com.google.common.util.concurrent.Service$State val$from -> a
    java.lang.Throwable val$cause -> b
    1:1:void call(com.google.common.util.concurrent.Service$Listener):0:0 -> call
    1:1:void call(java.lang.Object):0 -> call
com.google.common.util.concurrent.AbstractService$HasReachedRunningGuard -> com.google.common.util.concurrent.y0:
    com.google.common.util.concurrent.AbstractService this$0 -> e
com.google.common.util.concurrent.AbstractService$IsStartableGuard -> com.google.common.util.concurrent.z0:
    com.google.common.util.concurrent.AbstractService this$0 -> e
com.google.common.util.concurrent.AbstractService$IsStoppableGuard -> com.google.common.util.concurrent.a1:
    com.google.common.util.concurrent.AbstractService this$0 -> e
com.google.common.util.concurrent.AbstractService$IsStoppedGuard -> com.google.common.util.concurrent.b1:
    com.google.common.util.concurrent.AbstractService this$0 -> e
com.google.common.util.concurrent.AbstractService$StateSnapshot -> com.google.common.util.concurrent.c1:
    com.google.common.util.concurrent.Service$State state -> a
    java.lang.Throwable failure -> c
    boolean shutdownWhenStartupFinishes -> b
com.google.common.util.concurrent.AbstractTransformFuture -> com.google.common.util.concurrent.f1:
    java.lang.Object function -> i
    int $r8$clinit -> j
    com.google.common.util.concurrent.ListenableFuture inputFuture -> h
    java.lang.Object doTransform(java.lang.Object,java.lang.Object) -> t
    void setResult(java.lang.Object) -> u
com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture -> com.google.common.util.concurrent.d1:
    1:1:com.google.common.util.concurrent.ListenableFuture doTransform(com.google.common.util.concurrent.AsyncFunction,java.lang.Object):0:0 -> t
    1:1:java.lang.Object doTransform(java.lang.Object,java.lang.Object):0 -> t
    1:1:void setResult(com.google.common.util.concurrent.ListenableFuture):0:0 -> u
    1:1:void setResult(java.lang.Object):0 -> u
com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture -> com.google.common.util.concurrent.e1:
    1:1:java.lang.Object doTransform(com.google.common.base.Function,java.lang.Object):0:0 -> t
    1:1:java.lang.Object doTransform(java.lang.Object,java.lang.Object):0 -> t
    void setResult(java.lang.Object) -> u
com.google.common.util.concurrent.AggregateFuture -> com.google.common.util.concurrent.j1:
    boolean allMustSucceed -> m
    boolean collectsValues -> n
    java.util.logging.Logger logger -> o
    com.google.common.collect.ImmutableCollection futures -> l
    com.google.common.collect.ImmutableCollection access$002(com.google.common.util.concurrent.AggregateFuture,com.google.common.collect.ImmutableCollection) -> A
    void access$100(com.google.common.util.concurrent.AggregateFuture,int,java.util.concurrent.Future) -> B
    1:1:void decrementCountAndMaybeComplete(com.google.common.collect.ImmutableCollection):0:0 -> C
    1:1:void access$200(com.google.common.util.concurrent.AggregateFuture,com.google.common.collect.ImmutableCollection):0 -> C
    2:2:void processCompleted(com.google.common.collect.ImmutableCollection):0:0 -> C
    2:2:void decrementCountAndMaybeComplete(com.google.common.collect.ImmutableCollection):0 -> C
    2:2:void access$200(com.google.common.util.concurrent.AggregateFuture,com.google.common.collect.ImmutableCollection):0 -> C
    boolean addCausalChain(java.util.Set,java.lang.Throwable) -> D
    void collectOneValue(int,java.lang.Object) -> E
    void collectValueFromNonCancelledFuture(int,java.util.concurrent.Future) -> F
    void handleAllCompleted() -> G
    1:1:void log(java.lang.Throwable):0:0 -> H
    1:1:void handleException(java.lang.Throwable):0 -> H
    2:2:void handleException(java.lang.Throwable):0:0 -> H
    3:3:void log(java.lang.Throwable):0:0 -> H
    3:3:void handleException(java.lang.Throwable):0 -> H
    void init() -> I
    void releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason) -> J
    void addInitialException(java.util.Set) -> w
com.google.common.util.concurrent.AggregateFuture$1 -> com.google.common.util.concurrent.g1:
    com.google.common.util.concurrent.AggregateFuture this$0 -> c
    com.google.common.util.concurrent.ListenableFuture val$future -> a
    int val$index -> b
com.google.common.util.concurrent.AggregateFuture$2 -> com.google.common.util.concurrent.h1:
    com.google.common.util.concurrent.AggregateFuture this$0 -> b
    com.google.common.collect.ImmutableCollection val$localFutures -> a
com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason -> com.google.common.util.concurrent.i1:
    com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason OUTPUT_FUTURE_DONE -> a
    com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason ALL_INPUT_FUTURES_PROCESSED -> b
    com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason[] $VALUES -> c
com.google.common.util.concurrent.AggregateFutureState -> com.google.common.util.concurrent.o1:
    java.util.Set seenExceptions -> h
    java.util.logging.Logger log -> k
    int remaining -> i
    com.google.common.util.concurrent.AggregateFutureState$AtomicHelper ATOMIC_HELPER -> j
    java.util.Set access$200(com.google.common.util.concurrent.AggregateFutureState) -> t
    java.util.Set access$202(com.google.common.util.concurrent.AggregateFutureState,java.util.Set) -> u
    int access$306(com.google.common.util.concurrent.AggregateFutureState) -> v
    void addInitialException(java.util.Set) -> w
    void clearSeenExceptions() -> x
    int decrementRemainingAndGet() -> y
    java.util.Set getOrInitSeenExceptions() -> z
com.google.common.util.concurrent.AggregateFutureState$1 -> com.google.common.util.concurrent.k1:
com.google.common.util.concurrent.AggregateFutureState$AtomicHelper -> com.google.common.util.concurrent.l1:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.AggregateFutureState$1):0 -> <init>
    void compareAndSetSeenExceptions(com.google.common.util.concurrent.AggregateFutureState,java.util.Set,java.util.Set) -> a
    int decrementAndGetRemainingCount(com.google.common.util.concurrent.AggregateFutureState) -> b
com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper -> com.google.common.util.concurrent.m1:
    java.util.concurrent.atomic.AtomicIntegerFieldUpdater remainingCountUpdater -> b
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater seenExceptionsUpdater -> a
    void compareAndSetSeenExceptions(com.google.common.util.concurrent.AggregateFutureState,java.util.Set,java.util.Set) -> a
    int decrementAndGetRemainingCount(com.google.common.util.concurrent.AggregateFutureState) -> b
com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper -> com.google.common.util.concurrent.n1:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.AggregateFutureState$1):0 -> <init>
    void compareAndSetSeenExceptions(com.google.common.util.concurrent.AggregateFutureState,java.util.Set,java.util.Set) -> a
    int decrementAndGetRemainingCount(com.google.common.util.concurrent.AggregateFutureState) -> b
com.google.common.util.concurrent.AtomicDouble -> com.google.common.util.concurrent.AtomicDouble:
    java.util.concurrent.atomic.AtomicLongFieldUpdater updater -> b
    long value -> a
com.google.common.util.concurrent.AtomicDoubleArray -> com.google.common.util.concurrent.AtomicDoubleArray:
    java.util.concurrent.atomic.AtomicLongArray longs -> a
com.google.common.util.concurrent.AtomicLongMap -> com.google.common.util.concurrent.AtomicLongMap:
    java.util.Map asMap -> b
    java.util.concurrent.ConcurrentHashMap map -> a
    1:1:java.util.Map createAsMap():0:0 -> asMap
    1:1:java.util.Map asMap():0 -> asMap
    2:2:java.util.Map asMap():0:0 -> asMap
    1:1:boolean remove(java.lang.Object,long):0:0 -> removeIfZero
    1:1:boolean removeIfZero(java.lang.Object):0 -> removeIfZero
com.google.common.util.concurrent.Callables -> com.google.common.util.concurrent.Callables:
    1:1:boolean trySetName(java.lang.String,java.lang.Thread):0:0 -> a
    1:1:boolean access$000(java.lang.String,java.lang.Thread):0 -> a
com.google.common.util.concurrent.Callables$1 -> com.google.common.util.concurrent.p1:
    java.lang.Object val$value -> a
com.google.common.util.concurrent.Callables$2 -> com.google.common.util.concurrent.q1:
    java.util.concurrent.Callable val$callable -> b
    com.google.common.util.concurrent.ListeningExecutorService val$listeningExecutorService -> a
com.google.common.util.concurrent.Callables$3 -> com.google.common.util.concurrent.r1:
    java.util.concurrent.Callable val$callable -> b
    com.google.common.base.Supplier val$nameSupplier -> a
com.google.common.util.concurrent.Callables$4 -> com.google.common.util.concurrent.s1:
    java.lang.Runnable val$task -> b
    com.google.common.base.Supplier val$nameSupplier -> a
com.google.common.util.concurrent.ClosingFuture -> com.google.common.util.concurrent.ClosingFuture:
    java.util.logging.Logger logger -> d
    com.google.common.util.concurrent.FluentFuture future -> c
    java.util.concurrent.atomic.AtomicReference state -> a
    int $r8$clinit -> e
    com.google.common.util.concurrent.ClosingFuture$CloseableList closeables -> b
    1:1:com.google.common.util.concurrent.TrustedListenableFutureTask com.google.common.util.concurrent.TrustedListenableFutureTask.create(com.google.common.util.concurrent.AsyncCallable):0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.ClosingFuture$AsyncClosingCallable,java.util.concurrent.Executor):0 -> <init>
    2:2:void <init>(com.google.common.util.concurrent.ClosingFuture$AsyncClosingCallable,java.util.concurrent.Executor):0:0 -> <init>
    3:3:com.google.common.util.concurrent.TrustedListenableFutureTask com.google.common.util.concurrent.TrustedListenableFutureTask.create(java.util.concurrent.Callable):0:0 -> <init>
    3:3:void <init>(com.google.common.util.concurrent.ClosingFuture$ClosingCallable,java.util.concurrent.Executor):0 -> <init>
    4:4:void <init>(com.google.common.util.concurrent.ClosingFuture$ClosingCallable,java.util.concurrent.Executor):0:0 -> <init>
    com.google.common.util.concurrent.FluentFuture access$000(com.google.common.util.concurrent.ClosingFuture) -> a
    1:1:void close():0:0 -> b
    1:1:void access$100(com.google.common.util.concurrent.ClosingFuture):0 -> b
    void access$1000(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture$CloseableList) -> c
    1:1:void close():0:0 -> cancel
    1:1:boolean cancel(boolean):0 -> cancel
    1:1:com.google.common.util.concurrent.ClosingFuture catchingMoreGeneric(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.util.concurrent.Executor):0:0 -> catching
    1:1:com.google.common.util.concurrent.ClosingFuture catching(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.util.concurrent.Executor):0 -> catching
    1:1:com.google.common.util.concurrent.ClosingFuture catchingAsyncMoreGeneric(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.util.concurrent.Executor):0:0 -> catchingAsync
    1:1:com.google.common.util.concurrent.ClosingFuture catchingAsync(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.util.concurrent.Executor):0 -> catchingAsync
    1:1:boolean compareAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State):0:0 -> d
    1:1:void checkAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State):0 -> d
    1:1:void access$1100(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State):0 -> d
    2:2:void checkAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State):0:0 -> d
    2:2:void access$1100(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State):0 -> d
    com.google.common.util.concurrent.ClosingFuture$CloseableList access$200(com.google.common.util.concurrent.ClosingFuture) -> e
    java.util.logging.Logger access$3200() -> f
    1:1:boolean compareAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State):0:0 -> finishToFuture
    1:1:com.google.common.util.concurrent.FluentFuture finishToFuture():0 -> finishToFuture
    2:2:com.google.common.util.concurrent.FluentFuture finishToFuture():0:0 -> finishToFuture
    1:1:boolean compareAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State):0:0 -> finishToValueAndCloser
    1:1:void finishToValueAndCloser(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer,java.util.concurrent.Executor):0 -> finishToValueAndCloser
    2:2:void finishToValueAndCloser(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer,java.util.concurrent.Executor):0:0 -> finishToValueAndCloser
    void access$3300(java.lang.AutoCloseable,java.util.concurrent.Executor) -> g
    1:1:boolean compareAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State):0:0 -> h
    1:1:void checkAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State):0 -> h
    1:1:void becomeSubsumedInto(com.google.common.util.concurrent.ClosingFuture$CloseableList):0 -> h
    2:2:void checkAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State):0:0 -> h
    2:2:void becomeSubsumedInto(com.google.common.util.concurrent.ClosingFuture$CloseableList):0 -> h
    3:3:void becomeSubsumedInto(com.google.common.util.concurrent.ClosingFuture$CloseableList):0:0 -> h
    void closeQuietly(java.lang.AutoCloseable,java.util.concurrent.Executor) -> i
    com.google.common.util.concurrent.ClosingFuture derive(com.google.common.util.concurrent.FluentFuture) -> j
com.google.common.util.concurrent.ClosingFuture$1 -> com.google.common.util.concurrent.v1:
    java.util.concurrent.Executor val$closingExecutor -> b
    com.google.common.util.concurrent.ClosingFuture val$closingFuture -> a
    1:1:void onSuccess(java.lang.AutoCloseable):0:0 -> onSuccess
    1:1:void onSuccess(java.lang.Object):0 -> onSuccess
com.google.common.util.concurrent.ClosingFuture$10 -> com.google.common.util.concurrent.t1:
    com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer val$consumer -> a
    com.google.common.util.concurrent.ClosingFuture this$0 -> b
    1:1:void com.google.common.util.concurrent.ClosingFuture.access$1200(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer,com.google.common.util.concurrent.ClosingFuture):0:0 -> run
    1:1:void run():0 -> run
    2:2:void com.google.common.util.concurrent.ClosingFuture.provideValueAndCloser(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer,com.google.common.util.concurrent.ClosingFuture):0:0 -> run
    2:2:void com.google.common.util.concurrent.ClosingFuture.access$1200(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer,com.google.common.util.concurrent.ClosingFuture):0 -> run
    2:2:void run():0 -> run
com.google.common.util.concurrent.ClosingFuture$11 -> com.google.common.util.concurrent.u1:
    java.lang.AutoCloseable val$closeable -> a
com.google.common.util.concurrent.ClosingFuture$2 -> com.google.common.util.concurrent.w1:
    com.google.common.util.concurrent.ClosingFuture$ClosingCallable val$callable -> a
    com.google.common.util.concurrent.ClosingFuture this$0 -> b
com.google.common.util.concurrent.ClosingFuture$3 -> com.google.common.util.concurrent.x1:
    com.google.common.util.concurrent.ClosingFuture$AsyncClosingCallable val$callable -> a
    com.google.common.util.concurrent.ClosingFuture this$0 -> b
com.google.common.util.concurrent.ClosingFuture$4 -> com.google.common.util.concurrent.y1:
    com.google.common.util.concurrent.ClosingFuture$ClosingFunction val$function -> a
    com.google.common.util.concurrent.ClosingFuture this$0 -> b
com.google.common.util.concurrent.ClosingFuture$5 -> com.google.common.util.concurrent.z1:
    com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction val$function -> a
    com.google.common.util.concurrent.ClosingFuture this$0 -> b
com.google.common.util.concurrent.ClosingFuture$6 -> com.google.common.util.concurrent.a2:
    com.google.common.util.concurrent.AsyncFunction val$function -> a
com.google.common.util.concurrent.ClosingFuture$7 -> com.google.common.util.concurrent.b2:
    com.google.common.util.concurrent.ClosingFuture$ClosingFunction val$fallback -> a
    com.google.common.util.concurrent.ClosingFuture this$0 -> b
    1:1:com.google.common.util.concurrent.ListenableFuture apply(java.lang.Throwable):0:0 -> apply
    1:1:com.google.common.util.concurrent.ListenableFuture apply(java.lang.Object):0 -> apply
com.google.common.util.concurrent.ClosingFuture$8 -> com.google.common.util.concurrent.c2:
    com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction val$fallback -> a
    com.google.common.util.concurrent.ClosingFuture this$0 -> b
    1:1:com.google.common.util.concurrent.ListenableFuture apply(java.lang.Throwable):0:0 -> apply
    1:1:com.google.common.util.concurrent.ListenableFuture apply(java.lang.Object):0 -> apply
com.google.common.util.concurrent.ClosingFuture$9 -> com.google.common.util.concurrent.d2:
    com.google.common.util.concurrent.ClosingFuture this$0 -> a
com.google.common.util.concurrent.ClosingFuture$CloseableList -> com.google.common.util.concurrent.e2:
    com.google.common.util.concurrent.ClosingFuture$DeferredCloser closer -> a
    boolean closed -> b
    com.google.common.util.concurrent.ClosingFuture$DeferredCloser access$300(com.google.common.util.concurrent.ClosingFuture$CloseableList) -> a
    void add(java.lang.AutoCloseable,java.util.concurrent.Executor) -> b
    com.google.common.util.concurrent.FluentFuture applyAsyncClosingFunction(com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.lang.Object) -> c
    com.google.common.util.concurrent.ListenableFuture applyClosingFunction(com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.lang.Object) -> d
com.google.common.util.concurrent.ClosingFuture$Combiner -> com.google.common.util.concurrent.ClosingFuture$Combiner:
    com.google.common.util.concurrent.ClosingFuture$CloseableList closeables -> a
    boolean allMustSucceed -> b
    com.google.common.base.Function INNER_FUTURE -> c
    1:1:void <init>(boolean,java.lang.Iterable):0:0 -> <init>
    1:1:void <init>(boolean,java.lang.Iterable,com.google.common.util.concurrent.ClosingFuture$1):0 -> <init>
    com.google.common.util.concurrent.ClosingFuture$CloseableList access$1300(com.google.common.util.concurrent.ClosingFuture$Combiner) -> a
    1:1:com.google.common.collect.ImmutableList inputFutures():0:0 -> b
    1:1:com.google.common.util.concurrent.Futures$FutureCombiner futureCombiner():0 -> b
    2:2:com.google.common.util.concurrent.Futures$FutureCombiner futureCombiner():0:0 -> b
    3:3:com.google.common.collect.ImmutableList inputFutures():0:0 -> b
    3:3:com.google.common.util.concurrent.Futures$FutureCombiner futureCombiner():0 -> b
    4:4:com.google.common.util.concurrent.Futures$FutureCombiner futureCombiner():0:0 -> b
com.google.common.util.concurrent.ClosingFuture$Combiner$1 -> com.google.common.util.concurrent.f2:
    com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable val$combiningCallable -> a
    com.google.common.util.concurrent.ClosingFuture$Combiner this$0 -> b
com.google.common.util.concurrent.ClosingFuture$Combiner$2 -> com.google.common.util.concurrent.g2:
    com.google.common.util.concurrent.ClosingFuture$Combiner this$0 -> b
    com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable val$combiningCallable -> a
com.google.common.util.concurrent.ClosingFuture$Combiner$3 -> com.google.common.util.concurrent.h2:
    1:1:com.google.common.util.concurrent.FluentFuture apply(com.google.common.util.concurrent.ClosingFuture):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.util.concurrent.ClosingFuture$Combiner2 -> com.google.common.util.concurrent.ClosingFuture$Combiner2:
    com.google.common.util.concurrent.ClosingFuture future1 -> d
    com.google.common.util.concurrent.ClosingFuture future2 -> e
    1:1:void <init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture):0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture$1):0 -> <init>
    com.google.common.util.concurrent.ClosingFuture access$1800(com.google.common.util.concurrent.ClosingFuture$Combiner2) -> c
    com.google.common.util.concurrent.ClosingFuture access$1900(com.google.common.util.concurrent.ClosingFuture$Combiner2) -> d
com.google.common.util.concurrent.ClosingFuture$Combiner2$1 -> com.google.common.util.concurrent.i2:
    com.google.common.util.concurrent.ClosingFuture$Combiner2$ClosingFunction2 val$function -> a
    com.google.common.util.concurrent.ClosingFuture$Combiner2 this$0 -> b
com.google.common.util.concurrent.ClosingFuture$Combiner2$2 -> com.google.common.util.concurrent.j2:
    com.google.common.util.concurrent.ClosingFuture$Combiner2$AsyncClosingFunction2 val$function -> a
    com.google.common.util.concurrent.ClosingFuture$Combiner2 this$0 -> b
com.google.common.util.concurrent.ClosingFuture$Combiner3 -> com.google.common.util.concurrent.ClosingFuture$Combiner3:
    com.google.common.util.concurrent.ClosingFuture future1 -> d
    com.google.common.util.concurrent.ClosingFuture future3 -> f
    com.google.common.util.concurrent.ClosingFuture future2 -> e
    1:1:void <init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture):0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture$1):0 -> <init>
    com.google.common.util.concurrent.ClosingFuture access$2000(com.google.common.util.concurrent.ClosingFuture$Combiner3) -> c
    com.google.common.util.concurrent.ClosingFuture access$2100(com.google.common.util.concurrent.ClosingFuture$Combiner3) -> d
    com.google.common.util.concurrent.ClosingFuture access$2200(com.google.common.util.concurrent.ClosingFuture$Combiner3) -> e
com.google.common.util.concurrent.ClosingFuture$Combiner3$1 -> com.google.common.util.concurrent.k2:
    com.google.common.util.concurrent.ClosingFuture$Combiner3$ClosingFunction3 val$function -> a
    com.google.common.util.concurrent.ClosingFuture$Combiner3 this$0 -> b
com.google.common.util.concurrent.ClosingFuture$Combiner3$2 -> com.google.common.util.concurrent.l2:
    com.google.common.util.concurrent.ClosingFuture$Combiner3$AsyncClosingFunction3 val$function -> a
    com.google.common.util.concurrent.ClosingFuture$Combiner3 this$0 -> b
com.google.common.util.concurrent.ClosingFuture$Combiner4 -> com.google.common.util.concurrent.ClosingFuture$Combiner4:
    com.google.common.util.concurrent.ClosingFuture future1 -> d
    com.google.common.util.concurrent.ClosingFuture future3 -> f
    com.google.common.util.concurrent.ClosingFuture future2 -> e
    com.google.common.util.concurrent.ClosingFuture future4 -> g
    1:1:void <init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture):0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture$1):0 -> <init>
    com.google.common.util.concurrent.ClosingFuture access$2300(com.google.common.util.concurrent.ClosingFuture$Combiner4) -> c
    com.google.common.util.concurrent.ClosingFuture access$2400(com.google.common.util.concurrent.ClosingFuture$Combiner4) -> d
    com.google.common.util.concurrent.ClosingFuture access$2500(com.google.common.util.concurrent.ClosingFuture$Combiner4) -> e
    com.google.common.util.concurrent.ClosingFuture access$2600(com.google.common.util.concurrent.ClosingFuture$Combiner4) -> f
com.google.common.util.concurrent.ClosingFuture$Combiner4$1 -> com.google.common.util.concurrent.m2:
    com.google.common.util.concurrent.ClosingFuture$Combiner4$ClosingFunction4 val$function -> a
    com.google.common.util.concurrent.ClosingFuture$Combiner4 this$0 -> b
com.google.common.util.concurrent.ClosingFuture$Combiner4$2 -> com.google.common.util.concurrent.n2:
    com.google.common.util.concurrent.ClosingFuture$Combiner4$AsyncClosingFunction4 val$function -> a
    com.google.common.util.concurrent.ClosingFuture$Combiner4 this$0 -> b
com.google.common.util.concurrent.ClosingFuture$Combiner5 -> com.google.common.util.concurrent.ClosingFuture$Combiner5:
    com.google.common.util.concurrent.ClosingFuture future1 -> d
    com.google.common.util.concurrent.ClosingFuture future3 -> f
    com.google.common.util.concurrent.ClosingFuture future2 -> e
    com.google.common.util.concurrent.ClosingFuture future5 -> h
    com.google.common.util.concurrent.ClosingFuture future4 -> g
    1:1:void <init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture):0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture$1):0 -> <init>
    com.google.common.util.concurrent.ClosingFuture access$2700(com.google.common.util.concurrent.ClosingFuture$Combiner5) -> c
    com.google.common.util.concurrent.ClosingFuture access$2800(com.google.common.util.concurrent.ClosingFuture$Combiner5) -> d
    com.google.common.util.concurrent.ClosingFuture access$2900(com.google.common.util.concurrent.ClosingFuture$Combiner5) -> e
    com.google.common.util.concurrent.ClosingFuture access$3000(com.google.common.util.concurrent.ClosingFuture$Combiner5) -> f
    com.google.common.util.concurrent.ClosingFuture access$3100(com.google.common.util.concurrent.ClosingFuture$Combiner5) -> g
com.google.common.util.concurrent.ClosingFuture$Combiner5$1 -> com.google.common.util.concurrent.o2:
    com.google.common.util.concurrent.ClosingFuture$Combiner5$ClosingFunction5 val$function -> a
    com.google.common.util.concurrent.ClosingFuture$Combiner5 this$0 -> b
com.google.common.util.concurrent.ClosingFuture$Combiner5$2 -> com.google.common.util.concurrent.p2:
    com.google.common.util.concurrent.ClosingFuture$Combiner5 this$0 -> b
    com.google.common.util.concurrent.ClosingFuture$Combiner5$AsyncClosingFunction5 val$function -> a
com.google.common.util.concurrent.ClosingFuture$DeferredCloser -> com.google.common.util.concurrent.ClosingFuture$DeferredCloser:
    com.google.common.util.concurrent.ClosingFuture$CloseableList list -> a
com.google.common.util.concurrent.ClosingFuture$Peeker -> com.google.common.util.concurrent.ClosingFuture$Peeker:
    com.google.common.collect.ImmutableList futures -> a
    boolean beingCalled -> b
    1:1:void <init>(com.google.common.collect.ImmutableList):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.ImmutableList,com.google.common.util.concurrent.ClosingFuture$1):0 -> <init>
    1:1:java.lang.Object call(com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable,com.google.common.util.concurrent.ClosingFuture$CloseableList):0:0 -> a
    1:1:java.lang.Object access$1500(com.google.common.util.concurrent.ClosingFuture$Peeker,com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable,com.google.common.util.concurrent.ClosingFuture$CloseableList):0 -> a
    1:1:com.google.common.util.concurrent.FluentFuture callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable,com.google.common.util.concurrent.ClosingFuture$CloseableList):0:0 -> b
    1:1:com.google.common.util.concurrent.FluentFuture access$1700(com.google.common.util.concurrent.ClosingFuture$Peeker,com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable,com.google.common.util.concurrent.ClosingFuture$CloseableList):0 -> b
com.google.common.util.concurrent.ClosingFuture$State -> com.google.common.util.concurrent.q2:
    com.google.common.util.concurrent.ClosingFuture$State[] $VALUES -> g
    com.google.common.util.concurrent.ClosingFuture$State SUBSUMED -> b
    com.google.common.util.concurrent.ClosingFuture$State WILL_CLOSE -> c
    com.google.common.util.concurrent.ClosingFuture$State OPEN -> a
    com.google.common.util.concurrent.ClosingFuture$State WILL_CREATE_VALUE_AND_CLOSER -> f
    com.google.common.util.concurrent.ClosingFuture$State CLOSING -> d
    com.google.common.util.concurrent.ClosingFuture$State CLOSED -> e
com.google.common.util.concurrent.ClosingFuture$ValueAndCloser -> com.google.common.util.concurrent.ClosingFuture$ValueAndCloser:
    com.google.common.util.concurrent.ClosingFuture closingFuture -> a
com.google.common.util.concurrent.CollectionFuture$ListFuture -> com.google.common.util.concurrent.r2:
    java.util.List com.google.common.util.concurrent.CollectionFuture.values -> p
    1:1:void com.google.common.util.concurrent.CollectionFuture.<init>(com.google.common.collect.ImmutableCollection,boolean):0:0 -> <init>
    1:1:void <init>(com.google.common.collect.ImmutableCollection,boolean):0 -> <init>
    2:2:void <init>(com.google.common.collect.ImmutableCollection,boolean):0:0 -> <init>
    1:1:void com.google.common.util.concurrent.CollectionFuture.collectOneValue(int,java.lang.Object):0:0 -> E
    1:1:void com.google.common.util.concurrent.CollectionFuture.collectOneValue(int,java.lang.Object):0 -> E
    1:1:void com.google.common.util.concurrent.CollectionFuture.handleAllCompleted():0:0 -> G
    1:1:void com.google.common.util.concurrent.CollectionFuture.handleAllCompleted():0 -> G
    2:2:java.util.List combine(java.util.List):0:0 -> G
    2:2:java.lang.Object combine(java.util.List):0 -> G
    2:2:void com.google.common.util.concurrent.CollectionFuture.handleAllCompleted():0 -> G
    2:2:void com.google.common.util.concurrent.CollectionFuture.handleAllCompleted():0 -> G
    3:3:void com.google.common.util.concurrent.CollectionFuture.handleAllCompleted():0:0 -> G
    3:3:void com.google.common.util.concurrent.CollectionFuture.handleAllCompleted():0 -> G
    1:1:void com.google.common.util.concurrent.CollectionFuture.releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason):0:0 -> J
    1:1:void com.google.common.util.concurrent.CollectionFuture.releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason):0 -> J
com.google.common.util.concurrent.CollectionFuture$Present -> com.google.common.util.concurrent.s2:
    java.lang.Object value -> a
com.google.common.util.concurrent.CombinedFuture -> com.google.common.util.concurrent.w2:
    com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask task -> p
    void collectOneValue(int,java.lang.Object) -> E
    void handleAllCompleted() -> G
    void releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason) -> J
    com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask access$002(com.google.common.util.concurrent.CombinedFuture,com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask) -> K
com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask -> com.google.common.util.concurrent.t2:
    com.google.common.util.concurrent.AsyncCallable callable -> f
    com.google.common.util.concurrent.CombinedFuture this$0 -> g
    1:1:com.google.common.util.concurrent.ListenableFuture runInterruptibly():0:0 -> d
    1:1:java.lang.Object runInterruptibly():0 -> d
    java.lang.String toPendingString() -> e
    1:1:void setValue(com.google.common.util.concurrent.ListenableFuture):0:0 -> g
    1:1:void setValue(java.lang.Object):0 -> g
com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask -> com.google.common.util.concurrent.u2:
    com.google.common.util.concurrent.CombinedFuture this$0 -> g
    java.util.concurrent.Callable callable -> f
    java.lang.Object runInterruptibly() -> d
    java.lang.String toPendingString() -> e
    void setValue(java.lang.Object) -> g
com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask -> com.google.common.util.concurrent.v2:
    com.google.common.util.concurrent.CombinedFuture this$0 -> e
    java.util.concurrent.Executor listenerExecutor -> d
    void afterRanInterruptibly(java.lang.Object,java.lang.Throwable) -> a
    boolean isDone() -> c
    void execute() -> f
    void setValue(java.lang.Object) -> g
com.google.common.util.concurrent.CycleDetectingLockFactory -> com.google.common.util.concurrent.CycleDetectingLockFactory:
    com.google.common.util.concurrent.CycleDetectingLockFactory$Policy policy -> a
    java.lang.ThreadLocal acquiredLocks -> d
    java.util.concurrent.ConcurrentMap lockGraphNodesPerType -> b
    java.util.logging.Logger logger -> c
    1:1:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy):0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,com.google.common.util.concurrent.CycleDetectingLockFactory$1):0 -> <init>
    java.util.logging.Logger access$100() -> a
    1:1:void aboutToAcquire(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock):0:0 -> b
    1:1:void access$600(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock):0 -> b
    1:1:void lockStateChanged(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock):0:0 -> c
    1:1:void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock):0 -> c
    1:1:java.util.Map getOrCreateNodes(java.lang.Class):0:0 -> newInstanceWithExplicitOrdering
    1:1:com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering newInstanceWithExplicitOrdering(java.lang.Class,com.google.common.util.concurrent.CycleDetectingLockFactory$Policy):0 -> newInstanceWithExplicitOrdering
    2:2:java.util.Map createNodes(java.lang.Class):0:0 -> newInstanceWithExplicitOrdering
    2:2:java.util.Map getOrCreateNodes(java.lang.Class):0 -> newInstanceWithExplicitOrdering
    2:2:com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering newInstanceWithExplicitOrdering(java.lang.Class,com.google.common.util.concurrent.CycleDetectingLockFactory$Policy):0 -> newInstanceWithExplicitOrdering
    3:3:java.lang.String getLockName(java.lang.Enum):0:0 -> newInstanceWithExplicitOrdering
    3:3:java.util.Map createNodes(java.lang.Class):0 -> newInstanceWithExplicitOrdering
    3:3:java.util.Map getOrCreateNodes(java.lang.Class):0 -> newInstanceWithExplicitOrdering
    3:3:com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering newInstanceWithExplicitOrdering(java.lang.Class,com.google.common.util.concurrent.CycleDetectingLockFactory$Policy):0 -> newInstanceWithExplicitOrdering
    4:4:java.util.Map createNodes(java.lang.Class):0:0 -> newInstanceWithExplicitOrdering
    4:4:java.util.Map getOrCreateNodes(java.lang.Class):0 -> newInstanceWithExplicitOrdering
    4:4:com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering newInstanceWithExplicitOrdering(java.lang.Class,com.google.common.util.concurrent.CycleDetectingLockFactory$Policy):0 -> newInstanceWithExplicitOrdering
    5:5:java.util.Map getOrCreateNodes(java.lang.Class):0:0 -> newInstanceWithExplicitOrdering
    5:5:com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering newInstanceWithExplicitOrdering(java.lang.Class,com.google.common.util.concurrent.CycleDetectingLockFactory$Policy):0 -> newInstanceWithExplicitOrdering
    6:6:com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering newInstanceWithExplicitOrdering(java.lang.Class,com.google.common.util.concurrent.CycleDetectingLockFactory$Policy):0:0 -> newInstanceWithExplicitOrdering
com.google.common.util.concurrent.CycleDetectingLockFactory$1 -> com.google.common.util.concurrent.x2:
    1:1:java.util.ArrayList initialValue():0:0 -> initialValue
    1:1:java.lang.Object initialValue():0 -> initialValue
com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock -> com.google.common.util.concurrent.y2:
com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock -> com.google.common.util.concurrent.z2:
    com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode lockGraphNode -> a
    com.google.common.util.concurrent.CycleDetectingLockFactory this$0 -> b
    1:1:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,boolean):0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,boolean,com.google.common.util.concurrent.CycleDetectingLockFactory$1):0 -> <init>
com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock -> com.google.common.util.concurrent.a3:
    com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock -> a
    com.google.common.util.concurrent.CycleDetectingLockFactory this$0 -> b
com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock -> com.google.common.util.concurrent.b3:
    com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock writeLock -> b
    com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock readLock -> a
    com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode lockGraphNode -> c
    1:1:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,boolean):0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,boolean,com.google.common.util.concurrent.CycleDetectingLockFactory$1):0 -> <init>
    1:1:java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock():0:0 -> readLock
    1:1:java.util.concurrent.locks.Lock readLock():0 -> readLock
    1:1:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock():0:0 -> writeLock
    1:1:java.util.concurrent.locks.Lock writeLock():0 -> writeLock
com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock -> com.google.common.util.concurrent.c3:
    com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock -> a
    com.google.common.util.concurrent.CycleDetectingLockFactory this$0 -> b
com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace -> com.google.common.util.concurrent.d3:
    com.google.common.collect.ImmutableSet EXCLUDED_CLASS_NAMES -> b
    java.lang.StackTraceElement[] EMPTY_STACK_TRACE -> a
    1:1:java.lang.String com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode.getLockName():0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode):0 -> <init>
    2:2:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode):0:0 -> <init>
com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode -> com.google.common.util.concurrent.e3:
    java.util.Map allowedPriorLocks -> a
    java.util.Map disallowedPriorLocks -> b
    java.lang.String lockName -> c
    1:1:java.lang.String getLockName():0:0 -> a
    1:1:void checkAcquiredLock(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode):0 -> a
    1:1:void checkAcquiredLocks(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,java.util.List):0 -> a
    2:2:void checkAcquiredLock(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode):0:0 -> a
    2:2:void checkAcquiredLocks(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,java.util.List):0 -> a
    com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace findPathTo(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,java.util.Set) -> b
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies -> com.google.common.util.concurrent.CycleDetectingLockFactory$Policies:
    com.google.common.util.concurrent.CycleDetectingLockFactory$Policies[] $VALUES -> a
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:void <init>(java.lang.String,int,com.google.common.util.concurrent.CycleDetectingLockFactory$1):0 -> <init>
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$1 -> com.google.common.util.concurrent.f3:
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$2 -> com.google.common.util.concurrent.g3:
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$3 -> com.google.common.util.concurrent.h3:
com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException -> com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException:
    com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace conflictingStackTrace -> c
    1:1:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace):0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace,com.google.common.util.concurrent.CycleDetectingLockFactory$1):0 -> <init>
com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering -> com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering:
    java.util.Map lockGraphNodes -> e
com.google.common.util.concurrent.DirectExecutor -> com.google.common.util.concurrent.i3:
    com.google.common.util.concurrent.DirectExecutor INSTANCE -> a
    com.google.common.util.concurrent.DirectExecutor[] $VALUES -> b
com.google.common.util.concurrent.ExecutionList -> com.google.common.util.concurrent.ExecutionList:
    com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair runnables -> a
    boolean executed -> b
    java.util.logging.Logger log -> c
    void executeListener(java.lang.Runnable,java.util.concurrent.Executor) -> a
com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair -> com.google.common.util.concurrent.j3:
    com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair next -> c
    java.util.concurrent.Executor executor -> b
    java.lang.Runnable runnable -> a
com.google.common.util.concurrent.ExecutionSequencer -> com.google.common.util.concurrent.ExecutionSequencer:
    com.google.common.util.concurrent.ExecutionSequencer$ThreadConfinedTaskQueue latestTaskQueue -> b
    java.util.concurrent.atomic.AtomicReference ref -> a
    com.google.common.util.concurrent.ExecutionSequencer$ThreadConfinedTaskQueue access$400(com.google.common.util.concurrent.ExecutionSequencer) -> a
    com.google.common.util.concurrent.ExecutionSequencer$ThreadConfinedTaskQueue access$402(com.google.common.util.concurrent.ExecutionSequencer,com.google.common.util.concurrent.ExecutionSequencer$ThreadConfinedTaskQueue) -> b
    1:1:com.google.common.util.concurrent.TrustedListenableFutureTask com.google.common.util.concurrent.TrustedListenableFutureTask.create(com.google.common.util.concurrent.AsyncCallable):0:0 -> submitAsync
    1:1:com.google.common.util.concurrent.ListenableFuture submitAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor):0 -> submitAsync
    2:2:com.google.common.util.concurrent.ListenableFuture submitAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor):0:0 -> submitAsync
com.google.common.util.concurrent.ExecutionSequencer$1 -> com.google.common.util.concurrent.k3:
    java.util.concurrent.Callable val$callable -> a
com.google.common.util.concurrent.ExecutionSequencer$2 -> com.google.common.util.concurrent.l3:
    com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor val$taskExecutor -> a
    com.google.common.util.concurrent.AsyncCallable val$callable -> b
    1:1:boolean com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor.access$200(com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor):0:0 -> call
    1:1:com.google.common.util.concurrent.ListenableFuture call():0 -> call
    2:2:boolean com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor.trySetStarted():0:0 -> call
    2:2:boolean com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor.access$200(com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor):0 -> call
    2:2:com.google.common.util.concurrent.ListenableFuture call():0 -> call
    3:3:com.google.common.util.concurrent.ListenableFuture call():0:0 -> call
com.google.common.util.concurrent.ExecutionSequencer$3 -> com.google.common.util.concurrent.m3:
    com.google.common.util.concurrent.ListenableFuture val$outputFuture -> d
    com.google.common.util.concurrent.ListenableFuture val$oldFuture -> c
    com.google.common.util.concurrent.TrustedListenableFutureTask val$taskFuture -> a
    com.google.common.util.concurrent.SettableFuture val$newFuture -> b
    com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor val$taskExecutor -> e
    1:1:boolean com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor.access$300(com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor):0:0 -> run
    1:1:void run():0 -> run
    2:2:boolean com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor.trySetCancelled():0:0 -> run
    2:2:boolean com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor.access$300(com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor):0 -> run
    2:2:void run():0 -> run
    3:3:void run():0:0 -> run
com.google.common.util.concurrent.ExecutionSequencer$RunningState -> com.google.common.util.concurrent.n3:
    com.google.common.util.concurrent.ExecutionSequencer$RunningState STARTED -> c
    com.google.common.util.concurrent.ExecutionSequencer$RunningState CANCELLED -> b
    com.google.common.util.concurrent.ExecutionSequencer$RunningState NOT_RUN -> a
    com.google.common.util.concurrent.ExecutionSequencer$RunningState[] $VALUES -> d
com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor -> com.google.common.util.concurrent.o3:
    java.lang.Runnable task -> c
    java.lang.Thread submitting -> d
    java.util.concurrent.Executor delegate -> b
    com.google.common.util.concurrent.ExecutionSequencer sequencer -> a
    int $r8$clinit -> e
    1:1:void <init>(java.util.concurrent.Executor,com.google.common.util.concurrent.ExecutionSequencer):0:0 -> <init>
    1:1:void <init>(java.util.concurrent.Executor,com.google.common.util.concurrent.ExecutionSequencer,com.google.common.util.concurrent.ExecutionSequencer$1):0 -> <init>
com.google.common.util.concurrent.ExecutionSequencer$ThreadConfinedTaskQueue -> com.google.common.util.concurrent.p3:
    java.lang.Runnable nextTask -> b
    java.lang.Thread thread -> a
    java.util.concurrent.Executor nextExecutor -> c
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.ExecutionSequencer$1):0 -> <init>
com.google.common.util.concurrent.FluentFuture -> com.google.common.util.concurrent.FluentFuture:
    1:1:void com.google.common.util.concurrent.GwtFluentFutureCatchingSpecialization.<init>():0:0 -> <init>
    1:1:void <init>():0 -> <init>
com.google.common.util.concurrent.FluentFuture$TrustedFuture -> com.google.common.util.concurrent.q3:
com.google.common.util.concurrent.ForwardingFluentFuture -> com.google.common.util.concurrent.r3:
    com.google.common.util.concurrent.ListenableFuture delegate -> h
com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture -> com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture:
    java.util.concurrent.Future delegate -> a
com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture -> com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture:
    com.google.common.util.concurrent.ListenableFuture delegate -> a
com.google.common.util.concurrent.Futures -> com.google.common.util.concurrent.Futures:
    1:1:void com.google.common.util.concurrent.GwtFuturesCatchingSpecialization.<init>():0:0 -> <init>
    1:1:void <init>():0 -> <init>
    1:1:com.google.common.util.concurrent.ListenableFuture com.google.common.util.concurrent.AbstractCatchingFuture.create(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor):0:0 -> catching
    1:1:com.google.common.util.concurrent.ListenableFuture catching(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor):0 -> catching
    1:1:com.google.common.util.concurrent.ListenableFuture com.google.common.util.concurrent.AbstractCatchingFuture.create(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor):0:0 -> catchingAsync
    1:1:com.google.common.util.concurrent.ListenableFuture catchingAsync(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor):0 -> catchingAsync
    1:1:void wrapAndThrowUnchecked(java.lang.Throwable):0:0 -> getUnchecked
    1:1:java.lang.Object getUnchecked(java.util.concurrent.Future):0 -> getUnchecked
    1:1:com.google.common.util.concurrent.TrustedListenableFutureTask com.google.common.util.concurrent.TrustedListenableFutureTask.create(com.google.common.util.concurrent.AsyncCallable):0:0 -> scheduleAsync
    1:1:com.google.common.util.concurrent.ListenableFuture scheduleAsync(com.google.common.util.concurrent.AsyncCallable,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService):0 -> scheduleAsync
    2:2:com.google.common.util.concurrent.ListenableFuture scheduleAsync(com.google.common.util.concurrent.AsyncCallable,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService):0:0 -> scheduleAsync
    1:1:com.google.common.util.concurrent.TrustedListenableFutureTask com.google.common.util.concurrent.TrustedListenableFutureTask.create(java.util.concurrent.Callable):0:0 -> submit
    1:1:com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable,java.util.concurrent.Executor):0 -> submit
    2:2:com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable,java.util.concurrent.Executor):0:0 -> submit
    1:1:com.google.common.util.concurrent.TrustedListenableFutureTask com.google.common.util.concurrent.TrustedListenableFutureTask.create(com.google.common.util.concurrent.AsyncCallable):0:0 -> submitAsync
    1:1:com.google.common.util.concurrent.ListenableFuture submitAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor):0 -> submitAsync
    2:2:com.google.common.util.concurrent.ListenableFuture submitAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor):0:0 -> submitAsync
    1:1:com.google.common.util.concurrent.ListenableFuture com.google.common.util.concurrent.AbstractTransformFuture.create(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor):0:0 -> transform
    1:1:com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor):0 -> transform
    1:1:com.google.common.util.concurrent.ListenableFuture com.google.common.util.concurrent.AbstractTransformFuture.create(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor):0:0 -> transformAsync
    1:1:com.google.common.util.concurrent.ListenableFuture transformAsync(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor):0 -> transformAsync
com.google.common.util.concurrent.Futures$1 -> com.google.common.util.concurrent.s3:
    java.util.concurrent.Future val$scheduled -> a
com.google.common.util.concurrent.Futures$2 -> com.google.common.util.concurrent.t3:
    java.util.concurrent.Future val$input -> a
    com.google.common.base.Function val$function -> b
    1:1:java.lang.Object applyTransformation(java.lang.Object):0:0 -> get
    1:1:java.lang.Object get():0 -> get
    2:2:java.lang.Object applyTransformation(java.lang.Object):0:0 -> get
    2:2:java.lang.Object get(long,java.util.concurrent.TimeUnit):0 -> get
com.google.common.util.concurrent.Futures$3 -> com.google.common.util.concurrent.u3:
    com.google.common.util.concurrent.Futures$InCompletionOrderState val$state -> a
    com.google.common.collect.ImmutableList val$delegates -> b
    int val$localI -> c
com.google.common.util.concurrent.Futures$CallbackListener -> com.google.common.util.concurrent.v3:
    java.util.concurrent.Future future -> a
    com.google.common.util.concurrent.FutureCallback callback -> b
com.google.common.util.concurrent.Futures$FutureCombiner -> com.google.common.util.concurrent.Futures$FutureCombiner:
    com.google.common.collect.ImmutableList futures -> b
    boolean allMustSucceed -> a
    1:1:void <init>(boolean,com.google.common.collect.ImmutableList):0:0 -> <init>
    1:1:void <init>(boolean,com.google.common.collect.ImmutableList,com.google.common.util.concurrent.Futures$1):0 -> <init>
com.google.common.util.concurrent.Futures$FutureCombiner$1 -> com.google.common.util.concurrent.w3:
    java.lang.Runnable val$combiner -> a
    1:1:java.lang.Void call():0:0 -> call
    1:1:java.lang.Object call():0 -> call
com.google.common.util.concurrent.Futures$InCompletionOrderFuture -> com.google.common.util.concurrent.x3:
    com.google.common.util.concurrent.Futures$InCompletionOrderState state -> h
    1:1:void <init>(com.google.common.util.concurrent.Futures$InCompletionOrderState):0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.Futures$InCompletionOrderState,com.google.common.util.concurrent.Futures$1):0 -> <init>
com.google.common.util.concurrent.Futures$InCompletionOrderState -> com.google.common.util.concurrent.y3:
    java.util.concurrent.atomic.AtomicInteger incompleteOutputCount -> c
    com.google.common.util.concurrent.ListenableFuture[] inputFutures -> d
    int delegateIndex -> e
    boolean wasCancelled -> a
    boolean shouldInterrupt -> b
    1:1:void <init>(com.google.common.util.concurrent.ListenableFuture[]):0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.ListenableFuture[],com.google.common.util.concurrent.Futures$1):0 -> <init>
    1:1:void recordInputCompletion(com.google.common.collect.ImmutableList,int):0:0 -> a
    1:1:void access$300(com.google.common.util.concurrent.Futures$InCompletionOrderState,com.google.common.collect.ImmutableList,int):0 -> a
    1:1:void recordOutputCancellation(boolean):0:0 -> b
    1:1:void access$400(com.google.common.util.concurrent.Futures$InCompletionOrderState,boolean):0 -> b
    com.google.common.util.concurrent.ListenableFuture[] access$500(com.google.common.util.concurrent.Futures$InCompletionOrderState) -> c
    java.util.concurrent.atomic.AtomicInteger access$600(com.google.common.util.concurrent.Futures$InCompletionOrderState) -> d
    void recordCompletion() -> e
com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture -> com.google.common.util.concurrent.z3:
    com.google.common.util.concurrent.ListenableFuture delegate -> h
com.google.common.util.concurrent.FuturesGetChecked -> com.google.common.util.concurrent.e4:
    com.google.common.collect.Ordering WITH_STRING_PARAM_FIRST -> a
    int $r8$clinit -> b
    1:1:boolean isCheckedException(java.lang.Class):0:0 -> a
    1:1:void checkExceptionClassValidity(java.lang.Class):0 -> a
    2:2:void checkExceptionClassValidity(java.lang.Class):0:0 -> a
    3:3:boolean hasConstructorUsableByGetChecked(java.lang.Class):0:0 -> a
    3:3:void checkExceptionClassValidity(java.lang.Class):0 -> a
    4:4:void checkExceptionClassValidity(java.lang.Class):0:0 -> a
    1:1:com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator bestGetCheckedTypeValidator():0:0 -> b
    1:1:java.lang.Object getChecked(java.util.concurrent.Future,java.lang.Class):0 -> b
    2:2:java.lang.Object getChecked(com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator,java.util.concurrent.Future,java.lang.Class):0:0 -> b
    2:2:java.lang.Object getChecked(java.util.concurrent.Future,java.lang.Class):0 -> b
    1:1:com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator bestGetCheckedTypeValidator():0:0 -> c
    1:1:java.lang.Object getChecked(java.util.concurrent.Future,java.lang.Class,long,java.util.concurrent.TimeUnit):0 -> c
    2:2:java.lang.Object getChecked(java.util.concurrent.Future,java.lang.Class,long,java.util.concurrent.TimeUnit):0:0 -> c
    1:1:java.util.List preferringStrings(java.util.List):0:0 -> d
    1:1:java.lang.Exception newWithCause(java.lang.Class,java.lang.Throwable):0 -> d
    2:2:java.lang.Exception newWithCause(java.lang.Class,java.lang.Throwable):0:0 -> d
    3:3:java.lang.Object newFromConstructor(java.lang.reflect.Constructor,java.lang.Throwable):0:0 -> d
    3:3:java.lang.Exception newWithCause(java.lang.Class,java.lang.Throwable):0 -> d
    4:4:java.lang.Exception newWithCause(java.lang.Class,java.lang.Throwable):0:0 -> d
    void wrapAndThrowExceptionOrError(java.lang.Throwable,java.lang.Class) -> e
com.google.common.util.concurrent.FuturesGetChecked$1 -> com.google.common.util.concurrent.a4:
    1:1:java.lang.Boolean apply(java.lang.reflect.Constructor):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator -> com.google.common.util.concurrent.b4:
com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder -> com.google.common.util.concurrent.d4:
    com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator BEST_VALIDATOR -> b
    java.lang.String CLASS_VALUE_VALIDATOR_NAME -> a
    1:1:com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator getBestValidator():0:0 -> <clinit>
    1:1:void <clinit>():0 -> <clinit>
    2:2:com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator com.google.common.util.concurrent.FuturesGetChecked.weakSetValidator():0:0 -> <clinit>
    2:2:com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator getBestValidator():0 -> <clinit>
    2:2:void <clinit>():0 -> <clinit>
    3:3:void <clinit>():0:0 -> <clinit>
com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator -> com.google.common.util.concurrent.c4:
    com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator INSTANCE -> a
    com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator[] $VALUES -> c
    java.util.Set validClasses -> b
com.google.common.util.concurrent.ImmediateFuture -> com.google.common.util.concurrent.h4:
    com.google.common.util.concurrent.ListenableFuture NULL -> b
    java.lang.Object value -> a
    java.util.logging.Logger log -> c
    1:1:java.lang.Object get():0:0 -> get
    1:1:java.lang.Object get(long,java.util.concurrent.TimeUnit):0 -> get
com.google.common.util.concurrent.ImmediateFuture$ImmediateCancelledFuture -> com.google.common.util.concurrent.f4:
com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedFuture -> com.google.common.util.concurrent.g4:
com.google.common.util.concurrent.Internal -> com.google.common.util.concurrent.i4:
    long toNanosSaturated(java.time.Duration) -> a
com.google.common.util.concurrent.InterruptibleTask -> com.google.common.util.concurrent.l4:
    java.lang.Runnable PARKED -> c
    java.lang.Runnable INTERRUPTING -> b
    java.lang.Runnable DONE -> a
    void afterRanInterruptibly(java.lang.Object,java.lang.Throwable) -> a
    void interruptTask() -> b
    boolean isDone() -> c
    java.lang.Object runInterruptibly() -> d
    java.lang.String toPendingString() -> e
com.google.common.util.concurrent.InterruptibleTask$1 -> com.google.common.util.concurrent.j4:
com.google.common.util.concurrent.InterruptibleTask$DoNothingRunnable -> com.google.common.util.concurrent.k4:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.InterruptibleTask$1):0 -> <init>
com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter -> com.google.common.util.concurrent.n4:
    java.util.concurrent.ThreadFactory threadFactory -> e
    com.google.common.util.concurrent.ExecutionList executionList -> b
    java.util.concurrent.Executor adapterExecutor -> a
    java.util.concurrent.atomic.AtomicBoolean hasListeners -> c
    java.util.concurrent.Executor defaultAdapterExecutor -> f
    java.util.concurrent.Future delegate -> d
    java.util.concurrent.Future access$000(com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter) -> a
    com.google.common.util.concurrent.ExecutionList access$100(com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter) -> b
    1:1:java.util.concurrent.Future delegate():0:0 -> delegate
    1:1:java.lang.Object delegate():0 -> delegate
com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter$1 -> com.google.common.util.concurrent.m4:
    com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter this$0 -> a
com.google.common.util.concurrent.ListenableFutureTask -> com.google.common.util.concurrent.ListenableFutureTask:
    com.google.common.util.concurrent.ExecutionList executionList -> a
com.google.common.util.concurrent.ListenerCallQueue -> com.google.common.util.concurrent.q4:
    java.util.List listeners -> a
    java.util.logging.Logger logger -> b
    java.util.logging.Logger access$000() -> a
    1:1:void com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue.dispatch():0:0 -> dispatch
    1:1:void dispatch():0 -> dispatch
    1:1:void enqueueHelper(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.Object):0:0 -> enqueue
    1:1:void enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event):0 -> enqueue
    2:2:void com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue.add(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.Object):0:0 -> enqueue
    2:2:void enqueueHelper(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.Object):0 -> enqueue
    2:2:void enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event):0 -> enqueue
    3:3:void enqueueHelper(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.Object):0:0 -> enqueue
    3:3:void enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event):0 -> enqueue
com.google.common.util.concurrent.ListenerCallQueue$Event -> com.google.common.util.concurrent.o4:
com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue -> com.google.common.util.concurrent.p4:
    java.util.Queue waitQueue -> c
    java.util.concurrent.Executor executor -> b
    java.util.Queue labelQueue -> d
    boolean isThreadScheduled -> e
    java.lang.Object listener -> a
com.google.common.util.concurrent.Monitor -> com.google.common.util.concurrent.Monitor:
    com.google.common.util.concurrent.Monitor$Guard activeGuards -> c
    java.util.concurrent.locks.ReentrantLock lock -> b
    boolean fair -> a
    java.util.concurrent.locks.ReentrantLock access$000(com.google.common.util.concurrent.Monitor) -> a
    void await(com.google.common.util.concurrent.Monitor$Guard,boolean) -> b
    boolean awaitNanos(com.google.common.util.concurrent.Monitor$Guard,long,boolean) -> c
    void awaitUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,boolean) -> d
    void beginWaitingFor(com.google.common.util.concurrent.Monitor$Guard) -> e
    1:1:long toSafeNanos(long,java.util.concurrent.TimeUnit):0:0 -> enter
    1:1:boolean enter(long,java.util.concurrent.TimeUnit):0 -> enter
    2:2:boolean enter(long,java.util.concurrent.TimeUnit):0:0 -> enter
    1:1:long toSafeNanos(long,java.util.concurrent.TimeUnit):0:0 -> enterWhen
    1:1:boolean enterWhen(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit):0 -> enterWhen
    2:2:boolean enterWhen(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit):0:0 -> enterWhen
    1:1:long toSafeNanos(long,java.util.concurrent.TimeUnit):0:0 -> enterWhenUninterruptibly
    1:1:boolean enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit):0 -> enterWhenUninterruptibly
    2:2:boolean enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit):0:0 -> enterWhenUninterruptibly
    void endWaitingFor(com.google.common.util.concurrent.Monitor$Guard) -> f
    long initNanoTime(long) -> g
    long remainingNanos(long,long) -> h
    1:1:boolean isSatisfied(com.google.common.util.concurrent.Monitor$Guard):0:0 -> i
    1:1:void signalNextWaiter():0 -> i
    2:2:void signalNextWaiter():0:0 -> i
    3:3:void signalAllWaiters():0:0 -> i
    3:3:boolean isSatisfied(com.google.common.util.concurrent.Monitor$Guard):0 -> i
    3:3:void signalNextWaiter():0 -> i
    4:4:boolean isSatisfied(com.google.common.util.concurrent.Monitor$Guard):0:0 -> i
    4:4:void signalNextWaiter():0 -> i
    1:1:long toSafeNanos(long,java.util.concurrent.TimeUnit):0:0 -> waitFor
    1:1:boolean waitFor(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit):0 -> waitFor
    2:2:boolean waitFor(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit):0:0 -> waitFor
    1:1:long toSafeNanos(long,java.util.concurrent.TimeUnit):0:0 -> waitForUninterruptibly
    1:1:boolean waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit):0 -> waitForUninterruptibly
    2:2:boolean waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit):0:0 -> waitForUninterruptibly
com.google.common.util.concurrent.Monitor$1 -> com.google.common.util.concurrent.r4:
    java.util.function.BooleanSupplier val$isSatisfied -> e
com.google.common.util.concurrent.Monitor$Guard -> com.google.common.util.concurrent.Monitor$Guard:
    java.util.concurrent.locks.Condition condition -> b
    com.google.common.util.concurrent.Monitor$Guard next -> d
    int waiterCount -> c
    com.google.common.util.concurrent.Monitor monitor -> a
com.google.common.util.concurrent.MoreExecutors -> com.google.common.util.concurrent.MoreExecutors:
    1:1:void useDaemonThreadFactory(java.util.concurrent.ThreadPoolExecutor):0:0 -> a
    1:1:void access$000(java.util.concurrent.ThreadPoolExecutor):0 -> a
    1:1:void com.google.common.util.concurrent.MoreExecutors$Application.addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit):0:0 -> addDelayedShutdownHook
    1:1:void addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit):0 -> addDelayedShutdownHook
    2:2:void com.google.common.util.concurrent.MoreExecutors$Application.addShutdownHook(java.lang.Thread):0:0 -> addDelayedShutdownHook
    2:2:void com.google.common.util.concurrent.MoreExecutors$Application.addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit):0 -> addDelayedShutdownHook
    2:2:void addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit):0 -> addDelayedShutdownHook
    java.lang.Thread newThread(java.lang.String,java.lang.Runnable) -> b
    java.util.concurrent.Executor rejectionPropagatingExecutor(java.util.concurrent.Executor,com.google.common.util.concurrent.AbstractFuture) -> c
    java.util.concurrent.Executor renamingDecorator(java.util.concurrent.Executor,com.google.common.base.Supplier) -> d
    1:1:java.util.concurrent.ExecutorService com.google.common.util.concurrent.MoreExecutors$Application.getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor):0:0 -> getExitingExecutorService
    1:1:java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor):0 -> getExitingExecutorService
    2:2:java.util.concurrent.ExecutorService com.google.common.util.concurrent.MoreExecutors$Application.getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit):0:0 -> getExitingExecutorService
    2:2:java.util.concurrent.ExecutorService com.google.common.util.concurrent.MoreExecutors$Application.getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor):0 -> getExitingExecutorService
    2:2:java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor):0 -> getExitingExecutorService
    3:3:void com.google.common.util.concurrent.MoreExecutors$Application.addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit):0:0 -> getExitingExecutorService
    3:3:java.util.concurrent.ExecutorService com.google.common.util.concurrent.MoreExecutors$Application.getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit):0 -> getExitingExecutorService
    3:3:java.util.concurrent.ExecutorService com.google.common.util.concurrent.MoreExecutors$Application.getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor):0 -> getExitingExecutorService
    3:3:java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor):0 -> getExitingExecutorService
    4:4:void com.google.common.util.concurrent.MoreExecutors$Application.addShutdownHook(java.lang.Thread):0:0 -> getExitingExecutorService
    4:4:void com.google.common.util.concurrent.MoreExecutors$Application.addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit):0 -> getExitingExecutorService
    4:4:java.util.concurrent.ExecutorService com.google.common.util.concurrent.MoreExecutors$Application.getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit):0 -> getExitingExecutorService
    4:4:java.util.concurrent.ExecutorService com.google.common.util.concurrent.MoreExecutors$Application.getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor):0 -> getExitingExecutorService
    4:4:java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor):0 -> getExitingExecutorService
    5:5:java.util.concurrent.ExecutorService com.google.common.util.concurrent.MoreExecutors$Application.getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit):0:0 -> getExitingExecutorService
    5:5:java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit):0 -> getExitingExecutorService
    6:6:void com.google.common.util.concurrent.MoreExecutors$Application.addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit):0:0 -> getExitingExecutorService
    6:6:java.util.concurrent.ExecutorService com.google.common.util.concurrent.MoreExecutors$Application.getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit):0 -> getExitingExecutorService
    6:6:java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit):0 -> getExitingExecutorService
    7:7:void com.google.common.util.concurrent.MoreExecutors$Application.addShutdownHook(java.lang.Thread):0:0 -> getExitingExecutorService
    7:7:void com.google.common.util.concurrent.MoreExecutors$Application.addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit):0 -> getExitingExecutorService
    7:7:java.util.concurrent.ExecutorService com.google.common.util.concurrent.MoreExecutors$Application.getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit):0 -> getExitingExecutorService
    7:7:java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit):0 -> getExitingExecutorService
    1:1:java.util.concurrent.ScheduledExecutorService com.google.common.util.concurrent.MoreExecutors$Application.getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor):0:0 -> getExitingScheduledExecutorService
    1:1:java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor):0 -> getExitingScheduledExecutorService
    2:2:java.util.concurrent.ScheduledExecutorService com.google.common.util.concurrent.MoreExecutors$Application.getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit):0:0 -> getExitingScheduledExecutorService
    2:2:java.util.concurrent.ScheduledExecutorService com.google.common.util.concurrent.MoreExecutors$Application.getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor):0 -> getExitingScheduledExecutorService
    2:2:java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor):0 -> getExitingScheduledExecutorService
    3:3:void com.google.common.util.concurrent.MoreExecutors$Application.addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit):0:0 -> getExitingScheduledExecutorService
    3:3:java.util.concurrent.ScheduledExecutorService com.google.common.util.concurrent.MoreExecutors$Application.getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit):0 -> getExitingScheduledExecutorService
    3:3:java.util.concurrent.ScheduledExecutorService com.google.common.util.concurrent.MoreExecutors$Application.getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor):0 -> getExitingScheduledExecutorService
    3:3:java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor):0 -> getExitingScheduledExecutorService
    4:4:void com.google.common.util.concurrent.MoreExecutors$Application.addShutdownHook(java.lang.Thread):0:0 -> getExitingScheduledExecutorService
    4:4:void com.google.common.util.concurrent.MoreExecutors$Application.addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit):0 -> getExitingScheduledExecutorService
    4:4:java.util.concurrent.ScheduledExecutorService com.google.common.util.concurrent.MoreExecutors$Application.getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit):0 -> getExitingScheduledExecutorService
    4:4:java.util.concurrent.ScheduledExecutorService com.google.common.util.concurrent.MoreExecutors$Application.getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor):0 -> getExitingScheduledExecutorService
    4:4:java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor):0 -> getExitingScheduledExecutorService
    5:5:java.util.concurrent.ScheduledExecutorService com.google.common.util.concurrent.MoreExecutors$Application.getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit):0:0 -> getExitingScheduledExecutorService
    5:5:java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit):0 -> getExitingScheduledExecutorService
    6:6:void com.google.common.util.concurrent.MoreExecutors$Application.addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit):0:0 -> getExitingScheduledExecutorService
    6:6:java.util.concurrent.ScheduledExecutorService com.google.common.util.concurrent.MoreExecutors$Application.getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit):0 -> getExitingScheduledExecutorService
    6:6:java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit):0 -> getExitingScheduledExecutorService
    7:7:void com.google.common.util.concurrent.MoreExecutors$Application.addShutdownHook(java.lang.Thread):0:0 -> getExitingScheduledExecutorService
    7:7:void com.google.common.util.concurrent.MoreExecutors$Application.addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit):0 -> getExitingScheduledExecutorService
    7:7:java.util.concurrent.ScheduledExecutorService com.google.common.util.concurrent.MoreExecutors$Application.getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit):0 -> getExitingScheduledExecutorService
    7:7:java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit):0 -> getExitingScheduledExecutorService
    1:1:boolean isAppEngineWithApiClasses():0:0 -> platformThreadFactory
    1:1:java.util.concurrent.ThreadFactory platformThreadFactory():0 -> platformThreadFactory
    2:2:java.util.concurrent.ThreadFactory platformThreadFactory():0:0 -> platformThreadFactory
com.google.common.util.concurrent.MoreExecutors$1 -> com.google.common.util.concurrent.s4:
com.google.common.util.concurrent.MoreExecutors$2 -> com.google.common.util.concurrent.t4:
    java.util.concurrent.Executor val$executor -> a
    com.google.common.base.Supplier val$nameSupplier -> b
    1:1:java.lang.Runnable com.google.common.util.concurrent.Callables.threadRenaming(java.lang.Runnable,com.google.common.base.Supplier):0:0 -> execute
    1:1:void execute(java.lang.Runnable):0 -> execute
    2:2:void execute(java.lang.Runnable):0:0 -> execute
com.google.common.util.concurrent.MoreExecutors$4 -> com.google.common.util.concurrent.u4:
    com.google.common.base.Supplier val$nameSupplier -> c
    1:1:java.util.concurrent.Callable com.google.common.util.concurrent.Callables.threadRenaming(java.util.concurrent.Callable,com.google.common.base.Supplier):0:0 -> wrapTask
    1:1:java.util.concurrent.Callable wrapTask(java.util.concurrent.Callable):0 -> wrapTask
com.google.common.util.concurrent.MoreExecutors$5 -> com.google.common.util.concurrent.v4:
    java.util.concurrent.Executor val$delegate -> a
    com.google.common.util.concurrent.AbstractFuture val$future -> b
com.google.common.util.concurrent.MoreExecutors$Application$1 -> com.google.common.util.concurrent.w4:
    long val$terminationTimeout -> b
    java.util.concurrent.TimeUnit val$timeUnit -> c
    java.util.concurrent.ExecutorService val$service -> a
com.google.common.util.concurrent.MoreExecutors$DirectExecutorService -> com.google.common.util.concurrent.x4:
    java.lang.Object lock -> a
    int runningTasks -> b
    boolean shutdown -> c
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.MoreExecutors$1):0 -> <init>
    void endTask() -> a
    1:1:void startTask():0:0 -> execute
    1:1:void execute(java.lang.Runnable):0 -> execute
    2:2:void execute(java.lang.Runnable):0:0 -> execute
    3:3:void startTask():0:0 -> execute
    3:3:void execute(java.lang.Runnable):0 -> execute
com.google.common.util.concurrent.MoreExecutors$ListeningDecorator -> com.google.common.util.concurrent.y4:
    java.util.concurrent.ExecutorService delegate -> a
com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator -> com.google.common.util.concurrent.b5:
    java.util.concurrent.ScheduledExecutorService delegate -> b
    1:1:com.google.common.util.concurrent.TrustedListenableFutureTask com.google.common.util.concurrent.TrustedListenableFutureTask.create(java.util.concurrent.Callable):0:0 -> schedule
    1:1:com.google.common.util.concurrent.ListenableScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit):0 -> schedule
    2:2:com.google.common.util.concurrent.ListenableScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit):0:0 -> schedule
com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask -> com.google.common.util.concurrent.z4:
    java.util.concurrent.ScheduledFuture scheduledDelegate -> b
    1:1:int compareTo(java.util.concurrent.Delayed):0:0 -> compareTo
    1:1:int compareTo(java.lang.Object):0 -> compareTo
com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask -> com.google.common.util.concurrent.a5:
    java.lang.Runnable delegate -> h
com.google.common.util.concurrent.RateLimiter -> com.google.common.util.concurrent.RateLimiter:
    com.google.common.util.concurrent.RateLimiter$SleepingStopwatch stopwatch -> a
    java.lang.Object mutexDoNotUseDirectly -> b
    double doGetRate() -> a
    1:1:void checkPermits(int):0:0 -> acquire
    1:1:long reserve(int):0 -> acquire
    1:1:double acquire(int):0 -> acquire
    2:2:long reserve(int):0:0 -> acquire
    2:2:double acquire(int):0 -> acquire
    3:3:long reserveAndGetWaitLength(int,long):0:0 -> acquire
    3:3:long reserve(int):0 -> acquire
    3:3:double acquire(int):0 -> acquire
    4:4:long reserve(int):0:0 -> acquire
    4:4:double acquire(int):0 -> acquire
    5:5:double acquire(int):0:0 -> acquire
    6:6:long reserve(int):0:0 -> acquire
    6:6:double acquire(int):0 -> acquire
    void doSetRate(double,long) -> b
    java.lang.Object mutex() -> c
    1:1:com.google.common.util.concurrent.RateLimiter$SleepingStopwatch com.google.common.util.concurrent.RateLimiter$SleepingStopwatch.createFromSystemTimer():0:0 -> create
    1:1:com.google.common.util.concurrent.RateLimiter create(double):0 -> create
    2:2:com.google.common.util.concurrent.RateLimiter create(double,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch):0:0 -> create
    2:2:com.google.common.util.concurrent.RateLimiter create(double):0 -> create
    3:3:com.google.common.util.concurrent.RateLimiter$SleepingStopwatch com.google.common.util.concurrent.RateLimiter$SleepingStopwatch.createFromSystemTimer():0:0 -> create
    3:3:com.google.common.util.concurrent.RateLimiter create(double,long,java.util.concurrent.TimeUnit):0 -> create
    4:4:com.google.common.util.concurrent.RateLimiter create(double,long,java.util.concurrent.TimeUnit,double,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch):0:0 -> create
    4:4:com.google.common.util.concurrent.RateLimiter create(double,long,java.util.concurrent.TimeUnit):0 -> create
    long queryEarliestAvailable(long) -> d
    long reserveEarliestAvailable(int,long) -> e
    1:1:void checkPermits(int):0:0 -> tryAcquire
    1:1:boolean tryAcquire(int,long,java.util.concurrent.TimeUnit):0 -> tryAcquire
    2:2:boolean tryAcquire(int,long,java.util.concurrent.TimeUnit):0:0 -> tryAcquire
    3:3:boolean canAcquire(long,long):0:0 -> tryAcquire
    3:3:boolean tryAcquire(int,long,java.util.concurrent.TimeUnit):0 -> tryAcquire
    4:4:boolean tryAcquire(int,long,java.util.concurrent.TimeUnit):0:0 -> tryAcquire
    5:5:long reserveAndGetWaitLength(int,long):0:0 -> tryAcquire
    5:5:boolean tryAcquire(int,long,java.util.concurrent.TimeUnit):0 -> tryAcquire
    6:6:boolean tryAcquire(int,long,java.util.concurrent.TimeUnit):0:0 -> tryAcquire
com.google.common.util.concurrent.RateLimiter$SleepingStopwatch -> com.google.common.util.concurrent.d5:
com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1 -> com.google.common.util.concurrent.c5:
    com.google.common.base.Stopwatch stopwatch -> a
com.google.common.util.concurrent.Runnables -> com.google.common.util.concurrent.Runnables:
    java.lang.Runnable EMPTY_RUNNABLE -> a
com.google.common.util.concurrent.Runnables$1 -> com.google.common.util.concurrent.e5:
com.google.common.util.concurrent.SequentialExecutor -> com.google.common.util.concurrent.i5:
    java.util.Deque queue -> b
    java.util.concurrent.Executor executor -> a
    com.google.common.util.concurrent.SequentialExecutor$QueueWorker worker -> e
    java.util.logging.Logger log -> f
    long workerRunCount -> d
    com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState workerRunningState -> c
    java.util.Deque access$100(com.google.common.util.concurrent.SequentialExecutor) -> a
    com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState access$200(com.google.common.util.concurrent.SequentialExecutor) -> b
    com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState access$202(com.google.common.util.concurrent.SequentialExecutor,com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState) -> c
    long access$308(com.google.common.util.concurrent.SequentialExecutor) -> d
    java.util.logging.Logger access$400() -> e
com.google.common.util.concurrent.SequentialExecutor$1 -> com.google.common.util.concurrent.f5:
    java.lang.Runnable val$task -> a
com.google.common.util.concurrent.SequentialExecutor$QueueWorker -> com.google.common.util.concurrent.g5:
    com.google.common.util.concurrent.SequentialExecutor this$0 -> b
    java.lang.Runnable task -> a
    1:1:void <init>(com.google.common.util.concurrent.SequentialExecutor):0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.SequentialExecutor,com.google.common.util.concurrent.SequentialExecutor$1):0 -> <init>
    void workOnQueue() -> a
com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState -> com.google.common.util.concurrent.h5:
    com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState[] $VALUES -> e
    com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState QUEUED -> c
    com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState RUNNING -> d
    com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState IDLE -> a
    com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState QUEUING -> b
com.google.common.util.concurrent.Service$1 -> com.google.common.util.concurrent.j5:
com.google.common.util.concurrent.Service$State -> com.google.common.util.concurrent.Service$State:
    com.google.common.util.concurrent.Service$State[] $VALUES -> a
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:void <init>(java.lang.String,int,com.google.common.util.concurrent.Service$1):0 -> <init>
    boolean isTerminal() -> a
com.google.common.util.concurrent.Service$State$1 -> com.google.common.util.concurrent.k5:
    boolean isTerminal() -> a
com.google.common.util.concurrent.Service$State$2 -> com.google.common.util.concurrent.l5:
    boolean isTerminal() -> a
com.google.common.util.concurrent.Service$State$3 -> com.google.common.util.concurrent.m5:
    boolean isTerminal() -> a
com.google.common.util.concurrent.Service$State$4 -> com.google.common.util.concurrent.n5:
    boolean isTerminal() -> a
com.google.common.util.concurrent.Service$State$5 -> com.google.common.util.concurrent.o5:
    boolean isTerminal() -> a
com.google.common.util.concurrent.Service$State$6 -> com.google.common.util.concurrent.p5:
    boolean isTerminal() -> a
com.google.common.util.concurrent.ServiceManager -> com.google.common.util.concurrent.ServiceManager:
    com.google.common.util.concurrent.ListenerCallQueue$Event HEALTHY_EVENT -> d
    com.google.common.util.concurrent.ListenerCallQueue$Event STOPPED_EVENT -> e
    com.google.common.util.concurrent.ServiceManager$ServiceManagerState state -> a
    com.google.common.collect.ImmutableList services -> b
    java.util.logging.Logger logger -> c
    1:1:void com.google.common.util.concurrent.ServiceManager$ServiceManagerState.markReady():0:0 -> <init>
    1:1:void <init>(java.lang.Iterable):0 -> <init>
    java.util.logging.Logger access$200() -> a
    1:1:void com.google.common.util.concurrent.ServiceManager$ServiceManagerState.addListener(com.google.common.util.concurrent.ServiceManager$Listener,java.util.concurrent.Executor):0:0 -> addListener
    1:1:void addListener(com.google.common.util.concurrent.ServiceManager$Listener,java.util.concurrent.Executor):0 -> addListener
    1:1:void com.google.common.util.concurrent.ServiceManager$ServiceManagerState.awaitHealthy():0:0 -> awaitHealthy
    1:1:void awaitHealthy():0 -> awaitHealthy
    2:2:void com.google.common.util.concurrent.ServiceManager$ServiceManagerState.awaitHealthy(long,java.util.concurrent.TimeUnit):0:0 -> awaitHealthy
    2:2:void awaitHealthy(long,java.util.concurrent.TimeUnit):0 -> awaitHealthy
    1:1:void com.google.common.util.concurrent.ServiceManager$ServiceManagerState.awaitStopped():0:0 -> awaitStopped
    1:1:void awaitStopped():0 -> awaitStopped
    2:2:void com.google.common.util.concurrent.ServiceManager$ServiceManagerState.awaitStopped(long,java.util.concurrent.TimeUnit):0:0 -> awaitStopped
    2:2:void awaitStopped(long,java.util.concurrent.TimeUnit):0 -> awaitStopped
    com.google.common.util.concurrent.ListenerCallQueue$Event access$300() -> b
    com.google.common.util.concurrent.ListenerCallQueue$Event access$400() -> c
    1:1:void com.google.common.util.concurrent.ServiceManager$ServiceManagerState.tryStartTiming(com.google.common.util.concurrent.Service):0:0 -> startAsync
    1:1:com.google.common.util.concurrent.ServiceManager startAsync():0 -> startAsync
    2:2:com.google.common.util.concurrent.ServiceManager startAsync():0:0 -> startAsync
    3:3:void com.google.common.util.concurrent.ServiceManager$ServiceManagerState.tryStartTiming(com.google.common.util.concurrent.Service):0:0 -> startAsync
    3:3:com.google.common.util.concurrent.ServiceManager startAsync():0 -> startAsync
    4:4:com.google.common.util.concurrent.ServiceManager startAsync():0:0 -> startAsync
    1:1:com.google.common.collect.ImmutableMap com.google.common.util.concurrent.ServiceManager$ServiceManagerState.startupTimes():0:0 -> startupTimes
    1:1:com.google.common.collect.ImmutableMap startupTimes():0 -> startupTimes
com.google.common.util.concurrent.ServiceManager$1 -> com.google.common.util.concurrent.q5:
    1:1:void call(com.google.common.util.concurrent.ServiceManager$Listener):0:0 -> call
    1:1:void call(java.lang.Object):0 -> call
com.google.common.util.concurrent.ServiceManager$2 -> com.google.common.util.concurrent.r5:
    1:1:void call(com.google.common.util.concurrent.ServiceManager$Listener):0:0 -> call
    1:1:void call(java.lang.Object):0 -> call
com.google.common.util.concurrent.ServiceManager$EmptyServiceManagerWarning -> com.google.common.util.concurrent.s5:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.ServiceManager$1):0 -> <init>
com.google.common.util.concurrent.ServiceManager$FailedService -> com.google.common.util.concurrent.t5:
com.google.common.util.concurrent.ServiceManager$NoOpService -> com.google.common.util.concurrent.u5:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.ServiceManager$1):0 -> <init>
com.google.common.util.concurrent.ServiceManager$ServiceListener -> com.google.common.util.concurrent.v5:
    java.lang.ref.WeakReference state -> b
    com.google.common.util.concurrent.Service service -> a
com.google.common.util.concurrent.ServiceManager$ServiceManagerState -> com.google.common.util.concurrent.a6:
    com.google.common.util.concurrent.ListenerCallQueue listeners -> j
    java.util.Map startupTimers -> d
    boolean ready -> e
    boolean transitioned -> f
    int numberOfServices -> g
    com.google.common.util.concurrent.Monitor$Guard awaitHealthGuard -> h
    com.google.common.collect.Multiset states -> c
    com.google.common.util.concurrent.Monitor$Guard stoppedGuard -> i
    com.google.common.collect.SetMultimap servicesByState -> b
    com.google.common.util.concurrent.Monitor monitor -> a
    void checkHealthy() -> a
    void dispatchListenerEvents() -> b
    com.google.common.collect.ImmutableSetMultimap servicesByState() -> c
    1:1:void enqueueFailedEvent(com.google.common.util.concurrent.Service):0:0 -> d
    1:1:void transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service$State,com.google.common.util.concurrent.Service$State):0 -> d
    2:2:void transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service$State,com.google.common.util.concurrent.Service$State):0:0 -> d
    3:3:void enqueueHealthyEvent():0:0 -> d
    3:3:void transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service$State,com.google.common.util.concurrent.Service$State):0 -> d
    4:4:void transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service$State,com.google.common.util.concurrent.Service$State):0:0 -> d
    5:5:void enqueueStoppedEvent():0:0 -> d
    5:5:void transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service$State,com.google.common.util.concurrent.Service$State):0 -> d
    6:6:void transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service$State,com.google.common.util.concurrent.Service$State):0:0 -> d
com.google.common.util.concurrent.ServiceManager$ServiceManagerState$1 -> com.google.common.util.concurrent.w5:
    1:1:java.lang.Long apply(java.util.Map$Entry):0:0 -> apply
    1:1:java.lang.Object apply(java.lang.Object):0 -> apply
com.google.common.util.concurrent.ServiceManager$ServiceManagerState$2 -> com.google.common.util.concurrent.x5:
    com.google.common.util.concurrent.Service val$service -> a
    1:1:void call(com.google.common.util.concurrent.ServiceManager$Listener):0:0 -> call
    1:1:void call(java.lang.Object):0 -> call
com.google.common.util.concurrent.ServiceManager$ServiceManagerState$AwaitHealthGuard -> com.google.common.util.concurrent.y5:
    com.google.common.util.concurrent.ServiceManager$ServiceManagerState this$0 -> e
com.google.common.util.concurrent.ServiceManager$ServiceManagerState$StoppedGuard -> com.google.common.util.concurrent.z5:
    com.google.common.util.concurrent.ServiceManager$ServiceManagerState this$0 -> e
com.google.common.util.concurrent.SimpleTimeLimiter -> com.google.common.util.concurrent.SimpleTimeLimiter:
    java.util.concurrent.ExecutorService executor -> a
    java.lang.Exception access$000(java.lang.Exception,boolean) -> a
    1:1:java.lang.Object callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit,boolean):0:0 -> b
    1:1:java.lang.Object access$100(com.google.common.util.concurrent.SimpleTimeLimiter,java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit,boolean):0 -> b
    void checkPositiveTimeout(long) -> c
    java.lang.Exception throwCause(java.lang.Exception,boolean) -> d
    void wrapAndThrowExecutionExceptionOrError(java.lang.Throwable) -> e
    1:1:java.util.Set findInterruptibleMethods(java.lang.Class):0:0 -> newProxy
    1:1:java.lang.Object newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit):0 -> newProxy
    2:2:boolean declaresInterruptedEx(java.lang.reflect.Method):0:0 -> newProxy
    2:2:java.util.Set findInterruptibleMethods(java.lang.Class):0 -> newProxy
    2:2:java.lang.Object newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit):0 -> newProxy
    3:3:java.util.Set findInterruptibleMethods(java.lang.Class):0:0 -> newProxy
    3:3:java.lang.Object newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit):0 -> newProxy
    4:4:java.lang.Object newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit):0:0 -> newProxy
    5:5:java.lang.Object newProxy(java.lang.Class,java.lang.reflect.InvocationHandler):0:0 -> newProxy
    5:5:java.lang.Object newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit):0 -> newProxy
    1:1:void wrapAndThrowRuntimeExecutionExceptionOrError(java.lang.Throwable):0:0 -> runUninterruptiblyWithTimeout
    1:1:void runUninterruptiblyWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit):0 -> runUninterruptiblyWithTimeout
    2:2:void runUninterruptiblyWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit):0:0 -> runUninterruptiblyWithTimeout
    1:1:void wrapAndThrowRuntimeExecutionExceptionOrError(java.lang.Throwable):0:0 -> runWithTimeout
    1:1:void runWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit):0 -> runWithTimeout
    2:2:void runWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit):0:0 -> runWithTimeout
com.google.common.util.concurrent.SimpleTimeLimiter$1 -> com.google.common.util.concurrent.c6:
    java.util.Set val$interruptibleMethods -> d
    long val$timeoutDuration -> b
    com.google.common.util.concurrent.SimpleTimeLimiter this$0 -> e
    java.lang.Object val$target -> a
    java.util.concurrent.TimeUnit val$timeoutUnit -> c
com.google.common.util.concurrent.SimpleTimeLimiter$1$1 -> com.google.common.util.concurrent.b6:
    java.lang.Object[] val$args -> b
    com.google.common.util.concurrent.SimpleTimeLimiter$1 this$1 -> c
    java.lang.reflect.Method val$method -> a
com.google.common.util.concurrent.SmoothRateLimiter -> com.google.common.util.concurrent.g6:
    long nextFreeTicketMicros -> f
    double storedPermits -> c
    double maxPermits -> d
    double stableIntervalMicros -> e
    1:1:void <init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch):0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch,com.google.common.util.concurrent.SmoothRateLimiter$1):0 -> <init>
    double doGetRate() -> a
    void doSetRate(double,long) -> b
    long queryEarliestAvailable(long) -> d
    long reserveEarliestAvailable(int,long) -> e
    double coolDownIntervalMicros() -> f
    void doSetRate(double,double) -> g
    void resync(long) -> h
    long storedPermitsToWaitTime(double,double) -> i
com.google.common.util.concurrent.SmoothRateLimiter$1 -> com.google.common.util.concurrent.d6:
com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty -> com.google.common.util.concurrent.e6:
    double maxBurstSeconds -> g
    double coolDownIntervalMicros() -> f
    void doSetRate(double,double) -> g
    long storedPermitsToWaitTime(double,double) -> i
com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp -> com.google.common.util.concurrent.f6:
    double coldFactor -> j
    long warmupPeriodMicros -> g
    double slope -> h
    double thresholdPermits -> i
    double coolDownIntervalMicros() -> f
    void doSetRate(double,double) -> g
    1:1:double permitsToTime(double):0:0 -> i
    1:1:long storedPermitsToWaitTime(double,double):0 -> i
    2:2:long storedPermitsToWaitTime(double,double):0:0 -> i
com.google.common.util.concurrent.Striped -> com.google.common.util.concurrent.Striped:
    com.google.common.base.Supplier WEAK_SAFE_READ_WRITE_LOCK_SUPPLIER -> b
    com.google.common.base.Supplier READ_WRITE_LOCK_SUPPLIER -> a
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(com.google.common.util.concurrent.Striped$1):0 -> <init>
    com.google.common.util.concurrent.Striped custom(int,com.google.common.base.Supplier) -> a
    int indexFor(java.lang.Object) -> b
    com.google.common.util.concurrent.Striped lazy(int,com.google.common.base.Supplier) -> c
com.google.common.util.concurrent.Striped$1 -> com.google.common.util.concurrent.h6:
    1:1:java.util.concurrent.locks.Lock get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.util.concurrent.Striped$2 -> com.google.common.util.concurrent.i6:
    1:1:java.util.concurrent.locks.Lock get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.util.concurrent.Striped$3 -> com.google.common.util.concurrent.j6:
    int val$permits -> a
    1:1:java.util.concurrent.Semaphore get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.util.concurrent.Striped$4 -> com.google.common.util.concurrent.k6:
    int val$permits -> a
    1:1:java.util.concurrent.Semaphore get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.util.concurrent.Striped$5 -> com.google.common.util.concurrent.l6:
    1:1:java.util.concurrent.locks.ReadWriteLock get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.util.concurrent.Striped$6 -> com.google.common.util.concurrent.m6:
    1:1:java.util.concurrent.locks.ReadWriteLock get():0:0 -> get
    1:1:java.lang.Object get():0 -> get
com.google.common.util.concurrent.Striped$CompactStriped -> com.google.common.util.concurrent.n6:
    java.lang.Object[] array -> d
    1:1:void <init>(int,com.google.common.base.Supplier):0:0 -> <init>
    1:1:void <init>(int,com.google.common.base.Supplier,com.google.common.util.concurrent.Striped$1):0 -> <init>
com.google.common.util.concurrent.Striped$LargeLazyStriped -> com.google.common.util.concurrent.o6:
    int size -> f
    java.util.concurrent.ConcurrentMap locks -> d
    com.google.common.base.Supplier supplier -> e
com.google.common.util.concurrent.Striped$PaddedLock -> com.google.common.util.concurrent.p6:
com.google.common.util.concurrent.Striped$PaddedSemaphore -> com.google.common.util.concurrent.q6:
com.google.common.util.concurrent.Striped$PowerOfTwoStriped -> com.google.common.util.concurrent.r6:
    int mask -> c
    1:1:int com.google.common.util.concurrent.Striped.ceilToPowerOfTwo(int):0:0 -> <init>
    1:1:int com.google.common.util.concurrent.Striped.access$200(int):0 -> <init>
    1:1:void <init>(int):0 -> <init>
    2:2:void <init>(int):0:0 -> <init>
    int indexFor(java.lang.Object) -> b
com.google.common.util.concurrent.Striped$SmallLazyStriped -> com.google.common.util.concurrent.t6:
    java.lang.ref.ReferenceQueue queue -> g
    int size -> f
    java.util.concurrent.atomic.AtomicReferenceArray locks -> d
    com.google.common.base.Supplier supplier -> e
    1:1:void drainQueue():0:0 -> getAt
    1:1:java.lang.Object getAt(int):0 -> getAt
com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference -> com.google.common.util.concurrent.s6:
    int index -> a
com.google.common.util.concurrent.Striped$WeakSafeCondition -> com.google.common.util.concurrent.u6:
    java.util.concurrent.locks.Condition delegate -> a
    1:1:void com.google.common.util.concurrent.ForwardingCondition.<init>():0:0 -> <init>
    1:1:void <init>(java.util.concurrent.locks.Condition,com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock):0 -> <init>
    2:2:void <init>(java.util.concurrent.locks.Condition,com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock):0:0 -> <init>
    1:1:java.util.concurrent.locks.Condition delegate():0:0 -> await
    1:1:void com.google.common.util.concurrent.ForwardingCondition.await():0 -> await
    1:1:void com.google.common.util.concurrent.ForwardingCondition.await():0 -> await
    2:2:void com.google.common.util.concurrent.ForwardingCondition.await():0:0 -> await
    2:2:void com.google.common.util.concurrent.ForwardingCondition.await():0 -> await
    3:3:java.util.concurrent.locks.Condition delegate():0:0 -> await
    3:3:boolean com.google.common.util.concurrent.ForwardingCondition.await(long,java.util.concurrent.TimeUnit):0 -> await
    3:3:boolean com.google.common.util.concurrent.ForwardingCondition.await(long,java.util.concurrent.TimeUnit):0 -> await
    4:4:boolean com.google.common.util.concurrent.ForwardingCondition.await(long,java.util.concurrent.TimeUnit):0:0 -> await
    4:4:boolean com.google.common.util.concurrent.ForwardingCondition.await(long,java.util.concurrent.TimeUnit):0 -> await
    1:1:java.util.concurrent.locks.Condition delegate():0:0 -> awaitNanos
    1:1:long com.google.common.util.concurrent.ForwardingCondition.awaitNanos(long):0 -> awaitNanos
    1:1:long com.google.common.util.concurrent.ForwardingCondition.awaitNanos(long):0 -> awaitNanos
    2:2:long com.google.common.util.concurrent.ForwardingCondition.awaitNanos(long):0:0 -> awaitNanos
    2:2:long com.google.common.util.concurrent.ForwardingCondition.awaitNanos(long):0 -> awaitNanos
    1:1:java.util.concurrent.locks.Condition delegate():0:0 -> awaitUninterruptibly
    1:1:void com.google.common.util.concurrent.ForwardingCondition.awaitUninterruptibly():0 -> awaitUninterruptibly
    1:1:void com.google.common.util.concurrent.ForwardingCondition.awaitUninterruptibly():0 -> awaitUninterruptibly
    2:2:void com.google.common.util.concurrent.ForwardingCondition.awaitUninterruptibly():0:0 -> awaitUninterruptibly
    2:2:void com.google.common.util.concurrent.ForwardingCondition.awaitUninterruptibly():0 -> awaitUninterruptibly
    1:1:java.util.concurrent.locks.Condition delegate():0:0 -> awaitUntil
    1:1:boolean com.google.common.util.concurrent.ForwardingCondition.awaitUntil(java.util.Date):0 -> awaitUntil
    1:1:boolean com.google.common.util.concurrent.ForwardingCondition.awaitUntil(java.util.Date):0 -> awaitUntil
    2:2:boolean com.google.common.util.concurrent.ForwardingCondition.awaitUntil(java.util.Date):0:0 -> awaitUntil
    2:2:boolean com.google.common.util.concurrent.ForwardingCondition.awaitUntil(java.util.Date):0 -> awaitUntil
    1:1:java.util.concurrent.locks.Condition delegate():0:0 -> signal
    1:1:void com.google.common.util.concurrent.ForwardingCondition.signal():0 -> signal
    1:1:void com.google.common.util.concurrent.ForwardingCondition.signal():0 -> signal
    2:2:void com.google.common.util.concurrent.ForwardingCondition.signal():0:0 -> signal
    2:2:void com.google.common.util.concurrent.ForwardingCondition.signal():0 -> signal
    1:1:java.util.concurrent.locks.Condition delegate():0:0 -> signalAll
    1:1:void com.google.common.util.concurrent.ForwardingCondition.signalAll():0 -> signalAll
    1:1:void com.google.common.util.concurrent.ForwardingCondition.signalAll():0 -> signalAll
    2:2:void com.google.common.util.concurrent.ForwardingCondition.signalAll():0:0 -> signalAll
    2:2:void com.google.common.util.concurrent.ForwardingCondition.signalAll():0 -> signalAll
com.google.common.util.concurrent.Striped$WeakSafeLock -> com.google.common.util.concurrent.v6:
    com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock strongReference -> b
    java.util.concurrent.locks.Lock delegate -> a
    1:1:void com.google.common.util.concurrent.ForwardingLock.<init>():0:0 -> <init>
    1:1:void <init>(java.util.concurrent.locks.Lock,com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock):0 -> <init>
    2:2:void <init>(java.util.concurrent.locks.Lock,com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock):0:0 -> <init>
    1:1:java.util.concurrent.locks.Lock delegate():0:0 -> lock
    1:1:void com.google.common.util.concurrent.ForwardingLock.lock():0 -> lock
    1:1:void com.google.common.util.concurrent.ForwardingLock.lock():0 -> lock
    2:2:void com.google.common.util.concurrent.ForwardingLock.lock():0:0 -> lock
    2:2:void com.google.common.util.concurrent.ForwardingLock.lock():0 -> lock
    1:1:java.util.concurrent.locks.Lock delegate():0:0 -> lockInterruptibly
    1:1:void com.google.common.util.concurrent.ForwardingLock.lockInterruptibly():0 -> lockInterruptibly
    1:1:void com.google.common.util.concurrent.ForwardingLock.lockInterruptibly():0 -> lockInterruptibly
    2:2:void com.google.common.util.concurrent.ForwardingLock.lockInterruptibly():0:0 -> lockInterruptibly
    2:2:void com.google.common.util.concurrent.ForwardingLock.lockInterruptibly():0 -> lockInterruptibly
    1:1:java.util.concurrent.locks.Lock delegate():0:0 -> tryLock
    1:1:boolean com.google.common.util.concurrent.ForwardingLock.tryLock():0 -> tryLock
    1:1:boolean com.google.common.util.concurrent.ForwardingLock.tryLock():0 -> tryLock
    2:2:boolean com.google.common.util.concurrent.ForwardingLock.tryLock():0:0 -> tryLock
    2:2:boolean com.google.common.util.concurrent.ForwardingLock.tryLock():0 -> tryLock
    3:3:java.util.concurrent.locks.Lock delegate():0:0 -> tryLock
    3:3:boolean com.google.common.util.concurrent.ForwardingLock.tryLock(long,java.util.concurrent.TimeUnit):0 -> tryLock
    3:3:boolean com.google.common.util.concurrent.ForwardingLock.tryLock(long,java.util.concurrent.TimeUnit):0 -> tryLock
    4:4:boolean com.google.common.util.concurrent.ForwardingLock.tryLock(long,java.util.concurrent.TimeUnit):0:0 -> tryLock
    4:4:boolean com.google.common.util.concurrent.ForwardingLock.tryLock(long,java.util.concurrent.TimeUnit):0 -> tryLock
    1:1:java.util.concurrent.locks.Lock delegate():0:0 -> unlock
    1:1:void com.google.common.util.concurrent.ForwardingLock.unlock():0 -> unlock
    1:1:void com.google.common.util.concurrent.ForwardingLock.unlock():0 -> unlock
    2:2:void com.google.common.util.concurrent.ForwardingLock.unlock():0:0 -> unlock
    2:2:void com.google.common.util.concurrent.ForwardingLock.unlock():0 -> unlock
com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock -> com.google.common.util.concurrent.w6:
    java.util.concurrent.locks.ReadWriteLock delegate -> a
com.google.common.util.concurrent.ThreadFactoryBuilder -> com.google.common.util.concurrent.ThreadFactoryBuilder:
    java.lang.Integer priority -> c
    java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler -> d
    java.util.concurrent.ThreadFactory backingThreadFactory -> e
    java.lang.String nameFormat -> a
    java.lang.Boolean daemon -> b
    1:1:java.util.concurrent.ThreadFactory doBuild(com.google.common.util.concurrent.ThreadFactoryBuilder):0:0 -> build
    1:1:java.util.concurrent.ThreadFactory build():0 -> build
    1:1:java.lang.String format(java.lang.String,java.lang.Object[]):0:0 -> setNameFormat
    1:1:com.google.common.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String):0 -> setNameFormat
    2:2:com.google.common.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String):0:0 -> setNameFormat
com.google.common.util.concurrent.ThreadFactoryBuilder$1 -> com.google.common.util.concurrent.x6:
    java.util.concurrent.atomic.AtomicLong val$count -> c
    java.lang.Integer val$priority -> e
    java.lang.Thread$UncaughtExceptionHandler val$uncaughtExceptionHandler -> f
    java.util.concurrent.ThreadFactory val$backingThreadFactory -> a
    java.lang.String val$nameFormat -> b
    java.lang.Boolean val$daemon -> d
    1:1:java.lang.String com.google.common.util.concurrent.ThreadFactoryBuilder.format(java.lang.String,java.lang.Object[]):0:0 -> newThread
    1:1:java.lang.String com.google.common.util.concurrent.ThreadFactoryBuilder.access$000(java.lang.String,java.lang.Object[]):0 -> newThread
    1:1:java.lang.Thread newThread(java.lang.Runnable):0 -> newThread
    2:2:java.lang.Thread newThread(java.lang.Runnable):0:0 -> newThread
com.google.common.util.concurrent.TimeoutFuture -> com.google.common.util.concurrent.b7:
    java.util.concurrent.ScheduledFuture timer -> i
    com.google.common.util.concurrent.ListenableFuture delegateRef -> h
    com.google.common.util.concurrent.ListenableFuture access$000(com.google.common.util.concurrent.TimeoutFuture) -> t
    java.util.concurrent.ScheduledFuture access$100(com.google.common.util.concurrent.TimeoutFuture) -> u
    java.util.concurrent.ScheduledFuture access$102(com.google.common.util.concurrent.TimeoutFuture,java.util.concurrent.ScheduledFuture) -> v
    com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService) -> w
com.google.common.util.concurrent.TimeoutFuture$1 -> com.google.common.util.concurrent.y6:
com.google.common.util.concurrent.TimeoutFuture$Fire -> com.google.common.util.concurrent.z6:
    com.google.common.util.concurrent.TimeoutFuture timeoutFutureRef -> a
com.google.common.util.concurrent.TimeoutFuture$TimeoutFutureException -> com.google.common.util.concurrent.a7:
    1:1:void <init>(java.lang.String):0:0 -> <init>
    1:1:void <init>(java.lang.String,com.google.common.util.concurrent.TimeoutFuture$1):0 -> <init>
com.google.common.util.concurrent.TrustedListenableFutureTask -> com.google.common.util.concurrent.e7:
    com.google.common.util.concurrent.InterruptibleTask task -> h
    com.google.common.util.concurrent.TrustedListenableFutureTask create(java.lang.Runnable,java.lang.Object) -> t
com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask -> com.google.common.util.concurrent.c7:
    com.google.common.util.concurrent.TrustedListenableFutureTask this$0 -> e
    com.google.common.util.concurrent.AsyncCallable callable -> d
    1:1:void afterRanInterruptibly(com.google.common.util.concurrent.ListenableFuture,java.lang.Throwable):0:0 -> a
    1:1:void afterRanInterruptibly(java.lang.Object,java.lang.Throwable):0 -> a
    boolean isDone() -> c
    1:1:com.google.common.util.concurrent.ListenableFuture runInterruptibly():0:0 -> d
    1:1:java.lang.Object runInterruptibly():0 -> d
    java.lang.String toPendingString() -> e
com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask -> com.google.common.util.concurrent.d7:
    com.google.common.util.concurrent.TrustedListenableFutureTask this$0 -> e
    java.util.concurrent.Callable callable -> d
    void afterRanInterruptibly(java.lang.Object,java.lang.Throwable) -> a
    boolean isDone() -> c
    java.lang.Object runInterruptibly() -> d
    java.lang.String toPendingString() -> e
com.google.common.util.concurrent.UncaughtExceptionHandlers$Exiter -> com.google.common.util.concurrent.f7:
    java.lang.Runtime runtime -> a
    java.util.logging.Logger logger -> b
com.google.common.util.concurrent.WrappingScheduledExecutorService -> com.google.common.util.concurrent.g7:
    java.util.concurrent.ScheduledExecutorService delegate -> b
    java.util.concurrent.ExecutorService com.google.common.util.concurrent.WrappingExecutorService.delegate -> a
    1:1:void com.google.common.util.concurrent.WrappingExecutorService.<init>(java.util.concurrent.ExecutorService):0:0 -> <init>
    1:1:void <init>(java.util.concurrent.ScheduledExecutorService):0 -> <init>
    2:2:void <init>(java.util.concurrent.ScheduledExecutorService):0:0 -> <init>
    com.google.common.collect.ImmutableList com.google.common.util.concurrent.WrappingExecutorService.wrapTasks(java.util.Collection) -> a
    1:1:boolean com.google.common.util.concurrent.WrappingExecutorService.awaitTermination(long,java.util.concurrent.TimeUnit):0:0 -> awaitTermination
    1:1:boolean com.google.common.util.concurrent.WrappingExecutorService.awaitTermination(long,java.util.concurrent.TimeUnit):0 -> awaitTermination
    1:1:void com.google.common.util.concurrent.WrappingExecutorService.execute(java.lang.Runnable):0:0 -> execute
    1:1:void com.google.common.util.concurrent.WrappingExecutorService.execute(java.lang.Runnable):0 -> execute
    2:2:java.lang.Runnable com.google.common.util.concurrent.MoreExecutors$4.wrapTask(java.lang.Runnable):0:0 -> execute
    2:2:void com.google.common.util.concurrent.WrappingExecutorService.execute(java.lang.Runnable):0 -> execute
    2:2:void com.google.common.util.concurrent.WrappingExecutorService.execute(java.lang.Runnable):0 -> execute
    3:3:java.lang.Runnable com.google.common.util.concurrent.Callables.threadRenaming(java.lang.Runnable,com.google.common.base.Supplier):0:0 -> execute
    3:3:java.lang.Runnable com.google.common.util.concurrent.MoreExecutors$4.wrapTask(java.lang.Runnable):0 -> execute
    3:3:void com.google.common.util.concurrent.WrappingExecutorService.execute(java.lang.Runnable):0 -> execute
    3:3:void com.google.common.util.concurrent.WrappingExecutorService.execute(java.lang.Runnable):0 -> execute
    4:4:void com.google.common.util.concurrent.WrappingExecutorService.execute(java.lang.Runnable):0:0 -> execute
    4:4:void com.google.common.util.concurrent.WrappingExecutorService.execute(java.lang.Runnable):0 -> execute
    1:1:java.util.List com.google.common.util.concurrent.WrappingExecutorService.invokeAll(java.util.Collection):0:0 -> invokeAll
    1:1:java.util.List com.google.common.util.concurrent.WrappingExecutorService.invokeAll(java.util.Collection):0 -> invokeAll
    2:2:java.util.List com.google.common.util.concurrent.WrappingExecutorService.invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit):0:0 -> invokeAll
    2:2:java.util.List com.google.common.util.concurrent.WrappingExecutorService.invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit):0 -> invokeAll
    1:1:java.lang.Object com.google.common.util.concurrent.WrappingExecutorService.invokeAny(java.util.Collection):0:0 -> invokeAny
    1:1:java.lang.Object com.google.common.util.concurrent.WrappingExecutorService.invokeAny(java.util.Collection):0 -> invokeAny
    2:2:java.lang.Object com.google.common.util.concurrent.WrappingExecutorService.invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit):0:0 -> invokeAny
    2:2:java.lang.Object com.google.common.util.concurrent.WrappingExecutorService.invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit):0 -> invokeAny
    1:1:boolean com.google.common.util.concurrent.WrappingExecutorService.isShutdown():0:0 -> isShutdown
    1:1:boolean com.google.common.util.concurrent.WrappingExecutorService.isShutdown():0 -> isShutdown
    1:1:boolean com.google.common.util.concurrent.WrappingExecutorService.isTerminated():0:0 -> isTerminated
    1:1:boolean com.google.common.util.concurrent.WrappingExecutorService.isTerminated():0 -> isTerminated
    1:1:java.lang.Runnable com.google.common.util.concurrent.MoreExecutors$4.wrapTask(java.lang.Runnable):0:0 -> schedule
    1:1:java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit):0 -> schedule
    2:2:java.lang.Runnable com.google.common.util.concurrent.Callables.threadRenaming(java.lang.Runnable,com.google.common.base.Supplier):0:0 -> schedule
    2:2:java.lang.Runnable com.google.common.util.concurrent.MoreExecutors$4.wrapTask(java.lang.Runnable):0 -> schedule
    2:2:java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit):0 -> schedule
    3:3:java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit):0:0 -> schedule
    4:4:java.util.concurrent.Callable com.google.common.util.concurrent.MoreExecutors$4.wrapTask(java.util.concurrent.Callable):0:0 -> schedule
    4:4:java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit):0 -> schedule
    5:5:java.util.concurrent.Callable com.google.common.util.concurrent.Callables.threadRenaming(java.util.concurrent.Callable,com.google.common.base.Supplier):0:0 -> schedule
    5:5:java.util.concurrent.Callable com.google.common.util.concurrent.MoreExecutors$4.wrapTask(java.util.concurrent.Callable):0 -> schedule
    5:5:java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit):0 -> schedule
    6:6:java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit):0:0 -> schedule
    1:1:java.lang.Runnable com.google.common.util.concurrent.MoreExecutors$4.wrapTask(java.lang.Runnable):0:0 -> scheduleAtFixedRate
    1:1:java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit):0 -> scheduleAtFixedRate
    2:2:java.lang.Runnable com.google.common.util.concurrent.Callables.threadRenaming(java.lang.Runnable,com.google.common.base.Supplier):0:0 -> scheduleAtFixedRate
    2:2:java.lang.Runnable com.google.common.util.concurrent.MoreExecutors$4.wrapTask(java.lang.Runnable):0 -> scheduleAtFixedRate
    2:2:java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit):0 -> scheduleAtFixedRate
    3:3:java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit):0:0 -> scheduleAtFixedRate
    1:1:java.lang.Runnable com.google.common.util.concurrent.MoreExecutors$4.wrapTask(java.lang.Runnable):0:0 -> scheduleWithFixedDelay
    1:1:java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit):0 -> scheduleWithFixedDelay
    2:2:java.lang.Runnable com.google.common.util.concurrent.Callables.threadRenaming(java.lang.Runnable,com.google.common.base.Supplier):0:0 -> scheduleWithFixedDelay
    2:2:java.lang.Runnable com.google.common.util.concurrent.MoreExecutors$4.wrapTask(java.lang.Runnable):0 -> scheduleWithFixedDelay
    2:2:java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit):0 -> scheduleWithFixedDelay
    3:3:java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit):0:0 -> scheduleWithFixedDelay
    1:1:void com.google.common.util.concurrent.WrappingExecutorService.shutdown():0:0 -> shutdown
    1:1:void com.google.common.util.concurrent.WrappingExecutorService.shutdown():0 -> shutdown
    1:1:java.util.List com.google.common.util.concurrent.WrappingExecutorService.shutdownNow():0:0 -> shutdownNow
    1:1:java.util.List com.google.common.util.concurrent.WrappingExecutorService.shutdownNow():0 -> shutdownNow
    1:1:java.util.concurrent.Future com.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable):0:0 -> submit
    1:1:java.util.concurrent.Future com.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable):0 -> submit
    2:2:java.lang.Runnable com.google.common.util.concurrent.MoreExecutors$4.wrapTask(java.lang.Runnable):0:0 -> submit
    2:2:java.util.concurrent.Future com.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable):0 -> submit
    2:2:java.util.concurrent.Future com.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable):0 -> submit
    3:3:java.lang.Runnable com.google.common.util.concurrent.Callables.threadRenaming(java.lang.Runnable,com.google.common.base.Supplier):0:0 -> submit
    3:3:java.lang.Runnable com.google.common.util.concurrent.MoreExecutors$4.wrapTask(java.lang.Runnable):0 -> submit
    3:3:java.util.concurrent.Future com.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable):0 -> submit
    3:3:java.util.concurrent.Future com.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable):0 -> submit
    4:4:java.util.concurrent.Future com.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable):0:0 -> submit
    4:4:java.util.concurrent.Future com.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable):0 -> submit
    5:5:java.util.concurrent.Future com.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable,java.lang.Object):0:0 -> submit
    5:5:java.util.concurrent.Future com.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable,java.lang.Object):0 -> submit
    6:6:java.lang.Runnable com.google.common.util.concurrent.MoreExecutors$4.wrapTask(java.lang.Runnable):0:0 -> submit
    6:6:java.util.concurrent.Future com.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable,java.lang.Object):0 -> submit
    6:6:java.util.concurrent.Future com.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable,java.lang.Object):0 -> submit
    7:7:java.lang.Runnable com.google.common.util.concurrent.Callables.threadRenaming(java.lang.Runnable,com.google.common.base.Supplier):0:0 -> submit
    7:7:java.lang.Runnable com.google.common.util.concurrent.MoreExecutors$4.wrapTask(java.lang.Runnable):0 -> submit
    7:7:java.util.concurrent.Future com.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable,java.lang.Object):0 -> submit
    7:7:java.util.concurrent.Future com.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable,java.lang.Object):0 -> submit
    8:8:java.util.concurrent.Future com.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable,java.lang.Object):0:0 -> submit
    8:8:java.util.concurrent.Future com.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable,java.lang.Object):0 -> submit
    9:9:java.util.concurrent.Future com.google.common.util.concurrent.WrappingExecutorService.submit(java.util.concurrent.Callable):0:0 -> submit
    9:9:java.util.concurrent.Future com.google.common.util.concurrent.WrappingExecutorService.submit(java.util.concurrent.Callable):0 -> submit
    java.util.concurrent.Callable com.google.common.util.concurrent.WrappingExecutorService.wrapTask(java.util.concurrent.Callable) -> wrapTask
com.google.common.xml.XmlEscapers -> com.google.common.xml.XmlEscapers:
    com.google.common.escape.Escaper XML_CONTENT_ESCAPER -> a
    com.google.common.escape.Escaper XML_ATTRIBUTE_ESCAPER -> b
com.google.j2objc.annotations.LoopTranslation$LoopStyle -> com.google.j2objc.annotations.LoopTranslation$LoopStyle:
    com.google.j2objc.annotations.LoopTranslation$LoopStyle[] $VALUES -> a
com.google.j2objc.annotations.ReflectionSupport$Level -> com.google.j2objc.annotations.ReflectionSupport$Level:
    com.google.j2objc.annotations.ReflectionSupport$Level[] $VALUES -> a
com.google.thirdparty.publicsuffix.PublicSuffixType -> com.google.thirdparty.publicsuffix.PublicSuffixType:
    com.google.thirdparty.publicsuffix.PublicSuffixType[] $VALUES -> c
    char leafNodeCode -> b
    char innerNodeCode -> a
    1:1:char getInnerNodeCode():0:0 -> a
    1:1:com.google.thirdparty.publicsuffix.PublicSuffixType fromCode(char):0 -> a
    2:2:char getLeafNodeCode():0:0 -> a
    2:2:com.google.thirdparty.publicsuffix.PublicSuffixType fromCode(char):0 -> a
    3:3:com.google.thirdparty.publicsuffix.PublicSuffixType fromCode(char):0:0 -> a
com.google.thirdparty.publicsuffix.TrieParser -> com.google.thirdparty.publicsuffix.a:
    com.google.common.base.Joiner PREFIX_JOINER -> a
    1:1:java.lang.CharSequence reverse(java.lang.CharSequence):0:0 -> a
    1:1:int doParseTrieToBuilder(java.util.List,java.lang.CharSequence,int,com.google.common.collect.ImmutableMap$Builder):0 -> a
    2:2:int doParseTrieToBuilder(java.util.List,java.lang.CharSequence,int,com.google.common.collect.ImmutableMap$Builder):0:0 -> a
    com.google.common.collect.ImmutableMap parseTrie(java.lang.CharSequence) -> b
javax.annotation.meta.When -> javax.annotation.meta.When:
    javax.annotation.meta.When[] $VALUES -> a
org.checkerframework.checker.formatter.FormatUtil -> org.checkerframework.checker.formatter.FormatUtil:
    java.util.regex.Pattern fsPattern -> a
    1:1:org.checkerframework.checker.formatter.FormatUtil$Conversion[] parse(java.lang.String):0:0 -> formatParameterCategories
    1:1:org.checkerframework.checker.formatter.qual.ConversionCategory[] formatParameterCategories(java.lang.String):0 -> formatParameterCategories
    2:2:char conversionCharFromFormat(java.util.regex.Matcher):0:0 -> formatParameterCategories
    2:2:org.checkerframework.checker.formatter.FormatUtil$Conversion[] parse(java.lang.String):0 -> formatParameterCategories
    2:2:org.checkerframework.checker.formatter.qual.ConversionCategory[] formatParameterCategories(java.lang.String):0 -> formatParameterCategories
    3:3:org.checkerframework.checker.formatter.FormatUtil$Conversion[] parse(java.lang.String):0:0 -> formatParameterCategories
    3:3:org.checkerframework.checker.formatter.qual.ConversionCategory[] formatParameterCategories(java.lang.String):0 -> formatParameterCategories
    4:4:int indexFromFormat(java.util.regex.Matcher):0:0 -> formatParameterCategories
    4:4:org.checkerframework.checker.formatter.FormatUtil$Conversion[] parse(java.lang.String):0 -> formatParameterCategories
    4:4:org.checkerframework.checker.formatter.qual.ConversionCategory[] formatParameterCategories(java.lang.String):0 -> formatParameterCategories
    5:5:org.checkerframework.checker.formatter.FormatUtil$Conversion[] parse(java.lang.String):0:0 -> formatParameterCategories
    5:5:org.checkerframework.checker.formatter.qual.ConversionCategory[] formatParameterCategories(java.lang.String):0 -> formatParameterCategories
    6:6:org.checkerframework.checker.formatter.qual.ConversionCategory[] formatParameterCategories(java.lang.String):0:0 -> formatParameterCategories
org.checkerframework.checker.formatter.FormatUtil$Conversion -> org.checkerframework.checker.formatter.a:
    org.checkerframework.checker.formatter.qual.ConversionCategory cath -> b
    int index -> a
    org.checkerframework.checker.formatter.qual.ConversionCategory category() -> a
    int index() -> b
org.checkerframework.checker.formatter.FormatUtil$ExcessiveOrMissingFormatArgumentException -> org.checkerframework.checker.formatter.FormatUtil$ExcessiveOrMissingFormatArgumentException:
    int found -> b
    int expected -> a
org.checkerframework.checker.formatter.FormatUtil$IllegalFormatConversionCategoryException -> org.checkerframework.checker.formatter.FormatUtil$IllegalFormatConversionCategoryException:
    org.checkerframework.checker.formatter.qual.ConversionCategory found -> b
    org.checkerframework.checker.formatter.qual.ConversionCategory expected -> a
org.checkerframework.checker.formatter.qual.ConversionCategory -> org.checkerframework.checker.formatter.qual.ConversionCategory:
    org.checkerframework.checker.formatter.qual.ConversionCategory[] $VALUES -> a
    java.util.Set arrayToSet(java.lang.Object[]) -> a
    1:1:java.lang.String className(java.lang.Class):0:0 -> toString
    1:1:java.lang.String toString():0 -> toString
    2:2:java.lang.String toString():0:0 -> toString
org.checkerframework.checker.i18nformatter.I18nFormatUtil$I18nConversion -> org.checkerframework.checker.i18nformatter.a:
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory category -> b
    int index -> a
org.checkerframework.checker.i18nformatter.I18nFormatUtil$MessageFormatParser -> org.checkerframework.checker.i18nformatter.b:
    java.util.Locale locale -> b
    java.lang.String[] DATE_TIME_MODIFIER_KEYWORDS -> h
    java.util.List argumentIndices -> d
    java.util.List categories -> c
    java.lang.String[] NUMBER_MODIFIER_KEYWORDS -> g
    int numFormat -> e
    java.lang.String[] TYPE_KEYWORDS -> f
    int maxOffset -> a
    int findKeyword(java.lang.String,java.lang.String[]) -> a
    1:1:void applyPattern(java.lang.String):0:0 -> parse
    1:1:org.checkerframework.checker.i18nformatter.I18nFormatUtil$I18nConversion[] parse(java.lang.String):0 -> parse
    2:2:void makeFormat(int,java.lang.StringBuilder[]):0:0 -> parse
    2:2:void applyPattern(java.lang.String):0 -> parse
    2:2:org.checkerframework.checker.i18nformatter.I18nFormatUtil$I18nConversion[] parse(java.lang.String):0 -> parse
    3:3:void applyPattern(java.lang.String):0:0 -> parse
    3:3:org.checkerframework.checker.i18nformatter.I18nFormatUtil$I18nConversion[] parse(java.lang.String):0 -> parse
    4:4:void makeFormat(int,java.lang.StringBuilder[]):0:0 -> parse
    4:4:void applyPattern(java.lang.String):0 -> parse
    4:4:org.checkerframework.checker.i18nformatter.I18nFormatUtil$I18nConversion[] parse(java.lang.String):0 -> parse
    5:5:void applyPattern(java.lang.String):0:0 -> parse
    5:5:org.checkerframework.checker.i18nformatter.I18nFormatUtil$I18nConversion[] parse(java.lang.String):0 -> parse
    6:6:org.checkerframework.checker.i18nformatter.I18nFormatUtil$I18nConversion[] parse(java.lang.String):0:0 -> parse
org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory -> org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory:
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] $VALUES -> b
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] namedCategories -> a
    java.util.Set arrayToSet(java.lang.Object[]) -> a
org.checkerframework.checker.nullness.NullnessUtil -> org.checkerframework.checker.nullness.NullnessUtil:
    1:1:void checkIfArray(java.lang.Object):0:0 -> a
    1:1:java.lang.Object[] castNonNullArray(java.lang.Object[]):0 -> a
org.checkerframework.checker.regex.RegexUtil -> org.checkerframework.checker.regex.RegexUtil:
    int getGroupCount(java.util.regex.Pattern) -> a
    java.lang.String regexErrorMessage(java.lang.String,int,int) -> b
org.checkerframework.checker.regex.RegexUtil$CheckedPatternSyntaxException -> org.checkerframework.checker.regex.RegexUtil$CheckedPatternSyntaxException:
    java.util.regex.PatternSyntaxException pse -> a
org.checkerframework.checker.signedness.SignednessUtil -> org.checkerframework.checker.signedness.SignednessUtil:
    java.math.BigInteger toUnsignedBigInteger(long) -> a
org.checkerframework.checker.units.qual.Prefix -> org.checkerframework.checker.units.qual.Prefix:
    org.checkerframework.checker.units.qual.Prefix[] $VALUES -> a
org.checkerframework.dataflow.qual.Pure$Kind -> org.checkerframework.dataflow.qual.Pure$Kind:
    org.checkerframework.dataflow.qual.Pure$Kind[] $VALUES -> a
org.checkerframework.framework.qual.LiteralKind -> org.checkerframework.framework.qual.LiteralKind:
    org.checkerframework.framework.qual.LiteralKind[] $VALUES -> a
org.checkerframework.framework.qual.TypeKind -> org.checkerframework.framework.qual.TypeKind:
    org.checkerframework.framework.qual.TypeKind[] $VALUES -> a
org.checkerframework.framework.qual.TypeUseLocation -> org.checkerframework.framework.qual.TypeUseLocation:
    org.checkerframework.framework.qual.TypeUseLocation[] $VALUES -> a
org.lineageos.eleven.-$$Lambda$MusicPlaybackService$6WYGypSn0_S3Uae_T5l8xVvYETQ -> org.lineageos.eleven.a:
    org.lineageos.eleven.MusicPlaybackService f$0 -> a
    1:1:void org.lineageos.eleven.MusicPlaybackService.lambda$setShakeToPlayEnabled$0():0:0 -> hearShake
    1:1:void org.lineageos.eleven.MusicPlaybackService.lambda$setShakeToPlayEnabled$0$MusicPlaybackService():0 -> hearShake
    1:1:void hearShake():0 -> hearShake
org.lineageos.eleven.Config$IdType -> org.lineageos.eleven.Config$IdType:
    org.lineageos.eleven.Config$IdType[] $VALUES -> a
org.lineageos.eleven.Config$SmartPlaylistType -> org.lineageos.eleven.Config$SmartPlaylistType:
    org.lineageos.eleven.Config$SmartPlaylistType[] $VALUES -> a
org.lineageos.eleven.IElevenService$Stub$Proxy -> org.lineageos.eleven.b:
    android.os.IBinder mRemote -> a
    org.lineageos.eleven.IElevenService sDefaultImpl -> b
org.lineageos.eleven.MediaButtonIntentReceiver -> org.lineageos.eleven.MediaButtonIntentReceiver:
    android.util.SparseArray KEY_CODE_MAPPING -> c
org.lineageos.eleven.MusicPlaybackService -> org.lineageos.eleven.MusicPlaybackService:
    java.lang.String mFileToPlay -> f
    boolean mShutdownScheduled -> i
    android.content.SharedPreferences mPreferences -> p
    android.os.PowerManager$WakeLock mHeadsetHookWakeLock -> V
    java.lang.String mCachedKey -> M
    org.lineageos.eleven.appwidgets.AppWidgetLarge mAppWidgetLarge -> c
    android.media.AudioAttributes mAudioAttributes -> n
    boolean mIsBound -> q
    int mMediaMountedCount -> C
    android.app.PendingIntent mShutdownIntent -> h
    long mNotificationPostTime -> u
    org.lineageos.eleven.MusicPlaybackService$QueueUpdateTask mQueueUpdateTask -> O
    int mCardId -> y
    java.util.ArrayList mPlaylist -> H
    android.media.session.MediaSession mSession -> x
    android.media.AudioFocusRequest mAudioFocusRequest -> o
    boolean mReadGranted -> U
    boolean mQueueIsSaveable -> v
    org.lineageos.eleven.appwidgets.AppWidgetLargeAlternate mAppWidgetLargeAlternate -> d
    android.database.Cursor mCursor -> k
    int mShuffleMode -> D
    boolean mIsSupposedToBePlaying -> r
    long[] mAutoShuffleList -> I
    int mPlayPos -> z
    java.lang.String mLyrics -> G
    android.os.IBinder mBinder -> a
    org.lineageos.eleven.MusicPlaybackService$Shuffler mShuffler -> b0
    org.lineageos.eleven.provider.MusicPlaybackState mPlaybackStateStore -> S
    java.lang.String[] PROJECTION -> Y
    java.util.LinkedList mHistory -> a0
    org.lineageos.eleven.utils.colors.BitmapWithColors[] mCachedBitmapWithColors -> N
    boolean mPausedByTransientLossOfFocus -> w
    android.database.Cursor mAlbumCursor -> l
    int mRepeatMode -> E
    org.lineageos.eleven.MusicPlaybackService$MultiPlayer mPlayer -> e
    int mNextPlayPos -> A
    org.lineageos.eleven.appwidgets.AppWidgetSmall mAppWidgetSmall -> b
    org.lineageos.eleven.provider.RecentStore mRecentsCache -> Q
    android.content.BroadcastReceiver mIntentReceiver -> W
    long mLastPlayedTime -> s
    android.app.NotificationManager mNotificationManager -> j
    org.lineageos.eleven.utils.ShakeDetector mShakeDetector -> T
    android.content.BroadcastReceiver mUnmountReceiver -> L
    android.os.HandlerThread mHandlerThread -> K
    java.lang.String[] ALBUM_PROJECTION -> Z
    int mServiceStartId -> F
    android.app.AlarmManager mAlarmManager -> g
    int mOpenFailedCounter -> B
    org.lineageos.eleven.provider.SongPlayCount mSongPlayCountCache -> R
    java.lang.String[] PROJECTION_MATRIX -> c0
    org.lineageos.eleven.cache.ImageFetcher mImageFetcher -> P
    android.database.ContentObserver mMediaStoreObserver -> X
    int mNotifyMode -> t
    org.lineageos.eleven.MusicPlaybackService$MusicPlayerHandler mPlayerHandler -> J
    android.media.AudioManager mAudioManager -> m
    void addToPlayList(long[],int,long,org.lineageos.eleven.Config$IdType) -> A
    android.app.Notification buildNotification() -> B
    void closeCursor() -> C
    1:1:boolean wasRecentlyUsed(int,int):0:0 -> D
    1:1:void doAutoShuffleUpdate():0 -> D
    2:2:void doAutoShuffleUpdate():0:0 -> D
    int getCardId() -> E
    int getNextPosition(boolean) -> F
    java.lang.String getValueForDownloadedFile(android.content.Context,android.net.Uri,java.lang.String) -> G
    1:1:void cycleRepeat():0:0 -> H
    1:1:void handleCommandIntent(android.content.Intent):0 -> H
    2:2:void handleCommandIntent(android.content.Intent):0:0 -> H
    3:3:void cycleShuffle():0:0 -> H
    3:3:void handleCommandIntent(android.content.Intent):0 -> H
    4:4:void handleCommandIntent(android.content.Intent):0:0 -> H
    5:5:void togglePlayPause():0:0 -> H
    5:5:void handleCommandIntent(android.content.Intent):0 -> H
    6:6:void handleCommandIntent(android.content.Intent):0:0 -> H
    void handleHeadsetHookClick(long) -> I
    boolean makeAutoShuffleList() -> J
    1:1:void updateMediaSession(java.lang.String):0:0 -> K
    1:1:void notifyChange(java.lang.String):0 -> K
    2:2:void updateMediaSessionQueue():0:0 -> K
    2:2:void updateMediaSession(java.lang.String):0 -> K
    2:2:void notifyChange(java.lang.String):0 -> K
    3:3:void updateMediaSession(java.lang.String):0:0 -> K
    3:3:void notifyChange(java.lang.String):0 -> K
    4:4:void notifyChange(java.lang.String):0:0 -> K
    5:5:void updateNotification():0:0 -> K
    5:5:void notifyChange(java.lang.String):0 -> K
    6:6:boolean recentlyPlayed():0:0 -> K
    6:6:void updateNotification():0 -> K
    6:6:void notifyChange(java.lang.String):0 -> K
    7:7:void updateNotification():0:0 -> K
    7:7:void notifyChange(java.lang.String):0 -> K
    8:8:void notifyChange(java.lang.String):0:0 -> K
    void openCurrentAndMaybeNext(boolean) -> L
    android.database.Cursor openCursorAndGoToFirst(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[]) -> M
    1:1:void cancelNotification():0:0 -> N
    1:1:void releaseServiceUiAndStop():0 -> N
    2:2:void releaseServiceUiAndStop():0:0 -> N
    1:1:void openCurrentAndNext():0:0 -> O
    1:1:void reloadQueue():0 -> O
    2:2:void reloadQueue():0:0 -> O
    1:1:void openCurrentAndNext():0:0 -> P
    1:1:int removeTracksInternal(int,int):0 -> P
    2:2:int removeTracksInternal(int,int):0:0 -> P
    android.app.PendingIntent retrievePlaybackAction(java.lang.String) -> Q
    void saveQueue(boolean) -> R
    void scheduleDelayedShutdown() -> S
    1:1:void cancelShutdown():0:0 -> T
    1:1:void setIsSupposedToBePlaying(boolean,boolean):0 -> T
    2:2:void setIsSupposedToBePlaying(boolean,boolean):0:0 -> T
    void setNextTrack() -> U
    void setNextTrack(int) -> V
    void stop(boolean) -> W
    void stopShakeDetector(boolean) -> X
    void updateAlbumCursor() -> Y
    void updateCursor(long) -> Z
    void access$100(org.lineageos.eleven.MusicPlaybackService) -> a
    void updateCursor(java.lang.String,java.lang.String[]) -> a0
    org.lineageos.eleven.appwidgets.AppWidgetSmall access$1100(org.lineageos.eleven.MusicPlaybackService) -> b
    void updateCursorForDownloadedFile(android.net.Uri) -> b0
    org.lineageos.eleven.appwidgets.AppWidgetLarge access$1200(org.lineageos.eleven.MusicPlaybackService) -> c
    org.lineageos.eleven.appwidgets.AppWidgetLargeAlternate access$1300(org.lineageos.eleven.MusicPlaybackService) -> d
    void access$1400(org.lineageos.eleven.MusicPlaybackService,android.content.Intent) -> e
    1:1:void openCurrentAndNext():0:0 -> enqueue
    1:1:void enqueue(long[],int,long,org.lineageos.eleven.Config$IdType):0 -> enqueue
    2:2:void enqueue(long[],int,long,org.lineageos.eleven.Config$IdType):0:0 -> enqueue
    org.lineageos.eleven.MusicPlaybackService$MultiPlayer access$1500(org.lineageos.eleven.MusicPlaybackService) -> f
    1:1:void openCurrentAndNext():0:0 -> g
    1:1:void access$1700(org.lineageos.eleven.MusicPlaybackService):0 -> g
    1:1:void openCurrentAndNext():0:0 -> gotoNext
    1:1:void gotoNext(boolean):0 -> gotoNext
    2:2:void gotoNext(boolean):0:0 -> gotoNext
    int access$1800(org.lineageos.eleven.MusicPlaybackService) -> h
    void access$1900(org.lineageos.eleven.MusicPlaybackService) -> i
    void access$200(org.lineageos.eleven.MusicPlaybackService,long) -> j
    android.database.Cursor access$2000(org.lineageos.eleven.MusicPlaybackService) -> k
    android.database.Cursor access$2002(org.lineageos.eleven.MusicPlaybackService,android.database.Cursor) -> l
    int access$2100(org.lineageos.eleven.MusicPlaybackService) -> m
    java.util.ArrayList access$2200(org.lineageos.eleven.MusicPlaybackService) -> n
    void access$2300(org.lineageos.eleven.MusicPlaybackService,long) -> o
    1:1:void setUpMediaSession():0:0 -> onCreate
    1:1:void onCreate():0 -> onCreate
    2:2:void onCreate():0:0 -> onCreate
    1:1:void cancelShutdown():0:0 -> onStartCommand
    1:1:int onStartCommand(android.content.Intent,int,int):0 -> onStartCommand
    1:1:void openCurrentAndNext():0:0 -> open
    1:1:void open(long[],int,long,org.lineageos.eleven.Config$IdType):0 -> open
    2:2:void open(long[],int,long,org.lineageos.eleven.Config$IdType):0:0 -> open
    1:1:void updateCursor(android.net.Uri):0:0 -> openFile
    1:1:boolean openFile(java.lang.String):0 -> openFile
    2:2:boolean openFile(java.lang.String):0:0 -> openFile
    3:3:void sendErrorMessage(java.lang.String):0:0 -> openFile
    3:3:boolean openFile(java.lang.String):0 -> openFile
    4:4:boolean openFile(java.lang.String):0:0 -> openFile
    int access$2400(org.lineageos.eleven.MusicPlaybackService) -> p
    1:1:void startShakeDetector():0:0 -> play
    1:1:void play():0 -> play
    2:2:void play():0:0 -> play
    1:1:void openCurrent():0:0 -> prev
    1:1:void prev(boolean):0 -> prev
    2:2:void prev(boolean):0:0 -> prev
    java.lang.String access$2502(org.lineageos.eleven.MusicPlaybackService,java.lang.String) -> q
    android.os.PowerManager$WakeLock access$2700(org.lineageos.eleven.MusicPlaybackService) -> r
    android.media.session.MediaSession access$2900(org.lineageos.eleven.MusicPlaybackService) -> s
    1:1:void openCurrentAndNext():0:0 -> setQueuePosition
    1:1:void setQueuePosition(int):0 -> setQueuePosition
    2:2:void setQueuePosition(int):0:0 -> setQueuePosition
    1:1:void startShakeDetector():0:0 -> setShakeToPlayEnabled
    1:1:void setShakeToPlayEnabled(boolean):0 -> setShakeToPlayEnabled
    2:2:void setShakeToPlayEnabled(boolean):0:0 -> setShakeToPlayEnabled
    1:1:void openCurrentAndNext():0:0 -> setShuffleMode
    1:1:void setShuffleMode(int):0 -> setShuffleMode
    2:2:void setShuffleMode(int):0:0 -> setShuffleMode
    void access$300(org.lineageos.eleven.MusicPlaybackService,boolean) -> t
    boolean access$402(org.lineageos.eleven.MusicPlaybackService,boolean) -> u
    int access$508(org.lineageos.eleven.MusicPlaybackService) -> v
    int access$602(org.lineageos.eleven.MusicPlaybackService,int) -> w
    int access$700(org.lineageos.eleven.MusicPlaybackService) -> x
    void access$800(org.lineageos.eleven.MusicPlaybackService) -> y
    void access$900(org.lineageos.eleven.MusicPlaybackService,java.lang.String) -> z
org.lineageos.eleven.MusicPlaybackService$1 -> org.lineageos.eleven.c:
    org.lineageos.eleven.MusicPlaybackService this$0 -> a
org.lineageos.eleven.MusicPlaybackService$2 -> org.lineageos.eleven.d:
    org.lineageos.eleven.MusicPlaybackService this$0 -> a
org.lineageos.eleven.MusicPlaybackService$3 -> org.lineageos.eleven.e:
    org.lineageos.eleven.MusicPlaybackService this$0 -> a
org.lineageos.eleven.MusicPlaybackService$MediaStoreObserver -> org.lineageos.eleven.f:
    android.os.Handler mHandler -> a
    org.lineageos.eleven.MusicPlaybackService this$0 -> b
org.lineageos.eleven.MusicPlaybackService$MultiPlayer -> org.lineageos.eleven.h:
    org.lineageos.eleven.utils.SrtManager mSrtManager -> g
    android.media.AudioAttributes mAudioAttributes -> e
    android.os.Handler mHandler -> d
    java.lang.String mNextMediaPath -> h
    boolean mIsInitialized -> f
    java.lang.ref.WeakReference mService -> a
    android.media.MediaPlayer mCurrentMediaPlayer -> b
    android.media.MediaPlayer mNextMediaPlayer -> c
    android.os.Handler access$2800(org.lineageos.eleven.MusicPlaybackService$MultiPlayer) -> a
    void loadSrt(java.lang.String) -> b
    boolean setDataSourceImpl(android.media.MediaPlayer,java.lang.String) -> c
    1:1:int getAudioSessionId():0:0 -> setNextDataSource
    1:1:void setNextDataSource(java.lang.String):0 -> setNextDataSource
    2:2:void setNextDataSource(java.lang.String):0:0 -> setNextDataSource
org.lineageos.eleven.MusicPlaybackService$MultiPlayer$1 -> org.lineageos.eleven.g:
    org.lineageos.eleven.MusicPlaybackService$MultiPlayer this$0 -> h
org.lineageos.eleven.MusicPlaybackService$MusicPlayerHandler -> org.lineageos.eleven.i:
    float mCurrentVolume -> b
    java.lang.ref.WeakReference mService -> a
    int mHeadsetHookClickCounter -> c
    float access$1002(org.lineageos.eleven.MusicPlaybackService$MusicPlayerHandler,float) -> a
    1:1:void org.lineageos.eleven.MusicPlaybackService.access$2600(org.lineageos.eleven.MusicPlaybackService):0:0 -> handleMessage
    1:1:void handleMessage(android.os.Message):0 -> handleMessage
    2:2:void org.lineageos.eleven.MusicPlaybackService.togglePlayPause():0:0 -> handleMessage
    2:2:void org.lineageos.eleven.MusicPlaybackService.access$2600(org.lineageos.eleven.MusicPlaybackService):0 -> handleMessage
    2:2:void handleMessage(android.os.Message):0 -> handleMessage
    3:3:void handleMessage(android.os.Message):0:0 -> handleMessage
    4:4:void org.lineageos.eleven.MusicPlaybackService.sendErrorMessage(java.lang.String):0:0 -> handleMessage
    4:4:void org.lineageos.eleven.MusicPlaybackService.access$1600(org.lineageos.eleven.MusicPlaybackService,java.lang.String):0 -> handleMessage
    4:4:void handleMessage(android.os.Message):0 -> handleMessage
    5:5:void handleMessage(android.os.Message):0:0 -> handleMessage
org.lineageos.eleven.MusicPlaybackService$QueueUpdateTask -> org.lineageos.eleven.j:
    long[] mQueue -> a
    org.lineageos.eleven.MusicPlaybackService this$0 -> b
    1:1:java.util.List doInBackground(java.lang.Void[]):0:0 -> doInBackground
    1:1:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    1:1:void onPostExecute(java.util.List):0:0 -> onPostExecute
    1:1:void onPostExecute(java.lang.Object):0 -> onPostExecute
org.lineageos.eleven.MusicPlaybackService$ServiceStub -> org.lineageos.eleven.k:
    java.lang.ref.WeakReference mService -> a
    1:1:void <init>(org.lineageos.eleven.MusicPlaybackService):0:0 -> <init>
    1:1:void <init>(org.lineageos.eleven.MusicPlaybackService,org.lineageos.eleven.MusicPlaybackService$1):0 -> <init>
org.lineageos.eleven.MusicPlaybackService$Shuffler -> org.lineageos.eleven.l:
    java.util.TreeSet mPreviousNumbers -> b
    java.util.Random mRandom -> c
    int mPrevious -> d
    java.util.LinkedList mHistoryOfNumbers -> a
    1:1:void cleanUpHistory():0:0 -> nextInt
    1:1:int nextInt(int):0 -> nextInt
org.lineageos.eleven.MusicPlaybackService$TrackErrorInfo -> org.lineageos.eleven.m:
    long mId -> a
    java.lang.String mTrackName -> b
org.lineageos.eleven.adapters.AlbumAdapter -> org.lineageos.eleven.adapters.AlbumAdapter:
    org.lineageos.eleven.ui.MusicHolder$DataHolder[] mData -> c
    java.util.List mAlbums -> d
    org.lineageos.eleven.widgets.IPopupMenuCallback$IListener mListener -> e
    org.lineageos.eleven.cache.ImageFetcher mImageFetcher -> b
    int mColumns -> f
    int mPadding -> g
    android.content.Context mContext -> h
    int mLayoutId -> a
    1:1:void adjustPadding(int,android.view.View):0:0 -> getView
    1:1:android.view.View getView(int,android.view.View,android.view.ViewGroup):0 -> getView
    2:2:android.view.View getView(int,android.view.View,android.view.ViewGroup):0:0 -> getView
org.lineageos.eleven.adapters.AlbumArtPagerAdapter -> org.lineageos.eleven.adapters.AlbumArtPagerAdapter:
    int $r8$clinit -> j
    java.util.LinkedList sCacheAlbumArtistDetails -> i
    int mPlaylistLen -> h
    1:1:long getTrackId(int):0:0 -> getItem
    1:1:androidx.fragment.app.Fragment getItem(int):0 -> getItem
    2:2:androidx.fragment.app.Fragment getItem(int):0:0 -> getItem
org.lineageos.eleven.adapters.AlbumArtPagerAdapter$AlbumArtFragment -> org.lineageos.eleven.adapters.AlbumArtPagerAdapter$AlbumArtFragment:
    android.view.View mRootView -> Y
    org.lineageos.eleven.widgets.SquareImageView mImageView -> a0
    org.lineageos.eleven.adapters.AlbumArtPagerAdapter$AlbumArtistLoader mTask -> Z
    long mAudioId -> b0
    1:1:void loadImageAsync(org.lineageos.eleven.model.AlbumArtistDetails):0:0 -> F
    1:1:void access$300(org.lineageos.eleven.adapters.AlbumArtPagerAdapter$AlbumArtFragment,org.lineageos.eleven.model.AlbumArtistDetails):0 -> F
    1:1:void loadImageAsync(org.lineageos.eleven.model.AlbumArtistDetails):0:0 -> G
    1:1:void loadImageAsync():0 -> G
    2:2:void loadImageAsync():0:0 -> G
org.lineageos.eleven.adapters.AlbumArtPagerAdapter$AlbumArtistLoader -> org.lineageos.eleven.adapters.a:
    android.content.Context mContext -> a
    org.lineageos.eleven.adapters.AlbumArtPagerAdapter$AlbumArtFragment mFragment -> b
    1:1:org.lineageos.eleven.model.AlbumArtistDetails doInBackground(java.lang.Long[]):0:0 -> doInBackground
    1:1:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    1:1:void onPostExecute(org.lineageos.eleven.model.AlbumArtistDetails):0:0 -> onPostExecute
    1:1:void onPostExecute(java.lang.Object):0 -> onPostExecute
org.lineageos.eleven.adapters.AlbumDetailSongAdapter -> org.lineageos.eleven.adapters.AlbumDetailSongAdapter:
    org.lineageos.eleven.ui.fragments.AlbumDetailFragment mFragment -> g
org.lineageos.eleven.adapters.AlbumDetailSongAdapter$AlbumHolder -> org.lineageos.eleven.adapters.b:
    android.widget.TextView duration -> a
    android.content.Context context -> b
org.lineageos.eleven.adapters.ArtistAdapter -> org.lineageos.eleven.adapters.ArtistAdapter:
    org.lineageos.eleven.ui.MusicHolder$DataHolder[] mData -> c
    org.lineageos.eleven.cache.ImageFetcher mImageFetcher -> b
    org.lineageos.eleven.widgets.IPopupMenuCallback$IListener mListener -> d
    int mLayoutId -> a
org.lineageos.eleven.adapters.ArtistDetailAlbumAdapter -> org.lineageos.eleven.adapters.ArtistDetailAlbumAdapter:
    android.view.LayoutInflater mInflater -> e
    java.util.List mAlbums -> f
    org.lineageos.eleven.widgets.IPopupMenuCallback$IListener mListener -> g
    org.lineageos.eleven.cache.ImageFetcher mImageFetcher -> d
    int mListMargin -> h
    android.app.Activity mActivity -> c
    android.app.Activity access$000(org.lineageos.eleven.adapters.ArtistDetailAlbumAdapter) -> a
    1:1:void addAction(android.view.View,org.lineageos.eleven.model.Album):0:0 -> onBindViewHolder
    1:1:void onBindViewHolder(org.lineageos.eleven.adapters.ArtistDetailAlbumAdapter$ViewHolder,int):0 -> onBindViewHolder
org.lineageos.eleven.adapters.ArtistDetailAlbumAdapter$1 -> org.lineageos.eleven.adapters.c:
    org.lineageos.eleven.adapters.ArtistDetailAlbumAdapter this$0 -> b
    org.lineageos.eleven.model.Album val$album -> a
org.lineageos.eleven.adapters.ArtistDetailSongAdapter$ArtistHolder -> org.lineageos.eleven.adapters.d:
    android.widget.TextView album -> b
    android.widget.ImageView art -> a
org.lineageos.eleven.adapters.DetailSongAdapter -> org.lineageos.eleven.adapters.DetailSongAdapter:
    android.view.LayoutInflater mInflater -> b
    long mSourceId -> e
    org.lineageos.eleven.cache.ImageFetcher mImageFetcher -> a
    java.util.List mSongs -> c
    org.lineageos.eleven.widgets.IPopupMenuCallback$IListener mListener -> d
    org.lineageos.eleven.service.MusicPlaybackTrack mCurrentlyPlayingTrack -> f
org.lineageos.eleven.adapters.PagerAdapter -> org.lineageos.eleven.adapters.PagerAdapter:
    int mCurrentPage -> i
    android.content.Context mContext -> h
    android.util.SparseArray mFragmentArray -> f
    java.util.List mHolderList -> g
org.lineageos.eleven.adapters.PagerAdapter$1 -> org.lineageos.eleven.adapters.e:
org.lineageos.eleven.adapters.PagerAdapter$Holder -> org.lineageos.eleven.adapters.f:
    android.os.Bundle mParams -> b
    java.lang.String mClassName -> a
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(org.lineageos.eleven.adapters.PagerAdapter$1):0 -> <init>
org.lineageos.eleven.adapters.PagerAdapter$MusicFragments -> org.lineageos.eleven.adapters.PagerAdapter$MusicFragments:
    org.lineageos.eleven.adapters.PagerAdapter$MusicFragments[] $VALUES -> b
    java.lang.Class mFragmentClass -> a
org.lineageos.eleven.adapters.PlaylistAdapter -> org.lineageos.eleven.adapters.PlaylistAdapter:
    org.lineageos.eleven.ui.MusicHolder$DataHolder[] mData -> a
org.lineageos.eleven.adapters.ProfileSongAdapter -> org.lineageos.eleven.adapters.ProfileSongAdapter:
    int mHeaderId -> f
    void insertHeader() -> a
org.lineageos.eleven.adapters.SongAdapter -> org.lineageos.eleven.adapters.SongAdapter:
    org.lineageos.eleven.ui.MusicHolder$DataHolder[] mData -> d
    org.lineageos.eleven.widgets.IPopupMenuCallback$IListener mListener -> e
    org.lineageos.eleven.cache.ImageFetcher mImageFetcher -> b
    long mCurrentQueuePosition -> c
    int mLayoutId -> a
org.lineageos.eleven.adapters.SummarySearchAdapter -> org.lineageos.eleven.adapters.SummarySearchAdapter:
    char[] mPrefix -> c
    org.lineageos.eleven.format.PrefixHighlighter mHighlighter -> b
    org.lineageos.eleven.cache.ImageFetcher mImageFetcher -> a
    org.lineageos.eleven.widgets.IPopupMenuCallback$IListener mListener -> d
    void setText(android.widget.TextView,java.lang.String) -> a
org.lineageos.eleven.appwidgets.AppWidgetLarge -> org.lineageos.eleven.appwidgets.AppWidgetLarge:
    org.lineageos.eleven.appwidgets.AppWidgetLarge mInstance -> a
    void linkButtons(android.content.Context,android.widget.RemoteViews) -> a
    void pushUpdate(android.content.Context,int[],android.widget.RemoteViews) -> b
    1:1:boolean hasInstances(android.content.Context):0:0 -> notifyChange
    1:1:void notifyChange(org.lineageos.eleven.MusicPlaybackService,java.lang.String):0 -> notifyChange
    2:2:void notifyChange(org.lineageos.eleven.MusicPlaybackService,java.lang.String):0:0 -> notifyChange
    1:1:void defaultAppWidget(android.content.Context,int[]):0:0 -> onUpdate
    1:1:void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]):0 -> onUpdate
    2:2:void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]):0:0 -> onUpdate
org.lineageos.eleven.appwidgets.AppWidgetLargeAlternate -> org.lineageos.eleven.appwidgets.AppWidgetLargeAlternate:
    org.lineageos.eleven.appwidgets.AppWidgetLargeAlternate mInstance -> a
    void linkButtons(android.content.Context,android.widget.RemoteViews) -> a
    void pushUpdate(android.content.Context,int[],android.widget.RemoteViews) -> b
    1:1:boolean hasInstances(android.content.Context):0:0 -> notifyChange
    1:1:void notifyChange(org.lineageos.eleven.MusicPlaybackService,java.lang.String):0 -> notifyChange
    2:2:void notifyChange(org.lineageos.eleven.MusicPlaybackService,java.lang.String):0:0 -> notifyChange
    1:1:void defaultAppWidget(android.content.Context,int[]):0:0 -> onUpdate
    1:1:void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]):0 -> onUpdate
    2:2:void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]):0:0 -> onUpdate
org.lineageos.eleven.appwidgets.AppWidgetSmall -> org.lineageos.eleven.appwidgets.AppWidgetSmall:
    org.lineageos.eleven.appwidgets.AppWidgetSmall mInstance -> a
    void linkButtons(android.content.Context,android.widget.RemoteViews) -> a
    void pushUpdate(android.content.Context,int[],android.widget.RemoteViews) -> b
    1:1:boolean hasInstances(android.content.Context):0:0 -> notifyChange
    1:1:void notifyChange(org.lineageos.eleven.MusicPlaybackService,java.lang.String):0 -> notifyChange
    2:2:void notifyChange(org.lineageos.eleven.MusicPlaybackService,java.lang.String):0:0 -> notifyChange
    1:1:void defaultAppWidget(android.content.Context,int[]):0:0 -> onUpdate
    1:1:void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]):0 -> onUpdate
    2:2:void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]):0:0 -> onUpdate
org.lineageos.eleven.cache.BlurBitmapWorkerTask -> org.lineageos.eleven.cache.BlurBitmapWorkerTask:
    java.lang.ref.WeakReference mBlurScrimImage -> a
    java.lang.String TAG -> b
org.lineageos.eleven.cache.ImageCache -> org.lineageos.eleven.cache.ImageCache:
    android.net.Uri mArtworkUri -> e
    android.graphics.Bitmap$CompressFormat COMPRESS_FORMAT -> f
    java.util.HashSet mListeners -> c
    int $r8$clinit -> h
    org.lineageos.eleven.cache.ImageCache$MemoryCache mLruCache -> a
    java.lang.Object mPauseLock -> d
    org.lineageos.eleven.cache.ImageCache sInstance -> g
    org.lineageos.eleven.cache.disklrucache.DiskLruCache mDiskCache -> b
    1:1:void init(android.content.Context):0:0 -> <init>
    1:1:void <init>(android.content.Context):0 -> <init>
    1:1:void initDiskCache(android.content.Context):0:0 -> a
    1:1:void access$000(org.lineageos.eleven.cache.ImageCache,android.content.Context):0 -> a
    org.lineageos.eleven.cache.ImageCache$MemoryCache access$100(org.lineageos.eleven.cache.ImageCache) -> b
    org.lineageos.eleven.cache.disklrucache.DiskLruCache access$200(org.lineageos.eleven.cache.ImageCache) -> c
    org.lineageos.eleven.cache.disklrucache.DiskLruCache access$202(org.lineageos.eleven.cache.ImageCache,org.lineageos.eleven.cache.disklrucache.DiskLruCache) -> d
    void waitUntilUnpaused() -> e
    1:1:java.lang.String bytesToHexString(byte[]):0:0 -> hashKeyForDisk
    1:1:java.lang.String hashKeyForDisk(java.lang.String):0 -> hashKeyForDisk
    2:2:java.lang.String hashKeyForDisk(java.lang.String):0:0 -> hashKeyForDisk
org.lineageos.eleven.cache.ImageCache$1 -> org.lineageos.eleven.cache.a:
    android.content.Context val$context -> a
    org.lineageos.eleven.cache.ImageCache this$0 -> b
    1:1:java.lang.Void doInBackground(java.lang.Void[]):0:0 -> doInBackground
    1:1:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
org.lineageos.eleven.cache.ImageCache$2 -> org.lineageos.eleven.cache.b:
    org.lineageos.eleven.cache.ImageCache this$0 -> a
org.lineageos.eleven.cache.ImageCache$3 -> org.lineageos.eleven.cache.c:
    org.lineageos.eleven.cache.ImageCache this$0 -> a
    1:1:java.lang.Void doInBackground(java.lang.Void[]):0:0 -> doInBackground
    1:1:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
org.lineageos.eleven.cache.ImageCache$4 -> org.lineageos.eleven.cache.d:
    org.lineageos.eleven.cache.ImageCache this$0 -> a
    1:1:java.lang.Void doInBackground(java.lang.Void[]):0:0 -> doInBackground
    1:1:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
org.lineageos.eleven.cache.ImageCache$5 -> org.lineageos.eleven.cache.e:
    org.lineageos.eleven.cache.ImageCache this$0 -> a
    1:1:java.lang.Void doInBackground(java.lang.Void[]):0:0 -> doInBackground
    1:1:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
org.lineageos.eleven.cache.ImageCache$RetainFragment -> org.lineageos.eleven.cache.ImageCache$RetainFragment:
    java.lang.Object mObject -> a
org.lineageos.eleven.cache.ImageFetcher -> org.lineageos.eleven.cache.ImageFetcher:
    org.lineageos.eleven.cache.ImageFetcher sInstance -> c
    boolean mUseBlur -> b
    1:1:void loadCurrentBlurredArtwork(org.lineageos.eleven.widgets.AlbumScrimImage):0:0 -> updateScrimImage
    1:1:void updateScrimImage(org.lineageos.eleven.widgets.AlbumScrimImage,org.lineageos.eleven.utils.colors.ColorExtractor$Callback):0 -> updateScrimImage
    2:2:void loadCurrentGradientArtwork(org.lineageos.eleven.utils.colors.ColorExtractor$Callback):0:0 -> updateScrimImage
    2:2:void updateScrimImage(org.lineageos.eleven.widgets.AlbumScrimImage,org.lineageos.eleven.utils.colors.ColorExtractor$Callback):0 -> updateScrimImage
org.lineageos.eleven.cache.ImageWorker -> org.lineageos.eleven.cache.ImageWorker:
    android.graphics.drawable.ColorDrawable mTransparentDrawable -> a
org.lineageos.eleven.cache.ImageWorker$AsyncTaskContainer -> org.lineageos.eleven.cache.ImageWorker$AsyncTaskContainer:
    java.lang.ref.WeakReference mBitmapWorkerTaskReference -> a
    java.lang.String mKey -> b
org.lineageos.eleven.cache.ImageWorker$ImageType -> org.lineageos.eleven.cache.ImageWorker$ImageType:
    org.lineageos.eleven.cache.ImageWorker$ImageType[] $VALUES -> a
org.lineageos.eleven.cache.LruCache -> org.lineageos.eleven.cache.LruCache:
    java.util.LinkedHashMap map -> a
    int missCount -> h
    int evictionCount -> f
    int hitCount -> g
    int putCount -> d
    int createCount -> e
    int maxSize -> b
    int size -> c
    int safeSizeOf(java.lang.Object,java.lang.Object) -> a
org.lineageos.eleven.cache.PlaylistWorkerTask$PlaylistWorkerType -> org.lineageos.eleven.cache.PlaylistWorkerTask$PlaylistWorkerType:
    org.lineageos.eleven.cache.PlaylistWorkerTask$PlaylistWorkerType[] $VALUES -> a
org.lineageos.eleven.cache.disklrucache.DiskLruCache -> org.lineageos.eleven.cache.disklrucache.DiskLruCache:
    java.io.File journalFile -> b
    java.io.File directory -> a
    java.io.File journalFileBackup -> d
    long nextSequenceNumber -> l
    java.io.File journalFileTmp -> c
    long maxSize -> f
    java.util.concurrent.Callable cleanupCallable -> n
    int redundantOpCount -> k
    long size -> h
    java.util.regex.Pattern LEGAL_KEY_PATTERN -> o
    int valueCount -> g
    int appVersion -> e
    java.util.LinkedHashMap lruEntries -> j
    java.io.OutputStream NULL_OUTPUT_STREAM -> p
    java.io.Writer journalWriter -> i
    java.util.concurrent.ThreadPoolExecutor executorService -> m
    java.io.Writer access$000(org.lineageos.eleven.cache.disklrucache.DiskLruCache) -> a
    void access$100(org.lineageos.eleven.cache.disklrucache.DiskLruCache) -> b
    org.lineageos.eleven.cache.disklrucache.DiskLruCache$Editor access$1600(org.lineageos.eleven.cache.disklrucache.DiskLruCache,java.lang.String,long) -> c
    1:1:java.lang.String inputStreamToString(java.io.InputStream):0:0 -> d
    1:1:java.lang.String access$1700(java.io.InputStream):0 -> d
    2:2:java.lang.String org.lineageos.eleven.cache.disklrucache.Util.readFully(java.io.Reader):0:0 -> d
    2:2:java.lang.String inputStreamToString(java.io.InputStream):0 -> d
    2:2:java.lang.String access$1700(java.io.InputStream):0 -> d
    int access$1800(org.lineageos.eleven.cache.disklrucache.DiskLruCache) -> e
    java.io.File access$1900(org.lineageos.eleven.cache.disklrucache.DiskLruCache) -> f
    boolean access$200(org.lineageos.eleven.cache.disklrucache.DiskLruCache) -> g
    java.io.OutputStream access$2000() -> h
    1:1:void completeEdit(org.lineageos.eleven.cache.disklrucache.DiskLruCache$Editor,boolean):0:0 -> i
    1:1:void access$2200(org.lineageos.eleven.cache.disklrucache.DiskLruCache,org.lineageos.eleven.cache.disklrucache.DiskLruCache$Editor,boolean):0 -> i
    void access$300(org.lineageos.eleven.cache.disklrucache.DiskLruCache) -> j
    int access$402(org.lineageos.eleven.cache.disklrucache.DiskLruCache,int) -> k
    void checkNotClosed() -> l
    void deleteIfExists(java.io.File) -> m
    org.lineageos.eleven.cache.disklrucache.DiskLruCache$Editor edit(java.lang.String,long) -> n
    boolean journalRebuildRequired() -> o
    void processJournal() -> p
    void readJournal() -> q
    void readJournalLine(java.lang.String) -> r
    void rebuildJournal() -> s
    void renameTo(java.io.File,java.io.File,boolean) -> t
    void trimToSize() -> u
    void validateKey(java.lang.String) -> v
org.lineageos.eleven.cache.disklrucache.DiskLruCache$1 -> org.lineageos.eleven.cache.disklrucache.a:
    org.lineageos.eleven.cache.disklrucache.DiskLruCache this$0 -> a
    1:1:java.lang.Void call():0:0 -> call
    1:1:java.lang.Object call():0 -> call
org.lineageos.eleven.cache.disklrucache.DiskLruCache$2 -> org.lineageos.eleven.cache.disklrucache.b:
org.lineageos.eleven.cache.disklrucache.DiskLruCache$Editor -> org.lineageos.eleven.cache.disklrucache.DiskLruCache$Editor:
    org.lineageos.eleven.cache.disklrucache.DiskLruCache$Entry entry -> a
    boolean[] written -> b
    org.lineageos.eleven.cache.disklrucache.DiskLruCache this$0 -> e
    boolean hasErrors -> c
    boolean committed -> d
    1:1:void <init>(org.lineageos.eleven.cache.disklrucache.DiskLruCache,org.lineageos.eleven.cache.disklrucache.DiskLruCache$Entry):0:0 -> <init>
    1:1:void <init>(org.lineageos.eleven.cache.disklrucache.DiskLruCache,org.lineageos.eleven.cache.disklrucache.DiskLruCache$Entry,org.lineageos.eleven.cache.disklrucache.DiskLruCache$1):0 -> <init>
    org.lineageos.eleven.cache.disklrucache.DiskLruCache$Entry access$1400(org.lineageos.eleven.cache.disklrucache.DiskLruCache$Editor) -> a
    boolean[] access$1500(org.lineageos.eleven.cache.disklrucache.DiskLruCache$Editor) -> b
    boolean access$2302(org.lineageos.eleven.cache.disklrucache.DiskLruCache$Editor,boolean) -> c
org.lineageos.eleven.cache.disklrucache.DiskLruCache$Editor$FaultHidingOutputStream -> org.lineageos.eleven.cache.disklrucache.c:
    org.lineageos.eleven.cache.disklrucache.DiskLruCache$Editor this$1 -> a
    1:1:void <init>(org.lineageos.eleven.cache.disklrucache.DiskLruCache$Editor,java.io.OutputStream):0:0 -> <init>
    1:1:void <init>(org.lineageos.eleven.cache.disklrucache.DiskLruCache$Editor,java.io.OutputStream,org.lineageos.eleven.cache.disklrucache.DiskLruCache$1):0 -> <init>
org.lineageos.eleven.cache.disklrucache.DiskLruCache$Entry -> org.lineageos.eleven.cache.disklrucache.d:
    org.lineageos.eleven.cache.disklrucache.DiskLruCache$Editor currentEditor -> d
    long sequenceNumber -> e
    long[] lengths -> b
    java.lang.String key -> a
    org.lineageos.eleven.cache.disklrucache.DiskLruCache this$0 -> f
    boolean readable -> c
    1:1:void <init>(org.lineageos.eleven.cache.disklrucache.DiskLruCache,java.lang.String):0:0 -> <init>
    1:1:void <init>(org.lineageos.eleven.cache.disklrucache.DiskLruCache,java.lang.String,org.lineageos.eleven.cache.disklrucache.DiskLruCache$1):0 -> <init>
    long[] access$1000(org.lineageos.eleven.cache.disklrucache.DiskLruCache$Entry) -> a
    java.lang.String access$1100(org.lineageos.eleven.cache.disklrucache.DiskLruCache$Entry) -> b
    long access$1200(org.lineageos.eleven.cache.disklrucache.DiskLruCache$Entry) -> c
    long access$1202(org.lineageos.eleven.cache.disklrucache.DiskLruCache$Entry,long) -> d
    boolean access$600(org.lineageos.eleven.cache.disklrucache.DiskLruCache$Entry) -> e
    boolean access$602(org.lineageos.eleven.cache.disklrucache.DiskLruCache$Entry,boolean) -> f
    org.lineageos.eleven.cache.disklrucache.DiskLruCache$Editor access$700(org.lineageos.eleven.cache.disklrucache.DiskLruCache$Entry) -> g
    org.lineageos.eleven.cache.disklrucache.DiskLruCache$Editor access$702(org.lineageos.eleven.cache.disklrucache.DiskLruCache$Entry,org.lineageos.eleven.cache.disklrucache.DiskLruCache$Editor) -> h
    1:1:void setLengths(java.lang.String[]):0:0 -> i
    1:1:void access$800(org.lineageos.eleven.cache.disklrucache.DiskLruCache$Entry,java.lang.String[]):0 -> i
    java.io.IOException invalidLengths(java.lang.String[]) -> j
org.lineageos.eleven.cache.disklrucache.DiskLruCache$Snapshot -> org.lineageos.eleven.cache.disklrucache.DiskLruCache$Snapshot:
    long[] lengths -> d
    java.io.InputStream[] ins -> c
    long sequenceNumber -> b
    java.lang.String key -> a
    org.lineageos.eleven.cache.disklrucache.DiskLruCache this$0 -> e
    1:1:void <init>(org.lineageos.eleven.cache.disklrucache.DiskLruCache,java.lang.String,long,java.io.InputStream[],long[]):0:0 -> <init>
    1:1:void <init>(org.lineageos.eleven.cache.disklrucache.DiskLruCache,java.lang.String,long,java.io.InputStream[],long[],org.lineageos.eleven.cache.disklrucache.DiskLruCache$1):0 -> <init>
org.lineageos.eleven.cache.disklrucache.StrictLineReader -> org.lineageos.eleven.cache.disklrucache.f:
    java.nio.charset.Charset charset -> b
    int pos -> d
    int end -> e
    java.io.InputStream in -> a
    byte[] buf -> c
    1:1:void <init>(java.io.InputStream,int,java.nio.charset.Charset):0:0 -> <init>
    1:1:void <init>(java.io.InputStream,java.nio.charset.Charset):0 -> <init>
    java.nio.charset.Charset access$000(org.lineageos.eleven.cache.disklrucache.StrictLineReader) -> a
    void fillBuf() -> b
org.lineageos.eleven.cache.disklrucache.StrictLineReader$1 -> org.lineageos.eleven.cache.disklrucache.e:
    org.lineageos.eleven.cache.disklrucache.StrictLineReader this$0 -> a
org.lineageos.eleven.cache.disklrucache.Util -> org.lineageos.eleven.cache.disklrucache.g:
    java.nio.charset.Charset UTF_8 -> b
    java.nio.charset.Charset US_ASCII -> a
    void closeQuietly(java.io.Closeable) -> a
    void deleteContents(java.io.File) -> b
org.lineageos.eleven.dragdrop.DragSortController -> org.lineageos.eleven.dragdrop.DragSortController:
    int mHitPos -> n
    org.lineageos.eleven.dragdrop.DragSortListView mDslv -> h
    int mItemX -> o
    int mDragInitMode -> l
    int mRemoveMode -> m
    boolean mSortEnabled -> i
    boolean mRemoveEnabled -> j
    boolean mDragging -> k
    android.view.GestureDetector mFlingRemoveDetector -> e
    int mTouchSlop -> f
    android.view.GestureDetector mDetector -> d
    android.view.GestureDetector$OnGestureListener mFlingRemoveListener -> u
    int[] mTempLoc -> g
    float mOrigFloatAlpha -> t
    int mCurrY -> r
    int mDragHandleId -> s
    int mItemY -> p
    int mCurrX -> q
    boolean access$000(org.lineageos.eleven.dragdrop.DragSortController) -> a
    int access$100(org.lineageos.eleven.dragdrop.DragSortController) -> b
    org.lineageos.eleven.dragdrop.DragSortListView access$200(org.lineageos.eleven.dragdrop.DragSortController) -> c
org.lineageos.eleven.dragdrop.DragSortController$1 -> org.lineageos.eleven.dragdrop.a:
    org.lineageos.eleven.dragdrop.DragSortController this$0 -> a
org.lineageos.eleven.dragdrop.DragSortListView -> org.lineageos.eleven.dragdrop.DragSortListView:
    boolean mInTouchEvent -> P
    float mCurrFloatAlpha -> g
    int mX -> K
    int mFloatPos -> h
    float mUpScrollStartYF -> F
    int mFloatViewLeft -> d
    float mDragDownScrollStartFrac -> B
    int mUpScrollStartY -> C
    org.lineageos.eleven.dragdrop.DragSortListView$DragScrollProfile mScrollProfile -> J
    int mItemHeightCollapsed -> u
    int mY -> L
    int mSrcPos -> m
    float mDragUpScrollHeight -> G
    int mScrollY -> i
    int mDownScrollStartY -> D
    int mFloatViewTop -> e
    org.lineageos.eleven.dragdrop.DragSortListView$DropListener mDropListener -> q
    org.lineageos.eleven.dragdrop.DragSortController mController -> a0
    int mFloatViewHeight -> v
    org.lineageos.eleven.dragdrop.DragSortListView$RemoveListener mRemoveListener -> r
    int mDragDeltaX -> n
    int mLastY -> M
    int mFirstExpPos -> j
    float mDragDownScrollHeight -> H
    android.view.MotionEvent mCancelEvent -> R
    org.lineageos.eleven.dragdrop.DragSortListView$DragListener mDragListener -> p
    android.graphics.Point mFloatLoc -> b
    boolean mDragEnabled -> s
    android.view.View mFloatView -> a
    float mSlideRegionFrac -> T
    int mFloatViewHeightHalf -> w
    org.lineageos.eleven.dragdrop.DragSortListView$FloatViewManager mFloatViewManager -> Q
    int mDragFlags -> N
    int mDragDeltaY -> o
    boolean mLastCallWasIntercept -> O
    float mMaxScrollSpeed -> I
    int mSecondExpPos -> k
    boolean mAnimate -> l
    float mDownScrollStartYF -> E
    boolean mBlockLayoutRequests -> W
    float mDragUpScrollStartFrac -> A
    int mFloatViewMid -> c
    org.lineageos.eleven.dragdrop.DragSortListView$AdapterWrapper mAdapterWrapper -> V
    android.database.DataSetObserver mObserver -> f
    org.lineageos.eleven.dragdrop.DragSortListView$DragScroller mDragScroller -> z
    int mWidthMeasureSpec -> x
    android.view.View[] mSampleViewTypes -> y
    float mSlideFrac -> U
    int mDragState -> t
    int mCancelMethod -> S
    void updateScrollStarts() -> A
    float access$000(org.lineageos.eleven.dragdrop.DragSortListView) -> a
    int access$100(org.lineageos.eleven.dragdrop.DragSortListView) -> b
    float access$1000(org.lineageos.eleven.dragdrop.DragSortListView) -> c
    float access$1100(org.lineageos.eleven.dragdrop.DragSortListView) -> d
    int access$1200(org.lineageos.eleven.dragdrop.DragSortListView) -> e
    int access$1202(org.lineageos.eleven.dragdrop.DragSortListView,int) -> f
    int access$1300(org.lineageos.eleven.dragdrop.DragSortListView) -> g
    void access$1400(org.lineageos.eleven.dragdrop.DragSortListView,int,int) -> h
    void access$200(org.lineageos.eleven.dragdrop.DragSortListView,int,android.view.View,boolean) -> i
    int access$400(org.lineageos.eleven.dragdrop.DragSortListView) -> j
    int access$500(org.lineageos.eleven.dragdrop.DragSortListView) -> k
    int access$600(org.lineageos.eleven.dragdrop.DragSortListView) -> l
    1:1:boolean updatePositions():0:0 -> layoutChildren
    1:1:void layoutChildren():0 -> layoutChildren
    2:2:void adjustAllItems():0:0 -> layoutChildren
    2:2:void layoutChildren():0 -> layoutChildren
    3:3:void layoutChildren():0:0 -> layoutChildren
    4:4:void doDragScroll(int,int):0:0 -> layoutChildren
    4:4:void layoutChildren():0 -> layoutChildren
    5:5:void getItemHeights(int,android.view.View,org.lineageos.eleven.dragdrop.DragSortListView$ItemHeights):0:0 -> layoutChildren
    5:5:void doDragScroll(int,int):0 -> layoutChildren
    5:5:void layoutChildren():0 -> layoutChildren
    6:6:void doDragScroll(int,int):0:0 -> layoutChildren
    6:6:void layoutChildren():0 -> layoutChildren
    7:7:void layoutChildren():0:0 -> layoutChildren
    float access$700(org.lineageos.eleven.dragdrop.DragSortListView) -> m
    float access$800(org.lineageos.eleven.dragdrop.DragSortListView) -> n
    org.lineageos.eleven.dragdrop.DragSortListView$DragScrollProfile access$900(org.lineageos.eleven.dragdrop.DragSortListView) -> o
    1:1:void continueDrag(int,int):0:0 -> onDragTouchEvent
    1:1:boolean onDragTouchEvent(android.view.MotionEvent):0 -> onDragTouchEvent
    2:2:boolean onDragTouchEvent(android.view.MotionEvent):0:0 -> onDragTouchEvent
    void adjustItem(int,android.view.View,boolean) -> p
    void doActionUpOrCancel() -> q
    void dragView(int,int) -> r
    void drawDivider(int,android.graphics.Canvas) -> s
    1:1:void dropFloatView(boolean):0:0 -> stopDrag
    1:1:boolean stopDrag(boolean):0 -> stopDrag
    2:2:void removeFloatView():0:0 -> stopDrag
    2:2:void dropFloatView(boolean):0 -> stopDrag
    2:2:boolean stopDrag(boolean):0 -> stopDrag
    void getItemHeights(int,android.view.View,org.lineageos.eleven.dragdrop.DragSortListView$ItemHeights) -> t
    void getItemHeights(int,org.lineageos.eleven.dragdrop.DragSortListView$ItemHeights) -> u
    int getShuffleEdge(int,int,org.lineageos.eleven.dragdrop.DragSortListView$ItemHeights) -> v
    void measureFloatView() -> w
    void measureItemAndGetHeights(int,android.view.View,org.lineageos.eleven.dragdrop.DragSortListView$ItemHeights) -> x
    void saveTouchCoords(android.view.MotionEvent) -> y
    void updateFloatView(int,int) -> z
org.lineageos.eleven.dragdrop.DragSortListView$1 -> org.lineageos.eleven.dragdrop.b:
    org.lineageos.eleven.dragdrop.DragSortListView this$0 -> a
org.lineageos.eleven.dragdrop.DragSortListView$2 -> org.lineageos.eleven.dragdrop.c:
    org.lineageos.eleven.dragdrop.DragSortListView this$0 -> a
    1:1:void cancel():0:0 -> onChanged
    1:1:void onChanged():0 -> onChanged
    1:1:void cancel():0:0 -> onInvalidated
    1:1:void onInvalidated():0 -> onInvalidated
org.lineageos.eleven.dragdrop.DragSortListView$AdapterWrapper -> org.lineageos.eleven.dragdrop.d:
    android.widget.ListAdapter mAdapter -> a
    org.lineageos.eleven.dragdrop.DragSortListView this$0 -> b
org.lineageos.eleven.dragdrop.DragSortListView$DragScroller -> org.lineageos.eleven.dragdrop.e:
    long tStart -> e
    float mScrollSpeed -> g
    int mMaxScrollSpeed -> i
    org.lineageos.eleven.dragdrop.DragSortListView this$0 -> j
    long mPrevTime -> b
    float dt -> d
    int scrollDir -> f
    boolean mScrolling -> h
    boolean mAbort -> a
    int dy -> c
org.lineageos.eleven.dragdrop.DragSortListView$ItemHeights -> org.lineageos.eleven.dragdrop.f:
    int child -> b
    int item -> a
    1:1:void <init>(org.lineageos.eleven.dragdrop.DragSortListView):0:0 -> <init>
    1:1:void <init>(org.lineageos.eleven.dragdrop.DragSortListView,org.lineageos.eleven.dragdrop.DragSortListView$1):0 -> <init>
org.lineageos.eleven.dragdrop.SimpleFloatViewManager -> org.lineageos.eleven.dragdrop.SimpleFloatViewManager:
    android.graphics.Bitmap mFloatBitmap -> b
    android.widget.ListView mListView -> a
    int mFloatBGColor -> c
org.lineageos.eleven.format.PrefixHighlighter -> org.lineageos.eleven.format.PrefixHighlighter:
    int mPrefixHighlightColor -> a
    android.text.style.ForegroundColorSpan mPrefixColorSpan -> b
    int indexOfPrefix(java.lang.CharSequence,char[],boolean) -> a
org.lineageos.eleven.loaders.AlbumLoader -> org.lineageos.eleven.loaders.AlbumLoader:
    java.util.ArrayList mAlbumsList -> q
    1:1:org.lineageos.eleven.provider.LocalizedStore$SortParameter getSortParameter(java.lang.String):0:0 -> makeAlbumCursor
    1:1:android.database.Cursor makeAlbumCursor(android.content.Context,java.lang.Long):0 -> makeAlbumCursor
    2:2:android.database.Cursor makeAlbumCursor(android.content.Context,java.lang.Long):0:0 -> makeAlbumCursor
org.lineageos.eleven.loaders.AlbumSongLoader -> org.lineageos.eleven.loaders.AlbumSongLoader:
    java.lang.Long mAlbumID -> r
    java.util.ArrayList mSongList -> q
org.lineageos.eleven.loaders.ArtistLoader -> org.lineageos.eleven.loaders.ArtistLoader:
    java.util.ArrayList mArtistsList -> q
    1:1:org.lineageos.eleven.provider.LocalizedStore$SortParameter getSortParameter(java.lang.String):0:0 -> makeArtistCursor
    1:1:android.database.Cursor makeArtistCursor(android.content.Context):0 -> makeArtistCursor
    2:2:android.database.Cursor makeArtistCursor(android.content.Context):0:0 -> makeArtistCursor
org.lineageos.eleven.loaders.AsyncHandler -> org.lineageos.eleven.loaders.AsyncHandler:
    android.os.HandlerThread sHandlerThread -> a
    android.os.Handler sHandler -> b
org.lineageos.eleven.loaders.LastAddedLoader -> org.lineageos.eleven.loaders.LastAddedLoader:
    java.util.ArrayList mSongList -> q
org.lineageos.eleven.loaders.NowPlayingCursor -> org.lineageos.eleven.loaders.NowPlayingCursor:
    android.content.Context mContext -> a
    long[] mCursorIndexes -> c
    android.database.Cursor mQueueCursor -> f
    long[] mNowPlaying -> b
    java.lang.String[] PROJECTION -> g
    int mSize -> d
    int mCurPos -> e
    void makeNowPlayingCursor() -> a
org.lineageos.eleven.loaders.PlaylistLoader -> org.lineageos.eleven.loaders.PlaylistLoader:
    java.util.ArrayList mPlaylistList -> q
    1:1:void makeDefaultPlaylists():0:0 -> loadInBackground
    1:1:java.util.List loadInBackground():0 -> loadInBackground
    2:2:java.util.List loadInBackground():0:0 -> loadInBackground
org.lineageos.eleven.loaders.PlaylistSongLoader -> org.lineageos.eleven.loaders.PlaylistSongLoader:
    long mPlaylistID -> r
    java.util.ArrayList mSongList -> q
    1:1:int countPlaylist(android.content.Context,long):0:0 -> loadInBackground
    1:1:java.util.List loadInBackground():0 -> loadInBackground
    2:2:java.util.List loadInBackground():0:0 -> loadInBackground
    3:3:void cleanupPlaylist(android.content.Context,long,android.database.Cursor):0:0 -> loadInBackground
    3:3:java.util.List loadInBackground():0 -> loadInBackground
    4:4:java.util.List loadInBackground():0:0 -> loadInBackground
    5:5:int countPlaylist(android.content.Context,long):0:0 -> loadInBackground
    5:5:java.util.List loadInBackground():0 -> loadInBackground
org.lineageos.eleven.loaders.QueueLoader -> org.lineageos.eleven.loaders.QueueLoader:
    java.util.ArrayList mSongList -> q
org.lineageos.eleven.loaders.SearchLoader -> org.lineageos.eleven.loaders.SearchLoader:
    java.lang.String mQuery -> r
    java.util.ArrayList mSongList -> q
org.lineageos.eleven.loaders.SongLoader -> org.lineageos.eleven.loaders.SongLoader:
    1:1:org.lineageos.eleven.provider.LocalizedStore$SortParameter getSortParameter(java.lang.String):0:0 -> makeSongCursor
    1:1:android.database.Cursor makeSongCursor(android.content.Context,java.lang.String,boolean):0 -> makeSongCursor
    2:2:android.database.Cursor makeSongCursor(android.content.Context,java.lang.String,boolean):0:0 -> makeSongCursor
org.lineageos.eleven.loaders.SortedCursor -> org.lineageos.eleven.loaders.SortedCursor:
    java.util.ArrayList mExtraData -> e
    android.database.Cursor mCursor -> a
    java.util.ArrayList mMissingIds -> c
    java.util.ArrayList mOrderedPositions -> b
    java.util.HashMap mMapCursorPositions -> d
    1:1:java.util.ArrayList buildCursorPositionMapping(long[],java.lang.String,java.util.List):0:0 -> <init>
    1:1:void <init>(android.database.Cursor,long[],java.lang.String,java.util.List):0 -> <init>
    2:2:void <init>(android.database.Cursor,long[],java.lang.String,java.util.List):0:0 -> <init>
org.lineageos.eleven.loaders.TopTracksLoader$QueryType -> org.lineageos.eleven.loaders.TopTracksLoader$QueryType:
    org.lineageos.eleven.loaders.TopTracksLoader$QueryType[] $VALUES -> a
org.lineageos.eleven.loaders.WrappedAsyncTaskLoader -> org.lineageos.eleven.loaders.WrappedAsyncTaskLoader:
    java.lang.Object mData -> p
org.lineageos.eleven.locale.LocaleSet -> org.lineageos.eleven.locale.LocaleSet:
    org.lineageos.eleven.locale.LocaleSet$LocaleWrapper mPrimaryLocale -> a
    org.lineageos.eleven.locale.LocaleSet$LocaleWrapper mSecondaryLocale -> b
    java.lang.String CHINESE_LANGUAGE -> c
    java.lang.String KOREAN_LANGUAGE -> e
    java.lang.String JAPANESE_LANGUAGE -> d
    java.lang.String access$000() -> a
    java.lang.String access$100() -> b
    java.lang.String access$200() -> c
org.lineageos.eleven.locale.LocaleSet$LocaleWrapper -> org.lineageos.eleven.locale.a:
    java.util.Locale mLocale -> a
    java.lang.String mLanguage -> b
    boolean mLocaleIsCJK -> c
    1:1:boolean isLanguageCJK(java.lang.String):0:0 -> <init>
    1:1:void <init>(java.util.Locale):0 -> <init>
    2:2:void <init>(java.util.Locale):0:0 -> <init>
org.lineageos.eleven.locale.LocaleSetManager -> org.lineageos.eleven.locale.LocaleSetManager:
    android.content.Context mContext -> b
    org.lineageos.eleven.locale.LocaleSet mCurrentLocales -> a
    1:1:org.lineageos.eleven.locale.LocaleSet getCombinedLocaleSet(org.lineageos.eleven.locale.LocaleSet,java.util.Locale):0:0 -> getSystemLocaleSet
    1:1:org.lineageos.eleven.locale.LocaleSet getSystemLocaleSet():0 -> getSystemLocaleSet
org.lineageos.eleven.locale.LocaleUtils -> org.lineageos.eleven.locale.LocaleUtils:
    org.lineageos.eleven.locale.LocaleUtils sSingleton -> c
    org.lineageos.eleven.locale.LocaleSet mLocales -> a
    org.lineageos.eleven.locale.LocaleUtils$LocaleUtilsBase mUtils -> b
    1:1:java.lang.String org.lineageos.eleven.locale.LocaleUtils$LocaleUtilsBase.getSortKey(java.lang.String):0:0 -> getSortKey
    1:1:java.lang.String getSortKey(java.lang.String,int):0 -> getSortKey
org.lineageos.eleven.locale.LocaleUtils$LocaleUtilsBase -> org.lineageos.eleven.locale.b:
    android.icu.text.AlphabeticIndex$ImmutableIndex mAlphabeticIndex -> a
    int mAlphabeticIndexBucketCount -> b
    int mNumberBucketIndex -> c
    1:1:int getBucketCount():0:0 -> getBucketLabel
    1:1:java.lang.String getBucketLabel(int):0 -> getBucketLabel
    2:2:java.lang.String getBucketLabel(int):0:0 -> getBucketLabel
    1:1:int getBucketCount():0:0 -> getLabels
    1:1:java.util.ArrayList getLabels():0 -> getLabels
    2:2:java.util.ArrayList getLabels():0:0 -> getLabels
org.lineageos.eleven.menu.-$$Lambda$BasePlaylistDialog$EqoUuafIBI1EvIQAvQ1NtjWOaE4 -> org.lineageos.eleven.menu.a:
    org.lineageos.eleven.menu.BasePlaylistDialog f$0 -> a
    1:1:void org.lineageos.eleven.menu.BasePlaylistDialog.lambda$onCreateDialog$0(android.content.DialogInterface,int):0:0 -> onClick
    1:1:void org.lineageos.eleven.menu.BasePlaylistDialog.lambda$onCreateDialog$0$BasePlaylistDialog(android.content.DialogInterface,int):0 -> onClick
    1:1:void onClick(android.content.DialogInterface,int):0 -> onClick
org.lineageos.eleven.menu.-$$Lambda$BasePlaylistDialog$RfrWyf86V3bc5ra4wtB97sNPccE -> org.lineageos.eleven.menu.b:
    org.lineageos.eleven.menu.BasePlaylistDialog f$0 -> a
    1:1:void org.lineageos.eleven.menu.BasePlaylistDialog.lambda$onCreateDialog$2():0:0 -> run
    1:1:void org.lineageos.eleven.menu.BasePlaylistDialog.lambda$onCreateDialog$2$BasePlaylistDialog():0 -> run
    1:1:void run():0 -> run
org.lineageos.eleven.menu.-$$Lambda$BasePlaylistDialog$WiLDEZQZOBwX8CkXpaxh__pb24Y -> org.lineageos.eleven.menu.c:
    org.lineageos.eleven.menu.-$$Lambda$BasePlaylistDialog$WiLDEZQZOBwX8CkXpaxh__pb24Y INSTANCE -> a
    1:1:void org.lineageos.eleven.menu.BasePlaylistDialog.lambda$onCreateDialog$1(android.content.DialogInterface,int):0:0 -> onClick
    1:1:void onClick(android.content.DialogInterface,int):0 -> onClick
org.lineageos.eleven.menu.ConfirmDialog$1 -> org.lineageos.eleven.menu.d:
org.lineageos.eleven.menu.ConfirmDialog$2 -> org.lineageos.eleven.menu.e:
    org.lineageos.eleven.menu.ConfirmDialog this$0 -> a
org.lineageos.eleven.menu.CreateNewPlaylist -> org.lineageos.eleven.menu.CreateNewPlaylist:
    long[] mPlaylistList -> h0
    1:1:java.lang.String makePlaylistName():0:0 -> initialize
    1:1:void initialize(android.os.Bundle):0 -> initialize
    2:2:void initialize(android.os.Bundle):0:0 -> initialize
    3:3:java.lang.String makePlaylistName():0:0 -> initialize
    3:3:void initialize(android.os.Bundle):0 -> initialize
org.lineageos.eleven.menu.DeleteDialog -> org.lineageos.eleven.menu.DeleteDialog:
    long[] mItemList -> h0
    org.lineageos.eleven.cache.ImageFetcher mFetcher -> i0
    org.lineageos.eleven.cache.ImageFetcher access$000(org.lineageos.eleven.menu.DeleteDialog) -> G
    long[] access$100(org.lineageos.eleven.menu.DeleteDialog) -> H
org.lineageos.eleven.menu.DeleteDialog$1 -> org.lineageos.eleven.menu.f:
org.lineageos.eleven.menu.DeleteDialog$2 -> org.lineageos.eleven.menu.g:
    org.lineageos.eleven.menu.DeleteDialog this$0 -> b
    java.lang.String val$key -> a
org.lineageos.eleven.menu.PhotoSelectionDialog -> org.lineageos.eleven.menu.PhotoSelectionDialog:
    java.lang.String mKey -> i0
    java.util.ArrayList mChoices -> h0
    org.lineageos.eleven.menu.PhotoSelectionDialog$ProfileType mProfileType -> j0
    java.lang.String access$000(org.lineageos.eleven.menu.PhotoSelectionDialog) -> G
    1:1:void setOtherChoices():0:0 -> onCreateDialog
    1:1:android.app.Dialog onCreateDialog(android.os.Bundle):0 -> onCreateDialog
    2:2:void setAlbumChoices():0:0 -> onCreateDialog
    2:2:android.app.Dialog onCreateDialog(android.os.Bundle):0 -> onCreateDialog
    3:3:void setArtistChoices():0:0 -> onCreateDialog
    3:3:android.app.Dialog onCreateDialog(android.os.Bundle):0 -> onCreateDialog
    4:4:android.app.Dialog onCreateDialog(android.os.Bundle):0:0 -> onCreateDialog
org.lineageos.eleven.menu.PhotoSelectionDialog$1 -> org.lineageos.eleven.menu.h:
    org.lineageos.eleven.ui.activities.HomeActivity val$activity -> a
    org.lineageos.eleven.menu.PhotoSelectionDialog this$0 -> b
org.lineageos.eleven.menu.PhotoSelectionDialog$ProfileType -> org.lineageos.eleven.menu.PhotoSelectionDialog$ProfileType:
    org.lineageos.eleven.menu.PhotoSelectionDialog$ProfileType[] $VALUES -> a
org.lineageos.eleven.menu.RenamePlaylist -> org.lineageos.eleven.menu.RenamePlaylist:
    long mRenameId -> h0
org.lineageos.eleven.model.SearchResult$1 -> org.lineageos.eleven.model.a:
    1:1:int compare(org.lineageos.eleven.model.SearchResult,org.lineageos.eleven.model.SearchResult):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
org.lineageos.eleven.model.SearchResult$ResultType -> org.lineageos.eleven.model.SearchResult$ResultType:
    org.lineageos.eleven.model.SearchResult$ResultType[] $VALUES -> a
org.lineageos.eleven.provider.LocalizedStore -> org.lineageos.eleven.provider.LocalizedStore:
    android.os.Handler mHandler -> f
    android.content.Context mContext -> b
    org.lineageos.eleven.locale.LocaleSetManager mLocaleSetManager -> d
    org.lineageos.eleven.provider.LocalizedStore sInstance -> g
    android.content.ContentValues mContentValues -> c
    android.os.HandlerThread mHandlerThread -> e
    org.lineageos.eleven.provider.MusicDB mMusicDatabase -> a
    org.lineageos.eleven.locale.LocaleSetManager access$000(org.lineageos.eleven.provider.LocalizedStore) -> a
    1:1:void rebuildLocaleData(org.lineageos.eleven.locale.LocaleSet):0:0 -> b
    1:1:void access$100(org.lineageos.eleven.provider.LocalizedStore,org.lineageos.eleven.locale.LocaleSet):0 -> b
    1:1:java.lang.String createOrderBy(java.lang.String,java.lang.String,boolean):0:0 -> c
    1:1:java.lang.String access$300(java.lang.String,java.lang.String,boolean):0 -> c
    java.lang.String createJoin(java.lang.String,java.lang.String,java.lang.String) -> d
    void updateAlbumData(android.database.sqlite.SQLiteDatabase,long,java.lang.String,long) -> e
    void updateArtistData(android.database.sqlite.SQLiteDatabase,long,java.lang.String) -> f
    void updateLocalizedStore(android.database.sqlite.SQLiteDatabase,java.lang.String) -> g
    1:1:boolean updateDiscrepancies(org.lineageos.eleven.loaders.SortedCursor,org.lineageos.eleven.provider.LocalizedStore$SortParameter):0:0 -> getLocalizedSort
    1:1:android.database.Cursor getLocalizedSort(android.database.Cursor,java.lang.String,org.lineageos.eleven.provider.LocalizedStore$SortParameter,org.lineageos.eleven.provider.LocalizedStore$SortParameter,boolean,boolean):0 -> getLocalizedSort
    2:2:void removeIds(java.util.ArrayList,org.lineageos.eleven.provider.LocalizedStore$SortParameter):0:0 -> getLocalizedSort
    2:2:boolean updateDiscrepancies(org.lineageos.eleven.loaders.SortedCursor,org.lineageos.eleven.provider.LocalizedStore$SortParameter):0 -> getLocalizedSort
    2:2:android.database.Cursor getLocalizedSort(android.database.Cursor,java.lang.String,org.lineageos.eleven.provider.LocalizedStore$SortParameter,org.lineageos.eleven.provider.LocalizedStore$SortParameter,boolean,boolean):0 -> getLocalizedSort
    3:3:boolean updateDiscrepancies(org.lineageos.eleven.loaders.SortedCursor,org.lineageos.eleven.provider.LocalizedStore$SortParameter):0:0 -> getLocalizedSort
    3:3:android.database.Cursor getLocalizedSort(android.database.Cursor,java.lang.String,org.lineageos.eleven.provider.LocalizedStore$SortParameter,org.lineageos.eleven.provider.LocalizedStore$SortParameter,boolean,boolean):0 -> getLocalizedSort
    4:4:void addIds(java.util.Collection,org.lineageos.eleven.provider.LocalizedStore$SortParameter):0:0 -> getLocalizedSort
    4:4:boolean updateDiscrepancies(org.lineageos.eleven.loaders.SortedCursor,org.lineageos.eleven.provider.LocalizedStore$SortParameter):0 -> getLocalizedSort
    4:4:android.database.Cursor getLocalizedSort(android.database.Cursor,java.lang.String,org.lineageos.eleven.provider.LocalizedStore$SortParameter,org.lineageos.eleven.provider.LocalizedStore$SortParameter,boolean,boolean):0 -> getLocalizedSort
    1:1:java.lang.String org.lineageos.eleven.provider.LocalizedStore$AlbumSortColumns.getOrderBy(boolean):0:0 -> getSortOrder
    1:1:org.lineageos.eleven.provider.LocalizedStore$SortData getSortOrder(org.lineageos.eleven.provider.LocalizedStore$SortParameter,org.lineageos.eleven.provider.LocalizedStore$SortParameter,boolean):0 -> getSortOrder
    2:2:org.lineageos.eleven.provider.LocalizedStore$SortData getSortOrder(org.lineageos.eleven.provider.LocalizedStore$SortParameter,org.lineageos.eleven.provider.LocalizedStore$SortParameter,boolean):0:0 -> getSortOrder
    3:3:java.lang.String org.lineageos.eleven.provider.LocalizedStore$SongSortColumns.getOrderBy(boolean):0:0 -> getSortOrder
    3:3:org.lineageos.eleven.provider.LocalizedStore$SortData getSortOrder(org.lineageos.eleven.provider.LocalizedStore$SortParameter,org.lineageos.eleven.provider.LocalizedStore$SortParameter,boolean):0 -> getSortOrder
    4:4:org.lineageos.eleven.provider.LocalizedStore$SortData getSortOrder(org.lineageos.eleven.provider.LocalizedStore$SortParameter,org.lineageos.eleven.provider.LocalizedStore$SortParameter,boolean):0:0 -> getSortOrder
    5:5:java.lang.String org.lineageos.eleven.provider.LocalizedStore$AlbumSortColumns.getOrderBy(boolean):0:0 -> getSortOrder
    5:5:org.lineageos.eleven.provider.LocalizedStore$SortData getSortOrder(org.lineageos.eleven.provider.LocalizedStore$SortParameter,org.lineageos.eleven.provider.LocalizedStore$SortParameter,boolean):0 -> getSortOrder
    6:6:org.lineageos.eleven.provider.LocalizedStore$SortData getSortOrder(org.lineageos.eleven.provider.LocalizedStore$SortParameter,org.lineageos.eleven.provider.LocalizedStore$SortParameter,boolean):0:0 -> getSortOrder
    void updateSongData(android.database.sqlite.SQLiteDatabase,long,java.lang.String,long,long) -> h
org.lineageos.eleven.provider.LocalizedStore$1 -> org.lineageos.eleven.provider.a:
    org.lineageos.eleven.provider.LocalizedStore this$0 -> a
org.lineageos.eleven.provider.LocalizedStore$AlbumSortColumns -> org.lineageos.eleven.provider.b:
    java.lang.String org.lineageos.eleven.provider.LocalizedStore$ArtistSortColumns.getOrderBy(boolean) -> getOrderBy1
org.lineageos.eleven.provider.LocalizedStore$SortData -> org.lineageos.eleven.provider.c:
    java.util.List bucketLabels -> b
    long[] ids -> a
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(org.lineageos.eleven.provider.LocalizedStore$1):0 -> <init>
org.lineageos.eleven.provider.LocalizedStore$SortParameter -> org.lineageos.eleven.provider.LocalizedStore$SortParameter:
    org.lineageos.eleven.provider.LocalizedStore$SortParameter[] $VALUES -> a
org.lineageos.eleven.provider.MusicDB -> org.lineageos.eleven.provider.MusicDB:
    android.content.Context mContext -> a
    org.lineageos.eleven.provider.MusicDB sInstance -> b
org.lineageos.eleven.provider.MusicPlaybackState -> org.lineageos.eleven.provider.MusicPlaybackState:
    org.lineageos.eleven.provider.MusicDB mMusicDatabase -> a
    org.lineageos.eleven.provider.MusicPlaybackState sInstance -> b
org.lineageos.eleven.provider.PlaylistArtworkStore -> org.lineageos.eleven.provider.PlaylistArtworkStore:
    android.content.Context mContext -> a
    org.lineageos.eleven.provider.PlaylistArtworkStore sInstance -> c
    org.lineageos.eleven.provider.MusicDB mMusicDatabase -> b
    android.database.Cursor getEntry(android.database.sqlite.SQLiteDatabase,long) -> a
    boolean needsUpdate(long,java.lang.String,java.lang.String) -> b
    1:1:android.content.ContentValues getExistingContentValues(android.database.sqlite.SQLiteDatabase,long):0:0 -> c
    1:1:void updateOrInsertTime(long,java.lang.String,java.lang.String):0 -> c
    2:2:void updateOrInsertTime(long,java.lang.String,java.lang.String):0:0 -> c
org.lineageos.eleven.provider.PropertiesStore -> org.lineageos.eleven.provider.PropertiesStore:
    org.lineageos.eleven.provider.PropertiesStore sInstance -> b
    org.lineageos.eleven.provider.MusicDB mMusicDatabase -> a
org.lineageos.eleven.provider.RecentStore -> org.lineageos.eleven.provider.RecentStore:
    org.lineageos.eleven.provider.RecentStore sInstance -> b
    org.lineageos.eleven.provider.MusicDB mMusicDatabase -> a
org.lineageos.eleven.provider.SearchHistory -> org.lineageos.eleven.provider.SearchHistory:
    org.lineageos.eleven.provider.MusicDB mMusicDatabase -> a
    org.lineageos.eleven.provider.SearchHistory sInstance -> b
org.lineageos.eleven.provider.SongPlayCount -> org.lineageos.eleven.provider.SongPlayCount:
    java.lang.String WHERE_ID_EQUALS -> i
    int ONE_WEEK_IN_MS -> h
    android.view.animation.Interpolator sInterpolator -> e
    int INTERPOLATOR_HEIGHT -> f
    int INTERPOLATOR_BASE -> g
    org.lineageos.eleven.provider.MusicDB mMusicDatabase -> a
    int mNumberOfWeeksSinceEpoch -> b
    boolean mDatabaseUpdated -> c
    org.lineageos.eleven.provider.SongPlayCount sInstance -> d
    void createNewPlayedEntry(android.database.sqlite.SQLiteDatabase,long) -> a
    void deleteEntry(android.database.sqlite.SQLiteDatabase,java.lang.String) -> b
    java.lang.String getColumnNameForWeek(int) -> c
    float getScoreMultiplierForWeek(int) -> d
    1:1:float calculateScore(int[]):0:0 -> e
    1:1:void updateExistingRow(android.database.sqlite.SQLiteDatabase,long,boolean):0 -> e
    2:2:void updateExistingRow(android.database.sqlite.SQLiteDatabase,long,boolean):0:0 -> e
    1:1:void updateResults():0:0 -> getTopPlayedResults
    1:1:android.database.Cursor getTopPlayedResults(int):0 -> getTopPlayedResults
    2:2:android.database.Cursor getTopPlayedResults(int):0:0 -> getTopPlayedResults
    3:3:void updateResults():0:0 -> getTopPlayedResults
    3:3:android.database.Cursor getTopPlayedResults(int):0 -> getTopPlayedResults
org.lineageos.eleven.sectionadapter.SectionCreator -> org.lineageos.eleven.sectionadapter.SectionCreator:
    org.lineageos.eleven.sectionadapter.SectionCreator$SimpleListLoader mLoader -> q
    org.lineageos.eleven.utils.SectionCreatorUtils$IItemCompare mComparator -> r
org.lineageos.eleven.service.MusicPlaybackTrack$1 -> org.lineageos.eleven.service.a:
    1:1:org.lineageos.eleven.service.MusicPlaybackTrack createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:org.lineageos.eleven.service.MusicPlaybackTrack[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout -> org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout:
    boolean mDirectOffset -> i
    int mParallaxOffset -> h
    boolean mOverlayContent -> k
    int mSlidePanelOffset -> f
    boolean mIsSlidingEnabled -> u
    android.view.View mMainView -> p
    int mCoveredFadeColor -> b
    org.lineageos.eleven.slidinguppanel.ViewDragHelper mDragHelper -> A
    org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$SlideState DEFAULT_SLIDE_STATE -> D
    float mAnchorPoint -> y
    float mInitialMotionX -> w
    android.view.View mSlideableView -> o
    int[] DEFAULT_ATTRS -> E
    int mSlideRange -> s
    android.graphics.drawable.Drawable mShadowDrawable -> d
    boolean mDragViewClickable -> n
    int mDragViewResId -> m
    org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$SlideState mSlideState -> q
    boolean mIsSlidingUp -> j
    int mShadowHeight -> g
    boolean mIsUsingDragViewTouchEvents -> v
    int mPanelHeight -> e
    org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$PanelSlideListener mPanelSlideListener -> z
    android.graphics.Rect mTmpRect -> C
    int mMinFlingVelocity -> a
    boolean mIsUnableToDrag -> t
    float mInitialMotionY -> x
    android.view.View mDragView -> l
    android.graphics.Paint mCoveredFadePaint -> c
    float mSlideOffset -> r
    boolean mFirstLayout -> B
    float access$100(org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout) -> a
    int access$1000(org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout,float) -> b
    int access$1100(org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout) -> c
    1:1:boolean collapsePanel(android.view.View,int):0:0 -> collapsePanel
    1:1:boolean collapsePanel():0 -> collapsePanel
    boolean access$200(org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout) -> d
    android.view.View access$300(org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout) -> e
    1:1:boolean expandPanel(android.view.View,int,float):0:0 -> expandPanel
    1:1:boolean expandPanel(float):0 -> expandPanel
    org.lineageos.eleven.slidinguppanel.ViewDragHelper access$400(org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout) -> f
    float access$500(org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout) -> g
    float access$502(org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout,float) -> h
    float access$600(org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout,int) -> i
    org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$SlideState access$700(org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout) -> j
    org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$SlideState access$702(org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout,org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$SlideState) -> k
    1:1:void onPanelDragged(int):0:0 -> l
    1:1:void access$800(org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout,int):0 -> l
    2:2:void dispatchOnPanelSlide(android.view.View):0:0 -> l
    2:2:void onPanelDragged(int):0 -> l
    2:2:void access$800(org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout,int):0 -> l
    3:3:void onPanelDragged(int):0:0 -> l
    3:3:void access$800(org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout,int):0 -> l
    boolean access$900(org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout) -> m
    int computePanelTopPosition(float) -> n
    float computeSlideOffset(int) -> o
    1:1:boolean isDragViewUnder(int,int):0:0 -> onInterceptTouchEvent
    1:1:boolean onInterceptTouchEvent(android.view.MotionEvent):0 -> onInterceptTouchEvent
    2:2:boolean onInterceptTouchEvent(android.view.MotionEvent):0:0 -> onInterceptTouchEvent
    void dispatchOnPanelAnchored(android.view.View) -> p
    void dispatchOnPanelCollapsed(android.view.View) -> q
    void dispatchOnPanelExpanded(android.view.View) -> r
    void dispatchOnPanelHidden(android.view.View) -> s
    void setAllChildrenVisible() -> t
    boolean smoothSlideTo(float,int) -> u
    1:1:boolean hasOpaqueBackground(android.view.View):0:0 -> v
    1:1:void updateObscuredViewVisibility():0 -> v
    2:2:void updateObscuredViewVisibility():0:0 -> v
org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$1 -> org.lineageos.eleven.slidinguppanel.a:
    org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout this$0 -> a
org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$DragHelperCallback -> org.lineageos.eleven.slidinguppanel.b:
    org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout this$0 -> a
    1:1:void <init>(org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout):0:0 -> <init>
    1:1:void <init>(org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout,org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$1):0 -> <init>
org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$LayoutParams -> org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$LayoutParams:
    int[] ATTRS -> a
org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$SavedState -> org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$SavedState:
    org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$SlideState mSlideState -> a
    1:1:void <init>(android.os.Parcel):0:0 -> <init>
    1:1:void <init>(android.os.Parcel,org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$1):0 -> <init>
org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$SavedState$1 -> org.lineageos.eleven.slidinguppanel.c:
    1:1:org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$SlideState -> org.lineageos.eleven.slidinguppanel.d:
    org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$SlideState HIDDEN -> d
    org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$SlideState ANCHORED -> c
    org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$SlideState COLLAPSED -> b
    org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$SlideState EXPANDED -> a
    org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$SlideState[] $VALUES -> f
    org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout$SlideState DRAGGING -> e
org.lineageos.eleven.slidinguppanel.ViewDragHelper -> org.lineageos.eleven.slidinguppanel.ViewDragHelper:
    int mEdgeSize -> o
    org.lineageos.eleven.slidinguppanel.ViewDragHelper$Callback mCallback -> r
    int mPointersDown -> k
    android.view.VelocityTracker mVelocityTracker -> l
    android.view.ViewGroup mParentView -> u
    float[] mLastMotionY -> g
    androidx.core.widget.ScrollerCompat mScroller -> q
    java.lang.Runnable mSetIdleRunnable -> v
    float[] mInitialMotionY -> e
    float[] mLastMotionX -> f
    android.view.View mCapturedView -> s
    float[] mInitialMotionX -> d
    int mTouchSlop -> b
    int mActivePointerId -> c
    int mDragState -> a
    boolean mReleaseInProgress -> t
    int[] mInitialEdgesTouched -> h
    int[] mEdgeDragsInProgress -> i
    android.view.animation.Interpolator sInterpolator -> w
    int[] mEdgeDragsLocked -> j
    float mMinVelocity -> n
    int mTrackingEdges -> p
    float mMaxVelocity -> m
    boolean checkNewEdgeDrag(float,float,int,int) -> a
    boolean checkTouchSlop(android.view.View,float,float) -> b
    float clampMag(float,float,float) -> c
    1:1:void clearMotionHistory():0:0 -> cancel
    1:1:void cancel():0 -> cancel
    2:2:void cancel():0:0 -> cancel
    int clampMag(int,int,int) -> d
    void clearMotionHistory(int) -> e
    1:1:float distanceInfluenceForSnapDuration(float):0:0 -> f
    1:1:int computeAxisDuration(int,int,int):0 -> f
    2:2:int computeAxisDuration(int,int,int):0:0 -> f
    void dispatchViewReleased(float,float) -> g
    1:1:int computeSettleDuration(android.view.View,int,int,int,int):0:0 -> h
    1:1:boolean forceSettleCapturedViewAt(int,int,int,int):0 -> h
    2:2:boolean forceSettleCapturedViewAt(int,int,int,int):0:0 -> h
    void releaseViewForPointerUp() -> i
    void reportNewEdgeDrags(float,float,int) -> j
    1:1:void ensureMotionHistorySizeForId(int):0:0 -> k
    1:1:void saveInitialMotion(float,float,int):0 -> k
    2:2:void saveInitialMotion(float,float,int):0:0 -> k
    3:3:int getEdgesTouched(int,int):0:0 -> k
    3:3:void saveInitialMotion(float,float,int):0 -> k
    4:4:void saveInitialMotion(float,float,int):0:0 -> k
    void saveLastMotion(android.view.MotionEvent) -> l
    void setDragState(int) -> m
    boolean tryCaptureViewForDrag(android.view.View,int) -> n
    1:1:void dragTo(int,int,int,int):0:0 -> processTouchEvent
    1:1:void processTouchEvent(android.view.MotionEvent):0 -> processTouchEvent
    2:2:void processTouchEvent(android.view.MotionEvent):0:0 -> processTouchEvent
org.lineageos.eleven.slidinguppanel.ViewDragHelper$1 -> org.lineageos.eleven.slidinguppanel.e:
org.lineageos.eleven.slidinguppanel.ViewDragHelper$2 -> org.lineageos.eleven.slidinguppanel.f:
    org.lineageos.eleven.slidinguppanel.ViewDragHelper this$0 -> a
org.lineageos.eleven.ui.HeaderBar -> org.lineageos.eleven.ui.HeaderBar:
    android.widget.TextView mTitleText -> c
    android.widget.ImageView mMenuButton -> a
    android.widget.PopupMenu mPopupMenu -> d
    android.widget.ImageView mBackButton -> b
    androidx.fragment.app.Fragment mFragment -> e
org.lineageos.eleven.ui.HeaderBar$1 -> org.lineageos.eleven.ui.a:
    org.lineageos.eleven.ui.HeaderBar this$0 -> a
org.lineageos.eleven.ui.HeaderBar$2 -> org.lineageos.eleven.ui.b:
    org.lineageos.eleven.ui.HeaderBar this$0 -> a
org.lineageos.eleven.ui.activities.-$$Lambda$HomeActivity$-z17EHIB9RMdxFNW75UzPSuwF24 -> org.lineageos.eleven.ui.activities.a:
    org.lineageos.eleven.ui.activities.HomeActivity f$0 -> a
    android.net.Uri f$1 -> b
org.lineageos.eleven.ui.activities.-$$Lambda$SettingsActivity$SettingsFragment$Ie8eYIe89Xq_FMaPih8BOUixdV0 -> org.lineageos.eleven.ui.activities.b:
    org.lineageos.eleven.ui.activities.SettingsActivity$SettingsFragment f$0 -> a
    1:1:boolean org.lineageos.eleven.ui.activities.SettingsActivity$SettingsFragment.lambda$onCreate$2$SettingsActivity$SettingsFragment(androidx.preference.Preference):0:0 -> onPreferenceClick
    1:1:boolean onPreferenceClick(androidx.preference.Preference):0 -> onPreferenceClick
    2:2:boolean org.lineageos.eleven.ui.activities.SettingsActivity$SettingsFragment.lambda$onCreate$2(androidx.preference.Preference):0:0 -> onPreferenceClick
    2:2:boolean org.lineageos.eleven.ui.activities.SettingsActivity$SettingsFragment.lambda$onCreate$2$SettingsActivity$SettingsFragment(androidx.preference.Preference):0 -> onPreferenceClick
    2:2:boolean onPreferenceClick(androidx.preference.Preference):0 -> onPreferenceClick
org.lineageos.eleven.ui.activities.-$$Lambda$SettingsActivity$SettingsFragment$RaPe8PYHlbkE3qdHW2RSPZg3s-A -> org.lineageos.eleven.ui.activities.c:
    org.lineageos.eleven.ui.activities.-$$Lambda$SettingsActivity$SettingsFragment$RaPe8PYHlbkE3qdHW2RSPZg3s-A INSTANCE -> a
    1:1:void org.lineageos.eleven.ui.activities.SettingsActivity$SettingsFragment.lambda$null$1(android.content.DialogInterface,int):0:0 -> onClick
    1:1:void onClick(android.content.DialogInterface,int):0 -> onClick
org.lineageos.eleven.ui.activities.-$$Lambda$SettingsActivity$SettingsFragment$vLxhpan9b-IBYCI3_YhOKJvphlQ -> org.lineageos.eleven.ui.activities.d:
    org.lineageos.eleven.ui.activities.SettingsActivity$SettingsFragment f$0 -> a
    1:1:void org.lineageos.eleven.ui.activities.SettingsActivity$SettingsFragment.lambda$null$0(android.content.DialogInterface,int):0:0 -> onClick
    1:1:void org.lineageos.eleven.ui.activities.SettingsActivity$SettingsFragment.lambda$null$0$SettingsActivity$SettingsFragment(android.content.DialogInterface,int):0 -> onClick
    1:1:void onClick(android.content.DialogInterface,int):0 -> onClick
org.lineageos.eleven.ui.activities.-$$Lambda$SlidingPanelActivity$-Qe5Xbauq5LxzkpKmnRMnZ2i4sM -> org.lineageos.eleven.ui.activities.e:
    org.lineageos.eleven.ui.activities.SlidingPanelActivity f$0 -> a
org.lineageos.eleven.ui.activities.BaseActivity -> org.lineageos.eleven.ui.activities.BaseActivity:
    android.widget.ImageView mAlbumArt -> y
    org.lineageos.eleven.ui.activities.BaseActivity$PlaybackStatus mPlaybackStatus -> z
    org.lineageos.eleven.widgets.PlayPauseProgressButton mPlayPauseProgressButton -> u
    androidx.appcompat.widget.Toolbar mToolBar -> r
    android.widget.TextView mTrackName -> w
    android.view.View$OnClickListener mOpenCurrentAlbumProfile -> B
    android.widget.TextView mArtistName -> x
    int mActionBarHeight -> s
    java.util.ArrayList mMusicStateListener -> q
    org.lineageos.eleven.utils.MusicUtils$ServiceToken mToken -> t
    org.lineageos.eleven.widgets.PlayPauseButtonContainer mPlayPauseButtonContainer -> v
    android.graphics.drawable.Drawable mActionBarBackground -> A
    org.lineageos.eleven.widgets.PlayPauseButtonContainer access$000(org.lineageos.eleven.ui.activities.BaseActivity) -> e
    org.lineageos.eleven.widgets.PlayPauseProgressButton access$100(org.lineageos.eleven.ui.activities.BaseActivity) -> f
    1:1:void updateBottomActionBarInfo():0:0 -> onMetaChanged
    1:1:void onMetaChanged():0 -> onMetaChanged
    2:2:void onMetaChanged():0:0 -> onMetaChanged
    1:1:void updatePlaybackControls():0:0 -> onResume
    1:1:void onResume():0 -> onResume
    2:2:void onResume():0:0 -> onResume
    1:1:void updatePlaybackControls():0:0 -> onServiceConnected
    1:1:void onServiceConnected(android.content.ComponentName,android.os.IBinder):0 -> onServiceConnected
    2:2:void onServiceConnected(android.content.ComponentName,android.os.IBinder):0:0 -> onServiceConnected
org.lineageos.eleven.ui.activities.BaseActivity$1 -> org.lineageos.eleven.ui.activities.f:
    org.lineageos.eleven.ui.activities.BaseActivity this$0 -> a
org.lineageos.eleven.ui.activities.BaseActivity$PlaybackStatus -> org.lineageos.eleven.ui.activities.g:
    java.lang.ref.WeakReference mReference -> a
org.lineageos.eleven.ui.activities.HomeActivity -> org.lineageos.eleven.ui.activities.HomeActivity:
    boolean mHasPendingPlaybackRequest -> M
    boolean mBrowsePanelActive -> O
    java.lang.String mKey -> K
    boolean mLoadedBaseFragment -> L
    android.os.Handler mHandler -> N
    java.lang.String ACTION_PREFIX -> P
    android.os.Bundle mSavedInstanceState -> J
    void access$100(org.lineageos.eleven.ui.activities.HomeActivity,int) -> i
    boolean handlePlaybackIntent(android.content.Intent) -> j
    void init() -> k
    1:1:void lambda$onActivityResult$0(android.net.Uri):0:0 -> l
    1:1:void lambda$onActivityResult$0$HomeActivity(android.net.Uri):0 -> l
    long parseIdFromIntent(android.content.Intent,java.lang.String,java.lang.String,long) -> m
    boolean parseIntentForFragment(android.content.Intent) -> n
    void updateStatusBarColor() -> o
    1:1:boolean needRequestStoragePermission():0:0 -> onCreate
    1:1:void onCreate(android.os.Bundle):0 -> onCreate
    2:2:void onCreate(android.os.Bundle):0:0 -> onCreate
    1:1:boolean checkPermissionGrantResults(int[]):0:0 -> onRequestPermissionsResult
    1:1:void onRequestPermissionsResult(int,java.lang.String[],int[]):0 -> onRequestPermissionsResult
    2:2:void onRequestPermissionsResult(int,java.lang.String[],int[]):0:0 -> onRequestPermissionsResult
    void updateStatusBarColor(int) -> p
org.lineageos.eleven.ui.activities.HomeActivity$1 -> org.lineageos.eleven.ui.activities.h:
    androidx.fragment.app.Fragment val$frag -> a
    org.lineageos.eleven.ui.activities.HomeActivity this$0 -> b
org.lineageos.eleven.ui.activities.HomeActivity$2 -> org.lineageos.eleven.ui.activities.i:
    org.lineageos.eleven.ui.activities.HomeActivity this$0 -> a
    1:1:org.lineageos.eleven.utils.colors.BitmapWithColors doInBackground(java.lang.Void[]):0:0 -> doInBackground
    1:1:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    1:1:void onPostExecute(org.lineageos.eleven.utils.colors.BitmapWithColors):0:0 -> onPostExecute
    1:1:void onPostExecute(java.lang.Object):0 -> onPostExecute
    2:2:void org.lineageos.eleven.ui.activities.HomeActivity.access$000(org.lineageos.eleven.ui.activities.HomeActivity,int):0:0 -> onPostExecute
    2:2:void onPostExecute(org.lineageos.eleven.utils.colors.BitmapWithColors):0 -> onPostExecute
    2:2:void onPostExecute(java.lang.Object):0 -> onPostExecute
    3:3:void org.lineageos.eleven.ui.activities.HomeActivity.updateVisualizerColor(int):0:0 -> onPostExecute
    3:3:void org.lineageos.eleven.ui.activities.HomeActivity.access$000(org.lineageos.eleven.ui.activities.HomeActivity,int):0 -> onPostExecute
    3:3:void onPostExecute(org.lineageos.eleven.utils.colors.BitmapWithColors):0 -> onPostExecute
    3:3:void onPostExecute(java.lang.Object):0 -> onPostExecute
    4:4:void onPostExecute(org.lineageos.eleven.utils.colors.BitmapWithColors):0:0 -> onPostExecute
    4:4:void onPostExecute(java.lang.Object):0 -> onPostExecute
org.lineageos.eleven.ui.activities.SearchActivity -> org.lineageos.eleven.ui.activities.SearchActivity:
    org.lineageos.eleven.utils.PopupMenuHelper mPopupMenuHelper -> F
    org.lineageos.eleven.widgets.LoadingEmptyContainer mLoadingEmptyContainer -> v
    org.lineageos.eleven.sectionadapter.SectionAdapter mAdapter -> w
    boolean mTopLevelSearch -> x
    java.lang.String mFilterString -> r
    android.widget.ListView mListView -> s
    org.lineageos.eleven.model.SearchResult$ResultType mSearchType -> y
    java.lang.Runnable mLoadingRunnable -> D
    org.lineageos.eleven.ui.activities.SearchActivity$VisibleState mCurrentState -> B
    org.lineageos.eleven.utils.MusicUtils$ServiceToken mToken -> q
    android.os.Handler mHandler -> C
    android.widget.SearchView mSearchView -> t
    android.widget.ListView mSearchHistoryListView -> A
    boolean mQuitting -> E
    org.lineageos.eleven.ui.activities.SearchActivity$SearchHistoryCallback mSearchHistoryCallback -> z
    android.view.inputmethod.InputMethodManager mImm -> u
    org.lineageos.eleven.sectionadapter.SectionAdapter access$000(org.lineageos.eleven.ui.activities.SearchActivity) -> e
    org.lineageos.eleven.utils.PopupMenuHelper access$100(org.lineageos.eleven.ui.activities.SearchActivity) -> f
    android.widget.ListView access$200(org.lineageos.eleven.ui.activities.SearchActivity) -> g
    android.widget.SearchView access$300(org.lineageos.eleven.ui.activities.SearchActivity) -> h
    1:1:void quit():0:0 -> i
    1:1:void access$400(org.lineageos.eleven.ui.activities.SearchActivity):0 -> i
    1:1:void initListView():0:0 -> onCreate
    1:1:void onCreate(android.os.Bundle):0 -> onCreate
    2:2:void onCreate(android.os.Bundle):0:0 -> onCreate
    1:1:void quit():0:0 -> onOptionsItemSelected
    1:1:boolean onOptionsItemSelected(android.view.MenuItem):0 -> onOptionsItemSelected
org.lineageos.eleven.ui.activities.SearchActivity$1 -> org.lineageos.eleven.ui.activities.j:
    org.lineageos.eleven.model.SearchResult mSelectedItem -> a
    org.lineageos.eleven.ui.activities.SearchActivity this$0 -> b
org.lineageos.eleven.ui.activities.SearchActivity$2 -> org.lineageos.eleven.ui.activities.k:
    org.lineageos.eleven.ui.activities.SearchActivity this$0 -> a
org.lineageos.eleven.ui.activities.SearchActivity$3 -> org.lineageos.eleven.ui.activities.l:
    org.lineageos.eleven.ui.activities.SearchActivity this$0 -> a
org.lineageos.eleven.ui.activities.SearchActivity$4 -> org.lineageos.eleven.ui.activities.m:
    org.lineageos.eleven.ui.activities.SearchActivity this$0 -> a
org.lineageos.eleven.ui.activities.SearchActivity$5 -> org.lineageos.eleven.ui.activities.n:
    org.lineageos.eleven.ui.activities.SearchActivity this$0 -> a
org.lineageos.eleven.ui.activities.SearchActivity$SearchHistoryCallback -> org.lineageos.eleven.ui.activities.SearchActivity$SearchHistoryCallback:
    org.lineageos.eleven.ui.activities.SearchActivity this$0 -> a
org.lineageos.eleven.ui.activities.SearchActivity$SummarySearchLoader -> org.lineageos.eleven.ui.activities.o:
    org.lineageos.eleven.model.SearchResult$ResultType mSearchType -> r
    java.lang.String mQuery -> q
    1:1:java.util.List loadInBackground():0:0 -> loadInBackground
    1:1:java.lang.Object loadInBackground():0 -> loadInBackground
    2:2:java.util.List runSearchForType():0:0 -> loadInBackground
    2:2:java.util.List loadInBackground():0 -> loadInBackground
    2:2:java.lang.Object loadInBackground():0 -> loadInBackground
    3:3:java.util.List runGenericSearch():0:0 -> loadInBackground
    3:3:java.util.List loadInBackground():0 -> loadInBackground
    3:3:java.lang.Object loadInBackground():0 -> loadInBackground
org.lineageos.eleven.ui.activities.SearchActivity$VisibleState -> org.lineageos.eleven.ui.activities.p:
    org.lineageos.eleven.ui.activities.SearchActivity$VisibleState Loading -> d
    org.lineageos.eleven.ui.activities.SearchActivity$VisibleState Empty -> b
    org.lineageos.eleven.ui.activities.SearchActivity$VisibleState[] $VALUES -> e
    org.lineageos.eleven.ui.activities.SearchActivity$VisibleState SearchResults -> c
    org.lineageos.eleven.ui.activities.SearchActivity$VisibleState SearchHistory -> a
org.lineageos.eleven.ui.activities.SettingsActivity$SettingsFragment -> org.lineageos.eleven.ui.activities.SettingsActivity$SettingsFragment:
    int $r8$clinit -> k0
    org.lineageos.eleven.utils.MusicUtils$ServiceToken mToken -> i0
    org.lineageos.eleven.IElevenService mService -> j0
org.lineageos.eleven.ui.activities.SlidingPanelActivity -> org.lineageos.eleven.ui.activities.SlidingPanelActivity:
    org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout mFirstPanel -> C
    org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout mSecondPanel -> D
    org.lineageos.eleven.widgets.AlbumScrimImage mAlbumScrimImage -> F
    org.lineageos.eleven.utils.colors.ColorExtractor$Callback mColorExtractorCallback -> I
    boolean mUseBlur -> G
    org.lineageos.eleven.ui.activities.SlidingPanelActivity$ShowPanelClickListener mShowMusicPlayer -> E
    android.view.View$OnClickListener mOpenNowPlaying -> H
    org.lineageos.eleven.slidinguppanel.SlidingUpPanelLayout access$000(org.lineageos.eleven.ui.activities.SlidingPanelActivity) -> g
    1:1:void lambda$new$0(org.lineageos.eleven.utils.colors.BitmapWithColors):0:0 -> h
    1:1:void lambda$new$0$SlidingPanelActivity(org.lineageos.eleven.utils.colors.BitmapWithColors):0 -> h
    1:1:void updateScrimImage():0:0 -> onCacheUnpaused
    1:1:void onCacheUnpaused():0 -> onCacheUnpaused
    1:1:void setupFirstPanel():0:0 -> onCreate
    1:1:void onCreate(android.os.Bundle):0 -> onCreate
    2:2:void setupSecondPanel():0:0 -> onCreate
    2:2:void onCreate(android.os.Bundle):0 -> onCreate
    3:3:void onCreate(android.os.Bundle):0:0 -> onCreate
    1:1:void updateScrimImage():0:0 -> onMetaChanged
    1:1:void onMetaChanged():0 -> onMetaChanged
org.lineageos.eleven.ui.activities.SlidingPanelActivity$1 -> org.lineageos.eleven.ui.activities.q:
    org.lineageos.eleven.ui.activities.SlidingPanelActivity this$0 -> a
org.lineageos.eleven.ui.activities.SlidingPanelActivity$2 -> org.lineageos.eleven.ui.activities.r:
    org.lineageos.eleven.ui.activities.SlidingPanelActivity this$0 -> a
org.lineageos.eleven.ui.activities.SlidingPanelActivity$3 -> org.lineageos.eleven.ui.activities.s:
    org.lineageos.eleven.ui.activities.SlidingPanelActivity this$0 -> a
org.lineageos.eleven.ui.activities.SlidingPanelActivity$Panel -> org.lineageos.eleven.ui.activities.SlidingPanelActivity$Panel:
    org.lineageos.eleven.ui.activities.SlidingPanelActivity$Panel[] $VALUES -> a
org.lineageos.eleven.ui.activities.SlidingPanelActivity$ShowPanelClickListener -> org.lineageos.eleven.ui.activities.t:
    org.lineageos.eleven.ui.activities.SlidingPanelActivity this$0 -> b
    org.lineageos.eleven.ui.activities.SlidingPanelActivity$Panel mTargetPanel -> a
org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity -> org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity:
    java.lang.String TAG -> H
    android.media.AudioManager mAudioManager -> u
    android.widget.ProgressBar mProgressBar -> C
    android.content.AsyncQueryHandler sAsyncQueryHandler -> J
    boolean mIsSeeking -> q
    boolean mWasPlaying -> r
    android.widget.TextView mTitleTextView -> z
    android.widget.SeekBar mSeekBar -> B
    android.widget.TextView mArtistTextView -> A
    org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity$State mCurrentState -> G
    java.lang.String[] MEDIA_PROJECTION -> I
    int mDuration -> x
    org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity$UiHandler mHandler -> t
    int mLastOrientationWhileBuffering -> y
    android.content.BroadcastReceiver mAudioNoisyReceiver -> s
    boolean mIsReceiverRegistered -> F
    android.view.View mContainerView -> E
    org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity$PreviewPlayer mPreviewPlayer -> v
    android.widget.ImageButton mPlayPauseBtn -> D
    org.lineageos.eleven.ui.activities.preview.PreviewSong mPreviewSong -> w
    1:1:void updateProgressForPlayer():0:0 -> e
    1:1:void access$000(org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity):0 -> e
    1:1:void pausePlayback():0:0 -> f
    1:1:void access$100(org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity):0 -> f
    1:1:void onQueryComplete(int,java.lang.Object,android.database.Cursor):0:0 -> g
    1:1:void access$300(org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity,int,java.lang.Object,android.database.Cursor):0 -> g
    2:2:java.lang.String getNameFromPath():0:0 -> g
    2:2:void onQueryComplete(int,java.lang.Object,android.database.Cursor):0 -> g
    2:2:void access$300(org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity,int,java.lang.Object,android.database.Cursor):0 -> g
    3:3:void onQueryComplete(int,java.lang.Object,android.database.Cursor):0:0 -> g
    3:3:void access$300(org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity,int,java.lang.Object,android.database.Cursor):0 -> g
    void pausePlayback(boolean) -> h
    1:1:void handleStateChangeForUi():0:0 -> i
    1:1:void sendStateChange(org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity$State):0 -> i
    void setNames() -> j
    1:1:boolean gainAudioFocus():0:0 -> k
    1:1:void startPlayback():0 -> k
    2:2:void startPlayback():0:0 -> k
    3:3:void startProgressUpdates():0:0 -> k
    3:3:void startPlayback():0 -> k
    4:4:void startPlayback():0:0 -> k
    1:1:void abandonAudioFocus():0:0 -> l
    1:1:void stopPlaybackAndTeardown():0 -> l
    1:1:void pausePlayback():0:0 -> onAudioFocusChange
    1:1:void onAudioFocusChange(int):0 -> onAudioFocusChange
    2:2:void onAudioFocusChange(int):0:0 -> onAudioFocusChange
    1:1:void pausePlayback():0:0 -> onClick
    1:1:void onClick(android.view.View):0 -> onClick
    2:2:void onClick(android.view.View):0:0 -> onClick
    1:1:void initializeInterface():0:0 -> onCreate
    1:1:void onCreate(android.os.Bundle):0 -> onCreate
    2:2:void registerNoisyAudioReceiver():0:0 -> onCreate
    2:2:void onCreate(android.os.Bundle):0 -> onCreate
    3:3:void processUri():0:0 -> onCreate
    3:3:void onCreate(android.os.Bundle):0 -> onCreate
    4:4:void handleContentScheme():0:0 -> onCreate
    4:4:void processUri():0 -> onCreate
    4:4:void onCreate(android.os.Bundle):0 -> onCreate
    5:5:void processUri():0:0 -> onCreate
    5:5:void onCreate(android.os.Bundle):0 -> onCreate
    6:6:void handleFileScheme():0:0 -> onCreate
    6:6:void processUri():0 -> onCreate
    6:6:void onCreate(android.os.Bundle):0 -> onCreate
    7:7:void processUri():0:0 -> onCreate
    7:7:void onCreate(android.os.Bundle):0 -> onCreate
    8:8:void handleHttpScheme():0:0 -> onCreate
    8:8:void processUri():0 -> onCreate
    8:8:void onCreate(android.os.Bundle):0 -> onCreate
    9:9:java.lang.String getNameFromPath():0:0 -> onCreate
    9:9:void handleHttpScheme():0 -> onCreate
    9:9:void processUri():0 -> onCreate
    9:9:void onCreate(android.os.Bundle):0 -> onCreate
    10:10:void handleHttpScheme():0:0 -> onCreate
    10:10:void processUri():0 -> onCreate
    10:10:void onCreate(android.os.Bundle):0 -> onCreate
    11:11:void onCreate(android.os.Bundle):0:0 -> onCreate
    12:12:void startProgressUpdates():0:0 -> onCreate
    12:12:void onCreate(android.os.Bundle):0 -> onCreate
    13:13:void onCreate(android.os.Bundle):0:0 -> onCreate
    1:1:void pausePlayback():0:0 -> onKeyDown
    1:1:boolean onKeyDown(int,android.view.KeyEvent):0 -> onKeyDown
    2:2:boolean onKeyDown(int,android.view.KeyEvent):0:0 -> onKeyDown
    3:3:void pausePlayback():0:0 -> onKeyDown
    3:3:boolean onKeyDown(int,android.view.KeyEvent):0 -> onKeyDown
    4:4:boolean onKeyDown(int,android.view.KeyEvent):0:0 -> onKeyDown
org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity$1 -> org.lineageos.eleven.ui.activities.preview.a:
    org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity this$0 -> a
org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity$2 -> org.lineageos.eleven.ui.activities.preview.b:
    org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity this$0 -> a
org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity$PreviewPlayer -> org.lineageos.eleven.ui.activities.preview.c:
    java.lang.ref.WeakReference mActivityReference -> a
    boolean mIsPrepared -> b
    void clearCallbackActivity() -> a
    boolean isPrepared() -> b
    void setCallbackActivity(org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity) -> c
    void setDataSourceAndPrepare(android.net.Uri) -> d
org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity$State -> org.lineageos.eleven.ui.activities.preview.d:
    org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity$State[] $VALUES -> e
    org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity$State PAUSED -> d
    org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity$State INIT -> a
    org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity$State PLAYING -> c
    org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity$State PREPARED -> b
org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity$UiHandler -> org.lineageos.eleven.ui.activities.preview.e:
    org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity this$0 -> a
    1:1:void <init>(org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity):0:0 -> <init>
    1:1:void <init>(org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity,org.lineageos.eleven.ui.activities.preview.AudioPreviewActivity$1):0 -> <init>
org.lineageos.eleven.ui.activities.preview.PreviewSong -> org.lineageos.eleven.ui.activities.preview.f:
    java.lang.String ARTIST -> c
    java.lang.String TITLE -> b
    android.net.Uri URI -> a
org.lineageos.eleven.ui.activities.preview.util.Logger -> org.lineageos.eleven.ui.activities.preview.util.Logger:
    1:1:boolean isDebugging():0:0 -> logd
    1:1:void logd(java.lang.String,java.lang.String):0 -> logd
    2:2:void logd(java.lang.String,java.lang.String):0:0 -> logd
org.lineageos.eleven.ui.fragments.-$$Lambda$AudioPlayerFragment$HWji_73iDu0MYpy4cO7U4tqCKxw -> org.lineageos.eleven.ui.fragments.a:
    java.util.List f$1 -> b
    org.lineageos.eleven.ui.fragments.AudioPlayerFragment f$0 -> a
org.lineageos.eleven.ui.fragments.-$$Lambda$AudioPlayerFragment$W-CUBIsk6jh_h1AhstzF7ZJ7NRk -> org.lineageos.eleven.ui.fragments.b:
    org.lineageos.eleven.ui.fragments.AudioPlayerFragment f$0 -> a
org.lineageos.eleven.ui.fragments.-$$Lambda$PlaylistFragment$yHK4KxN9kXBtxUN8TPbx-FOdohQ -> org.lineageos.eleven.ui.fragments.c:
    org.lineageos.eleven.ui.fragments.PlaylistFragment f$0 -> a
org.lineageos.eleven.ui.fragments.-$$Lambda$ssMhunrJu9y_o5uaM_rdF-95z3U -> org.lineageos.eleven.ui.fragments.d:
    org.lineageos.eleven.ui.fragments.AudioPlayerFragment f$0 -> a
org.lineageos.eleven.ui.fragments.AlbumDetailFragment -> org.lineageos.eleven.ui.fragments.AlbumDetailFragment:
    android.widget.ListView mSongs -> Y
    android.widget.TextView mGenre -> b0
    android.widget.TextView mAlbumDuration -> a0
    org.lineageos.eleven.widgets.LoadingEmptyContainer mLoadingEmptyContainer -> h0
    java.lang.String mAlbumName -> g0
    java.lang.String mArtistName -> f0
    long mAlbumId -> e0
    android.widget.ImageView mAlbumArt -> c0
    org.lineageos.eleven.adapters.DetailSongAdapter mSongAdapter -> Z
    org.lineageos.eleven.utils.PopupMenuHelper mSongMenuHelper -> d0
    long access$000(org.lineageos.eleven.ui.fragments.AlbumDetailFragment) -> F
    java.lang.String access$100(org.lineageos.eleven.ui.fragments.AlbumDetailFragment) -> G
    java.lang.String access$200(org.lineageos.eleven.ui.fragments.AlbumDetailFragment) -> H
    org.lineageos.eleven.adapters.DetailSongAdapter access$300(org.lineageos.eleven.ui.fragments.AlbumDetailFragment) -> I
    org.lineageos.eleven.widgets.LoadingEmptyContainer access$400(org.lineageos.eleven.ui.fragments.AlbumDetailFragment) -> J
    org.lineageos.eleven.utils.PopupMenuHelper access$500(org.lineageos.eleven.ui.fragments.AlbumDetailFragment) -> K
    1:1:void setupPopupMenuHelper():0:0 -> onViewCreated
    1:1:void onViewCreated():0 -> onViewCreated
    2:2:void setupHeader(java.lang.String,android.os.Bundle):0:0 -> onViewCreated
    2:2:void onViewCreated():0 -> onViewCreated
    3:3:void setupCountAndYear(android.view.View,java.lang.String,int):0:0 -> onViewCreated
    3:3:void setupHeader(java.lang.String,android.os.Bundle):0 -> onViewCreated
    3:3:void onViewCreated():0 -> onViewCreated
    4:4:void setupHeader(java.lang.String,android.os.Bundle):0:0 -> onViewCreated
    4:4:void onViewCreated():0 -> onViewCreated
    5:5:void setupSongList():0:0 -> onViewCreated
    5:5:void onViewCreated():0 -> onViewCreated
    6:6:void onViewCreated():0:0 -> onViewCreated
org.lineageos.eleven.ui.fragments.AlbumDetailFragment$1 -> org.lineageos.eleven.ui.fragments.e:
    org.lineageos.eleven.ui.fragments.AlbumDetailFragment this$0 -> a
org.lineageos.eleven.ui.fragments.AlbumDetailFragment$2 -> org.lineageos.eleven.ui.fragments.f:
    org.lineageos.eleven.ui.fragments.AlbumDetailFragment this$0 -> a
org.lineageos.eleven.ui.fragments.AlbumDetailFragment$3 -> org.lineageos.eleven.ui.fragments.g:
    org.lineageos.eleven.ui.fragments.AlbumDetailFragment this$0 -> h
org.lineageos.eleven.ui.fragments.AlbumDetailFragment$4 -> org.lineageos.eleven.ui.fragments.h:
    org.lineageos.eleven.ui.fragments.AlbumDetailFragment this$0 -> a
org.lineageos.eleven.ui.fragments.AlbumFragment -> org.lineageos.eleven.ui.fragments.AlbumFragment:
    org.lineageos.eleven.adapters.AlbumAdapter mAdapter -> Z
    android.widget.GridView mGridView -> a0
    org.lineageos.eleven.widgets.LoadingEmptyContainer mLoadingEmptyContainer -> c0
    android.view.ViewGroup mRootView -> Y
    org.lineageos.eleven.utils.PopupMenuHelper mPopupMenuHelper -> b0
    org.lineageos.eleven.adapters.AlbumAdapter access$000(org.lineageos.eleven.ui.fragments.AlbumFragment) -> F
    org.lineageos.eleven.utils.PopupMenuHelper access$100(org.lineageos.eleven.ui.fragments.AlbumFragment) -> G
    1:1:void initGridView():0:0 -> onCreateView
    1:1:android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle):0 -> onCreateView
    2:2:void initAbsListView(android.widget.AbsListView):0:0 -> onCreateView
    2:2:void initGridView():0 -> onCreateView
    2:2:android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle):0 -> onCreateView
    3:3:void initGridView():0:0 -> onCreateView
    3:3:android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle):0 -> onCreateView
    4:4:android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle):0:0 -> onCreateView
    1:1:int getItemPositionByAlbum():0:0 -> scrollToCurrentAlbum
    1:1:void scrollToCurrentAlbum():0 -> scrollToCurrentAlbum
    2:2:void scrollToCurrentAlbum():0:0 -> scrollToCurrentAlbum
org.lineageos.eleven.ui.fragments.AlbumFragment$1 -> org.lineageos.eleven.ui.fragments.i:
    org.lineageos.eleven.ui.fragments.AlbumFragment this$0 -> a
org.lineageos.eleven.ui.fragments.AlbumFragment$2 -> org.lineageos.eleven.ui.fragments.j:
    org.lineageos.eleven.ui.fragments.AlbumFragment this$0 -> a
org.lineageos.eleven.ui.fragments.ArtistDetailFragment -> org.lineageos.eleven.ui.fragments.ArtistDetailFragment:
    long mArtistId -> Y
    org.lineageos.eleven.widgets.LoadingEmptyContainer mLoadingEmptyContainer -> i0
    org.lineageos.eleven.utils.PopupMenuHelper mAlbumPopupMenuHelper -> h0
    java.lang.String mArtistName -> Z
    android.view.View mHeader -> b0
    android.widget.ListView mSongs -> c0
    android.widget.ImageView mHero -> a0
    org.lineageos.eleven.adapters.ArtistDetailAlbumAdapter mAlbumAdapter -> f0
    androidx.recyclerview.widget.RecyclerView mAlbums -> e0
    org.lineageos.eleven.adapters.ArtistDetailSongAdapter mSongAdapter -> d0
    org.lineageos.eleven.utils.PopupMenuHelper mSongPopupMenuHelper -> g0
    long access$000(org.lineageos.eleven.ui.fragments.ArtistDetailFragment) -> F
    java.lang.String access$100(org.lineageos.eleven.ui.fragments.ArtistDetailFragment) -> G
    android.widget.ImageView access$200(org.lineageos.eleven.ui.fragments.ArtistDetailFragment) -> H
    org.lineageos.eleven.utils.PopupMenuHelper access$300(org.lineageos.eleven.ui.fragments.ArtistDetailFragment) -> I
    org.lineageos.eleven.widgets.LoadingEmptyContainer access$400(org.lineageos.eleven.ui.fragments.ArtistDetailFragment) -> J
    org.lineageos.eleven.utils.PopupMenuHelper access$500(org.lineageos.eleven.ui.fragments.ArtistDetailFragment) -> K
    org.lineageos.eleven.adapters.ArtistDetailSongAdapter access$600(org.lineageos.eleven.ui.fragments.ArtistDetailFragment) -> L
    org.lineageos.eleven.adapters.ArtistDetailAlbumAdapter access$700(org.lineageos.eleven.ui.fragments.ArtistDetailFragment) -> M
    1:1:void setupPopupMenuHelpers():0:0 -> onViewCreated
    1:1:void onViewCreated():0 -> onViewCreated
    2:2:void setupSongList():0:0 -> onViewCreated
    2:2:void onViewCreated():0 -> onViewCreated
    3:3:void setupAlbumList():0:0 -> onViewCreated
    3:3:void onViewCreated():0 -> onViewCreated
    4:4:void onViewCreated():0:0 -> onViewCreated
    5:5:void setupHero(java.lang.String):0:0 -> onViewCreated
    5:5:void onViewCreated():0 -> onViewCreated
    6:6:void onViewCreated():0:0 -> onViewCreated
org.lineageos.eleven.ui.fragments.ArtistDetailFragment$1 -> org.lineageos.eleven.ui.fragments.k:
    org.lineageos.eleven.ui.fragments.ArtistDetailFragment this$0 -> b
org.lineageos.eleven.ui.fragments.ArtistDetailFragment$2 -> org.lineageos.eleven.ui.fragments.l:
    org.lineageos.eleven.ui.fragments.ArtistDetailFragment this$0 -> a
org.lineageos.eleven.ui.fragments.ArtistDetailFragment$3 -> org.lineageos.eleven.ui.fragments.m:
    org.lineageos.eleven.ui.fragments.ArtistDetailFragment this$0 -> a
org.lineageos.eleven.ui.fragments.ArtistDetailFragment$4 -> org.lineageos.eleven.ui.fragments.n:
    org.lineageos.eleven.ui.fragments.ArtistDetailFragment this$0 -> g
org.lineageos.eleven.ui.fragments.ArtistDetailFragment$5 -> org.lineageos.eleven.ui.fragments.o:
    org.lineageos.eleven.ui.fragments.ArtistDetailFragment this$0 -> a
org.lineageos.eleven.ui.fragments.ArtistDetailFragment$6 -> org.lineageos.eleven.ui.fragments.p:
    org.lineageos.eleven.ui.fragments.ArtistDetailFragment this$0 -> a
org.lineageos.eleven.ui.fragments.ArtistDetailFragment$7 -> org.lineageos.eleven.ui.fragments.q:
    org.lineageos.eleven.ui.fragments.ArtistDetailFragment this$0 -> a
org.lineageos.eleven.ui.fragments.ArtistFragment -> org.lineageos.eleven.ui.fragments.ArtistFragment:
    org.lineageos.eleven.sectionadapter.SectionAdapter mAdapter -> Z
    org.lineageos.eleven.widgets.LoadingEmptyContainer mLoadingEmptyContainer -> c0
    android.view.ViewGroup mRootView -> Y
    android.widget.ListView mListView -> a0
    org.lineageos.eleven.utils.PopupMenuHelper mPopupMenuHelper -> b0
    org.lineageos.eleven.sectionadapter.SectionAdapter access$000(org.lineageos.eleven.ui.fragments.ArtistFragment) -> F
    org.lineageos.eleven.utils.PopupMenuHelper access$100(org.lineageos.eleven.ui.fragments.ArtistFragment) -> G
    1:1:void initListView():0:0 -> onCreateView
    1:1:android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle):0 -> onCreateView
    2:2:void initAbsListView(android.widget.AbsListView):0:0 -> onCreateView
    2:2:void initListView():0 -> onCreateView
    2:2:android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle):0 -> onCreateView
    3:3:android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle):0:0 -> onCreateView
    1:1:int getItemPositionByArtist():0:0 -> scrollToCurrentArtist
    1:1:void scrollToCurrentArtist():0 -> scrollToCurrentArtist
    2:2:void scrollToCurrentArtist():0:0 -> scrollToCurrentArtist
org.lineageos.eleven.ui.fragments.ArtistFragment$1 -> org.lineageos.eleven.ui.fragments.r:
    org.lineageos.eleven.ui.fragments.ArtistFragment this$0 -> b
org.lineageos.eleven.ui.fragments.ArtistFragment$2 -> org.lineageos.eleven.ui.fragments.s:
    org.lineageos.eleven.ui.fragments.ArtistFragment this$0 -> a
org.lineageos.eleven.ui.fragments.AudioPlayerFragment -> org.lineageos.eleven.ui.fragments.AudioPlayerFragment:
    android.widget.TextView mSongTitle -> b0
    org.lineageos.eleven.widgets.MainPlaybackControls mMainPlaybackControls -> h0
    android.view.ViewGroup mRootView -> Z
    androidx.appcompat.widget.Toolbar mPlayerToolBar -> a0
    org.lineageos.eleven.cache.ImageFetcher mImageFetcher -> k0
    long mSelectedId -> m0
    org.lineageos.eleven.ui.fragments.AudioPlayerFragment$PlaybackStatus mPlaybackStatus -> i0
    org.lineageos.eleven.widgets.VisualizerView mVisualizerView -> g0
    org.lineageos.eleven.utils.MusicUtils$ServiceToken mToken -> d0
    org.lineageos.eleven.ui.fragments.AudioPlayerFragment$TimeHandler mTimeHandler -> j0
    android.widget.TextView mLyricsText -> l0
    android.app.AlertDialog mAlertDialog -> Y
    org.lineageos.eleven.widgets.LoadingEmptyContainer mQueueEmpty -> f0
    java.lang.String TAG -> n0
    androidx.viewpager.widget.ViewPager mAlbumArtViewPager -> e0
    android.widget.TextView mArtistName -> c0
    java.lang.String access$000() -> F
    long access$100(org.lineageos.eleven.ui.fragments.AudioPlayerFragment) -> G
    void access$200(org.lineageos.eleven.ui.fragments.AudioPlayerFragment,long) -> H
    void access$300(org.lineageos.eleven.ui.fragments.AudioPlayerFragment) -> I
    void access$400(org.lineageos.eleven.ui.fragments.AudioPlayerFragment) -> J
    org.lineageos.eleven.widgets.MainPlaybackControls access$500(org.lineageos.eleven.ui.fragments.AudioPlayerFragment) -> K
    org.lineageos.eleven.widgets.VisualizerView access$600(org.lineageos.eleven.ui.fragments.AudioPlayerFragment) -> L
    void createAndSetAdapter() -> M
    1:1:void lambda$onOptionsItemSelected$0(java.util.List,android.content.DialogInterface,int):0:0 -> N
    1:1:void lambda$onOptionsItemSelected$0$AudioPlayerFragment(java.util.List,android.content.DialogInterface,int):0 -> N
    1:1:void lambda$onOptionsItemSelected$1(android.content.DialogInterface,int):0:0 -> O
    1:1:void lambda$onOptionsItemSelected$1$AudioPlayerFragment(android.content.DialogInterface,int):0 -> O
    void queueNextRefresh(long) -> P
    long refreshCurrentTime() -> Q
    void updateNowPlayingInfo() -> R
    1:1:void initHeaderBar():0:0 -> onCreateView
    1:1:android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle):0 -> onCreateView
    2:2:void initPlaybackControls():0:0 -> onCreateView
    2:2:android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle):0 -> onCreateView
    3:3:void setupNoResultsContainer(org.lineageos.eleven.widgets.NoResultsContainer):0:0 -> onCreateView
    3:3:void initPlaybackControls():0 -> onCreateView
    3:3:android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle):0 -> onCreateView
    4:4:android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle):0:0 -> onCreateView
org.lineageos.eleven.ui.fragments.AudioPlayerFragment$1 -> org.lineageos.eleven.ui.fragments.t:
    org.lineageos.eleven.ui.fragments.AudioPlayerFragment this$0 -> a
org.lineageos.eleven.ui.fragments.AudioPlayerFragment$PlaybackStatus -> org.lineageos.eleven.ui.fragments.u:
    java.lang.ref.WeakReference mReference -> a
org.lineageos.eleven.ui.fragments.AudioPlayerFragment$TimeHandler -> org.lineageos.eleven.ui.fragments.v:
    java.lang.ref.WeakReference mAudioPlayer -> a
org.lineageos.eleven.ui.fragments.BaseFragment$1 -> org.lineageos.eleven.ui.fragments.w:
org.lineageos.eleven.ui.fragments.PlaylistDetailFragment -> org.lineageos.eleven.ui.fragments.PlaylistDetailFragment:
    java.lang.String mPlaylistName -> g0
    org.lineageos.eleven.widgets.LoadingEmptyContainer mLoadingEmptyContainer -> c0
    org.lineageos.eleven.utils.PopupMenuHelper mPopupMenuHelper -> h0
    org.lineageos.eleven.dragdrop.DragSortListView mListView -> Y
    long mPlaylistId -> f0
    android.view.View mHeaderContainer -> a0
    org.lineageos.eleven.adapters.ProfileSongAdapter mAdapter -> Z
    android.widget.ImageView mPlaylistImageView -> b0
    android.widget.TextView mDurationOfPlaylist -> e0
    android.widget.TextView mNumberOfSongs -> d0
    long access$000(org.lineageos.eleven.ui.fragments.PlaylistDetailFragment) -> F
    org.lineageos.eleven.adapters.ProfileSongAdapter access$100(org.lineageos.eleven.ui.fragments.PlaylistDetailFragment) -> G
    org.lineageos.eleven.utils.PopupMenuHelper access$200(org.lineageos.eleven.ui.fragments.PlaylistDetailFragment) -> H
    1:1:void lookupName():0:0 -> onCreate
    1:1:void onCreate(android.os.Bundle):0 -> onCreate
    1:1:void setupHero():0:0 -> onViewCreated
    1:1:void onViewCreated():0 -> onViewCreated
    2:2:void setupSongList():0:0 -> onViewCreated
    2:2:void onViewCreated():0 -> onViewCreated
    3:3:void setupNoResultsContainer(org.lineageos.eleven.widgets.NoResultsContainer):0:0 -> onViewCreated
    3:3:void setupSongList():0 -> onViewCreated
    3:3:void onViewCreated():0 -> onViewCreated
    4:4:void setupSongList():0:0 -> onViewCreated
    4:4:void onViewCreated():0 -> onViewCreated
    1:1:void lookupName():0:0 -> restartLoader
    1:1:void restartLoader():0 -> restartLoader
    2:2:void restartLoader():0:0 -> restartLoader
org.lineageos.eleven.ui.fragments.PlaylistDetailFragment$1 -> org.lineageos.eleven.ui.fragments.x:
    org.lineageos.eleven.ui.fragments.PlaylistDetailFragment this$0 -> b
org.lineageos.eleven.ui.fragments.PlaylistDetailFragment$2 -> org.lineageos.eleven.ui.fragments.y:
    org.lineageos.eleven.ui.fragments.PlaylistDetailFragment this$0 -> a
org.lineageos.eleven.ui.fragments.PlaylistDetailFragment$3 -> org.lineageos.eleven.ui.fragments.z:
    org.lineageos.eleven.ui.fragments.PlaylistDetailFragment this$0 -> a
org.lineageos.eleven.ui.fragments.PlaylistFragment -> org.lineageos.eleven.ui.fragments.PlaylistFragment:
    android.widget.ListView mListView -> Z
    org.lineageos.eleven.adapters.PlaylistAdapter mAdapter -> Y
    org.lineageos.eleven.widgets.LoadingEmptyContainer mLoadingEmptyContainer -> b0
    org.lineageos.eleven.utils.PopupMenuHelper mPopupMenuHelper -> a0
    org.lineageos.eleven.adapters.PlaylistAdapter access$000(org.lineageos.eleven.ui.fragments.PlaylistFragment) -> F
    1:1:void lambda$onCreate$0(android.view.View,int):0:0 -> G
    1:1:void lambda$onCreate$0$PlaylistFragment(android.view.View,int):0 -> G
org.lineageos.eleven.ui.fragments.PlaylistFragment$1 -> org.lineageos.eleven.ui.fragments.a0:
    org.lineageos.eleven.ui.fragments.PlaylistFragment this$0 -> b
org.lineageos.eleven.ui.fragments.QueueFragment -> org.lineageos.eleven.ui.fragments.QueueFragment:
    org.lineageos.eleven.ui.fragments.QueueFragment$QueueUpdateListener mQueueUpdateListener -> Z
    org.lineageos.eleven.adapters.SongAdapter mAdapter -> a0
    org.lineageos.eleven.widgets.LoadingEmptyContainer mLoadingEmptyContainer -> e0
    org.lineageos.eleven.dragdrop.DragSortListView mListView -> b0
    org.lineageos.eleven.utils.MusicUtils$ServiceToken mToken -> Y
    android.view.ViewGroup mRootView -> d0
    org.lineageos.eleven.utils.PopupMenuHelper mPopupMenuHelper -> c0
    org.lineageos.eleven.adapters.SongAdapter access$000(org.lineageos.eleven.ui.fragments.QueueFragment) -> F
    org.lineageos.eleven.utils.PopupMenuHelper access$100(org.lineageos.eleven.ui.fragments.QueueFragment) -> G
    1:1:void setupNoResultsContainer(org.lineageos.eleven.widgets.NoResultsContainer):0:0 -> onCreateView
    1:1:android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle):0 -> onCreateView
    2:2:android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle):0:0 -> onCreateView
org.lineageos.eleven.ui.fragments.QueueFragment$1 -> org.lineageos.eleven.ui.fragments.b0:
    org.lineageos.eleven.service.MusicPlaybackTrack mSelectedTrack -> c
    org.lineageos.eleven.ui.fragments.QueueFragment this$0 -> d
    org.lineageos.eleven.model.Song mSong -> a
    int mSelectedPosition -> b
org.lineageos.eleven.ui.fragments.QueueFragment$2 -> org.lineageos.eleven.ui.fragments.c0:
    org.lineageos.eleven.ui.fragments.QueueFragment this$0 -> a
org.lineageos.eleven.ui.fragments.QueueFragment$QueueUpdateListener -> org.lineageos.eleven.ui.fragments.d0:
    java.lang.ref.WeakReference mReference -> a
org.lineageos.eleven.ui.fragments.RecentFragment$RecentAdapter -> org.lineageos.eleven.ui.fragments.e0:
org.lineageos.eleven.ui.fragments.SongFragment -> org.lineageos.eleven.ui.fragments.SongFragment:
    1:1:int getItemPositionBySong():0:0 -> scrollToCurrentSong
    1:1:void scrollToCurrentSong():0 -> scrollToCurrentSong
    2:2:void scrollToCurrentSong():0:0 -> scrollToCurrentSong
org.lineageos.eleven.ui.fragments.phone.MusicBrowserPhoneFragment -> org.lineageos.eleven.ui.fragments.phone.MusicBrowserPhoneFragment:
    androidx.viewpager.widget.ViewPager mViewPager -> Y
    int mDefaultPageIdx -> b0
    org.lineageos.eleven.adapters.PagerAdapter mPagerAdapter -> Z
    org.lineageos.eleven.utils.PreferenceUtils mPreferences -> a0
    boolean isAlbumPage() -> F
    boolean isArtistPage() -> G
    boolean isSongPage() -> H
    void navigateToPage(int) -> I
    1:1:boolean isPlaylistPage():0:0 -> onCreateOptionsMenu
    1:1:void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater):0 -> onCreateOptionsMenu
    2:2:void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater):0:0 -> onCreateOptionsMenu
    1:1:boolean isPlaylistPage():0:0 -> onOptionsItemSelected
    1:1:boolean onOptionsItemSelected(android.view.MenuItem):0 -> onOptionsItemSelected
    2:2:boolean onOptionsItemSelected(android.view.MenuItem):0:0 -> onOptionsItemSelected
org.lineageos.eleven.ui.fragments.profile.BasicSongFragment$1 -> org.lineageos.eleven.ui.fragments.profile.a:
    org.lineageos.eleven.ui.fragments.profile.BasicSongFragment this$0 -> a
org.lineageos.eleven.ui.fragments.profile.BasicSongFragment$2 -> org.lineageos.eleven.ui.fragments.profile.b:
    org.lineageos.eleven.ui.fragments.profile.BasicSongFragment this$0 -> a
org.lineageos.eleven.ui.fragments.profile.BasicSongFragment$3 -> org.lineageos.eleven.ui.fragments.profile.c:
    org.lineageos.eleven.ui.fragments.profile.BasicSongFragment this$0 -> a
org.lineageos.eleven.ui.fragments.profile.SmartPlaylistFragment -> org.lineageos.eleven.ui.fragments.profile.SmartPlaylistFragment:
    org.lineageos.eleven.utils.PopupMenuHelper mActionMenuHelper -> Y
org.lineageos.eleven.ui.fragments.profile.SmartPlaylistFragment$1 -> org.lineageos.eleven.ui.fragments.profile.d:
    org.lineageos.eleven.ui.fragments.profile.SmartPlaylistFragment this$0 -> b
org.lineageos.eleven.utils.-$$Lambda$PopupMenuHelper$GgkeMnZNXWNebH--TZm08lxK3Xo -> org.lineageos.eleven.utils.a:
    org.lineageos.eleven.utils.PopupMenuHelper f$0 -> a
    1:1:void org.lineageos.eleven.utils.PopupMenuHelper.lambda$onMenuItemClick$1$PopupMenuHelper(android.content.DialogInterface,int):0:0 -> onClick
    1:1:void onClick(android.content.DialogInterface,int):0 -> onClick
    2:2:void org.lineageos.eleven.utils.PopupMenuHelper.lambda$onMenuItemClick$1(android.content.DialogInterface,int):0:0 -> onClick
    2:2:void org.lineageos.eleven.utils.PopupMenuHelper.lambda$onMenuItemClick$1$PopupMenuHelper(android.content.DialogInterface,int):0 -> onClick
    2:2:void onClick(android.content.DialogInterface,int):0 -> onClick
org.lineageos.eleven.utils.-$$Lambda$PopupMenuHelper$SeFvgQVZXlTxTXmklBmHZNeC92A -> org.lineageos.eleven.utils.b:
    java.util.List f$1 -> b
    org.lineageos.eleven.utils.PopupMenuHelper f$0 -> a
    1:1:void org.lineageos.eleven.utils.PopupMenuHelper.lambda$onMenuItemClick$0$PopupMenuHelper(java.util.List,android.content.DialogInterface,int):0:0 -> onClick
    1:1:void onClick(android.content.DialogInterface,int):0 -> onClick
    2:2:void org.lineageos.eleven.utils.PopupMenuHelper.lambda$onMenuItemClick$0(java.util.List,android.content.DialogInterface,int):0:0 -> onClick
    2:2:void org.lineageos.eleven.utils.PopupMenuHelper.lambda$onMenuItemClick$0$PopupMenuHelper(java.util.List,android.content.DialogInterface,int):0 -> onClick
    2:2:void onClick(android.content.DialogInterface,int):0 -> onClick
org.lineageos.eleven.utils.ArtistPopupMenuHelper -> org.lineageos.eleven.utils.ArtistPopupMenuHelper:
    org.lineageos.eleven.model.Artist mArtist -> a
org.lineageos.eleven.utils.ElevenUtils$1 -> org.lineageos.eleven.utils.c:
    java.lang.Runnable val$runnable -> b
    android.view.View val$view -> a
org.lineageos.eleven.utils.GenreFetcher -> org.lineageos.eleven.utils.GenreFetcher:
    android.content.Context mContext -> a
    android.widget.TextView mTextView -> c
    java.lang.String[] GENRE_PROJECTION -> d
    int mSongId -> b
org.lineageos.eleven.utils.MusicUtils -> org.lineageos.eleven.utils.MusicUtils:
    long[] sEmptyList -> a
    java.util.Set sKnownTokens -> b
    android.content.ContentValues[] mContentValuesCache -> c
    org.lineageos.eleven.IElevenService getService() -> a
org.lineageos.eleven.utils.MusicUtils$1 -> org.lineageos.eleven.utils.d:
org.lineageos.eleven.utils.MusicUtils$ServiceBinder -> org.lineageos.eleven.utils.MusicUtils$ServiceBinder:
    android.content.ServiceConnection mCallback -> a
    org.lineageos.eleven.IElevenService mServiceConnection -> b
    org.lineageos.eleven.IElevenService access$300(org.lineageos.eleven.utils.MusicUtils$ServiceBinder) -> a
org.lineageos.eleven.utils.MusicUtils$ServiceToken -> org.lineageos.eleven.utils.MusicUtils$ServiceToken:
    org.lineageos.eleven.utils.MusicUtils$ServiceBinder mBinder -> b
    java.lang.ref.WeakReference mContextRef -> a
    1:1:void <init>(android.content.Context,org.lineageos.eleven.utils.MusicUtils$ServiceBinder):0:0 -> <init>
    1:1:void <init>(android.content.Context,org.lineageos.eleven.utils.MusicUtils$ServiceBinder,org.lineageos.eleven.utils.MusicUtils$1):0 -> <init>
    org.lineageos.eleven.utils.MusicUtils$ServiceBinder access$100(org.lineageos.eleven.utils.MusicUtils$ServiceToken) -> a
    1:1:void discard():0:0 -> b
    1:1:void access$200(org.lineageos.eleven.utils.MusicUtils$ServiceToken):0 -> b
org.lineageos.eleven.utils.NavUtils -> org.lineageos.eleven.utils.NavUtils:
    1:1:android.content.Intent createEffectsIntent():0:0 -> hasEffectsPanel
    1:1:boolean hasEffectsPanel(android.app.Activity):0 -> hasEffectsPanel
    2:2:boolean hasEffectsPanel(android.app.Activity):0:0 -> hasEffectsPanel
    1:1:android.content.Intent createEffectsIntent():0:0 -> openEffectsPanel
    1:1:void openEffectsPanel(android.app.Activity,int):0 -> openEffectsPanel
    2:2:void openEffectsPanel(android.app.Activity,int):0:0 -> openEffectsPanel
org.lineageos.eleven.utils.PlaylistPopupMenuHelper -> org.lineageos.eleven.utils.PlaylistPopupMenuHelper:
    org.lineageos.eleven.model.Playlist mPlaylist -> a
    1:1:android.app.AlertDialog buildDeleteDialog(long,java.lang.String):0:0 -> onDeleteClicked
    1:1:void onDeleteClicked():0 -> onDeleteClicked
    2:2:void onDeleteClicked():0:0 -> onDeleteClicked
org.lineageos.eleven.utils.PlaylistPopupMenuHelper$1 -> org.lineageos.eleven.utils.e:
org.lineageos.eleven.utils.PlaylistPopupMenuHelper$2 -> org.lineageos.eleven.utils.f:
    long val$playlistId -> a
    org.lineageos.eleven.utils.PlaylistPopupMenuHelper this$0 -> b
org.lineageos.eleven.utils.PopupMenuHelper -> org.lineageos.eleven.utils.PopupMenuHelper:
    1:1:int[] getIdsForType(org.lineageos.eleven.utils.PopupMenuHelper$PopupMenuType):0:0 -> createPopupMenu
    1:1:void createPopupMenu(android.view.Menu):0 -> createPopupMenu
    2:2:void createPopupMenu(android.view.Menu):0:0 -> createPopupMenu
org.lineageos.eleven.utils.PopupMenuHelper$PopupMenuType -> org.lineageos.eleven.utils.PopupMenuHelper$PopupMenuType:
    org.lineageos.eleven.utils.PopupMenuHelper$PopupMenuType[] $VALUES -> a
org.lineageos.eleven.utils.PreferenceUtils -> org.lineageos.eleven.utils.PreferenceUtils:
    android.content.SharedPreferences mPreferences -> a
    org.lineageos.eleven.utils.PreferenceUtils sInstance -> b
    android.content.SharedPreferences access$000(org.lineageos.eleven.utils.PreferenceUtils) -> a
    void setSortOrder(java.lang.String,java.lang.String) -> b
org.lineageos.eleven.utils.PreferenceUtils$1 -> org.lineageos.eleven.utils.g:
    org.lineageos.eleven.utils.PreferenceUtils this$0 -> b
    int val$value -> a
    1:1:java.lang.Void doInBackground(java.lang.Void[]):0:0 -> doInBackground
    1:1:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
org.lineageos.eleven.utils.PreferenceUtils$2 -> org.lineageos.eleven.utils.h:
    org.lineageos.eleven.utils.PreferenceUtils this$0 -> b
    int val$value -> a
    1:1:java.lang.Void doInBackground(java.lang.Void[]):0:0 -> doInBackground
    1:1:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
org.lineageos.eleven.utils.PreferenceUtils$3 -> org.lineageos.eleven.utils.i:
    org.lineageos.eleven.utils.PreferenceUtils this$0 -> c
    java.lang.String val$key -> a
    java.lang.String val$value -> b
    1:1:java.lang.Void doInBackground(java.lang.Void[]):0:0 -> doInBackground
    1:1:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
org.lineageos.eleven.utils.SectionCreatorUtils$1 -> org.lineageos.eleven.utils.n:
    1:1:java.lang.String createHeaderLabel(org.lineageos.eleven.model.Artist):0:0 -> createHeaderLabel
    1:1:java.lang.String createHeaderLabel(java.lang.Object):0 -> createHeaderLabel
    1:1:java.lang.String getString(org.lineageos.eleven.model.Artist):0:0 -> getString
    1:1:java.lang.String getString(java.lang.Object):0 -> getString
org.lineageos.eleven.utils.SectionCreatorUtils$10 -> org.lineageos.eleven.utils.j:
    1:1:java.lang.String createHeaderLabel(org.lineageos.eleven.model.Song):0:0 -> createHeaderLabel
    1:1:java.lang.String createHeaderLabel(java.lang.Object):0 -> createHeaderLabel
    1:1:java.lang.String getString(org.lineageos.eleven.model.Song):0:0 -> getString
    1:1:java.lang.String getString(java.lang.Object):0 -> getString
org.lineageos.eleven.utils.SectionCreatorUtils$11 -> org.lineageos.eleven.utils.k:
    1:1:int getInt(org.lineageos.eleven.model.Song):0:0 -> getInt
    1:1:int getInt(java.lang.Object):0 -> getInt
org.lineageos.eleven.utils.SectionCreatorUtils$12 -> org.lineageos.eleven.utils.l:
    android.content.Context val$context -> a
    1:1:java.lang.String createHeaderLabel(org.lineageos.eleven.model.Song):0:0 -> createHeaderLabel
    1:1:java.lang.String createHeaderLabel(java.lang.Object):0 -> createHeaderLabel
    1:1:int getInt(org.lineageos.eleven.model.Song):0:0 -> getInt
    1:1:int getInt(java.lang.Object):0 -> getInt
org.lineageos.eleven.utils.SectionCreatorUtils$13 -> org.lineageos.eleven.utils.m:
    android.content.Context val$context -> a
    1:1:java.lang.String createSectionFooter(org.lineageos.eleven.model.SearchResult,org.lineageos.eleven.model.SearchResult,java.util.List,int):0:0 -> createSectionFooter
    1:1:java.lang.String createSectionFooter(java.lang.Object,java.lang.Object,java.util.List,int):0 -> createSectionFooter
    1:1:java.lang.String createSectionHeader(org.lineageos.eleven.model.SearchResult,org.lineageos.eleven.model.SearchResult):0:0 -> createSectionHeader
    1:1:java.lang.String createSectionHeader(java.lang.Object,java.lang.Object):0 -> createSectionHeader
org.lineageos.eleven.utils.SectionCreatorUtils$2 -> org.lineageos.eleven.utils.o:
    1:1:int getInt(org.lineageos.eleven.model.Artist):0:0 -> getInt
    1:1:int getInt(java.lang.Object):0 -> getInt
org.lineageos.eleven.utils.SectionCreatorUtils$3 -> org.lineageos.eleven.utils.p:
    1:1:int getInt(org.lineageos.eleven.model.Artist):0:0 -> getInt
    1:1:int getInt(java.lang.Object):0 -> getInt
org.lineageos.eleven.utils.SectionCreatorUtils$4 -> org.lineageos.eleven.utils.q:
    1:1:java.lang.String createHeaderLabel(org.lineageos.eleven.model.Album):0:0 -> createHeaderLabel
    1:1:java.lang.String createHeaderLabel(java.lang.Object):0 -> createHeaderLabel
    1:1:java.lang.String getString(org.lineageos.eleven.model.Album):0:0 -> getString
    1:1:java.lang.String getString(java.lang.Object):0 -> getString
org.lineageos.eleven.utils.SectionCreatorUtils$5 -> org.lineageos.eleven.utils.r:
    1:1:java.lang.String createHeaderLabel(org.lineageos.eleven.model.Album):0:0 -> createHeaderLabel
    1:1:java.lang.String createHeaderLabel(java.lang.Object):0 -> createHeaderLabel
    1:1:java.lang.String getString(org.lineageos.eleven.model.Album):0:0 -> getString
    1:1:java.lang.String getString(java.lang.Object):0 -> getString
org.lineageos.eleven.utils.SectionCreatorUtils$6 -> org.lineageos.eleven.utils.s:
    1:1:int getInt(org.lineageos.eleven.model.Album):0:0 -> getInt
    1:1:int getInt(java.lang.Object):0 -> getInt
org.lineageos.eleven.utils.SectionCreatorUtils$7 -> org.lineageos.eleven.utils.t:
    android.content.Context val$context -> a
    1:1:java.lang.String createHeaderLabel(org.lineageos.eleven.model.Album):0:0 -> createHeaderLabel
    1:1:java.lang.String createHeaderLabel(java.lang.Object):0 -> createHeaderLabel
org.lineageos.eleven.utils.SectionCreatorUtils$8 -> org.lineageos.eleven.utils.u:
    1:1:java.lang.String createHeaderLabel(org.lineageos.eleven.model.Song):0:0 -> createHeaderLabel
    1:1:java.lang.String createHeaderLabel(java.lang.Object):0 -> createHeaderLabel
    1:1:java.lang.String getString(org.lineageos.eleven.model.Song):0:0 -> getString
    1:1:java.lang.String getString(java.lang.Object):0 -> getString
org.lineageos.eleven.utils.SectionCreatorUtils$9 -> org.lineageos.eleven.utils.v:
    1:1:java.lang.String createHeaderLabel(org.lineageos.eleven.model.Song):0:0 -> createHeaderLabel
    1:1:java.lang.String createHeaderLabel(java.lang.Object):0 -> createHeaderLabel
    1:1:java.lang.String getString(org.lineageos.eleven.model.Song):0:0 -> getString
    1:1:java.lang.String getString(java.lang.Object):0 -> getString
org.lineageos.eleven.utils.SectionCreatorUtils$LocalizedCompare -> org.lineageos.eleven.utils.SectionCreatorUtils$LocalizedCompare:
    boolean mStopSectionCreation -> a
org.lineageos.eleven.utils.SectionCreatorUtils$SectionType -> org.lineageos.eleven.utils.SectionCreatorUtils$SectionType:
    org.lineageos.eleven.utils.SectionCreatorUtils$SectionType[] $VALUES -> a
org.lineageos.eleven.utils.ShakeDetector -> org.lineageos.eleven.utils.ShakeDetector:
    org.lineageos.eleven.utils.ShakeDetector$SampleQueue queue -> b
    android.hardware.SensorManager sensorManager -> d
    android.hardware.Sensor accelerometer -> e
    long mDetectedShakeStartTime -> a
    org.lineageos.eleven.utils.ShakeDetector$Listener listener -> c
    1:1:boolean isAccelerating(android.hardware.SensorEvent):0:0 -> onSensorChanged
    1:1:void onSensorChanged(android.hardware.SensorEvent):0 -> onSensorChanged
    2:2:void onSensorChanged(android.hardware.SensorEvent):0:0 -> onSensorChanged
org.lineageos.eleven.utils.ShakeDetector$Sample -> org.lineageos.eleven.utils.w:
    org.lineageos.eleven.utils.ShakeDetector$Sample next -> c
    long timestamp -> a
    boolean accelerating -> b
org.lineageos.eleven.utils.ShakeDetector$SamplePool -> org.lineageos.eleven.utils.x:
    org.lineageos.eleven.utils.ShakeDetector$Sample head -> a
    org.lineageos.eleven.utils.ShakeDetector$Sample acquire() -> a
    void release(org.lineageos.eleven.utils.ShakeDetector$Sample) -> b
org.lineageos.eleven.utils.ShakeDetector$SampleQueue -> org.lineageos.eleven.utils.y:
    org.lineageos.eleven.utils.ShakeDetector$SamplePool pool -> a
    org.lineageos.eleven.utils.ShakeDetector$Sample oldest -> b
    org.lineageos.eleven.utils.ShakeDetector$Sample newest -> c
    int sampleCount -> d
    int acceleratingCount -> e
    1:1:void purge(long):0:0 -> a
    1:1:void add(long,boolean):0 -> a
    2:2:void add(long,boolean):0:0 -> a
    void clear() -> b
    boolean isShaking() -> c
org.lineageos.eleven.utils.SrtManager -> org.lineageos.eleven.utils.SrtManager:
    java.lang.String TAG -> g
    java.lang.Runnable mLoader -> d
    android.media.MediaPlayer mMediaPlayer -> e
    android.os.Handler mHandler -> b
    int mNextIndex -> f
    android.os.HandlerThread mHandlerThread -> c
    java.util.ArrayList mEntries -> a
    1:1:void onLoaded(java.lang.Runnable,java.util.ArrayList):0:0 -> a
    1:1:void access$000(org.lineageos.eleven.utils.SrtManager,java.lang.Runnable,java.util.ArrayList):0 -> a
    1:1:boolean entrySurroundsTime(org.lineageos.eleven.utils.SrtParser$SrtEntry,long):0:0 -> b
    1:1:void postNextTimedText():0 -> b
    2:2:void postNextTimedText():0:0 -> b
org.lineageos.eleven.utils.SrtManager$1 -> org.lineageos.eleven.utils.z:
    java.io.File val$f -> a
    org.lineageos.eleven.utils.SrtManager this$0 -> b
org.lineageos.eleven.utils.SrtParser -> org.lineageos.eleven.utils.SrtParser:
    long parseMs(java.lang.String) -> a
org.lineageos.eleven.utils.SrtParser$SrtEntry -> org.lineageos.eleven.utils.SrtParser$SrtEntry:
    java.lang.String mLine -> a
org.lineageos.eleven.utils.colors.BitmapWithColors -> org.lineageos.eleven.utils.colors.BitmapWithColors:
    android.util.LruCache sCachedColors -> d
    org.lineageos.eleven.utils.colors.BitmapWithColors$BitmapColors mColors -> c
    android.graphics.Bitmap mBitmap -> a
    int mBitmapKey -> b
    float computeContrastBetweenColors(int,int) -> a
    void loadColorsIfNeeded() -> b
org.lineageos.eleven.utils.colors.BitmapWithColors$BitmapColors -> org.lineageos.eleven.utils.colors.a:
    int mDominantColor -> d
    int mVibrantDarkColor -> b
    int mVibrantLightColor -> c
    int mVibrantColor -> a
    1:1:androidx.palette.graphics.Palette$Swatch getDominantSwatch(androidx.palette.graphics.Palette):0:0 -> <init>
    1:1:void <init>(androidx.palette.graphics.Palette):0 -> <init>
    2:2:void <init>(androidx.palette.graphics.Palette):0:0 -> <init>
    int determineColor(androidx.palette.graphics.Palette$Swatch) -> a
org.lineageos.eleven.utils.colors.ColorExtractor$ColorExtractionTask -> org.lineageos.eleven.utils.colors.b:
    android.graphics.Bitmap bitmap -> c
    org.lineageos.eleven.cache.ImageFetcher imageFetcher -> a
    int bitmapKey -> d
    org.lineageos.eleven.utils.colors.ColorExtractor$Callback callback -> b
    1:1:org.lineageos.eleven.utils.colors.BitmapWithColors doInBackground(java.lang.Void[]):0:0 -> doInBackground
    1:1:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    1:1:void onPostExecute(org.lineageos.eleven.utils.colors.BitmapWithColors):0:0 -> onPostExecute
    1:1:void onPostExecute(java.lang.Object):0 -> onPostExecute
org.lineageos.eleven.widgets.-$$Lambda$LoadingEmptyContainer$_fKYF4Tzh1pyUOHu_XidkPVrQDw -> org.lineageos.eleven.widgets.a:
    org.lineageos.eleven.widgets.LoadingEmptyContainer f$0 -> a
    1:1:void org.lineageos.eleven.widgets.LoadingEmptyContainer.lambda$new$0():0:0 -> run
    1:1:void org.lineageos.eleven.widgets.LoadingEmptyContainer.lambda$new$0$LoadingEmptyContainer():0 -> run
    1:1:void run():0 -> run
org.lineageos.eleven.widgets.-$$Lambda$MainPlaybackControls$_WuPAp8hwVHZJ3s5EQUrqbsdXBA -> org.lineageos.eleven.widgets.b:
    org.lineageos.eleven.widgets.MainPlaybackControls f$0 -> a
org.lineageos.eleven.widgets.-$$Lambda$MainPlaybackControls$iafJZpSmFg_tWkReqDmu7O43C5U -> org.lineageos.eleven.widgets.c:
    org.lineageos.eleven.widgets.MainPlaybackControls f$0 -> a
org.lineageos.eleven.widgets.-$$Lambda$VisualizerView$NBIRcdm0GREOHHUwt4Tqej4l9T8 -> org.lineageos.eleven.widgets.d:
    org.lineageos.eleven.widgets.VisualizerView f$0 -> a
    int f$1 -> b
org.lineageos.eleven.widgets.-$$Lambda$VisualizerView$x6vVAGhwSe4tdYxglI79SLC_hTQ -> org.lineageos.eleven.widgets.e:
    org.lineageos.eleven.widgets.VisualizerView f$0 -> a
    1:1:void org.lineageos.eleven.widgets.VisualizerView.lambda$initialize$1(android.animation.ValueAnimator):0:0 -> onAnimationUpdate
    1:1:void org.lineageos.eleven.widgets.VisualizerView.lambda$initialize$1$VisualizerView(android.animation.ValueAnimator):0 -> onAnimationUpdate
    1:1:void onAnimationUpdate(android.animation.ValueAnimator):0 -> onAnimationUpdate
org.lineageos.eleven.widgets.AlbumScrimImage -> org.lineageos.eleven.widgets.AlbumScrimImage:
    android.widget.ImageView mImageView -> a
    android.view.View mScrimView -> b
    boolean mUsingDefaultBlur -> c
org.lineageos.eleven.widgets.AlphaPatternDrawable -> org.lineageos.eleven.widgets.AlphaPatternDrawable:
    android.graphics.Paint mPaintGray -> c
    android.graphics.Paint mPaintWhite -> b
    int numRectanglesVertical -> f
    android.graphics.Paint mPaint -> a
    android.graphics.Bitmap mBitmap -> g
    int mRectangleSize -> d
    int numRectanglesHorizontal -> e
    1:1:void generatePatternBitmap():0:0 -> onBoundsChange
    1:1:void onBoundsChange(android.graphics.Rect):0 -> onBoundsChange
org.lineageos.eleven.widgets.AlphaTouchInterceptorOverlay -> org.lineageos.eleven.widgets.AlphaTouchInterceptorOverlay:
    android.view.View mInterceptorLayer -> a
    float mAlpha -> b
    android.view.View mAlphaLayer -> c
org.lineageos.eleven.widgets.ColorPanelView -> org.lineageos.eleven.widgets.ColorPanelView:
    float mDensity -> h
    android.graphics.Paint mColorPaint -> d
    android.graphics.RectF mColorRect -> f
    android.graphics.Paint mBorderPaint -> c
    android.graphics.RectF mDrawingRect -> e
    int mColor -> b
    org.lineageos.eleven.widgets.AlphaPatternDrawable mAlphaPattern -> g
    int mBorderColor -> a
    1:1:void init():0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    1:1:void setUpColorRect():0:0 -> onSizeChanged
    1:1:void onSizeChanged(int,int,int,int):0 -> onSizeChanged
org.lineageos.eleven.widgets.ColorPickerView -> org.lineageos.eleven.widgets.ColorPickerView:
    android.graphics.Point mStartTouchPoint -> G
    float mDensity -> H
    android.graphics.RectF mSatValRect -> C
    float RECTANGLE_TRACKER_OFFSET -> e
    android.graphics.RectF mAlphaRect -> E
    float PANEL_SPACING -> c
    android.graphics.Shader mHueShader -> p
    float HUE_PANEL_WIDTH -> a
    android.graphics.Shader mValShader -> n
    android.graphics.Paint mAlphaTextPaint -> l
    android.graphics.Paint mHueTrackerPaint -> j
    java.lang.String mAlphaSliderText -> v
    android.graphics.Paint mSatValTrackerPaint -> h
    boolean mShowAlphaPanel -> y
    float mVal -> u
    float mHue -> s
    int mSliderTrackerColor -> w
    org.lineageos.eleven.widgets.AlphaPatternDrawable mAlphaPattern -> F
    android.graphics.RectF mDrawingRect -> B
    android.graphics.RectF mHueRect -> D
    org.lineageos.eleven.widgets.ColorPickerView$OnColorChangedListener mListener -> f
    float PALETTE_CIRCLE_TRACKER_RADIUS -> d
    android.graphics.Shader mAlphaShader -> q
    float ALPHA_PANEL_HEIGHT -> b
    android.graphics.Shader mSatShader -> o
    float mDrawingOffset -> A
    android.graphics.Paint mBorderPaint -> m
    android.graphics.Paint mAlphaPaint -> k
    android.graphics.Paint mHuePaint -> i
    android.graphics.Paint mSatValPaint -> g
    int mLastTouchedPanel -> z
    int mBorderColor -> x
    float mSat -> t
    int mAlpha -> r
    1:1:void init():0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    2:2:float calculateRequiredOffset():0:0 -> <init>
    2:2:void init():0 -> <init>
    2:2:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    3:3:void init():0:0 -> <init>
    3:3:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    4:4:void initPaintTools():0:0 -> <init>
    4:4:void init():0 -> <init>
    4:4:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    5:5:void init():0:0 -> <init>
    5:5:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    int getPrefferedHeight() -> a
    1:1:float pointToHue(float):0:0 -> b
    1:1:boolean moveTrackersIfNeeded(android.view.MotionEvent):0 -> b
    2:2:boolean moveTrackersIfNeeded(android.view.MotionEvent):0:0 -> b
    3:3:float[] pointToSatVal(float,float):0:0 -> b
    3:3:boolean moveTrackersIfNeeded(android.view.MotionEvent):0 -> b
    4:4:boolean moveTrackersIfNeeded(android.view.MotionEvent):0:0 -> b
    5:5:int pointToAlpha(int):0:0 -> b
    5:5:boolean moveTrackersIfNeeded(android.view.MotionEvent):0 -> b
    6:6:boolean moveTrackersIfNeeded(android.view.MotionEvent):0:0 -> b
    1:1:void drawSatValPanel(android.graphics.Canvas):0:0 -> onDraw
    1:1:void onDraw(android.graphics.Canvas):0 -> onDraw
    2:2:android.graphics.Point satValToPoint(float,float):0:0 -> onDraw
    2:2:void drawSatValPanel(android.graphics.Canvas):0 -> onDraw
    2:2:void onDraw(android.graphics.Canvas):0 -> onDraw
    3:3:void drawSatValPanel(android.graphics.Canvas):0:0 -> onDraw
    3:3:void onDraw(android.graphics.Canvas):0 -> onDraw
    4:4:void drawHuePanel(android.graphics.Canvas):0:0 -> onDraw
    4:4:void onDraw(android.graphics.Canvas):0 -> onDraw
    5:5:int[] buildHueColorArray():0:0 -> onDraw
    5:5:void drawHuePanel(android.graphics.Canvas):0 -> onDraw
    5:5:void onDraw(android.graphics.Canvas):0 -> onDraw
    6:6:void drawHuePanel(android.graphics.Canvas):0:0 -> onDraw
    6:6:void onDraw(android.graphics.Canvas):0 -> onDraw
    7:7:android.graphics.Point hueToPoint(float):0:0 -> onDraw
    7:7:void drawHuePanel(android.graphics.Canvas):0 -> onDraw
    7:7:void onDraw(android.graphics.Canvas):0 -> onDraw
    8:8:void drawHuePanel(android.graphics.Canvas):0:0 -> onDraw
    8:8:void onDraw(android.graphics.Canvas):0 -> onDraw
    9:9:void drawAlphaPanel(android.graphics.Canvas):0:0 -> onDraw
    9:9:void onDraw(android.graphics.Canvas):0 -> onDraw
    10:10:android.graphics.Point alphaToPoint(int):0:0 -> onDraw
    10:10:void drawAlphaPanel(android.graphics.Canvas):0 -> onDraw
    10:10:void onDraw(android.graphics.Canvas):0 -> onDraw
    11:11:void drawAlphaPanel(android.graphics.Canvas):0:0 -> onDraw
    11:11:void onDraw(android.graphics.Canvas):0 -> onDraw
    1:1:int getPrefferedWidth():0:0 -> onMeasure
    1:1:int chooseWidth(int,int):0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:int chooseHeight(int,int):0:0 -> onMeasure
    2:2:void onMeasure(int,int):0 -> onMeasure
    3:3:void onMeasure(int,int):0:0 -> onMeasure
    1:1:void setUpSatValRect():0:0 -> onSizeChanged
    1:1:void onSizeChanged(int,int,int,int):0 -> onSizeChanged
    2:2:void setUpHueRect():0:0 -> onSizeChanged
    2:2:void onSizeChanged(int,int,int,int):0 -> onSizeChanged
    3:3:void setUpAlphaRect():0:0 -> onSizeChanged
    3:3:void onSizeChanged(int,int,int,int):0 -> onSizeChanged
org.lineageos.eleven.widgets.FrameLayoutWithOverlay -> org.lineageos.eleven.widgets.FrameLayoutWithOverlay:
    org.lineageos.eleven.widgets.AlphaTouchInterceptorOverlay mOverlay -> a
org.lineageos.eleven.widgets.LetterTileDrawable -> org.lineageos.eleven.widgets.LetterTileDrawable:
    float sLetterToTileRatio -> l
    android.graphics.Bitmap DEFAULT_ARTIST_LARGE -> n
    android.graphics.Bitmap DEFAULT_ALBUM -> o
    android.graphics.Bitmap DEFAULT_ARTIST -> m
    int sDefaultColor -> j
    android.graphics.Bitmap DEFAULT_PLAYLIST_LARGE -> r
    int sTileFontColor -> k
    android.graphics.Bitmap DEFAULT_ALBUM_LARGE -> p
    android.graphics.Bitmap DEFAULT_PLAYLIST -> q
    android.graphics.Paint sPaint -> s
    float mOffset -> e
    org.lineageos.eleven.cache.ImageWorker$ImageType mImageType -> g
    float mScale -> d
    char[] sChars -> u
    android.content.res.TypedArray sVibrantDarkColors -> i
    android.content.res.TypedArray sColors -> h
    android.graphics.Paint mPaint -> a
    boolean mIsCircle -> f
    java.lang.String mIdentifier -> c
    android.graphics.Rect sRect -> t
    java.lang.String mDisplayName -> b
    void drawBitmap(android.graphics.Bitmap,int,int,android.graphics.Canvas,android.graphics.Rect,float,float,android.graphics.Paint) -> a
    int getColorIndex(java.lang.String) -> b
    android.graphics.Bitmap getDefaultBitmap(org.lineageos.eleven.cache.ImageWorker$ImageType,boolean) -> c
    1:1:int pickVibrantDarkColor(java.lang.String):0:0 -> createDefaultBitmap
    1:1:org.lineageos.eleven.utils.colors.BitmapWithColors createDefaultBitmap(android.content.Context,java.lang.String,org.lineageos.eleven.cache.ImageWorker$ImageType,boolean,boolean):0 -> createDefaultBitmap
    2:2:org.lineageos.eleven.utils.colors.BitmapWithColors createDefaultBitmap(android.content.Context,java.lang.String,org.lineageos.eleven.cache.ImageWorker$ImageType,boolean,boolean):0:0 -> createDefaultBitmap
    void initializeStaticVariables(android.content.Context) -> d
    1:1:void drawLetterTile(android.graphics.Canvas):0:0 -> draw
    1:1:void draw(android.graphics.Canvas):0 -> draw
    2:2:android.graphics.Bitmap getDefaultBitmapForImageType(org.lineageos.eleven.cache.ImageWorker$ImageType,android.graphics.Rect):0:0 -> draw
    2:2:void drawLetterTile(android.graphics.Canvas):0 -> draw
    2:2:void draw(android.graphics.Canvas):0 -> draw
    3:3:void drawLetterTile(android.graphics.Canvas):0:0 -> draw
    3:3:void draw(android.graphics.Canvas):0 -> draw
    boolean isEnglishLetter(char) -> e
    int pickColor(java.lang.String) -> f
org.lineageos.eleven.widgets.LoadingEmptyContainer -> org.lineageos.eleven.widgets.LoadingEmptyContainer:
    java.lang.Runnable mShowLoadingRunnable -> b
    android.os.Handler mHandler -> a
org.lineageos.eleven.widgets.MainPlaybackControls -> org.lineageos.eleven.widgets.MainPlaybackControls:
    android.widget.TextView mCurrentTime -> a
    android.widget.TextView mTotalTime -> b
    org.lineageos.eleven.widgets.RepeatingImageButton mPreviousButton -> e
    android.widget.SeekBar$OnSeekBarChangeListener mSeekerListener -> i
    android.widget.SeekBar mSeeker -> c
    org.lineageos.eleven.widgets.ShuffleButton mShuffleButton -> d
    org.lineageos.eleven.widgets.RepeatButton mRepeatButton -> h
    org.lineageos.eleven.widgets.PlayPauseButtonContainer mPlayPauseButtonContainer -> f
    org.lineageos.eleven.widgets.RepeatingImageButton mNextButton -> g
    1:1:void refreshCurrentTimeText(long):0:0 -> a
    1:1:void access$000(org.lineageos.eleven.widgets.MainPlaybackControls,long):0 -> a
    1:1:void lambda$new$0(android.view.View,long,int):0:0 -> b
    1:1:void lambda$new$0$MainPlaybackControls(android.view.View,long,int):0 -> b
    1:1:void lambda$new$1(android.view.View,long,int):0:0 -> c
    1:1:void lambda$new$1$MainPlaybackControls(android.view.View,long,int):0 -> c
    void seekRelative(int,long,boolean) -> d
    1:1:void refreshCurrentTimeText(long):0:0 -> refreshCurrentTime
    1:1:void refreshCurrentTime(long,long,boolean):0 -> refreshCurrentTime
    2:2:void refreshCurrentTime(long,long,boolean):0:0 -> refreshCurrentTime
org.lineageos.eleven.widgets.MainPlaybackControls$1 -> org.lineageos.eleven.widgets.f:
    org.lineageos.eleven.widgets.MainPlaybackControls this$0 -> a
org.lineageos.eleven.widgets.PlayPauseButtonContainer -> org.lineageos.eleven.widgets.PlayPauseButtonContainer:
    org.lineageos.eleven.widgets.PlayPauseButton mPlayPauseButton -> a
org.lineageos.eleven.widgets.PlayPauseProgressButton -> org.lineageos.eleven.widgets.PlayPauseProgressButton:
    float mDownY -> l
    float mDownX -> k
    float mDragAngle -> j
    float mDownAngle -> i
    int mWidth -> m
    android.widget.ProgressBar mProgressBar -> a
    float mDragPercentage -> f
    java.lang.String TAG -> p
    int mSmallDistance -> e
    org.lineageos.eleven.widgets.PlayPauseButton mPlayPauseButton -> b
    java.lang.Runnable mUpdateProgress -> c
    boolean mDragEnabled -> g
    boolean mDragging -> h
    long mCurrentSongDuration -> n
    boolean mPaused -> d
    long mCurrentSongProgress -> o
    java.lang.Runnable access$000(org.lineageos.eleven.widgets.PlayPauseProgressButton) -> a
    float angle(float,float) -> b
    1:1:void postUpdate():0:0 -> c
    1:1:void onStateChanged():0 -> c
    2:2:void removeUpdate():0:0 -> c
    2:2:void onStateChanged():0 -> c
    1:1:void postUpdate():0:0 -> onTouchEvent
    1:1:boolean onTouchEvent(android.view.MotionEvent):0 -> onTouchEvent
    2:2:boolean onTouchEvent(android.view.MotionEvent):0:0 -> onTouchEvent
    3:3:float getDelta(float,float):0:0 -> onTouchEvent
    3:3:boolean onTouchEvent(android.view.MotionEvent):0 -> onTouchEvent
    4:4:boolean onTouchEvent(android.view.MotionEvent):0:0 -> onTouchEvent
    5:5:float cropAngle(float):0:0 -> onTouchEvent
    5:5:boolean onTouchEvent(android.view.MotionEvent):0 -> onTouchEvent
    6:6:boolean onTouchEvent(android.view.MotionEvent):0:0 -> onTouchEvent
org.lineageos.eleven.widgets.PlayPauseProgressButton$1 -> org.lineageos.eleven.widgets.g:
    org.lineageos.eleven.widgets.PlayPauseProgressButton this$0 -> a
org.lineageos.eleven.widgets.RepeatingImageButton -> org.lineageos.eleven.widgets.RepeatingImageButton:
    java.lang.Runnable mRepeater -> d
    long mStartTime -> a
    int mRepeatCount -> b
    org.lineageos.eleven.widgets.RepeatingImageButton$RepeatListener mListener -> c
    void access$000(org.lineageos.eleven.widgets.RepeatingImageButton,boolean) -> a
    void doRepeat(boolean) -> b
org.lineageos.eleven.widgets.RepeatingImageButton$1 -> org.lineageos.eleven.widgets.h:
    org.lineageos.eleven.widgets.RepeatingImageButton this$0 -> a
org.lineageos.eleven.widgets.ShowHideMasterLayout -> org.lineageos.eleven.widgets.ShowHideMasterLayout:
    java.lang.Runnable mShowMasterCompleteRunnable -> e
    android.view.GestureDetector$OnGestureListener mGestureListener -> k
    boolean mIsAnimating -> i
    int mTranslateAmount -> j
    android.view.View sMasterView -> a
    org.lineageos.eleven.widgets.ShowHideMasterLayout$OnMasterVisibilityChangedListener mOnMasterVisibilityChangedListener -> c
    android.view.GestureDetector mGestureDetector -> d
    boolean mFirstShow -> f
    boolean mMasterVisible -> g
    android.view.View mDetailView -> b
    boolean mFlingToExposeMaster -> h
    boolean access$000(org.lineageos.eleven.widgets.ShowHideMasterLayout) -> a
    boolean access$100(org.lineageos.eleven.widgets.ShowHideMasterLayout) -> b
    void init() -> c
    void updateChildReferences() -> d
org.lineageos.eleven.widgets.ShowHideMasterLayout$1 -> org.lineageos.eleven.widgets.i:
    org.lineageos.eleven.widgets.ShowHideMasterLayout this$0 -> a
org.lineageos.eleven.widgets.ViewPagerTabStrip -> org.lineageos.eleven.widgets.ViewPagerTabStrip:
    android.graphics.Paint mSelectedUnderlinePaint -> b
    float mSelectionOffset -> d
    int mIndexForSelection -> c
    int mSelectedUnderlineThickness -> a
    void onPageScrolled(int,float,int) -> a
    1:1:boolean isRtl():0:0 -> onDraw
    1:1:void onDraw(android.graphics.Canvas):0 -> onDraw
    2:2:void onDraw(android.graphics.Canvas):0:0 -> onDraw
org.lineageos.eleven.widgets.ViewPagerTabs -> org.lineageos.eleven.widgets.ViewPagerTabs:
    android.content.res.ColorStateList mTextColor -> d
    android.view.ViewOutlineProvider VIEW_BOUNDS_OUTLINE_PROVIDER -> i
    int mSidePadding -> h
    androidx.viewpager.widget.ViewPager mPager -> a
    boolean mTextAllCaps -> f
    int mPrevSelected -> g
    int mTextSize -> e
    int[] ATTRS -> j
    org.lineageos.eleven.widgets.ViewPagerTabStrip mTabStrip -> b
    int mTextStyle -> c
    int access$000(org.lineageos.eleven.widgets.ViewPagerTabs,int) -> a
    int getRtlPosition(int) -> b
    1:1:void addTabs(androidx.viewpager.widget.PagerAdapter):0:0 -> setViewPager
    1:1:void setViewPager(androidx.viewpager.widget.ViewPager):0 -> setViewPager
    2:2:void addTab(java.lang.CharSequence,int):0:0 -> setViewPager
    2:2:void addTabs(androidx.viewpager.widget.PagerAdapter):0 -> setViewPager
    2:2:void setViewPager(androidx.viewpager.widget.ViewPager):0 -> setViewPager
org.lineageos.eleven.widgets.ViewPagerTabs$1 -> org.lineageos.eleven.widgets.j:
org.lineageos.eleven.widgets.ViewPagerTabs$2 -> org.lineageos.eleven.widgets.k:
    org.lineageos.eleven.widgets.ViewPagerTabs this$0 -> b
    int val$position -> a
org.lineageos.eleven.widgets.ViewPagerTabs$OnTabLongClickListener -> org.lineageos.eleven.widgets.l:
    org.lineageos.eleven.widgets.ViewPagerTabs this$0 -> b
    int mPosition -> a
org.lineageos.eleven.widgets.VisualizerView -> org.lineageos.eleven.widgets.VisualizerView:
    android.animation.ObjectAnimator mVisualizerColorAnimator -> c
    boolean mDisplaying -> i
    int mColor -> j
    java.lang.String TAG -> o
    float[] mFFTPoints -> e
    android.animation.ValueAnimator[] mValueAnimators -> d
    java.lang.Runnable mAsyncUnlinkVisualizer -> m
    android.graphics.Paint mPaint -> a
    boolean mVisible -> f
    java.lang.Runnable mLinkVisualizer -> l
    boolean mPlaying -> g
    boolean mPowerSaveMode -> h
    android.media.audiofx.Visualizer$OnDataCaptureListener mVisualizerListener -> k
    android.media.audiofx.Visualizer mVisualizer -> b
    java.lang.Runnable mUnlinkVisualizer -> n
    android.animation.ValueAnimator[] access$000(org.lineageos.eleven.widgets.VisualizerView) -> a
    float[] access$100(org.lineageos.eleven.widgets.VisualizerView) -> b
    android.media.audiofx.Visualizer access$200(org.lineageos.eleven.widgets.VisualizerView) -> c
    android.media.audiofx.Visualizer access$202(org.lineageos.eleven.widgets.VisualizerView,android.media.audiofx.Visualizer) -> d
    java.lang.String access$300() -> e
    android.media.audiofx.Visualizer$OnDataCaptureListener access$400(org.lineageos.eleven.widgets.VisualizerView) -> f
    java.lang.Runnable access$500(org.lineageos.eleven.widgets.VisualizerView) -> g
    void checkStateChanged() -> h
    1:1:void lambda$initialize$0(int,android.animation.ValueAnimator):0:0 -> i
    1:1:void lambda$initialize$0$VisualizerView(int,android.animation.ValueAnimator):0 -> i
org.lineageos.eleven.widgets.VisualizerView$1 -> org.lineageos.eleven.widgets.m:
    byte ifk -> b
    float magnitude -> d
    byte rfk -> a
    org.lineageos.eleven.widgets.VisualizerView this$0 -> e
    int dbValue -> c
org.lineageos.eleven.widgets.VisualizerView$2 -> org.lineageos.eleven.widgets.n:
    org.lineageos.eleven.widgets.VisualizerView this$0 -> a
org.lineageos.eleven.widgets.VisualizerView$3 -> org.lineageos.eleven.widgets.o:
    org.lineageos.eleven.widgets.VisualizerView this$0 -> a
org.lineageos.eleven.widgets.VisualizerView$4 -> org.lineageos.eleven.widgets.p:
    org.lineageos.eleven.widgets.VisualizerView this$0 -> a
